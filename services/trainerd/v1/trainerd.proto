syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/trainerd/v1";
package github.com.metaprov.modelaapi.services.trainerd.v1;


import "github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/pkg/apis/catalog/v1alpha1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";



service TrainerdService {
    rpc Train (TrainRequest) returns (TrainResponse) {}
    rpc Forecast (ForecastRequest) returns (ForecastResponse) {}
    rpc Test (TestRequest) returns (TestResponse) {}
    rpc Compile (CompileRequest) returns (CompileResponse) {}
    rpc TrainEnsemble (TrainEnsembleRequest) returns (TrainResponse) {}
    rpc TestEnsemble (TestEnsembleRequest) returns (TestResponse) {}
    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {}
}


//////////////////////////////////// CrossValidate
// Transform a dataset based on a prep

message TrainRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProduct        product   = 1;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProductVersion version   = 2;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket     bucket        = 3;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model          model   = 5;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Study          study   = 6;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource         datasource  = 7;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Dataset            dataset = 8;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Connection        connection    = 9;
    map<string,bytes> secret = 10;
}

message TrainResponse {
    repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Measurement result = 1;
    // The location in the bucket of the trained bin model
    string weightsCloudUri = 2;
    // The location in the bucket of the cloud manifest.
    string manifestCloudUri = 3;
    // The location in the bucket of the logs.
    string logsCloudUri = 4;
    // The uri for the label encoder, in case of a categorical class.
    string labelEncoder = 5;
    // python version info
    string pythonVersionInfo = 6;
    // pip freeze string
    map<string,string> pipFreeze = 7;
    // feature importance
    map<string,float> featuresImportance = 8;

}


/////////////////////// compile model

message CompileRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProduct        product   = 1;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProductVersion version   = 2;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket     bucket        = 3;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model          model   = 5;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Study          study   = 6;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource         datasource  = 7;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Dataset            dataset = 8;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Connection        connection    = 9;
    map<string,bytes> secret = 10;
}

message CompileResponse {
    // The location in the bucket of the trained bin model
    string compiledModelUri = 1;  

}




//////////////////////////////////// Train
// Do a full training on the testing set, and validate on the test set.

message TestRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProduct        product    = 1;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProductVersion version    = 2;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket     bucket     = 3;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model          model         = 5;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Study          study      = 6;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource         datasource     = 7;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Dataset            dataset    = 8;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Connection        connection = 9;
    map<string,bytes> secret = 10;

}

message TestResponse {
    // measurements on the training set
    repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Measurement train_result = 1;
    // measurements on the testing set
    repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Measurement test_result = 2;
    // The location in the bucket of the trained bin model
    string modelWeightsCloudUri = 3;
    // The location in the bucket of the cloud manifest.
    string modelManifestCloudUri = 4;
    // The location in the bucket of the logs.
    string modelLogsCloudUri = 5;
    // The location in the bucket of the trained bin model
    string preWeightsCloudUri = 6;
    // The location in the bucket of the cloud manifest.
    string preManifestCloudUri = 7;
    // The location in the bucket of the logs.
    string preLogsCloudUri = 8;
    // The label encoder uri.
    string labelEncoder = 9;
    // Misclassfied uri
    string misclassUri = 10;
    // python version info
    string pythonVersionInfo = 11;
    // pip freeze string
    map<string,string> pipFreeze = 12;
    // feature importance
    map<string,float> featuresImportance = 13;





}
// used for ensable training
message TrainEnsembleRequest  {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProduct        product    = 1;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProductVersion version    = 2;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket     bucket     = 3;
    // the spec for the base models
    repeated github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model   base     = 5;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model          model      = 6;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Study          study      = 7;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource         datasource     = 8;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Dataset            dataset    = 9;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Connection        connection = 10;
    map<string,bytes> secret = 11;
}


message TestEnsembleRequest  {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProduct        product    = 1;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProductVersion version    = 2;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket     bucket     = 3;
    // the spec for the base models
    repeated github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model base       = 5;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model          model      = 6;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Study          study      = 7;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource         datasource = 8;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Dataset            dataset    = 9;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Connection        connection = 10;
    map<string,bytes> secret = 11;
}

message ForecastRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProduct        product   = 1;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProductVersion version   = 2;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket     bucket        = 3;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model          model   = 5;
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Study          study   = 6;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource         datasource  = 7;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Dataset            dataset = 8;
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Connection        connection    = 9;
    map<string,bytes> secret = 10;
}

message ForecastResponse {
    // The location in the bucket of the forecast
    string forecastCloudUri = 2;
}

message ShutdownRequest {}
message ShutdownResponse {}



