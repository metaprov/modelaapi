// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/trainerd/v1/trainerd.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainerdServiceClient is the client API for TrainerdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainerdServiceClient interface {
	Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error)
	Explain(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (*ExplainResponse, error)
	Forecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error)
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	TrainEnsemble(ctx context.Context, in *TrainEnsembleRequest, opts ...grpc.CallOption) (*TrainResponse, error)
	TrainDriftDetector(ctx context.Context, in *TrainDriftDetectorRequest, opts ...grpc.CallOption) (*TrainResponse, error)
	TestEnsemble(ctx context.Context, in *TestEnsembleRequest, opts ...grpc.CallOption) (*TestResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type trainerdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainerdServiceClient(cc grpc.ClientConnInterface) TrainerdServiceClient {
	return &trainerdServiceClient{cc}
}

func (c *trainerdServiceClient) Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/Train", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerdServiceClient) Explain(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (*ExplainResponse, error) {
	out := new(ExplainResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/Explain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerdServiceClient) Forecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error) {
	out := new(ForecastResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/Forecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerdServiceClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerdServiceClient) TrainEnsemble(ctx context.Context, in *TrainEnsembleRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/TrainEnsemble", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerdServiceClient) TrainDriftDetector(ctx context.Context, in *TrainDriftDetectorRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/TrainDriftDetector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerdServiceClient) TestEnsemble(ctx context.Context, in *TestEnsembleRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/TestEnsemble", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerdServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainerdServiceServer is the server API for TrainerdService service.
// All implementations must embed UnimplementedTrainerdServiceServer
// for forward compatibility
type TrainerdServiceServer interface {
	Train(context.Context, *TrainRequest) (*TrainResponse, error)
	Explain(context.Context, *ExplainRequest) (*ExplainResponse, error)
	Forecast(context.Context, *ForecastRequest) (*ForecastResponse, error)
	Test(context.Context, *TestRequest) (*TestResponse, error)
	TrainEnsemble(context.Context, *TrainEnsembleRequest) (*TrainResponse, error)
	TrainDriftDetector(context.Context, *TrainDriftDetectorRequest) (*TrainResponse, error)
	TestEnsemble(context.Context, *TestEnsembleRequest) (*TestResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedTrainerdServiceServer()
}

// UnimplementedTrainerdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrainerdServiceServer struct {
}

func (UnimplementedTrainerdServiceServer) Train(context.Context, *TrainRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedTrainerdServiceServer) Explain(context.Context, *ExplainRequest) (*ExplainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Explain not implemented")
}
func (UnimplementedTrainerdServiceServer) Forecast(context.Context, *ForecastRequest) (*ForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forecast not implemented")
}
func (UnimplementedTrainerdServiceServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedTrainerdServiceServer) TrainEnsemble(context.Context, *TrainEnsembleRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainEnsemble not implemented")
}
func (UnimplementedTrainerdServiceServer) TrainDriftDetector(context.Context, *TrainDriftDetectorRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainDriftDetector not implemented")
}
func (UnimplementedTrainerdServiceServer) TestEnsemble(context.Context, *TestEnsembleRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestEnsemble not implemented")
}
func (UnimplementedTrainerdServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedTrainerdServiceServer) mustEmbedUnimplementedTrainerdServiceServer() {}

// UnsafeTrainerdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainerdServiceServer will
// result in compilation errors.
type UnsafeTrainerdServiceServer interface {
	mustEmbedUnimplementedTrainerdServiceServer()
}

func RegisterTrainerdServiceServer(s grpc.ServiceRegistrar, srv TrainerdServiceServer) {
	s.RegisterService(&TrainerdService_ServiceDesc, srv)
}

func _TrainerdService_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerdServiceServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/Train",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerdServiceServer).Train(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerdService_Explain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerdServiceServer).Explain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/Explain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerdServiceServer).Explain(ctx, req.(*ExplainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerdService_Forecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerdServiceServer).Forecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/Forecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerdServiceServer).Forecast(ctx, req.(*ForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerdService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerdServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerdServiceServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerdService_TrainEnsemble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainEnsembleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerdServiceServer).TrainEnsemble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/TrainEnsemble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerdServiceServer).TrainEnsemble(ctx, req.(*TrainEnsembleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerdService_TrainDriftDetector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainDriftDetectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerdServiceServer).TrainDriftDetector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/TrainDriftDetector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerdServiceServer).TrainDriftDetector(ctx, req.(*TrainDriftDetectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerdService_TestEnsemble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestEnsembleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerdServiceServer).TestEnsemble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/TestEnsemble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerdServiceServer).TestEnsemble(ctx, req.(*TestEnsembleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerdService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerdServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerdServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainerdService_ServiceDesc is the grpc.ServiceDesc for TrainerdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainerdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.trainerd.v1.TrainerdService",
	HandlerType: (*TrainerdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Train",
			Handler:    _TrainerdService_Train_Handler,
		},
		{
			MethodName: "Explain",
			Handler:    _TrainerdService_Explain_Handler,
		},
		{
			MethodName: "Forecast",
			Handler:    _TrainerdService_Forecast_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _TrainerdService_Test_Handler,
		},
		{
			MethodName: "TrainEnsemble",
			Handler:    _TrainerdService_TrainEnsemble_Handler,
		},
		{
			MethodName: "TrainDriftDetector",
			Handler:    _TrainerdService_TrainDriftDetector_Handler,
		},
		{
			MethodName: "TestEnsemble",
			Handler:    _TrainerdService_TestEnsemble_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _TrainerdService_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/trainerd/v1/trainerd.proto",
}
