// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: services/license/v1/license.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1"
	v1 "github.com/metaprov/modeldapi/services/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListLicensesRequest struct {
	Namespace            string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels               map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListLicensesRequest) Reset()         { *m = ListLicensesRequest{} }
func (m *ListLicensesRequest) String() string { return proto.CompactTextString(m) }
func (*ListLicensesRequest) ProtoMessage()    {}
func (*ListLicensesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{0}
}
func (m *ListLicensesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListLicensesRequest.Unmarshal(m, b)
}
func (m *ListLicensesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListLicensesRequest.Marshal(b, m, deterministic)
}
func (m *ListLicensesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLicensesRequest.Merge(m, src)
}
func (m *ListLicensesRequest) XXX_Size() int {
	return xxx_messageInfo_ListLicensesRequest.Size(m)
}
func (m *ListLicensesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLicensesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListLicensesRequest proto.InternalMessageInfo

func (m *ListLicensesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListLicensesRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ListLicensesResponse struct {
	Items                *v1alpha1.LicenseList `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListLicensesResponse) Reset()         { *m = ListLicensesResponse{} }
func (m *ListLicensesResponse) String() string { return proto.CompactTextString(m) }
func (*ListLicensesResponse) ProtoMessage()    {}
func (*ListLicensesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{1}
}
func (m *ListLicensesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListLicensesResponse.Unmarshal(m, b)
}
func (m *ListLicensesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListLicensesResponse.Marshal(b, m, deterministic)
}
func (m *ListLicensesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLicensesResponse.Merge(m, src)
}
func (m *ListLicensesResponse) XXX_Size() int {
	return xxx_messageInfo_ListLicensesResponse.Size(m)
}
func (m *ListLicensesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLicensesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListLicensesResponse proto.InternalMessageInfo

func (m *ListLicensesResponse) GetItems() *v1alpha1.LicenseList {
	if m != nil {
		return m.Items
	}
	return nil
}

type LicenseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LicenseResponse) Reset()         { *m = LicenseResponse{} }
func (m *LicenseResponse) String() string { return proto.CompactTextString(m) }
func (*LicenseResponse) ProtoMessage()    {}
func (*LicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{2}
}
func (m *LicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LicenseResponse.Unmarshal(m, b)
}
func (m *LicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LicenseResponse.Marshal(b, m, deterministic)
}
func (m *LicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseResponse.Merge(m, src)
}
func (m *LicenseResponse) XXX_Size() int {
	return xxx_messageInfo_LicenseResponse.Size(m)
}
func (m *LicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseResponse proto.InternalMessageInfo

type CreateLicenseRequest struct {
	Namespace            string                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels               map[string]string     `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Spec                 *v1alpha1.LicenseSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateLicenseRequest) Reset()         { *m = CreateLicenseRequest{} }
func (m *CreateLicenseRequest) String() string { return proto.CompactTextString(m) }
func (*CreateLicenseRequest) ProtoMessage()    {}
func (*CreateLicenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{3}
}
func (m *CreateLicenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateLicenseRequest.Unmarshal(m, b)
}
func (m *CreateLicenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateLicenseRequest.Marshal(b, m, deterministic)
}
func (m *CreateLicenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLicenseRequest.Merge(m, src)
}
func (m *CreateLicenseRequest) XXX_Size() int {
	return xxx_messageInfo_CreateLicenseRequest.Size(m)
}
func (m *CreateLicenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLicenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLicenseRequest proto.InternalMessageInfo

func (m *CreateLicenseRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateLicenseRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateLicenseRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CreateLicenseRequest) GetSpec() *v1alpha1.LicenseSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type CreateLicenseFromKeyRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateLicenseFromKeyRequest) Reset()         { *m = CreateLicenseFromKeyRequest{} }
func (m *CreateLicenseFromKeyRequest) String() string { return proto.CompactTextString(m) }
func (*CreateLicenseFromKeyRequest) ProtoMessage()    {}
func (*CreateLicenseFromKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{4}
}
func (m *CreateLicenseFromKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateLicenseFromKeyRequest.Unmarshal(m, b)
}
func (m *CreateLicenseFromKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateLicenseFromKeyRequest.Marshal(b, m, deterministic)
}
func (m *CreateLicenseFromKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLicenseFromKeyRequest.Merge(m, src)
}
func (m *CreateLicenseFromKeyRequest) XXX_Size() int {
	return xxx_messageInfo_CreateLicenseFromKeyRequest.Size(m)
}
func (m *CreateLicenseFromKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLicenseFromKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLicenseFromKeyRequest proto.InternalMessageInfo

func (m *CreateLicenseFromKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CreateLicenseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateLicenseResponse) Reset()         { *m = CreateLicenseResponse{} }
func (m *CreateLicenseResponse) String() string { return proto.CompactTextString(m) }
func (*CreateLicenseResponse) ProtoMessage()    {}
func (*CreateLicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{5}
}
func (m *CreateLicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateLicenseResponse.Unmarshal(m, b)
}
func (m *CreateLicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateLicenseResponse.Marshal(b, m, deterministic)
}
func (m *CreateLicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLicenseResponse.Merge(m, src)
}
func (m *CreateLicenseResponse) XXX_Size() int {
	return xxx_messageInfo_CreateLicenseResponse.Size(m)
}
func (m *CreateLicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLicenseResponse proto.InternalMessageInfo

type UpdateLicenseRequest struct {
	Namespace            string                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels               map[string]string     `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Spec                 *v1alpha1.LicenseSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateLicenseRequest) Reset()         { *m = UpdateLicenseRequest{} }
func (m *UpdateLicenseRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateLicenseRequest) ProtoMessage()    {}
func (*UpdateLicenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{6}
}
func (m *UpdateLicenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateLicenseRequest.Unmarshal(m, b)
}
func (m *UpdateLicenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateLicenseRequest.Marshal(b, m, deterministic)
}
func (m *UpdateLicenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLicenseRequest.Merge(m, src)
}
func (m *UpdateLicenseRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateLicenseRequest.Size(m)
}
func (m *UpdateLicenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLicenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLicenseRequest proto.InternalMessageInfo

func (m *UpdateLicenseRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateLicenseRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateLicenseRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *UpdateLicenseRequest) GetSpec() *v1alpha1.LicenseSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type UpdateLicenseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateLicenseResponse) Reset()         { *m = UpdateLicenseResponse{} }
func (m *UpdateLicenseResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateLicenseResponse) ProtoMessage()    {}
func (*UpdateLicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{7}
}
func (m *UpdateLicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateLicenseResponse.Unmarshal(m, b)
}
func (m *UpdateLicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateLicenseResponse.Marshal(b, m, deterministic)
}
func (m *UpdateLicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLicenseResponse.Merge(m, src)
}
func (m *UpdateLicenseResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateLicenseResponse.Size(m)
}
func (m *UpdateLicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLicenseResponse proto.InternalMessageInfo

type GetLicenseRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLicenseRequest) Reset()         { *m = GetLicenseRequest{} }
func (m *GetLicenseRequest) String() string { return proto.CompactTextString(m) }
func (*GetLicenseRequest) ProtoMessage()    {}
func (*GetLicenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{8}
}
func (m *GetLicenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLicenseRequest.Unmarshal(m, b)
}
func (m *GetLicenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLicenseRequest.Marshal(b, m, deterministic)
}
func (m *GetLicenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLicenseRequest.Merge(m, src)
}
func (m *GetLicenseRequest) XXX_Size() int {
	return xxx_messageInfo_GetLicenseRequest.Size(m)
}
func (m *GetLicenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLicenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLicenseRequest proto.InternalMessageInfo

func (m *GetLicenseRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetLicenseRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetLicenseResponse struct {
	License              *v1alpha1.License `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	Yaml                 string            `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetLicenseResponse) Reset()         { *m = GetLicenseResponse{} }
func (m *GetLicenseResponse) String() string { return proto.CompactTextString(m) }
func (*GetLicenseResponse) ProtoMessage()    {}
func (*GetLicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{9}
}
func (m *GetLicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLicenseResponse.Unmarshal(m, b)
}
func (m *GetLicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLicenseResponse.Marshal(b, m, deterministic)
}
func (m *GetLicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLicenseResponse.Merge(m, src)
}
func (m *GetLicenseResponse) XXX_Size() int {
	return xxx_messageInfo_GetLicenseResponse.Size(m)
}
func (m *GetLicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLicenseResponse proto.InternalMessageInfo

func (m *GetLicenseResponse) GetLicense() *v1alpha1.License {
	if m != nil {
		return m.License
	}
	return nil
}

func (m *GetLicenseResponse) GetYaml() string {
	if m != nil {
		return m.Yaml
	}
	return ""
}

type GetLicenseNamespacesRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLicenseNamespacesRequest) Reset()         { *m = GetLicenseNamespacesRequest{} }
func (m *GetLicenseNamespacesRequest) String() string { return proto.CompactTextString(m) }
func (*GetLicenseNamespacesRequest) ProtoMessage()    {}
func (*GetLicenseNamespacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{10}
}
func (m *GetLicenseNamespacesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLicenseNamespacesRequest.Unmarshal(m, b)
}
func (m *GetLicenseNamespacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLicenseNamespacesRequest.Marshal(b, m, deterministic)
}
func (m *GetLicenseNamespacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLicenseNamespacesRequest.Merge(m, src)
}
func (m *GetLicenseNamespacesRequest) XXX_Size() int {
	return xxx_messageInfo_GetLicenseNamespacesRequest.Size(m)
}
func (m *GetLicenseNamespacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLicenseNamespacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLicenseNamespacesRequest proto.InternalMessageInfo

func (m *GetLicenseNamespacesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetLicenseNamespacesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetLicenseNamespacesResponse struct {
	Namespaces           []*v1.NamespaceInfo `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetLicenseNamespacesResponse) Reset()         { *m = GetLicenseNamespacesResponse{} }
func (m *GetLicenseNamespacesResponse) String() string { return proto.CompactTextString(m) }
func (*GetLicenseNamespacesResponse) ProtoMessage()    {}
func (*GetLicenseNamespacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{11}
}
func (m *GetLicenseNamespacesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLicenseNamespacesResponse.Unmarshal(m, b)
}
func (m *GetLicenseNamespacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLicenseNamespacesResponse.Marshal(b, m, deterministic)
}
func (m *GetLicenseNamespacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLicenseNamespacesResponse.Merge(m, src)
}
func (m *GetLicenseNamespacesResponse) XXX_Size() int {
	return xxx_messageInfo_GetLicenseNamespacesResponse.Size(m)
}
func (m *GetLicenseNamespacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLicenseNamespacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLicenseNamespacesResponse proto.InternalMessageInfo

func (m *GetLicenseNamespacesResponse) GetNamespaces() []*v1.NamespaceInfo {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

type DeleteLicenseRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteLicenseRequest) Reset()         { *m = DeleteLicenseRequest{} }
func (m *DeleteLicenseRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteLicenseRequest) ProtoMessage()    {}
func (*DeleteLicenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{12}
}
func (m *DeleteLicenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteLicenseRequest.Unmarshal(m, b)
}
func (m *DeleteLicenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteLicenseRequest.Marshal(b, m, deterministic)
}
func (m *DeleteLicenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteLicenseRequest.Merge(m, src)
}
func (m *DeleteLicenseRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteLicenseRequest.Size(m)
}
func (m *DeleteLicenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteLicenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteLicenseRequest proto.InternalMessageInfo

func (m *DeleteLicenseRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteLicenseRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteLicenseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteLicenseResponse) Reset()         { *m = DeleteLicenseResponse{} }
func (m *DeleteLicenseResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteLicenseResponse) ProtoMessage()    {}
func (*DeleteLicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eebcb661b72d580, []int{13}
}
func (m *DeleteLicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteLicenseResponse.Unmarshal(m, b)
}
func (m *DeleteLicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteLicenseResponse.Marshal(b, m, deterministic)
}
func (m *DeleteLicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteLicenseResponse.Merge(m, src)
}
func (m *DeleteLicenseResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteLicenseResponse.Size(m)
}
func (m *DeleteLicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteLicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteLicenseResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ListLicensesRequest)(nil), "github.com.metaprov.modeld.services.license.v1.ListLicensesRequest")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modeld.services.license.v1.ListLicensesRequest.LabelsEntry")
	proto.RegisterType((*ListLicensesResponse)(nil), "github.com.metaprov.modeld.services.license.v1.ListLicensesResponse")
	proto.RegisterType((*LicenseResponse)(nil), "github.com.metaprov.modeld.services.license.v1.LicenseResponse")
	proto.RegisterType((*CreateLicenseRequest)(nil), "github.com.metaprov.modeld.services.license.v1.CreateLicenseRequest")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modeld.services.license.v1.CreateLicenseRequest.LabelsEntry")
	proto.RegisterType((*CreateLicenseFromKeyRequest)(nil), "github.com.metaprov.modeld.services.license.v1.CreateLicenseFromKeyRequest")
	proto.RegisterType((*CreateLicenseResponse)(nil), "github.com.metaprov.modeld.services.license.v1.CreateLicenseResponse")
	proto.RegisterType((*UpdateLicenseRequest)(nil), "github.com.metaprov.modeld.services.license.v1.UpdateLicenseRequest")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modeld.services.license.v1.UpdateLicenseRequest.LabelsEntry")
	proto.RegisterType((*UpdateLicenseResponse)(nil), "github.com.metaprov.modeld.services.license.v1.UpdateLicenseResponse")
	proto.RegisterType((*GetLicenseRequest)(nil), "github.com.metaprov.modeld.services.license.v1.GetLicenseRequest")
	proto.RegisterType((*GetLicenseResponse)(nil), "github.com.metaprov.modeld.services.license.v1.GetLicenseResponse")
	proto.RegisterType((*GetLicenseNamespacesRequest)(nil), "github.com.metaprov.modeld.services.license.v1.GetLicenseNamespacesRequest")
	proto.RegisterType((*GetLicenseNamespacesResponse)(nil), "github.com.metaprov.modeld.services.license.v1.GetLicenseNamespacesResponse")
	proto.RegisterType((*DeleteLicenseRequest)(nil), "github.com.metaprov.modeld.services.license.v1.DeleteLicenseRequest")
	proto.RegisterType((*DeleteLicenseResponse)(nil), "github.com.metaprov.modeld.services.license.v1.DeleteLicenseResponse")
}

func init() { proto.RegisterFile("services/license/v1/license.proto", fileDescriptor_5eebcb661b72d580) }

var fileDescriptor_5eebcb661b72d580 = []byte{
	// 754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0xdd, 0x6a, 0xd4, 0x4c,
	0x18, 0xc7, 0xc9, 0xf6, 0xe3, 0xa5, 0xcf, 0x76, 0xdf, 0xf7, 0xed, 0x74, 0x4b, 0x97, 0x6d, 0x0b,
	0x7d, 0x53, 0x5e, 0x29, 0x2a, 0x13, 0xb6, 0x3d, 0xd1, 0x82, 0x8a, 0x6d, 0xd7, 0x0f, 0x5a, 0xac,
	0x44, 0x14, 0xf1, 0xa4, 0x4c, 0xb3, 0xd3, 0x34, 0x34, 0xc9, 0xc4, 0x4c, 0x1a, 0x58, 0x44, 0x84,
	0xde, 0x82, 0x17, 0xe0, 0x1d, 0x78, 0x03, 0x9e, 0xe8, 0x81, 0x07, 0x7a, 0xea, 0x81, 0x37, 0xe0,
	0x85, 0xc8, 0x24, 0x93, 0x8f, 0xdd, 0x86, 0xb5, 0x31, 0x45, 0x7a, 0x36, 0x99, 0x65, 0x7e, 0xf3,
	0xff, 0x3f, 0xcf, 0x33, 0xcf, 0xcc, 0xc2, 0x7f, 0x9c, 0xfa, 0xa1, 0x65, 0x50, 0xae, 0xd9, 0x96,
	0x41, 0x5d, 0x4e, 0xb5, 0xb0, 0x93, 0x0c, 0xb1, 0xe7, 0xb3, 0x80, 0x21, 0x6c, 0x5a, 0xc1, 0xd1,
	0xc9, 0x01, 0x36, 0x98, 0x83, 0x1d, 0x1a, 0x10, 0xcf, 0x67, 0x21, 0x76, 0x58, 0x8f, 0xda, 0x3d,
	0x9c, 0xac, 0xc6, 0xc9, 0x92, 0xb0, 0xd3, 0x5e, 0x34, 0x19, 0x33, 0x6d, 0xaa, 0x11, 0xcf, 0xd2,
	0x88, 0xeb, 0xb2, 0x80, 0x04, 0x16, 0x73, 0x79, 0x4c, 0x6b, 0x77, 0x33, 0x9a, 0x96, 0xd0, 0xb4,
	0x98, 0x26, 0x16, 0x78, 0xc7, 0xa6, 0x58, 0xc8, 0x35, 0xcb, 0x3d, 0xf4, 0x89, 0x16, 0x76, 0x88,
	0xed, 0x1d, 0x91, 0x8e, 0x66, 0x52, 0x97, 0xfa, 0x24, 0xa0, 0x3d, 0x89, 0xb9, 0x35, 0x1a, 0x93,
	0xba, 0x32, 0x98, 0xe3, 0x30, 0x57, 0x98, 0x8a, 0x47, 0xf1, 0x72, 0xf5, 0xbb, 0x02, 0xb3, 0xbb,
	0x16, 0x0f, 0x76, 0x63, 0xd9, 0x5c, 0xa7, 0x2f, 0x4f, 0x28, 0x0f, 0xd0, 0x22, 0x4c, 0xb9, 0xc4,
	0xa1, 0xdc, 0x23, 0x06, 0x6d, 0x29, 0xcb, 0xca, 0xea, 0x94, 0x9e, 0x4d, 0x20, 0x13, 0x26, 0x6d,
	0x72, 0x40, 0x6d, 0xde, 0x1a, 0x5b, 0x1e, 0x5b, 0xad, 0xaf, 0xed, 0x95, 0x0c, 0x0d, 0x2e, 0xd8,
	0x12, 0xef, 0x46, 0xc4, 0xae, 0x1b, 0xf8, 0x7d, 0x5d, 0xe2, 0xdb, 0x37, 0xa1, 0x9e, 0x9b, 0x46,
	0xff, 0xc2, 0xd8, 0x31, 0xed, 0x4b, 0x3d, 0x62, 0x88, 0x9a, 0x30, 0x11, 0x12, 0xfb, 0x84, 0xb6,
	0x6a, 0xd1, 0x5c, 0xfc, 0xb1, 0x51, 0xbb, 0xa1, 0xa8, 0x1e, 0x34, 0x07, 0x77, 0xe1, 0x1e, 0x73,
	0x39, 0x45, 0xcf, 0x61, 0xc2, 0x0a, 0xa8, 0xc3, 0x23, 0x4a, 0x7d, 0x6d, 0x73, 0x84, 0x74, 0xe2,
	0x59, 0xd8, 0x3b, 0x36, 0xb1, 0xc8, 0x03, 0x8e, 0xf2, 0x80, 0x93, 0x3c, 0x60, 0xc9, 0x15, 0x5b,
	0xe8, 0x31, 0x50, 0x9d, 0x81, 0x7f, 0xe4, 0x6c, 0xb2, 0x99, 0xfa, 0xb9, 0x06, 0xcd, 0x2d, 0x9f,
	0x92, 0x80, 0xa6, 0xbf, 0x9c, 0x27, 0xbe, 0x08, 0xc6, 0xc5, 0x87, 0x34, 0x15, 0x8d, 0xd1, 0xd1,
	0x50, 0xcc, 0x1f, 0x97, 0x8d, 0x79, 0x91, 0x8e, 0xa2, 0xa0, 0xa3, 0x67, 0x30, 0xce, 0x3d, 0x6a,
	0xb4, 0xc6, 0x2f, 0x22, 0x40, 0x4f, 0x3c, 0x6a, 0xe8, 0x11, 0xaf, 0x4a, 0x32, 0x35, 0x58, 0x18,
	0x90, 0x7f, 0xcf, 0x67, 0xce, 0x0e, 0xed, 0x27, 0xd1, 0x3c, 0x83, 0x52, 0xe7, 0x61, 0x6e, 0xc8,
	0x6f, 0x2e, 0x23, 0x4f, 0xbd, 0xde, 0xa5, 0xc8, 0x48, 0x91, 0x8e, 0x91, 0x19, 0x99, 0xb8, 0x3c,
	0x19, 0x99, 0x87, 0xb9, 0x21, 0xf9, 0x32, 0xc0, 0x5d, 0x98, 0xb9, 0x4f, 0x83, 0xaa, 0xc1, 0x55,
	0x4f, 0x15, 0x40, 0x79, 0x4e, 0x7a, 0x7a, 0xff, 0x92, 0x01, 0x94, 0xe7, 0xf7, 0x76, 0xb5, 0x60,
	0xe8, 0x09, 0x4e, 0x88, 0xe8, 0x13, 0xc7, 0x4e, 0x44, 0x88, 0xb1, 0xba, 0x07, 0x0b, 0x99, 0x86,
	0x47, 0x89, 0x5e, 0xfe, 0xfb, 0xae, 0xde, 0xc0, 0x62, 0x31, 0x50, 0xda, 0xdb, 0x07, 0x48, 0x01,
	0xa2, 0x43, 0x89, 0xb2, 0xba, 0xf3, 0x0b, 0x87, 0x69, 0x65, 0xc9, 0xc6, 0x1e, 0x76, 0x70, 0x4a,
	0x7e, 0xe8, 0x1e, 0x32, 0x3d, 0x87, 0x54, 0x1f, 0x40, 0x73, 0x9b, 0xda, 0xb4, 0x7a, 0xf5, 0x8b,
	0x02, 0x18, 0x22, 0xc5, 0x1e, 0xd6, 0xde, 0x4d, 0xc1, 0xdf, 0x49, 0xa9, 0xc5, 0xd2, 0xd0, 0x7b,
	0x05, 0xa6, 0xf3, 0xcd, 0x18, 0x6d, 0x5d, 0xc0, 0x85, 0xd1, 0xde, 0xae, 0x06, 0x91, 0xf5, 0x3a,
	0x7b, 0xfa, 0xed, 0xc7, 0xdb, 0x5a, 0x03, 0xd5, 0xb3, 0xfb, 0x9e, 0xa3, 0x0f, 0x0a, 0x34, 0x06,
	0xfa, 0x07, 0xda, 0xbe, 0x88, 0x76, 0xdb, 0xee, 0x56, 0xa4, 0x48, 0xcd, 0x4b, 0x91, 0xe6, 0x79,
	0x75, 0x3a, 0xf7, 0x48, 0xe1, 0x1b, 0x69, 0x29, 0x7f, 0x51, 0x86, 0x6e, 0x1d, 0xd9, 0x2e, 0xd1,
	0x4e, 0xa5, 0xed, 0x07, 0x9b, 0xee, 0x1f, 0xf2, 0xf2, 0x51, 0x01, 0xc8, 0x8e, 0x0c, 0xba, 0x5b,
	0x76, 0xd3, 0x33, 0xbd, 0xa8, 0xbd, 0x59, 0x05, 0x21, 0x45, 0x5f, 0x8b, 0x44, 0xff, 0x8f, 0x56,
	0x72, 0x9a, 0xb5, 0x57, 0xc9, 0x1a, 0x01, 0xed, 0x91, 0x80, 0x60, 0x71, 0x50, 0x5e, 0xa3, 0xaf,
	0x0a, 0x34, 0x06, 0x7a, 0x65, 0xf9, 0x62, 0x2a, 0xba, 0x29, 0xca, 0x27, 0xa0, 0xb8, 0x61, 0x5f,
	0x8f, 0xbc, 0x5c, 0x69, 0x2f, 0x68, 0x45, 0x66, 0xf6, 0x23, 0x0f, 0x59, 0x3e, 0x3e, 0x29, 0xd0,
	0x18, 0x38, 0xf7, 0xe5, 0xcd, 0x14, 0x35, 0xa0, 0xf2, 0x66, 0x0a, 0x9b, 0x8f, 0xba, 0x12, 0x99,
	0x59, 0xba, 0x3a, 0xca, 0xcc, 0xe6, 0xfa, 0x8b, 0xce, 0x39, 0x5f, 0xcd, 0xd9, 0x7f, 0x81, 0x83,
	0xc9, 0xe8, 0xc1, 0xbc, 0xfe, 0x33, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xcc, 0x05, 0xb2, 0x29, 0x0c,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LicenseServiceClient is the client API for LicenseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LicenseServiceClient interface {
	ListLicenses(ctx context.Context, in *ListLicensesRequest, opts ...grpc.CallOption) (*ListLicensesResponse, error)
	CreateLicense(ctx context.Context, in *CreateLicenseRequest, opts ...grpc.CallOption) (*CreateLicenseResponse, error)
	CreateLicenseFromKey(ctx context.Context, in *CreateLicenseFromKeyRequest, opts ...grpc.CallOption) (*CreateLicenseResponse, error)
	GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*GetLicenseResponse, error)
	UpdateLicense(ctx context.Context, in *UpdateLicenseRequest, opts ...grpc.CallOption) (*UpdateLicenseResponse, error)
	DeleteLicense(ctx context.Context, in *DeleteLicenseRequest, opts ...grpc.CallOption) (*DeleteLicenseResponse, error)
}

type licenseServiceClient struct {
	cc *grpc.ClientConn
}

func NewLicenseServiceClient(cc *grpc.ClientConn) LicenseServiceClient {
	return &licenseServiceClient{cc}
}

func (c *licenseServiceClient) ListLicenses(ctx context.Context, in *ListLicensesRequest, opts ...grpc.CallOption) (*ListLicensesResponse, error) {
	out := new(ListLicensesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.license.v1.LicenseService/ListLicenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseServiceClient) CreateLicense(ctx context.Context, in *CreateLicenseRequest, opts ...grpc.CallOption) (*CreateLicenseResponse, error) {
	out := new(CreateLicenseResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.license.v1.LicenseService/CreateLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseServiceClient) CreateLicenseFromKey(ctx context.Context, in *CreateLicenseFromKeyRequest, opts ...grpc.CallOption) (*CreateLicenseResponse, error) {
	out := new(CreateLicenseResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.license.v1.LicenseService/CreateLicenseFromKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseServiceClient) GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*GetLicenseResponse, error) {
	out := new(GetLicenseResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.license.v1.LicenseService/GetLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseServiceClient) UpdateLicense(ctx context.Context, in *UpdateLicenseRequest, opts ...grpc.CallOption) (*UpdateLicenseResponse, error) {
	out := new(UpdateLicenseResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.license.v1.LicenseService/UpdateLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseServiceClient) DeleteLicense(ctx context.Context, in *DeleteLicenseRequest, opts ...grpc.CallOption) (*DeleteLicenseResponse, error) {
	out := new(DeleteLicenseResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.license.v1.LicenseService/DeleteLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseServiceServer is the server API for LicenseService service.
type LicenseServiceServer interface {
	ListLicenses(context.Context, *ListLicensesRequest) (*ListLicensesResponse, error)
	CreateLicense(context.Context, *CreateLicenseRequest) (*CreateLicenseResponse, error)
	CreateLicenseFromKey(context.Context, *CreateLicenseFromKeyRequest) (*CreateLicenseResponse, error)
	GetLicense(context.Context, *GetLicenseRequest) (*GetLicenseResponse, error)
	UpdateLicense(context.Context, *UpdateLicenseRequest) (*UpdateLicenseResponse, error)
	DeleteLicense(context.Context, *DeleteLicenseRequest) (*DeleteLicenseResponse, error)
}

// UnimplementedLicenseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLicenseServiceServer struct {
}

func (*UnimplementedLicenseServiceServer) ListLicenses(ctx context.Context, req *ListLicensesRequest) (*ListLicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLicenses not implemented")
}
func (*UnimplementedLicenseServiceServer) CreateLicense(ctx context.Context, req *CreateLicenseRequest) (*CreateLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLicense not implemented")
}
func (*UnimplementedLicenseServiceServer) CreateLicenseFromKey(ctx context.Context, req *CreateLicenseFromKeyRequest) (*CreateLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLicenseFromKey not implemented")
}
func (*UnimplementedLicenseServiceServer) GetLicense(ctx context.Context, req *GetLicenseRequest) (*GetLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (*UnimplementedLicenseServiceServer) UpdateLicense(ctx context.Context, req *UpdateLicenseRequest) (*UpdateLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLicense not implemented")
}
func (*UnimplementedLicenseServiceServer) DeleteLicense(ctx context.Context, req *DeleteLicenseRequest) (*DeleteLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLicense not implemented")
}

func RegisterLicenseServiceServer(s *grpc.Server, srv LicenseServiceServer) {
	s.RegisterService(&_LicenseService_serviceDesc, srv)
}

func _LicenseService_ListLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServiceServer).ListLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.license.v1.LicenseService/ListLicenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServiceServer).ListLicenses(ctx, req.(*ListLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseService_CreateLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServiceServer).CreateLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.license.v1.LicenseService/CreateLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServiceServer).CreateLicense(ctx, req.(*CreateLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseService_CreateLicenseFromKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLicenseFromKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServiceServer).CreateLicenseFromKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.license.v1.LicenseService/CreateLicenseFromKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServiceServer).CreateLicenseFromKey(ctx, req.(*CreateLicenseFromKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseService_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServiceServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.license.v1.LicenseService/GetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServiceServer).GetLicense(ctx, req.(*GetLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseService_UpdateLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServiceServer).UpdateLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.license.v1.LicenseService/UpdateLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServiceServer).UpdateLicense(ctx, req.(*UpdateLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseService_DeleteLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServiceServer).DeleteLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.license.v1.LicenseService/DeleteLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServiceServer).DeleteLicense(ctx, req.(*DeleteLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LicenseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeld.services.license.v1.LicenseService",
	HandlerType: (*LicenseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLicenses",
			Handler:    _LicenseService_ListLicenses_Handler,
		},
		{
			MethodName: "CreateLicense",
			Handler:    _LicenseService_CreateLicense_Handler,
		},
		{
			MethodName: "CreateLicenseFromKey",
			Handler:    _LicenseService_CreateLicenseFromKey_Handler,
		},
		{
			MethodName: "GetLicense",
			Handler:    _LicenseService_GetLicense_Handler,
		},
		{
			MethodName: "UpdateLicense",
			Handler:    _LicenseService_UpdateLicense_Handler,
		},
		{
			MethodName: "DeleteLicense",
			Handler:    _LicenseService_DeleteLicense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/license/v1/license.proto",
}
