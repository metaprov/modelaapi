// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: services/predictionpipelinerun/v1/predictionpipelinerun.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/inference/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListPredictionPipelineRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListPredictionPipelineRunsRequest) Reset() {
	*x = ListPredictionPipelineRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPredictionPipelineRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPredictionPipelineRunsRequest) ProtoMessage() {}

func (x *ListPredictionPipelineRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPredictionPipelineRunsRequest.ProtoReflect.Descriptor instead.
func (*ListPredictionPipelineRunsRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{0}
}

func (x *ListPredictionPipelineRunsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListPredictionPipelineRunsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPredictionPipelineRunsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListPredictionPipelineRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *v1alpha1.PredictionPipelineRunList `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *ListPredictionPipelineRunsResponse) Reset() {
	*x = ListPredictionPipelineRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPredictionPipelineRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPredictionPipelineRunsResponse) ProtoMessage() {}

func (x *ListPredictionPipelineRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPredictionPipelineRunsResponse.ProtoReflect.Descriptor instead.
func (*ListPredictionPipelineRunsResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{1}
}

func (x *ListPredictionPipelineRunsResponse) GetItems() *v1alpha1.PredictionPipelineRunList {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreatePredictionPipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePredictionPipelineRunResponse) Reset() {
	*x = CreatePredictionPipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePredictionPipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePredictionPipelineRunResponse) ProtoMessage() {}

func (x *CreatePredictionPipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePredictionPipelineRunResponse.ProtoReflect.Descriptor instead.
func (*CreatePredictionPipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{2}
}

type CreatePredictionPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.PredictionPipelineRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreatePredictionPipelineRunRequest) Reset() {
	*x = CreatePredictionPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePredictionPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePredictionPipelineRunRequest) ProtoMessage() {}

func (x *CreatePredictionPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePredictionPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*CreatePredictionPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePredictionPipelineRunRequest) GetItem() *v1alpha1.PredictionPipelineRun {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdatePredictionPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.PredictionPipelineRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdatePredictionPipelineRunRequest) Reset() {
	*x = UpdatePredictionPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePredictionPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePredictionPipelineRunRequest) ProtoMessage() {}

func (x *UpdatePredictionPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePredictionPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*UpdatePredictionPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePredictionPipelineRunRequest) GetItem() *v1alpha1.PredictionPipelineRun {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdatePredictionPipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePredictionPipelineRunResponse) Reset() {
	*x = UpdatePredictionPipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePredictionPipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePredictionPipelineRunResponse) ProtoMessage() {}

func (x *UpdatePredictionPipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePredictionPipelineRunResponse.ProtoReflect.Descriptor instead.
func (*UpdatePredictionPipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{5}
}

type GetPredictionPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPredictionPipelineRunRequest) Reset() {
	*x = GetPredictionPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredictionPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredictionPipelineRunRequest) ProtoMessage() {}

func (x *GetPredictionPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredictionPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*GetPredictionPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{6}
}

func (x *GetPredictionPipelineRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetPredictionPipelineRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPredictionPipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.PredictionPipelineRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Yaml string                          `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetPredictionPipelineRunResponse) Reset() {
	*x = GetPredictionPipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredictionPipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredictionPipelineRunResponse) ProtoMessage() {}

func (x *GetPredictionPipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredictionPipelineRunResponse.ProtoReflect.Descriptor instead.
func (*GetPredictionPipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{7}
}

func (x *GetPredictionPipelineRunResponse) GetItem() *v1alpha1.PredictionPipelineRun {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetPredictionPipelineRunResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeletePredictionPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeletePredictionPipelineRunRequest) Reset() {
	*x = DeletePredictionPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePredictionPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePredictionPipelineRunRequest) ProtoMessage() {}

func (x *DeletePredictionPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePredictionPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*DeletePredictionPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePredictionPipelineRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeletePredictionPipelineRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeletePredictionPipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePredictionPipelineRunResponse) Reset() {
	*x = DeletePredictionPipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePredictionPipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePredictionPipelineRunResponse) ProtoMessage() {}

func (x *DeletePredictionPipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePredictionPipelineRunResponse.ProtoReflect.Descriptor instead.
func (*DeletePredictionPipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{9}
}

type DownloadPredictionPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DownloadPredictionPipelineRunRequest) Reset() {
	*x = DownloadPredictionPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadPredictionPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadPredictionPipelineRunRequest) ProtoMessage() {}

func (x *DownloadPredictionPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadPredictionPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*DownloadPredictionPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadPredictionPipelineRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DownloadPredictionPipelineRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Answer the report in base 64
type DownloadPredictionPipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *DownloadPredictionPipelineRunResponse) Reset() {
	*x = DownloadPredictionPipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadPredictionPipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadPredictionPipelineRunResponse) ProtoMessage() {}

func (x *DownloadPredictionPipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadPredictionPipelineRunResponse.ProtoReflect.Descriptor instead.
func (*DownloadPredictionPipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP(), []int{11}
}

func (x *DownloadPredictionPipelineRunResponse) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

var File_services_predictionpipelinerun_v1_predictionpipelinerun_proto protoreflect.FileDescriptor

var file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x21, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8a, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x8a, 0x01, 0x0a,
	0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x25, 0x0a, 0x23, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x53, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x79, 0x61, 0x6d, 0x6c, 0x22, 0x56, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x23,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x24, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a,
	0x25, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x32, 0x96, 0x0d, 0x0a, 0x1c, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x02, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x62, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x63, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x9d, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x75, 0x6e, 0x12, 0x63, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x64, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x3a, 0x12,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x87, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12,
	0x60, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x61, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa8, 0x02, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x63, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x64, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x1a,
	0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x0a, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x02, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x63, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x64, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0x8c, 0x02, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x66, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75,
	0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescOnce sync.Once
	file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescData = file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDesc
)

func file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescGZIP() []byte {
	file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescOnce.Do(func() {
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescData)
	})
	return file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDescData
}

var file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_goTypes = []interface{}{
	(*ListPredictionPipelineRunsRequest)(nil),     // 0: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.ListPredictionPipelineRunsRequest
	(*ListPredictionPipelineRunsResponse)(nil),    // 1: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.ListPredictionPipelineRunsResponse
	(*CreatePredictionPipelineRunResponse)(nil),   // 2: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.CreatePredictionPipelineRunResponse
	(*CreatePredictionPipelineRunRequest)(nil),    // 3: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.CreatePredictionPipelineRunRequest
	(*UpdatePredictionPipelineRunRequest)(nil),    // 4: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.UpdatePredictionPipelineRunRequest
	(*UpdatePredictionPipelineRunResponse)(nil),   // 5: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.UpdatePredictionPipelineRunResponse
	(*GetPredictionPipelineRunRequest)(nil),       // 6: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.GetPredictionPipelineRunRequest
	(*GetPredictionPipelineRunResponse)(nil),      // 7: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.GetPredictionPipelineRunResponse
	(*DeletePredictionPipelineRunRequest)(nil),    // 8: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.DeletePredictionPipelineRunRequest
	(*DeletePredictionPipelineRunResponse)(nil),   // 9: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.DeletePredictionPipelineRunResponse
	(*DownloadPredictionPipelineRunRequest)(nil),  // 10: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.DownloadPredictionPipelineRunRequest
	(*DownloadPredictionPipelineRunResponse)(nil), // 11: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.DownloadPredictionPipelineRunResponse
	nil, // 12: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.ListPredictionPipelineRunsRequest.LabelsEntry
	(*v1alpha1.PredictionPipelineRunList)(nil), // 13: github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipelineRunList
	(*v1alpha1.PredictionPipelineRun)(nil),     // 14: github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipelineRun
}
var file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_depIdxs = []int32{
	12, // 0: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.ListPredictionPipelineRunsRequest.labels:type_name -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.ListPredictionPipelineRunsRequest.LabelsEntry
	13, // 1: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.ListPredictionPipelineRunsResponse.items:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipelineRunList
	14, // 2: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.CreatePredictionPipelineRunRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipelineRun
	14, // 3: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.UpdatePredictionPipelineRunRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipelineRun
	14, // 4: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.GetPredictionPipelineRunResponse.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipelineRun
	0,  // 5: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.ListPredictionPipelineRuns:input_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.ListPredictionPipelineRunsRequest
	3,  // 6: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.CreatePredictionPipelineRun:input_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.CreatePredictionPipelineRunRequest
	6,  // 7: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.GetPredictionPipelineRun:input_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.GetPredictionPipelineRunRequest
	4,  // 8: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.UpdatePredictionPipelineRun:input_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.UpdatePredictionPipelineRunRequest
	8,  // 9: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.DeletePredictionPipelineRun:input_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.DeletePredictionPipelineRunRequest
	10, // 10: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.Download:input_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.DownloadPredictionPipelineRunRequest
	1,  // 11: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.ListPredictionPipelineRuns:output_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.ListPredictionPipelineRunsResponse
	2,  // 12: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.CreatePredictionPipelineRun:output_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.CreatePredictionPipelineRunResponse
	7,  // 13: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.GetPredictionPipelineRun:output_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.GetPredictionPipelineRunResponse
	5,  // 14: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.UpdatePredictionPipelineRun:output_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.UpdatePredictionPipelineRunResponse
	9,  // 15: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.DeletePredictionPipelineRun:output_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.DeletePredictionPipelineRunResponse
	11, // 16: github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService.Download:output_type -> github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.DownloadPredictionPipelineRunResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_init() }
func file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_init() {
	if File_services_predictionpipelinerun_v1_predictionpipelinerun_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPredictionPipelineRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPredictionPipelineRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePredictionPipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePredictionPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePredictionPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePredictionPipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredictionPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredictionPipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePredictionPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePredictionPipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadPredictionPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadPredictionPipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_goTypes,
		DependencyIndexes: file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_depIdxs,
		MessageInfos:      file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_msgTypes,
	}.Build()
	File_services_predictionpipelinerun_v1_predictionpipelinerun_proto = out.File
	file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_rawDesc = nil
	file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_goTypes = nil
	file_services_predictionpipelinerun_v1_predictionpipelinerun_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PredictionPipelineRunServiceClient is the client API for PredictionPipelineRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PredictionPipelineRunServiceClient interface {
	ListPredictionPipelineRuns(ctx context.Context, in *ListPredictionPipelineRunsRequest, opts ...grpc.CallOption) (*ListPredictionPipelineRunsResponse, error)
	CreatePredictionPipelineRun(ctx context.Context, in *CreatePredictionPipelineRunRequest, opts ...grpc.CallOption) (*CreatePredictionPipelineRunResponse, error)
	GetPredictionPipelineRun(ctx context.Context, in *GetPredictionPipelineRunRequest, opts ...grpc.CallOption) (*GetPredictionPipelineRunResponse, error)
	UpdatePredictionPipelineRun(ctx context.Context, in *UpdatePredictionPipelineRunRequest, opts ...grpc.CallOption) (*UpdatePredictionPipelineRunResponse, error)
	DeletePredictionPipelineRun(ctx context.Context, in *DeletePredictionPipelineRunRequest, opts ...grpc.CallOption) (*DeletePredictionPipelineRunResponse, error)
	Download(ctx context.Context, in *DownloadPredictionPipelineRunRequest, opts ...grpc.CallOption) (*DownloadPredictionPipelineRunResponse, error)
}

type predictionPipelineRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPredictionPipelineRunServiceClient(cc grpc.ClientConnInterface) PredictionPipelineRunServiceClient {
	return &predictionPipelineRunServiceClient{cc}
}

func (c *predictionPipelineRunServiceClient) ListPredictionPipelineRuns(ctx context.Context, in *ListPredictionPipelineRunsRequest, opts ...grpc.CallOption) (*ListPredictionPipelineRunsResponse, error) {
	out := new(ListPredictionPipelineRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/ListPredictionPipelineRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionPipelineRunServiceClient) CreatePredictionPipelineRun(ctx context.Context, in *CreatePredictionPipelineRunRequest, opts ...grpc.CallOption) (*CreatePredictionPipelineRunResponse, error) {
	out := new(CreatePredictionPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/CreatePredictionPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionPipelineRunServiceClient) GetPredictionPipelineRun(ctx context.Context, in *GetPredictionPipelineRunRequest, opts ...grpc.CallOption) (*GetPredictionPipelineRunResponse, error) {
	out := new(GetPredictionPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/GetPredictionPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionPipelineRunServiceClient) UpdatePredictionPipelineRun(ctx context.Context, in *UpdatePredictionPipelineRunRequest, opts ...grpc.CallOption) (*UpdatePredictionPipelineRunResponse, error) {
	out := new(UpdatePredictionPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/UpdatePredictionPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionPipelineRunServiceClient) DeletePredictionPipelineRun(ctx context.Context, in *DeletePredictionPipelineRunRequest, opts ...grpc.CallOption) (*DeletePredictionPipelineRunResponse, error) {
	out := new(DeletePredictionPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/DeletePredictionPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionPipelineRunServiceClient) Download(ctx context.Context, in *DownloadPredictionPipelineRunRequest, opts ...grpc.CallOption) (*DownloadPredictionPipelineRunResponse, error) {
	out := new(DownloadPredictionPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PredictionPipelineRunServiceServer is the server API for PredictionPipelineRunService service.
type PredictionPipelineRunServiceServer interface {
	ListPredictionPipelineRuns(context.Context, *ListPredictionPipelineRunsRequest) (*ListPredictionPipelineRunsResponse, error)
	CreatePredictionPipelineRun(context.Context, *CreatePredictionPipelineRunRequest) (*CreatePredictionPipelineRunResponse, error)
	GetPredictionPipelineRun(context.Context, *GetPredictionPipelineRunRequest) (*GetPredictionPipelineRunResponse, error)
	UpdatePredictionPipelineRun(context.Context, *UpdatePredictionPipelineRunRequest) (*UpdatePredictionPipelineRunResponse, error)
	DeletePredictionPipelineRun(context.Context, *DeletePredictionPipelineRunRequest) (*DeletePredictionPipelineRunResponse, error)
	Download(context.Context, *DownloadPredictionPipelineRunRequest) (*DownloadPredictionPipelineRunResponse, error)
}

// UnimplementedPredictionPipelineRunServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPredictionPipelineRunServiceServer struct {
}

func (*UnimplementedPredictionPipelineRunServiceServer) ListPredictionPipelineRuns(context.Context, *ListPredictionPipelineRunsRequest) (*ListPredictionPipelineRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPredictionPipelineRuns not implemented")
}
func (*UnimplementedPredictionPipelineRunServiceServer) CreatePredictionPipelineRun(context.Context, *CreatePredictionPipelineRunRequest) (*CreatePredictionPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePredictionPipelineRun not implemented")
}
func (*UnimplementedPredictionPipelineRunServiceServer) GetPredictionPipelineRun(context.Context, *GetPredictionPipelineRunRequest) (*GetPredictionPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictionPipelineRun not implemented")
}
func (*UnimplementedPredictionPipelineRunServiceServer) UpdatePredictionPipelineRun(context.Context, *UpdatePredictionPipelineRunRequest) (*UpdatePredictionPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePredictionPipelineRun not implemented")
}
func (*UnimplementedPredictionPipelineRunServiceServer) DeletePredictionPipelineRun(context.Context, *DeletePredictionPipelineRunRequest) (*DeletePredictionPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePredictionPipelineRun not implemented")
}
func (*UnimplementedPredictionPipelineRunServiceServer) Download(context.Context, *DownloadPredictionPipelineRunRequest) (*DownloadPredictionPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterPredictionPipelineRunServiceServer(s *grpc.Server, srv PredictionPipelineRunServiceServer) {
	s.RegisterService(&_PredictionPipelineRunService_serviceDesc, srv)
}

func _PredictionPipelineRunService_ListPredictionPipelineRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPredictionPipelineRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineRunServiceServer).ListPredictionPipelineRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/ListPredictionPipelineRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineRunServiceServer).ListPredictionPipelineRuns(ctx, req.(*ListPredictionPipelineRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionPipelineRunService_CreatePredictionPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePredictionPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineRunServiceServer).CreatePredictionPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/CreatePredictionPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineRunServiceServer).CreatePredictionPipelineRun(ctx, req.(*CreatePredictionPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionPipelineRunService_GetPredictionPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictionPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineRunServiceServer).GetPredictionPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/GetPredictionPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineRunServiceServer).GetPredictionPipelineRun(ctx, req.(*GetPredictionPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionPipelineRunService_UpdatePredictionPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePredictionPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineRunServiceServer).UpdatePredictionPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/UpdatePredictionPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineRunServiceServer).UpdatePredictionPipelineRun(ctx, req.(*UpdatePredictionPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionPipelineRunService_DeletePredictionPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePredictionPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineRunServiceServer).DeletePredictionPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/DeletePredictionPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineRunServiceServer).DeletePredictionPipelineRun(ctx, req.(*DeletePredictionPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionPipelineRunService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadPredictionPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineRunServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineRunServiceServer).Download(ctx, req.(*DownloadPredictionPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PredictionPipelineRunService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeldapi.services.predictionpipelinerun.v1.PredictionPipelineRunService",
	HandlerType: (*PredictionPipelineRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPredictionPipelineRuns",
			Handler:    _PredictionPipelineRunService_ListPredictionPipelineRuns_Handler,
		},
		{
			MethodName: "CreatePredictionPipelineRun",
			Handler:    _PredictionPipelineRunService_CreatePredictionPipelineRun_Handler,
		},
		{
			MethodName: "GetPredictionPipelineRun",
			Handler:    _PredictionPipelineRunService_GetPredictionPipelineRun_Handler,
		},
		{
			MethodName: "UpdatePredictionPipelineRun",
			Handler:    _PredictionPipelineRunService_UpdatePredictionPipelineRun_Handler,
		},
		{
			MethodName: "DeletePredictionPipelineRun",
			Handler:    _PredictionPipelineRunService_DeletePredictionPipelineRun_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _PredictionPipelineRunService_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/predictionpipelinerun/v1/predictionpipelinerun.proto",
}
