syntax = "proto3";
option go_package = "github.com/metaprov/modeldapi/services/conversation/v1";
package github.com.metaprov.modeldapi.services.conversation.v1;

import "google/protobuf/empty.proto";
import "github.com/metaprov/modeldapi/pkg/apis/team/v1alpha1/generated.proto";
import "google/api/annotations.proto";

message GetConversationRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message GetConversationResponse {
    github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.Conversation item = 1;
    string yaml = 2;
}

message CreateConversationRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.ConversationSpec spec = 5;
    string password = 6;
    bool upsert = 7;
}

message CreateConversationResponse {
}



message UpdateConversationRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.ConversationSpec spec = 5;
}

message UpdateConversationResponse {
}


message DeleteConversationRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message DeleteConversationResponse {
}

message ListConversationRequest {
    string namespace = 1;
    map<string,string> labels =3;
}

message ListConversationResponse {
    github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.ConversationList items = 1;
}



service ConversationService {
    rpc List(ListConversationRequest) returns (ListConversationResponse) {
        option (google.api.http).get = "/api/v1alpha1/conversations";
    }
    rpc Create(CreateConversationRequest) returns (CreateConversationResponse) {
        option (google.api.http) = {
			post: "/api/v1alpha1/conversations"
			body: "conversation"
		};
    }
    rpc Get(GetConversationRequest) returns (GetConversationResponse) {
        option (google.api.http).get = "/api/v1alpha1/conversations/{name}";
    }
    rpc Update(UpdateConversationRequest) returns (UpdateConversationResponse) {
        option (google.api.http) = {
			put: "/api/v1alpha1/conversations/{conversation.metadata.name}"
			body: "conversation"
		};
    }

    rpc Delete(DeleteConversationRequest) returns (DeleteConversationResponse) {}



}