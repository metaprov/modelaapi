syntax = "proto3";
option go_package = "github.com/metaprov/modeldapi/services/conversation/v1";
package github.com.metaprov.modeldapi.services.conversation.v1;

import "google/protobuf/empty.proto";
import "github.com/metaprov/modeldapi/pkg/apis/team/v1alpha1/generated.proto";
import "google/api/annotations.proto";

message GetConversationRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message GetConversationResponse {
    github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.Conversation item = 1;
    string yaml = 2;
}

message CreateConversationRequest {
    github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.Conversation item = 1;
}

message CreateConversationResponse {
}



message UpdateConversationRequest {
    github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.Conversation item = 1;
}

message UpdateConversationResponse {
}


message DeleteConversationRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message DeleteConversationResponse {
}

message ListConversationRequest {
    string             namespace  = 1;
    map<string,string> labels     = 2;
    int32              page_size  = 3;
    string             page_token = 4;
}

message ListConversationResponse {
    github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.ConversationList items = 1;
    string next_page_token = 2;
}



service ConversationService {
    rpc ListConversations(ListConversationRequest) returns (ListConversationResponse) {
        option (google.api.http).get = "/api/v1alpha1/conversations/{namespace}";
    }
    rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse) {
        option (google.api.http) = {
			post: "/api/v1alpha1/conversations"
			body: "*"
		};
    }
    rpc GetConversation(GetConversationRequest) returns (GetConversationResponse) {
        option (google.api.http).get = "/api/v1alpha1/conversations/{namespace}/{name}";
    }
    rpc UpdateConversation(UpdateConversationRequest) returns (UpdateConversationResponse) {
        option (google.api.http) = {
			put: "/api/v1alpha1/conversations/{conversation.metadata.namespace}/{conversation.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse) {
        option (google.api.http).delete = "/api/v1/conversations/{namespace}/{name}";
    }



}