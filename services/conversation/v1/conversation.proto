syntax = "proto3";
option go_package = "github.com/metaprov/modeldapi/services/conversation/v1";
package github.com.metaprov.modeld.services.conversation.v1;

import "google/protobuf/empty.proto";
import "github.com/metaprov/modeldapi/pkg/apis/team/v1alpha1/generated.proto";
import "google/api/annotations.proto";

message ConversationQuery {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message ConversationResponse {}

message ConversationCreateRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.ConversationSpec spec = 5;
    string password = 6;
    bool upsert = 7;
}

message ConversationUpdateRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.ConversationSpec spec = 5;
}

message ConversationGetResponse {
    github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.Conversation item = 1;
    string yaml = 2;
}


service ConversationService {
    rpc List(ConversationQuery) returns (github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.ConversationList) {
        option (google.api.http).get = "/api/v1alpha1/conversations";
    }
    rpc Create(ConversationCreateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
			post: "/api/v1alpha1/conversations"
			body: "conversation"
		};
    }
    rpc Get(ConversationQuery) returns (ConversationGetResponse) {
        option (google.api.http).get = "/api/v1alpha1/conversations/{name}";
    }
    rpc Update(ConversationUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
			put: "/api/v1alpha1/conversations/{conversation.metadata.name}"
			body: "conversation"
		};
    }

    rpc Delete(ConversationQuery) returns (google.protobuf.Empty) {}



}