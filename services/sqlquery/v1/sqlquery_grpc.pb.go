// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/sqlquery/v1/sqlquery.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqlQueryServiceClient is the client API for SqlQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlQueryServiceClient interface {
	ListSqlQuerys(ctx context.Context, in *ListSqlQuerysRequest, opts ...grpc.CallOption) (*ListSqlQuerysResponse, error)
	CreateSqlQuery(ctx context.Context, in *CreateSqlQueryRequest, opts ...grpc.CallOption) (*CreateSqlQueryResponse, error)
	GetSqlQuery(ctx context.Context, in *GetSqlQueryRequest, opts ...grpc.CallOption) (*GetSqlQueryResponse, error)
	UpdateSqlQuery(ctx context.Context, in *UpdateSqlQueryRequest, opts ...grpc.CallOption) (*UpdateSqlQueryResponse, error)
	DeleteSqlQuery(ctx context.Context, in *DeleteSqlQueryRequest, opts ...grpc.CallOption) (*DeleteSqlQueryResponse, error)
	RunSqlQuery(ctx context.Context, in *RunSqlQueryRequest, opts ...grpc.CallOption) (*RunSqlQueryResponse, error)
}

type sqlQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlQueryServiceClient(cc grpc.ClientConnInterface) SqlQueryServiceClient {
	return &sqlQueryServiceClient{cc}
}

func (c *sqlQueryServiceClient) ListSqlQuerys(ctx context.Context, in *ListSqlQuerysRequest, opts ...grpc.CallOption) (*ListSqlQuerysResponse, error) {
	out := new(ListSqlQuerysResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/ListSqlQuerys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryServiceClient) CreateSqlQuery(ctx context.Context, in *CreateSqlQueryRequest, opts ...grpc.CallOption) (*CreateSqlQueryResponse, error) {
	out := new(CreateSqlQueryResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/CreateSqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryServiceClient) GetSqlQuery(ctx context.Context, in *GetSqlQueryRequest, opts ...grpc.CallOption) (*GetSqlQueryResponse, error) {
	out := new(GetSqlQueryResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/GetSqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryServiceClient) UpdateSqlQuery(ctx context.Context, in *UpdateSqlQueryRequest, opts ...grpc.CallOption) (*UpdateSqlQueryResponse, error) {
	out := new(UpdateSqlQueryResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/UpdateSqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryServiceClient) DeleteSqlQuery(ctx context.Context, in *DeleteSqlQueryRequest, opts ...grpc.CallOption) (*DeleteSqlQueryResponse, error) {
	out := new(DeleteSqlQueryResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/DeleteSqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryServiceClient) RunSqlQuery(ctx context.Context, in *RunSqlQueryRequest, opts ...grpc.CallOption) (*RunSqlQueryResponse, error) {
	out := new(RunSqlQueryResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/RunSqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlQueryServiceServer is the server API for SqlQueryService service.
// All implementations must embed UnimplementedSqlQueryServiceServer
// for forward compatibility
type SqlQueryServiceServer interface {
	ListSqlQuerys(context.Context, *ListSqlQuerysRequest) (*ListSqlQuerysResponse, error)
	CreateSqlQuery(context.Context, *CreateSqlQueryRequest) (*CreateSqlQueryResponse, error)
	GetSqlQuery(context.Context, *GetSqlQueryRequest) (*GetSqlQueryResponse, error)
	UpdateSqlQuery(context.Context, *UpdateSqlQueryRequest) (*UpdateSqlQueryResponse, error)
	DeleteSqlQuery(context.Context, *DeleteSqlQueryRequest) (*DeleteSqlQueryResponse, error)
	RunSqlQuery(context.Context, *RunSqlQueryRequest) (*RunSqlQueryResponse, error)
	mustEmbedUnimplementedSqlQueryServiceServer()
}

// UnimplementedSqlQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlQueryServiceServer struct {
}

func (UnimplementedSqlQueryServiceServer) ListSqlQuerys(context.Context, *ListSqlQuerysRequest) (*ListSqlQuerysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSqlQuerys not implemented")
}
func (UnimplementedSqlQueryServiceServer) CreateSqlQuery(context.Context, *CreateSqlQueryRequest) (*CreateSqlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSqlQuery not implemented")
}
func (UnimplementedSqlQueryServiceServer) GetSqlQuery(context.Context, *GetSqlQueryRequest) (*GetSqlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSqlQuery not implemented")
}
func (UnimplementedSqlQueryServiceServer) UpdateSqlQuery(context.Context, *UpdateSqlQueryRequest) (*UpdateSqlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSqlQuery not implemented")
}
func (UnimplementedSqlQueryServiceServer) DeleteSqlQuery(context.Context, *DeleteSqlQueryRequest) (*DeleteSqlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSqlQuery not implemented")
}
func (UnimplementedSqlQueryServiceServer) RunSqlQuery(context.Context, *RunSqlQueryRequest) (*RunSqlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSqlQuery not implemented")
}
func (UnimplementedSqlQueryServiceServer) mustEmbedUnimplementedSqlQueryServiceServer() {}

// UnsafeSqlQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlQueryServiceServer will
// result in compilation errors.
type UnsafeSqlQueryServiceServer interface {
	mustEmbedUnimplementedSqlQueryServiceServer()
}

func RegisterSqlQueryServiceServer(s grpc.ServiceRegistrar, srv SqlQueryServiceServer) {
	s.RegisterService(&SqlQueryService_ServiceDesc, srv)
}

func _SqlQueryService_ListSqlQuerys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSqlQuerysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryServiceServer).ListSqlQuerys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/ListSqlQuerys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryServiceServer).ListSqlQuerys(ctx, req.(*ListSqlQuerysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryService_CreateSqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryServiceServer).CreateSqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/CreateSqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryServiceServer).CreateSqlQuery(ctx, req.(*CreateSqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryService_GetSqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryServiceServer).GetSqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/GetSqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryServiceServer).GetSqlQuery(ctx, req.(*GetSqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryService_UpdateSqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryServiceServer).UpdateSqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/UpdateSqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryServiceServer).UpdateSqlQuery(ctx, req.(*UpdateSqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryService_DeleteSqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryServiceServer).DeleteSqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/DeleteSqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryServiceServer).DeleteSqlQuery(ctx, req.(*DeleteSqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryService_RunSqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryServiceServer).RunSqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService/RunSqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryServiceServer).RunSqlQuery(ctx, req.(*RunSqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlQueryService_ServiceDesc is the grpc.ServiceDesc for SqlQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.sqlquery.v1.SqlQueryService",
	HandlerType: (*SqlQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSqlQuerys",
			Handler:    _SqlQueryService_ListSqlQuerys_Handler,
		},
		{
			MethodName: "CreateSqlQuery",
			Handler:    _SqlQueryService_CreateSqlQuery_Handler,
		},
		{
			MethodName: "GetSqlQuery",
			Handler:    _SqlQueryService_GetSqlQuery_Handler,
		},
		{
			MethodName: "UpdateSqlQuery",
			Handler:    _SqlQueryService_UpdateSqlQuery_Handler,
		},
		{
			MethodName: "DeleteSqlQuery",
			Handler:    _SqlQueryService_DeleteSqlQuery_Handler,
		},
		{
			MethodName: "RunSqlQuery",
			Handler:    _SqlQueryService_RunSqlQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/sqlquery/v1/sqlquery.proto",
}
