syntax = "proto3";

option go_package = "github.com/metaprov/modelaapi/services/sqlquery/v1";
package github.com.metaprov.modelaapi.services.sqlquery.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";


message ListSqlQuerysRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message ListSqlQuerysResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQueryList sqlquries = 1;
    string next_page_token = 2;
}

message CreateSqlQueryResponse {}

message CreateSqlQueryRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQuery sqlquery = 1;
}

message UpdateSqlQueryRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQuery sqlquery = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateSqlQueryResponse {

}

message GetSqlQueryRequest {
    string namespace = 1;
    string name      = 2;
}

message GetSqlQueryResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQuery sqlquery = 1;
    string yaml = 2;

}

message DeleteSqlQueryRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteSqlQueryResponse {

}

message RunSqlQueryRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQuery sqlquery = 1;
}


message RunSqlQueryResponse {
    
}


service SqlQueryService {

    rpc ListSqlQuerys(ListSqlQuerysRequest) returns (ListSqlQuerysResponse) {
        option (google.api.http).get = "/v1/sqlqueries/{namespace}";
    }

    rpc CreateSqlQuery(CreateSqlQueryRequest) returns (CreateSqlQueryResponse) {
        option (google.api.http) = {
			post: "/v1/sqlqueries"
			body: "*"
		};
    }

    rpc GetSqlQuery(GetSqlQueryRequest) returns (GetSqlQueryResponse) {
        option (google.api.http).get = "/v1/sqlqueries/{namespace}/{name}";
    }

    rpc UpdateSqlQuery(UpdateSqlQueryRequest) returns (UpdateSqlQueryResponse) {
        option (google.api.http) = {
			put: "/v1/sqlqueries/{sqlquery.metadata.namespace}/{sqlquery.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteSqlQuery(DeleteSqlQueryRequest) returns (DeleteSqlQueryResponse) {
        option (google.api.http).delete = "/v1/sqlqueries/{namespace}/{name}";
    }

    rpc RunSqlQuery(RunSqlQueryRequest) returns (RunSqlQueryResponse) {
        option (google.api.http).post = "/v1/sqlqueries/{sqlquery.metadata.namespace}/{sqlquery.metadata.name}:run";
    }
 

}