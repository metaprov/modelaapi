syntax = "proto3";
option go_package = "github.com/metaprov/modeldapi/services/labelingpipeline";

package github.com.metaprov.modeld.services.labelingpipeline;
import "google/api/annotations.proto";
import "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1/generated.proto";

message ListLabelingPipelineRequest {
    string namespace = 1;
    map<string,string> labels =2;
}

message ListLabelingPipelineResponse {
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.LabelingPipelineList items = 1;
}

message CreateLabelingPipelineRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.LabelingPipelineSpec spec = 4;
}

message CreateLabelingPipelineResponse {

}

message UpdateLabelingPipelineRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.LabelingPipelineSpec spec = 5;
}

message UpdateLabelingPipelineResponse {

}

message GetLabelingPipelineRequest {
    string namespace = 1;
    string name      = 2;
}


message GetLabelingPipelineResponse {
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.LabelingPipeline item = 1;
    string yaml = 2;
}


message DeleteLabelingPipelineRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteLabelingPipelineResponse {

}


service LabelingPipelineService {
    rpc ListLabelingPipelines(ListLabelingPipelineRequest) returns (ListLabelingPipelineResponse) {
        option (google.api.http).get = "/v1/labelpipelines";
    }

    rpc CreateLabelingPipeline(CreateLabelingPipelineRequest) returns (CreateLabelingPipelineResponse) {
        option (google.api.http) = {
			post: "/v1/labelpipelines"
			body: "labelpipeline"
		};
    }

    rpc GetLabelingPipeline(GetLabelingPipelineRequest) returns (GetLabelingPipelineResponse) {
        option (google.api.http).get = "/v1/labelpipelines/{name}";
    }

    rpc UpdateLabelingPipeline(UpdateLabelingPipelineRequest) returns (UpdateLabelingPipelineResponse) {
        option (google.api.http) = {
			put: "/v1/labelpipelines/{label.metadata.name}"
			body: "labelpipeline"
		};
    }

    rpc DeleteLabelingPipeline(DeleteLabelingPipelineRequest) returns (DeleteLabelingPipelineResponse) {}
}