// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/labelingpipeline/v1/labelingpipeline.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LabelingPipelineServiceClient is the client API for LabelingPipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LabelingPipelineServiceClient interface {
	ListLabelingPipelines(ctx context.Context, in *ListLabelingPipelineRequest, opts ...grpc.CallOption) (*ListLabelingPipelineResponse, error)
	CreateLabelingPipeline(ctx context.Context, in *CreateLabelingPipelineRequest, opts ...grpc.CallOption) (*CreateLabelingPipelineResponse, error)
	GetLabelingPipeline(ctx context.Context, in *GetLabelingPipelineRequest, opts ...grpc.CallOption) (*GetLabelingPipelineResponse, error)
	UpdateLabelingPipeline(ctx context.Context, in *UpdateLabelingPipelineRequest, opts ...grpc.CallOption) (*UpdateLabelingPipelineResponse, error)
	DeleteLabelingPipeline(ctx context.Context, in *DeleteLabelingPipelineRequest, opts ...grpc.CallOption) (*DeleteLabelingPipelineResponse, error)
	PauseLabelingPipeline(ctx context.Context, in *PauseLabelingPipelineRequest, opts ...grpc.CallOption) (*PauseLabelingPipelineResponse, error)
	ResumeLabelingPipeline(ctx context.Context, in *ResumeLabelingPipelineRequest, opts ...grpc.CallOption) (*ResumeLabelingPipelineResponse, error)
}

type labelingPipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLabelingPipelineServiceClient(cc grpc.ClientConnInterface) LabelingPipelineServiceClient {
	return &labelingPipelineServiceClient{cc}
}

func (c *labelingPipelineServiceClient) ListLabelingPipelines(ctx context.Context, in *ListLabelingPipelineRequest, opts ...grpc.CallOption) (*ListLabelingPipelineResponse, error) {
	out := new(ListLabelingPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/ListLabelingPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineServiceClient) CreateLabelingPipeline(ctx context.Context, in *CreateLabelingPipelineRequest, opts ...grpc.CallOption) (*CreateLabelingPipelineResponse, error) {
	out := new(CreateLabelingPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/CreateLabelingPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineServiceClient) GetLabelingPipeline(ctx context.Context, in *GetLabelingPipelineRequest, opts ...grpc.CallOption) (*GetLabelingPipelineResponse, error) {
	out := new(GetLabelingPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/GetLabelingPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineServiceClient) UpdateLabelingPipeline(ctx context.Context, in *UpdateLabelingPipelineRequest, opts ...grpc.CallOption) (*UpdateLabelingPipelineResponse, error) {
	out := new(UpdateLabelingPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/UpdateLabelingPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineServiceClient) DeleteLabelingPipeline(ctx context.Context, in *DeleteLabelingPipelineRequest, opts ...grpc.CallOption) (*DeleteLabelingPipelineResponse, error) {
	out := new(DeleteLabelingPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/DeleteLabelingPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineServiceClient) PauseLabelingPipeline(ctx context.Context, in *PauseLabelingPipelineRequest, opts ...grpc.CallOption) (*PauseLabelingPipelineResponse, error) {
	out := new(PauseLabelingPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/PauseLabelingPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineServiceClient) ResumeLabelingPipeline(ctx context.Context, in *ResumeLabelingPipelineRequest, opts ...grpc.CallOption) (*ResumeLabelingPipelineResponse, error) {
	out := new(ResumeLabelingPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/ResumeLabelingPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabelingPipelineServiceServer is the server API for LabelingPipelineService service.
// All implementations must embed UnimplementedLabelingPipelineServiceServer
// for forward compatibility
type LabelingPipelineServiceServer interface {
	ListLabelingPipelines(context.Context, *ListLabelingPipelineRequest) (*ListLabelingPipelineResponse, error)
	CreateLabelingPipeline(context.Context, *CreateLabelingPipelineRequest) (*CreateLabelingPipelineResponse, error)
	GetLabelingPipeline(context.Context, *GetLabelingPipelineRequest) (*GetLabelingPipelineResponse, error)
	UpdateLabelingPipeline(context.Context, *UpdateLabelingPipelineRequest) (*UpdateLabelingPipelineResponse, error)
	DeleteLabelingPipeline(context.Context, *DeleteLabelingPipelineRequest) (*DeleteLabelingPipelineResponse, error)
	PauseLabelingPipeline(context.Context, *PauseLabelingPipelineRequest) (*PauseLabelingPipelineResponse, error)
	ResumeLabelingPipeline(context.Context, *ResumeLabelingPipelineRequest) (*ResumeLabelingPipelineResponse, error)
	mustEmbedUnimplementedLabelingPipelineServiceServer()
}

// UnimplementedLabelingPipelineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLabelingPipelineServiceServer struct {
}

func (UnimplementedLabelingPipelineServiceServer) ListLabelingPipelines(context.Context, *ListLabelingPipelineRequest) (*ListLabelingPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabelingPipelines not implemented")
}
func (UnimplementedLabelingPipelineServiceServer) CreateLabelingPipeline(context.Context, *CreateLabelingPipelineRequest) (*CreateLabelingPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabelingPipeline not implemented")
}
func (UnimplementedLabelingPipelineServiceServer) GetLabelingPipeline(context.Context, *GetLabelingPipelineRequest) (*GetLabelingPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelingPipeline not implemented")
}
func (UnimplementedLabelingPipelineServiceServer) UpdateLabelingPipeline(context.Context, *UpdateLabelingPipelineRequest) (*UpdateLabelingPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabelingPipeline not implemented")
}
func (UnimplementedLabelingPipelineServiceServer) DeleteLabelingPipeline(context.Context, *DeleteLabelingPipelineRequest) (*DeleteLabelingPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabelingPipeline not implemented")
}
func (UnimplementedLabelingPipelineServiceServer) PauseLabelingPipeline(context.Context, *PauseLabelingPipelineRequest) (*PauseLabelingPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseLabelingPipeline not implemented")
}
func (UnimplementedLabelingPipelineServiceServer) ResumeLabelingPipeline(context.Context, *ResumeLabelingPipelineRequest) (*ResumeLabelingPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeLabelingPipeline not implemented")
}
func (UnimplementedLabelingPipelineServiceServer) mustEmbedUnimplementedLabelingPipelineServiceServer() {
}

// UnsafeLabelingPipelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabelingPipelineServiceServer will
// result in compilation errors.
type UnsafeLabelingPipelineServiceServer interface {
	mustEmbedUnimplementedLabelingPipelineServiceServer()
}

func RegisterLabelingPipelineServiceServer(s grpc.ServiceRegistrar, srv LabelingPipelineServiceServer) {
	s.RegisterService(&LabelingPipelineService_ServiceDesc, srv)
}

func _LabelingPipelineService_ListLabelingPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelingPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineServiceServer).ListLabelingPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/ListLabelingPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineServiceServer).ListLabelingPipelines(ctx, req.(*ListLabelingPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineService_CreateLabelingPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabelingPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineServiceServer).CreateLabelingPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/CreateLabelingPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineServiceServer).CreateLabelingPipeline(ctx, req.(*CreateLabelingPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineService_GetLabelingPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelingPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineServiceServer).GetLabelingPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/GetLabelingPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineServiceServer).GetLabelingPipeline(ctx, req.(*GetLabelingPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineService_UpdateLabelingPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelingPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineServiceServer).UpdateLabelingPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/UpdateLabelingPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineServiceServer).UpdateLabelingPipeline(ctx, req.(*UpdateLabelingPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineService_DeleteLabelingPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelingPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineServiceServer).DeleteLabelingPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/DeleteLabelingPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineServiceServer).DeleteLabelingPipeline(ctx, req.(*DeleteLabelingPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineService_PauseLabelingPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseLabelingPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineServiceServer).PauseLabelingPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/PauseLabelingPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineServiceServer).PauseLabelingPipeline(ctx, req.(*PauseLabelingPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineService_ResumeLabelingPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeLabelingPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineServiceServer).ResumeLabelingPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService/ResumeLabelingPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineServiceServer).ResumeLabelingPipeline(ctx, req.(*ResumeLabelingPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LabelingPipelineService_ServiceDesc is the grpc.ServiceDesc for LabelingPipelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LabelingPipelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.labelingpipeline.v1.LabelingPipelineService",
	HandlerType: (*LabelingPipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLabelingPipelines",
			Handler:    _LabelingPipelineService_ListLabelingPipelines_Handler,
		},
		{
			MethodName: "CreateLabelingPipeline",
			Handler:    _LabelingPipelineService_CreateLabelingPipeline_Handler,
		},
		{
			MethodName: "GetLabelingPipeline",
			Handler:    _LabelingPipelineService_GetLabelingPipeline_Handler,
		},
		{
			MethodName: "UpdateLabelingPipeline",
			Handler:    _LabelingPipelineService_UpdateLabelingPipeline_Handler,
		},
		{
			MethodName: "DeleteLabelingPipeline",
			Handler:    _LabelingPipelineService_DeleteLabelingPipeline_Handler,
		},
		{
			MethodName: "PauseLabelingPipeline",
			Handler:    _LabelingPipelineService_PauseLabelingPipeline_Handler,
		},
		{
			MethodName: "ResumeLabelingPipeline",
			Handler:    _LabelingPipelineService_ResumeLabelingPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/labelingpipeline/v1/labelingpipeline.proto",
}
