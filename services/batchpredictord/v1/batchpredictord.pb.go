// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.7
// source: github.com/metaprov/modeldapi/services/batchpredictord/v1/batchpredictord.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/inference/v1alpha1"
	v1alpha11 "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// A request to batch predictor
type BatchPredictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prediction     *v1alpha1.Prediction     `protobuf:"bytes,1,opt,name=prediction,proto3" json:"prediction,omitempty"`
	FromBucket     *v1alpha11.VirtualBucket `protobuf:"bytes,2,opt,name=fromBucket,proto3" json:"fromBucket,omitempty"`
	FromConnection *v1alpha11.Connection    `protobuf:"bytes,3,opt,name=fromConnection,proto3" json:"fromConnection,omitempty"`
	FromSecret     map[string][]byte        `protobuf:"bytes,4,rep,name=fromSecret,proto3" json:"fromSecret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TargetBucket   *v1alpha11.VirtualBucket `protobuf:"bytes,5,opt,name=targetBucket,proto3" json:"targetBucket,omitempty"`
	ToConnection   *v1alpha11.Connection    `protobuf:"bytes,6,opt,name=toConnection,proto3" json:"toConnection,omitempty"`
	ToSecret       map[string][]byte        `protobuf:"bytes,7,rep,name=toSecret,proto3" json:"toSecret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchPredictRequest) Reset() {
	*x = BatchPredictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPredictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPredictRequest) ProtoMessage() {}

func (x *BatchPredictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPredictRequest.ProtoReflect.Descriptor instead.
func (*BatchPredictRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDescGZIP(), []int{0}
}

func (x *BatchPredictRequest) GetPrediction() *v1alpha1.Prediction {
	if x != nil {
		return x.Prediction
	}
	return nil
}

func (x *BatchPredictRequest) GetFromBucket() *v1alpha11.VirtualBucket {
	if x != nil {
		return x.FromBucket
	}
	return nil
}

func (x *BatchPredictRequest) GetFromConnection() *v1alpha11.Connection {
	if x != nil {
		return x.FromConnection
	}
	return nil
}

func (x *BatchPredictRequest) GetFromSecret() map[string][]byte {
	if x != nil {
		return x.FromSecret
	}
	return nil
}

func (x *BatchPredictRequest) GetTargetBucket() *v1alpha11.VirtualBucket {
	if x != nil {
		return x.TargetBucket
	}
	return nil
}

func (x *BatchPredictRequest) GetToConnection() *v1alpha11.Connection {
	if x != nil {
		return x.ToConnection
	}
	return nil
}

func (x *BatchPredictRequest) GetToSecret() map[string][]byte {
	if x != nil {
		return x.ToSecret
	}
	return nil
}

type BatchPredictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchPredictResponse) Reset() {
	*x = BatchPredictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPredictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPredictResponse) ProtoMessage() {}

func (x *BatchPredictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPredictResponse.ProtoReflect.Descriptor instead.
func (*BatchPredictResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDescGZIP(), []int{1}
}

var File_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDesc = []byte{
	0x0a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x45, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x07, 0x0a, 0x13,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x69, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x5e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x68, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x65, 0x0a, 0x0c, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x08,
	0x74, 0x6f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x6f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x74, 0x6f,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x54, 0x6f, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xf9, 0x01, 0x0a, 0x05, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0xb1, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x64,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDescData = file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDesc
)

func file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDescData)
	})
	return file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDescData
}

var file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_goTypes = []interface{}{
	(*BatchPredictRequest)(nil),     // 0: github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest
	(*BatchPredictResponse)(nil),    // 1: github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictResponse
	nil,                             // 2: github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest.FromSecretEntry
	nil,                             // 3: github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest.ToSecretEntry
	(*v1alpha1.Prediction)(nil),     // 4: github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.Prediction
	(*v1alpha11.VirtualBucket)(nil), // 5: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucket
	(*v1alpha11.Connection)(nil),    // 6: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Connection
	(*empty.Empty)(nil),             // 7: google.protobuf.Empty
}
var file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_depIdxs = []int32{
	4, // 0: github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest.prediction:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.Prediction
	5, // 1: github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest.fromBucket:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucket
	6, // 2: github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest.fromConnection:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Connection
	2, // 3: github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest.fromSecret:type_name -> github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest.FromSecretEntry
	5, // 4: github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest.targetBucket:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucket
	6, // 5: github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest.toConnection:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Connection
	3, // 6: github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest.toSecret:type_name -> github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest.ToSecretEntry
	0, // 7: github.com.metaprov.modeldapi.services.batchpredictord.v1.Batch.BatchPredict:input_type -> github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictRequest
	7, // 8: github.com.metaprov.modeldapi.services.batchpredictord.v1.Batch.Shutdown:input_type -> google.protobuf.Empty
	1, // 9: github.com.metaprov.modeldapi.services.batchpredictord.v1.Batch.BatchPredict:output_type -> github.com.metaprov.modeldapi.services.batchpredictord.v1.BatchPredictResponse
	7, // 10: github.com.metaprov.modeldapi.services.batchpredictord.v1.Batch.Shutdown:output_type -> google.protobuf.Empty
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() {
	file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_init()
}
func file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_init() {
	if File_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPredictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPredictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_depIdxs,
		MessageInfos:      file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto = out.File
	file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_rawDesc = nil
	file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_goTypes = nil
	file_github_com_metaprov_modeldapi_services_batchpredictord_v1_batchpredictord_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BatchClient is the client API for Batch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BatchClient interface {
	// Ingest a new dataset to the store, the store creates a new layouts and set of keys
	// for the new dataset
	BatchPredict(ctx context.Context, in *BatchPredictRequest, opts ...grpc.CallOption) (*BatchPredictResponse, error)
	Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type batchClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchClient(cc grpc.ClientConnInterface) BatchClient {
	return &batchClient{cc}
}

func (c *batchClient) BatchPredict(ctx context.Context, in *BatchPredictRequest, opts ...grpc.CallOption) (*BatchPredictResponse, error) {
	out := new(BatchPredictResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.batchpredictord.v1.Batch/BatchPredict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchClient) Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.batchpredictord.v1.Batch/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchServer is the server API for Batch service.
type BatchServer interface {
	// Ingest a new dataset to the store, the store creates a new layouts and set of keys
	// for the new dataset
	BatchPredict(context.Context, *BatchPredictRequest) (*BatchPredictResponse, error)
	Shutdown(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedBatchServer can be embedded to have forward compatible implementations.
type UnimplementedBatchServer struct {
}

func (*UnimplementedBatchServer) BatchPredict(context.Context, *BatchPredictRequest) (*BatchPredictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchPredict not implemented")
}
func (*UnimplementedBatchServer) Shutdown(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}

func RegisterBatchServer(s *grpc.Server, srv BatchServer) {
	s.RegisterService(&_Batch_serviceDesc, srv)
}

func _Batch_BatchPredict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchPredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).BatchPredict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.batchpredictord.v1.Batch/BatchPredict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).BatchPredict(ctx, req.(*BatchPredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Batch_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.batchpredictord.v1.Batch/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServer).Shutdown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Batch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeldapi.services.batchpredictord.v1.Batch",
	HandlerType: (*BatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchPredict",
			Handler:    _Batch_BatchPredict_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Batch_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modeldapi/services/batchpredictord/v1/batchpredictord.proto",
}
