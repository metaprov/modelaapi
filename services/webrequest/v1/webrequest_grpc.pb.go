// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/webrequest/v1/webrequest.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebRequestServiceClient is the client API for WebRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebRequestServiceClient interface {
	ListWebRequests(ctx context.Context, in *ListWebRequestsRequest, opts ...grpc.CallOption) (*ListWebRequestsResponse, error)
	CreateWebRequest(ctx context.Context, in *CreateWebRequestRequest, opts ...grpc.CallOption) (*CreateWebRequestResponse, error)
	GetWebRequest(ctx context.Context, in *GetWebRequestRequest, opts ...grpc.CallOption) (*GetWebRequestResponse, error)
	UpdateWebRequest(ctx context.Context, in *UpdateWebRequestRequest, opts ...grpc.CallOption) (*UpdateWebRequestResponse, error)
	DeleteWebRequest(ctx context.Context, in *DeleteWebRequestRequest, opts ...grpc.CallOption) (*DeleteWebRequestResponse, error)
	RunWebRequest(ctx context.Context, in *RunWebRequestRequest, opts ...grpc.CallOption) (*RunWebRequestResponse, error)
}

type webRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebRequestServiceClient(cc grpc.ClientConnInterface) WebRequestServiceClient {
	return &webRequestServiceClient{cc}
}

func (c *webRequestServiceClient) ListWebRequests(ctx context.Context, in *ListWebRequestsRequest, opts ...grpc.CallOption) (*ListWebRequestsResponse, error) {
	out := new(ListWebRequestsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/ListWebRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRequestServiceClient) CreateWebRequest(ctx context.Context, in *CreateWebRequestRequest, opts ...grpc.CallOption) (*CreateWebRequestResponse, error) {
	out := new(CreateWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/CreateWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRequestServiceClient) GetWebRequest(ctx context.Context, in *GetWebRequestRequest, opts ...grpc.CallOption) (*GetWebRequestResponse, error) {
	out := new(GetWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/GetWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRequestServiceClient) UpdateWebRequest(ctx context.Context, in *UpdateWebRequestRequest, opts ...grpc.CallOption) (*UpdateWebRequestResponse, error) {
	out := new(UpdateWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/UpdateWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRequestServiceClient) DeleteWebRequest(ctx context.Context, in *DeleteWebRequestRequest, opts ...grpc.CallOption) (*DeleteWebRequestResponse, error) {
	out := new(DeleteWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/DeleteWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRequestServiceClient) RunWebRequest(ctx context.Context, in *RunWebRequestRequest, opts ...grpc.CallOption) (*RunWebRequestResponse, error) {
	out := new(RunWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/RunWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebRequestServiceServer is the server API for WebRequestService service.
// All implementations must embed UnimplementedWebRequestServiceServer
// for forward compatibility
type WebRequestServiceServer interface {
	ListWebRequests(context.Context, *ListWebRequestsRequest) (*ListWebRequestsResponse, error)
	CreateWebRequest(context.Context, *CreateWebRequestRequest) (*CreateWebRequestResponse, error)
	GetWebRequest(context.Context, *GetWebRequestRequest) (*GetWebRequestResponse, error)
	UpdateWebRequest(context.Context, *UpdateWebRequestRequest) (*UpdateWebRequestResponse, error)
	DeleteWebRequest(context.Context, *DeleteWebRequestRequest) (*DeleteWebRequestResponse, error)
	RunWebRequest(context.Context, *RunWebRequestRequest) (*RunWebRequestResponse, error)
	mustEmbedUnimplementedWebRequestServiceServer()
}

// UnimplementedWebRequestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebRequestServiceServer struct {
}

func (UnimplementedWebRequestServiceServer) ListWebRequests(context.Context, *ListWebRequestsRequest) (*ListWebRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebRequests not implemented")
}
func (UnimplementedWebRequestServiceServer) CreateWebRequest(context.Context, *CreateWebRequestRequest) (*CreateWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebRequest not implemented")
}
func (UnimplementedWebRequestServiceServer) GetWebRequest(context.Context, *GetWebRequestRequest) (*GetWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebRequest not implemented")
}
func (UnimplementedWebRequestServiceServer) UpdateWebRequest(context.Context, *UpdateWebRequestRequest) (*UpdateWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebRequest not implemented")
}
func (UnimplementedWebRequestServiceServer) DeleteWebRequest(context.Context, *DeleteWebRequestRequest) (*DeleteWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebRequest not implemented")
}
func (UnimplementedWebRequestServiceServer) RunWebRequest(context.Context, *RunWebRequestRequest) (*RunWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWebRequest not implemented")
}
func (UnimplementedWebRequestServiceServer) mustEmbedUnimplementedWebRequestServiceServer() {}

// UnsafeWebRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebRequestServiceServer will
// result in compilation errors.
type UnsafeWebRequestServiceServer interface {
	mustEmbedUnimplementedWebRequestServiceServer()
}

func RegisterWebRequestServiceServer(s grpc.ServiceRegistrar, srv WebRequestServiceServer) {
	s.RegisterService(&WebRequestService_ServiceDesc, srv)
}

func _WebRequestService_ListWebRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRequestServiceServer).ListWebRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/ListWebRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRequestServiceServer).ListWebRequests(ctx, req.(*ListWebRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRequestService_CreateWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRequestServiceServer).CreateWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/CreateWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRequestServiceServer).CreateWebRequest(ctx, req.(*CreateWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRequestService_GetWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRequestServiceServer).GetWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/GetWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRequestServiceServer).GetWebRequest(ctx, req.(*GetWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRequestService_UpdateWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRequestServiceServer).UpdateWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/UpdateWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRequestServiceServer).UpdateWebRequest(ctx, req.(*UpdateWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRequestService_DeleteWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRequestServiceServer).DeleteWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/DeleteWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRequestServiceServer).DeleteWebRequest(ctx, req.(*DeleteWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRequestService_RunWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRequestServiceServer).RunWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService/RunWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRequestServiceServer).RunWebRequest(ctx, req.(*RunWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebRequestService_ServiceDesc is the grpc.ServiceDesc for WebRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.webrequest.v1.WebRequestService",
	HandlerType: (*WebRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWebRequests",
			Handler:    _WebRequestService_ListWebRequests_Handler,
		},
		{
			MethodName: "CreateWebRequest",
			Handler:    _WebRequestService_CreateWebRequest_Handler,
		},
		{
			MethodName: "GetWebRequest",
			Handler:    _WebRequestService_GetWebRequest_Handler,
		},
		{
			MethodName: "UpdateWebRequest",
			Handler:    _WebRequestService_UpdateWebRequest_Handler,
		},
		{
			MethodName: "DeleteWebRequest",
			Handler:    _WebRequestService_DeleteWebRequest_Handler,
		},
		{
			MethodName: "RunWebRequest",
			Handler:    _WebRequestService_RunWebRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/webrequest/v1/webrequest.proto",
}
