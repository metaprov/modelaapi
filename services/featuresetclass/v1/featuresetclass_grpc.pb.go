// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/featuresetclass/v1/featuresetclass.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeaturesetClassServiceClient is the client API for FeaturesetClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeaturesetClassServiceClient interface {
	ListFeaturesetClasss(ctx context.Context, in *ListFeaturesetClassRequest, opts ...grpc.CallOption) (*ListFeaturesetClassResponse, error)
	CreateFeaturesetClass(ctx context.Context, in *CreateFeaturesetClassRequest, opts ...grpc.CallOption) (*CreateFeaturesetClassResponse, error)
	GetFeaturesetClass(ctx context.Context, in *GetFeaturesetClassRequest, opts ...grpc.CallOption) (*GetFeaturesetClassResponse, error)
	UpdateFeaturesetClass(ctx context.Context, in *UpdateFeaturesetClassRequest, opts ...grpc.CallOption) (*UpdateFeaturesetClassResponse, error)
	DeleteFeaturesetClass(ctx context.Context, in *DeleteFeaturesetClassRequest, opts ...grpc.CallOption) (*DeleteFeaturesetClassResponse, error)
	PauseFeaturesetClass(ctx context.Context, in *PauseFeaturesetClassRequest, opts ...grpc.CallOption) (*PauseFeaturesetClassResponse, error)
	ResumeFeaturesetClass(ctx context.Context, in *ResumeFeaturesetClassRequest, opts ...grpc.CallOption) (*ResumeFeaturesetClassResponse, error)
}

type featuresetClassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeaturesetClassServiceClient(cc grpc.ClientConnInterface) FeaturesetClassServiceClient {
	return &featuresetClassServiceClient{cc}
}

func (c *featuresetClassServiceClient) ListFeaturesetClasss(ctx context.Context, in *ListFeaturesetClassRequest, opts ...grpc.CallOption) (*ListFeaturesetClassResponse, error) {
	out := new(ListFeaturesetClassResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/ListFeaturesetClasss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresetClassServiceClient) CreateFeaturesetClass(ctx context.Context, in *CreateFeaturesetClassRequest, opts ...grpc.CallOption) (*CreateFeaturesetClassResponse, error) {
	out := new(CreateFeaturesetClassResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/CreateFeaturesetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresetClassServiceClient) GetFeaturesetClass(ctx context.Context, in *GetFeaturesetClassRequest, opts ...grpc.CallOption) (*GetFeaturesetClassResponse, error) {
	out := new(GetFeaturesetClassResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/GetFeaturesetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresetClassServiceClient) UpdateFeaturesetClass(ctx context.Context, in *UpdateFeaturesetClassRequest, opts ...grpc.CallOption) (*UpdateFeaturesetClassResponse, error) {
	out := new(UpdateFeaturesetClassResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/UpdateFeaturesetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresetClassServiceClient) DeleteFeaturesetClass(ctx context.Context, in *DeleteFeaturesetClassRequest, opts ...grpc.CallOption) (*DeleteFeaturesetClassResponse, error) {
	out := new(DeleteFeaturesetClassResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/DeleteFeaturesetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresetClassServiceClient) PauseFeaturesetClass(ctx context.Context, in *PauseFeaturesetClassRequest, opts ...grpc.CallOption) (*PauseFeaturesetClassResponse, error) {
	out := new(PauseFeaturesetClassResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/PauseFeaturesetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresetClassServiceClient) ResumeFeaturesetClass(ctx context.Context, in *ResumeFeaturesetClassRequest, opts ...grpc.CallOption) (*ResumeFeaturesetClassResponse, error) {
	out := new(ResumeFeaturesetClassResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/ResumeFeaturesetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeaturesetClassServiceServer is the server API for FeaturesetClassService service.
// All implementations must embed UnimplementedFeaturesetClassServiceServer
// for forward compatibility
type FeaturesetClassServiceServer interface {
	ListFeaturesetClasss(context.Context, *ListFeaturesetClassRequest) (*ListFeaturesetClassResponse, error)
	CreateFeaturesetClass(context.Context, *CreateFeaturesetClassRequest) (*CreateFeaturesetClassResponse, error)
	GetFeaturesetClass(context.Context, *GetFeaturesetClassRequest) (*GetFeaturesetClassResponse, error)
	UpdateFeaturesetClass(context.Context, *UpdateFeaturesetClassRequest) (*UpdateFeaturesetClassResponse, error)
	DeleteFeaturesetClass(context.Context, *DeleteFeaturesetClassRequest) (*DeleteFeaturesetClassResponse, error)
	PauseFeaturesetClass(context.Context, *PauseFeaturesetClassRequest) (*PauseFeaturesetClassResponse, error)
	ResumeFeaturesetClass(context.Context, *ResumeFeaturesetClassRequest) (*ResumeFeaturesetClassResponse, error)
	mustEmbedUnimplementedFeaturesetClassServiceServer()
}

// UnimplementedFeaturesetClassServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeaturesetClassServiceServer struct {
}

func (UnimplementedFeaturesetClassServiceServer) ListFeaturesetClasss(context.Context, *ListFeaturesetClassRequest) (*ListFeaturesetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeaturesetClasss not implemented")
}
func (UnimplementedFeaturesetClassServiceServer) CreateFeaturesetClass(context.Context, *CreateFeaturesetClassRequest) (*CreateFeaturesetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeaturesetClass not implemented")
}
func (UnimplementedFeaturesetClassServiceServer) GetFeaturesetClass(context.Context, *GetFeaturesetClassRequest) (*GetFeaturesetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeaturesetClass not implemented")
}
func (UnimplementedFeaturesetClassServiceServer) UpdateFeaturesetClass(context.Context, *UpdateFeaturesetClassRequest) (*UpdateFeaturesetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeaturesetClass not implemented")
}
func (UnimplementedFeaturesetClassServiceServer) DeleteFeaturesetClass(context.Context, *DeleteFeaturesetClassRequest) (*DeleteFeaturesetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeaturesetClass not implemented")
}
func (UnimplementedFeaturesetClassServiceServer) PauseFeaturesetClass(context.Context, *PauseFeaturesetClassRequest) (*PauseFeaturesetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseFeaturesetClass not implemented")
}
func (UnimplementedFeaturesetClassServiceServer) ResumeFeaturesetClass(context.Context, *ResumeFeaturesetClassRequest) (*ResumeFeaturesetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeFeaturesetClass not implemented")
}
func (UnimplementedFeaturesetClassServiceServer) mustEmbedUnimplementedFeaturesetClassServiceServer() {
}

// UnsafeFeaturesetClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeaturesetClassServiceServer will
// result in compilation errors.
type UnsafeFeaturesetClassServiceServer interface {
	mustEmbedUnimplementedFeaturesetClassServiceServer()
}

func RegisterFeaturesetClassServiceServer(s grpc.ServiceRegistrar, srv FeaturesetClassServiceServer) {
	s.RegisterService(&FeaturesetClassService_ServiceDesc, srv)
}

func _FeaturesetClassService_ListFeaturesetClasss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeaturesetClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetClassServiceServer).ListFeaturesetClasss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/ListFeaturesetClasss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetClassServiceServer).ListFeaturesetClasss(ctx, req.(*ListFeaturesetClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesetClassService_CreateFeaturesetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeaturesetClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetClassServiceServer).CreateFeaturesetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/CreateFeaturesetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetClassServiceServer).CreateFeaturesetClass(ctx, req.(*CreateFeaturesetClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesetClassService_GetFeaturesetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeaturesetClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetClassServiceServer).GetFeaturesetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/GetFeaturesetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetClassServiceServer).GetFeaturesetClass(ctx, req.(*GetFeaturesetClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesetClassService_UpdateFeaturesetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeaturesetClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetClassServiceServer).UpdateFeaturesetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/UpdateFeaturesetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetClassServiceServer).UpdateFeaturesetClass(ctx, req.(*UpdateFeaturesetClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesetClassService_DeleteFeaturesetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeaturesetClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetClassServiceServer).DeleteFeaturesetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/DeleteFeaturesetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetClassServiceServer).DeleteFeaturesetClass(ctx, req.(*DeleteFeaturesetClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesetClassService_PauseFeaturesetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseFeaturesetClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetClassServiceServer).PauseFeaturesetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/PauseFeaturesetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetClassServiceServer).PauseFeaturesetClass(ctx, req.(*PauseFeaturesetClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesetClassService_ResumeFeaturesetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeFeaturesetClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetClassServiceServer).ResumeFeaturesetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService/ResumeFeaturesetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetClassServiceServer).ResumeFeaturesetClass(ctx, req.(*ResumeFeaturesetClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeaturesetClassService_ServiceDesc is the grpc.ServiceDesc for FeaturesetClassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeaturesetClassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.featuresetclass.v1.FeaturesetClassService",
	HandlerType: (*FeaturesetClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFeaturesetClasss",
			Handler:    _FeaturesetClassService_ListFeaturesetClasss_Handler,
		},
		{
			MethodName: "CreateFeaturesetClass",
			Handler:    _FeaturesetClassService_CreateFeaturesetClass_Handler,
		},
		{
			MethodName: "GetFeaturesetClass",
			Handler:    _FeaturesetClassService_GetFeaturesetClass_Handler,
		},
		{
			MethodName: "UpdateFeaturesetClass",
			Handler:    _FeaturesetClassService_UpdateFeaturesetClass_Handler,
		},
		{
			MethodName: "DeleteFeaturesetClass",
			Handler:    _FeaturesetClassService_DeleteFeaturesetClass_Handler,
		},
		{
			MethodName: "PauseFeaturesetClass",
			Handler:    _FeaturesetClassService_PauseFeaturesetClass_Handler,
		},
		{
			MethodName: "ResumeFeaturesetClass",
			Handler:    _FeaturesetClassService_ResumeFeaturesetClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/featuresetclass/v1/featuresetclass.proto",
}
