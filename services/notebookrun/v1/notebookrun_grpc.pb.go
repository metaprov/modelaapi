// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/notebookrun/v1/notebookrun.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotebookRunServiceClient is the client API for NotebookRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotebookRunServiceClient interface {
	ListNotebookRuns(ctx context.Context, in *ListNotebookRunsRequest, opts ...grpc.CallOption) (*ListNotebookRunsResponse, error)
	CreateNotebookRun(ctx context.Context, in *CreateNotebookRunRequest, opts ...grpc.CallOption) (*CreateNotebookRunResponse, error)
	GetNotebookRun(ctx context.Context, in *GetNotebookRunRequest, opts ...grpc.CallOption) (*GetNotebookRunResponse, error)
	UpdateNotebookRun(ctx context.Context, in *UpdateNotebookRunRequest, opts ...grpc.CallOption) (*UpdateNotebookRunResponse, error)
	DeleteNotebookRun(ctx context.Context, in *DeleteNotebookRunRequest, opts ...grpc.CallOption) (*DeleteNotebookRunResponse, error)
}

type notebookRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotebookRunServiceClient(cc grpc.ClientConnInterface) NotebookRunServiceClient {
	return &notebookRunServiceClient{cc}
}

func (c *notebookRunServiceClient) ListNotebookRuns(ctx context.Context, in *ListNotebookRunsRequest, opts ...grpc.CallOption) (*ListNotebookRunsResponse, error) {
	out := new(ListNotebookRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.notebookrun.v1.NotebookRunService/ListNotebookRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notebookRunServiceClient) CreateNotebookRun(ctx context.Context, in *CreateNotebookRunRequest, opts ...grpc.CallOption) (*CreateNotebookRunResponse, error) {
	out := new(CreateNotebookRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.notebookrun.v1.NotebookRunService/CreateNotebookRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notebookRunServiceClient) GetNotebookRun(ctx context.Context, in *GetNotebookRunRequest, opts ...grpc.CallOption) (*GetNotebookRunResponse, error) {
	out := new(GetNotebookRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.notebookrun.v1.NotebookRunService/GetNotebookRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notebookRunServiceClient) UpdateNotebookRun(ctx context.Context, in *UpdateNotebookRunRequest, opts ...grpc.CallOption) (*UpdateNotebookRunResponse, error) {
	out := new(UpdateNotebookRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.notebookrun.v1.NotebookRunService/UpdateNotebookRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notebookRunServiceClient) DeleteNotebookRun(ctx context.Context, in *DeleteNotebookRunRequest, opts ...grpc.CallOption) (*DeleteNotebookRunResponse, error) {
	out := new(DeleteNotebookRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.notebookrun.v1.NotebookRunService/DeleteNotebookRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotebookRunServiceServer is the server API for NotebookRunService service.
// All implementations must embed UnimplementedNotebookRunServiceServer
// for forward compatibility
type NotebookRunServiceServer interface {
	ListNotebookRuns(context.Context, *ListNotebookRunsRequest) (*ListNotebookRunsResponse, error)
	CreateNotebookRun(context.Context, *CreateNotebookRunRequest) (*CreateNotebookRunResponse, error)
	GetNotebookRun(context.Context, *GetNotebookRunRequest) (*GetNotebookRunResponse, error)
	UpdateNotebookRun(context.Context, *UpdateNotebookRunRequest) (*UpdateNotebookRunResponse, error)
	DeleteNotebookRun(context.Context, *DeleteNotebookRunRequest) (*DeleteNotebookRunResponse, error)
	mustEmbedUnimplementedNotebookRunServiceServer()
}

// UnimplementedNotebookRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotebookRunServiceServer struct {
}

func (UnimplementedNotebookRunServiceServer) ListNotebookRuns(context.Context, *ListNotebookRunsRequest) (*ListNotebookRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotebookRuns not implemented")
}
func (UnimplementedNotebookRunServiceServer) CreateNotebookRun(context.Context, *CreateNotebookRunRequest) (*CreateNotebookRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotebookRun not implemented")
}
func (UnimplementedNotebookRunServiceServer) GetNotebookRun(context.Context, *GetNotebookRunRequest) (*GetNotebookRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotebookRun not implemented")
}
func (UnimplementedNotebookRunServiceServer) UpdateNotebookRun(context.Context, *UpdateNotebookRunRequest) (*UpdateNotebookRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotebookRun not implemented")
}
func (UnimplementedNotebookRunServiceServer) DeleteNotebookRun(context.Context, *DeleteNotebookRunRequest) (*DeleteNotebookRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotebookRun not implemented")
}
func (UnimplementedNotebookRunServiceServer) mustEmbedUnimplementedNotebookRunServiceServer() {}

// UnsafeNotebookRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotebookRunServiceServer will
// result in compilation errors.
type UnsafeNotebookRunServiceServer interface {
	mustEmbedUnimplementedNotebookRunServiceServer()
}

func RegisterNotebookRunServiceServer(s grpc.ServiceRegistrar, srv NotebookRunServiceServer) {
	s.RegisterService(&NotebookRunService_ServiceDesc, srv)
}

func _NotebookRunService_ListNotebookRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotebookRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotebookRunServiceServer).ListNotebookRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.notebookrun.v1.NotebookRunService/ListNotebookRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotebookRunServiceServer).ListNotebookRuns(ctx, req.(*ListNotebookRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotebookRunService_CreateNotebookRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotebookRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotebookRunServiceServer).CreateNotebookRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.notebookrun.v1.NotebookRunService/CreateNotebookRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotebookRunServiceServer).CreateNotebookRun(ctx, req.(*CreateNotebookRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotebookRunService_GetNotebookRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotebookRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotebookRunServiceServer).GetNotebookRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.notebookrun.v1.NotebookRunService/GetNotebookRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotebookRunServiceServer).GetNotebookRun(ctx, req.(*GetNotebookRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotebookRunService_UpdateNotebookRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotebookRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotebookRunServiceServer).UpdateNotebookRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.notebookrun.v1.NotebookRunService/UpdateNotebookRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotebookRunServiceServer).UpdateNotebookRun(ctx, req.(*UpdateNotebookRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotebookRunService_DeleteNotebookRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotebookRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotebookRunServiceServer).DeleteNotebookRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.notebookrun.v1.NotebookRunService/DeleteNotebookRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotebookRunServiceServer).DeleteNotebookRun(ctx, req.(*DeleteNotebookRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotebookRunService_ServiceDesc is the grpc.ServiceDesc for NotebookRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotebookRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.notebookrun.v1.NotebookRunService",
	HandlerType: (*NotebookRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNotebookRuns",
			Handler:    _NotebookRunService_ListNotebookRuns_Handler,
		},
		{
			MethodName: "CreateNotebookRun",
			Handler:    _NotebookRunService_CreateNotebookRun_Handler,
		},
		{
			MethodName: "GetNotebookRun",
			Handler:    _NotebookRunService_GetNotebookRun_Handler,
		},
		{
			MethodName: "UpdateNotebookRun",
			Handler:    _NotebookRunService_UpdateNotebookRun_Handler,
		},
		{
			MethodName: "DeleteNotebookRun",
			Handler:    _NotebookRunService_DeleteNotebookRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/notebookrun/v1/notebookrun.proto",
}
