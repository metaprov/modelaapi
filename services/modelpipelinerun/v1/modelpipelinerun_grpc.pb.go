// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/modelpipelinerun/v1/modelpipelinerun.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelPipelineRunServiceClient is the client API for ModelPipelineRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelPipelineRunServiceClient interface {
	ListModelPipelineRuns(ctx context.Context, in *ListModelPipelineRunsRequest, opts ...grpc.CallOption) (*ListModelPipelineRunsResponse, error)
	CreateModelPipelineRun(ctx context.Context, in *CreateModelPipelineRunRequest, opts ...grpc.CallOption) (*CreateModelPipelineRunResponse, error)
	GetModelPipelineRun(ctx context.Context, in *GetModelPipelineRunRequest, opts ...grpc.CallOption) (*GetModelPipelineRunResponse, error)
	UpdateModelPipelineRun(ctx context.Context, in *UpdateModelPipelineRunRequest, opts ...grpc.CallOption) (*UpdateModelPipelineRunResponse, error)
	DeleteModelPipelineRun(ctx context.Context, in *DeleteModelPipelineRunRequest, opts ...grpc.CallOption) (*DeleteModelPipelineRunResponse, error)
	ApproveModelPipelineRun(ctx context.Context, in *ApproveModelPipelineRunRequest, opts ...grpc.CallOption) (*ApproveModelPipelineRunResponse, error)
	DenyModelPipelineRun(ctx context.Context, in *DenyModelPipelineRunRequest, opts ...grpc.CallOption) (*DenyModelPipelineRunResponse, error)
	AbortModelPipelineRun(ctx context.Context, in *AbortModelPipelineRunRequest, opts ...grpc.CallOption) (*AbortModelPipelineRunResponse, error)
	PauseModelPipelineRun(ctx context.Context, in *PauseModelPipelineRunRequest, opts ...grpc.CallOption) (*PauseModelPipelineRunResponse, error)
	ResumeModelPipelineRun(ctx context.Context, in *ResumeModelPipelineRunRequest, opts ...grpc.CallOption) (*ResumeModelPipelineRunResponse, error)
}

type modelPipelineRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelPipelineRunServiceClient(cc grpc.ClientConnInterface) ModelPipelineRunServiceClient {
	return &modelPipelineRunServiceClient{cc}
}

func (c *modelPipelineRunServiceClient) ListModelPipelineRuns(ctx context.Context, in *ListModelPipelineRunsRequest, opts ...grpc.CallOption) (*ListModelPipelineRunsResponse, error) {
	out := new(ListModelPipelineRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/ListModelPipelineRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineRunServiceClient) CreateModelPipelineRun(ctx context.Context, in *CreateModelPipelineRunRequest, opts ...grpc.CallOption) (*CreateModelPipelineRunResponse, error) {
	out := new(CreateModelPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/CreateModelPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineRunServiceClient) GetModelPipelineRun(ctx context.Context, in *GetModelPipelineRunRequest, opts ...grpc.CallOption) (*GetModelPipelineRunResponse, error) {
	out := new(GetModelPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/GetModelPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineRunServiceClient) UpdateModelPipelineRun(ctx context.Context, in *UpdateModelPipelineRunRequest, opts ...grpc.CallOption) (*UpdateModelPipelineRunResponse, error) {
	out := new(UpdateModelPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/UpdateModelPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineRunServiceClient) DeleteModelPipelineRun(ctx context.Context, in *DeleteModelPipelineRunRequest, opts ...grpc.CallOption) (*DeleteModelPipelineRunResponse, error) {
	out := new(DeleteModelPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/DeleteModelPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineRunServiceClient) ApproveModelPipelineRun(ctx context.Context, in *ApproveModelPipelineRunRequest, opts ...grpc.CallOption) (*ApproveModelPipelineRunResponse, error) {
	out := new(ApproveModelPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/ApproveModelPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineRunServiceClient) DenyModelPipelineRun(ctx context.Context, in *DenyModelPipelineRunRequest, opts ...grpc.CallOption) (*DenyModelPipelineRunResponse, error) {
	out := new(DenyModelPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/DenyModelPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineRunServiceClient) AbortModelPipelineRun(ctx context.Context, in *AbortModelPipelineRunRequest, opts ...grpc.CallOption) (*AbortModelPipelineRunResponse, error) {
	out := new(AbortModelPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/AbortModelPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineRunServiceClient) PauseModelPipelineRun(ctx context.Context, in *PauseModelPipelineRunRequest, opts ...grpc.CallOption) (*PauseModelPipelineRunResponse, error) {
	out := new(PauseModelPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/PauseModelPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineRunServiceClient) ResumeModelPipelineRun(ctx context.Context, in *ResumeModelPipelineRunRequest, opts ...grpc.CallOption) (*ResumeModelPipelineRunResponse, error) {
	out := new(ResumeModelPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/ResumeModelPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelPipelineRunServiceServer is the server API for ModelPipelineRunService service.
// All implementations must embed UnimplementedModelPipelineRunServiceServer
// for forward compatibility
type ModelPipelineRunServiceServer interface {
	ListModelPipelineRuns(context.Context, *ListModelPipelineRunsRequest) (*ListModelPipelineRunsResponse, error)
	CreateModelPipelineRun(context.Context, *CreateModelPipelineRunRequest) (*CreateModelPipelineRunResponse, error)
	GetModelPipelineRun(context.Context, *GetModelPipelineRunRequest) (*GetModelPipelineRunResponse, error)
	UpdateModelPipelineRun(context.Context, *UpdateModelPipelineRunRequest) (*UpdateModelPipelineRunResponse, error)
	DeleteModelPipelineRun(context.Context, *DeleteModelPipelineRunRequest) (*DeleteModelPipelineRunResponse, error)
	ApproveModelPipelineRun(context.Context, *ApproveModelPipelineRunRequest) (*ApproveModelPipelineRunResponse, error)
	DenyModelPipelineRun(context.Context, *DenyModelPipelineRunRequest) (*DenyModelPipelineRunResponse, error)
	AbortModelPipelineRun(context.Context, *AbortModelPipelineRunRequest) (*AbortModelPipelineRunResponse, error)
	PauseModelPipelineRun(context.Context, *PauseModelPipelineRunRequest) (*PauseModelPipelineRunResponse, error)
	ResumeModelPipelineRun(context.Context, *ResumeModelPipelineRunRequest) (*ResumeModelPipelineRunResponse, error)
	mustEmbedUnimplementedModelPipelineRunServiceServer()
}

// UnimplementedModelPipelineRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelPipelineRunServiceServer struct {
}

func (UnimplementedModelPipelineRunServiceServer) ListModelPipelineRuns(context.Context, *ListModelPipelineRunsRequest) (*ListModelPipelineRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelPipelineRuns not implemented")
}
func (UnimplementedModelPipelineRunServiceServer) CreateModelPipelineRun(context.Context, *CreateModelPipelineRunRequest) (*CreateModelPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelPipelineRun not implemented")
}
func (UnimplementedModelPipelineRunServiceServer) GetModelPipelineRun(context.Context, *GetModelPipelineRunRequest) (*GetModelPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelPipelineRun not implemented")
}
func (UnimplementedModelPipelineRunServiceServer) UpdateModelPipelineRun(context.Context, *UpdateModelPipelineRunRequest) (*UpdateModelPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelPipelineRun not implemented")
}
func (UnimplementedModelPipelineRunServiceServer) DeleteModelPipelineRun(context.Context, *DeleteModelPipelineRunRequest) (*DeleteModelPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelPipelineRun not implemented")
}
func (UnimplementedModelPipelineRunServiceServer) ApproveModelPipelineRun(context.Context, *ApproveModelPipelineRunRequest) (*ApproveModelPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveModelPipelineRun not implemented")
}
func (UnimplementedModelPipelineRunServiceServer) DenyModelPipelineRun(context.Context, *DenyModelPipelineRunRequest) (*DenyModelPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyModelPipelineRun not implemented")
}
func (UnimplementedModelPipelineRunServiceServer) AbortModelPipelineRun(context.Context, *AbortModelPipelineRunRequest) (*AbortModelPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortModelPipelineRun not implemented")
}
func (UnimplementedModelPipelineRunServiceServer) PauseModelPipelineRun(context.Context, *PauseModelPipelineRunRequest) (*PauseModelPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseModelPipelineRun not implemented")
}
func (UnimplementedModelPipelineRunServiceServer) ResumeModelPipelineRun(context.Context, *ResumeModelPipelineRunRequest) (*ResumeModelPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeModelPipelineRun not implemented")
}
func (UnimplementedModelPipelineRunServiceServer) mustEmbedUnimplementedModelPipelineRunServiceServer() {
}

// UnsafeModelPipelineRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelPipelineRunServiceServer will
// result in compilation errors.
type UnsafeModelPipelineRunServiceServer interface {
	mustEmbedUnimplementedModelPipelineRunServiceServer()
}

func RegisterModelPipelineRunServiceServer(s grpc.ServiceRegistrar, srv ModelPipelineRunServiceServer) {
	s.RegisterService(&ModelPipelineRunService_ServiceDesc, srv)
}

func _ModelPipelineRunService_ListModelPipelineRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelPipelineRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineRunServiceServer).ListModelPipelineRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/ListModelPipelineRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineRunServiceServer).ListModelPipelineRuns(ctx, req.(*ListModelPipelineRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineRunService_CreateModelPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineRunServiceServer).CreateModelPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/CreateModelPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineRunServiceServer).CreateModelPipelineRun(ctx, req.(*CreateModelPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineRunService_GetModelPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineRunServiceServer).GetModelPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/GetModelPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineRunServiceServer).GetModelPipelineRun(ctx, req.(*GetModelPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineRunService_UpdateModelPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineRunServiceServer).UpdateModelPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/UpdateModelPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineRunServiceServer).UpdateModelPipelineRun(ctx, req.(*UpdateModelPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineRunService_DeleteModelPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineRunServiceServer).DeleteModelPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/DeleteModelPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineRunServiceServer).DeleteModelPipelineRun(ctx, req.(*DeleteModelPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineRunService_ApproveModelPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveModelPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineRunServiceServer).ApproveModelPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/ApproveModelPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineRunServiceServer).ApproveModelPipelineRun(ctx, req.(*ApproveModelPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineRunService_DenyModelPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenyModelPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineRunServiceServer).DenyModelPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/DenyModelPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineRunServiceServer).DenyModelPipelineRun(ctx, req.(*DenyModelPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineRunService_AbortModelPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortModelPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineRunServiceServer).AbortModelPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/AbortModelPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineRunServiceServer).AbortModelPipelineRun(ctx, req.(*AbortModelPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineRunService_PauseModelPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseModelPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineRunServiceServer).PauseModelPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/PauseModelPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineRunServiceServer).PauseModelPipelineRun(ctx, req.(*PauseModelPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineRunService_ResumeModelPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeModelPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineRunServiceServer).ResumeModelPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService/ResumeModelPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineRunServiceServer).ResumeModelPipelineRun(ctx, req.(*ResumeModelPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelPipelineRunService_ServiceDesc is the grpc.ServiceDesc for ModelPipelineRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelPipelineRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.modelpipelinerun.v1.ModelPipelineRunService",
	HandlerType: (*ModelPipelineRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListModelPipelineRuns",
			Handler:    _ModelPipelineRunService_ListModelPipelineRuns_Handler,
		},
		{
			MethodName: "CreateModelPipelineRun",
			Handler:    _ModelPipelineRunService_CreateModelPipelineRun_Handler,
		},
		{
			MethodName: "GetModelPipelineRun",
			Handler:    _ModelPipelineRunService_GetModelPipelineRun_Handler,
		},
		{
			MethodName: "UpdateModelPipelineRun",
			Handler:    _ModelPipelineRunService_UpdateModelPipelineRun_Handler,
		},
		{
			MethodName: "DeleteModelPipelineRun",
			Handler:    _ModelPipelineRunService_DeleteModelPipelineRun_Handler,
		},
		{
			MethodName: "ApproveModelPipelineRun",
			Handler:    _ModelPipelineRunService_ApproveModelPipelineRun_Handler,
		},
		{
			MethodName: "DenyModelPipelineRun",
			Handler:    _ModelPipelineRunService_DenyModelPipelineRun_Handler,
		},
		{
			MethodName: "AbortModelPipelineRun",
			Handler:    _ModelPipelineRunService_AbortModelPipelineRun_Handler,
		},
		{
			MethodName: "PauseModelPipelineRun",
			Handler:    _ModelPipelineRunService_PauseModelPipelineRun_Handler,
		},
		{
			MethodName: "ResumeModelPipelineRun",
			Handler:    _ModelPipelineRunService_ResumeModelPipelineRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/modelpipelinerun/v1/modelpipelinerun.proto",
}
