syntax = "proto3";

option go_package = "github.com/metaprov/modelaapi/services/modelpipelinerun/v1";
package github.com.metaprov.modelaapi.services.modelpipelinerun.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1/generated.proto";


message ListModelPipelineRunsRequest {
    string namespace = 1;
    map<string,string> labels =2;
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;
}

message ListModelPipelineRunsResponse {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelPipelineRunList items = 1;
}

message ModelPipelineRunResponse {}

message CreateModelPipelineRunRequest {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelPipelineRun item = 1;
}

message CreateModelPipelineRunResponse {

}

message UpdateModelPipelineRunRequest {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelPipelineRun item = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateModelPipelineRunResponse {

}

message GetModelPipelineRunRequest {
    string namespace = 1;
    string name      = 2;
}


message GetModelPipelineRunResponse {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelPipelineRun item = 1;
    string yaml = 2;
}



message DeleteModelPipelineRunRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteModelPipelineRunResponse {

}

message ApproveModelPipelineRunRequest {
    string namespace = 1;
    string name      = 2;
    string stage     = 3;
    string account   = 4;

}

message ApproveModelPipelineRunResponse {

}


message DenyModelPipelineRunRequest {
    string namespace = 1;
    string name      = 2;
    string stage     = 3;
    string account   = 4;

}

message DenyModelPipelineRunResponse {

}

message PauseModelPipelineRunResponse {
}

message PauseModelPipelineRunRequest {
    string namespace = 1;
    string name      = 2;
}


message ResumeModelPipelineRunResponse {
}

message ResumeModelPipelineRunRequest {
    string namespace = 1;
    string name      = 2;
}

message AbortModelPipelineRunResponse {
}

message AbortModelPipelineRunRequest {
    string namespace = 1;
    string name      = 2;
}

service ModelPipelineRunService {
    rpc ListModelPipelineRuns(ListModelPipelineRunsRequest) returns (ListModelPipelineRunsResponse) {
        option (google.api.http).get = "/v1/modelpipelineruns/{namespace}";
    }
    rpc CreateModelPipelineRun(CreateModelPipelineRunRequest) returns (CreateModelPipelineRunResponse) {
        option (google.api.http) = {
			post: "/v1/modelpipelineruns"
			body: "*"
		};
    }
    rpc GetModelPipelineRun(GetModelPipelineRunRequest) returns (GetModelPipelineRunResponse) {
        option (google.api.http).get = "/v1/modelpipelineruns/{namespace}/{name}";
    }
    rpc UpdateModelPipelineRun(UpdateModelPipelineRunRequest) returns (UpdateModelPipelineRunResponse) {
        option (google.api.http) = {
			put: "/v1/modelpipelineruns/{item.metadata.namespace}/{item.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteModelPipelineRun(DeleteModelPipelineRunRequest) returns (DeleteModelPipelineRunResponse) {
        option (google.api.http).delete = "/v1/modelpipelineruns/{namespace}/{name}";
    }

    rpc ApproveModelPipelineRun(ApproveModelPipelineRunRequest) returns (ApproveModelPipelineRunResponse) {
        option (google.api.http).delete = "/v1/modelpipelineruns/{namespace}/{name}:approve";
    }

    rpc DenyModelPipelineRun(DenyModelPipelineRunRequest) returns (DenyModelPipelineRunResponse) {
        option (google.api.http).delete = "/v1/modelpipelineruns/{namespace}/{name}:approve";
    }

    rpc AbortModelPipelineRun(AbortModelPipelineRunRequest) returns (AbortModelPipelineRunResponse) {
        option (google.api.http).post = "/v1/modelpipelineruns/{namespace}/{name}:abort";
    }
 
    rpc PauseModelPipelineRun(PauseModelPipelineRunRequest) returns (PauseModelPipelineRunResponse) {
        option (google.api.http).post = "/v1/modelpipelineruns/{namespace}/{name}:pause";
    }

    rpc ResumeModelPipelineRun(ResumeModelPipelineRunRequest) returns (ResumeModelPipelineRunResponse) {
        option (google.api.http).post = "/v1/modelpipelineruns/{namespace}/{name}:resume";
    }

}