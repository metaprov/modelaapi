// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: services/objectstored/objectstored.proto

package objectstored

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IngestResponse struct {
	LiveKey              string   `protobuf:"bytes,1,opt,name=liveKey,proto3" json:"liveKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IngestResponse) Reset()         { *m = IngestResponse{} }
func (m *IngestResponse) String() string { return proto.CompactTextString(m) }
func (*IngestResponse) ProtoMessage()    {}
func (*IngestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_08f18543bdf52fb8, []int{0}
}
func (m *IngestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngestResponse.Unmarshal(m, b)
}
func (m *IngestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngestResponse.Marshal(b, m, deterministic)
}
func (m *IngestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngestResponse.Merge(m, src)
}
func (m *IngestResponse) XXX_Size() int {
	return xxx_messageInfo_IngestResponse.Size(m)
}
func (m *IngestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IngestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IngestResponse proto.InternalMessageInfo

func (m *IngestResponse) GetLiveKey() string {
	if m != nil {
		return m.LiveKey
	}
	return ""
}

type ObjectResponse struct {
	ArchivePath          string   `protobuf:"bytes,1,opt,name=archivePath,proto3" json:"archivePath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectResponse) Reset()         { *m = ObjectResponse{} }
func (m *ObjectResponse) String() string { return proto.CompactTextString(m) }
func (*ObjectResponse) ProtoMessage()    {}
func (*ObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_08f18543bdf52fb8, []int{1}
}
func (m *ObjectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectResponse.Unmarshal(m, b)
}
func (m *ObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectResponse.Marshal(b, m, deterministic)
}
func (m *ObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectResponse.Merge(m, src)
}
func (m *ObjectResponse) XXX_Size() int {
	return xxx_messageInfo_ObjectResponse.Size(m)
}
func (m *ObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectResponse proto.InternalMessageInfo

func (m *ObjectResponse) GetArchivePath() string {
	if m != nil {
		return m.ArchivePath
	}
	return ""
}

// A request to recover archived object from the archive into the depot.
type ObjectRequest struct {
	BucketName           string                      `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	BucketSpec           *v1alpha1.VirtualBucketSpec `protobuf:"bytes,2,opt,name=bucketSpec,proto3" json:"bucketSpec,omitempty"`
	CredNamespace        string                      `protobuf:"bytes,3,opt,name=credNamespace,proto3" json:"credNamespace,omitempty"`
	CredName             string                      `protobuf:"bytes,4,opt,name=credName,proto3" json:"credName,omitempty"`
	ConnectionSpec       *v1alpha1.ConnectionSpec    `protobuf:"bytes,5,opt,name=connectionSpec,proto3" json:"connectionSpec,omitempty"`
	Secret               map[string][]byte           `protobuf:"bytes,6,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Key                  string                      `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ObjectRequest) Reset()         { *m = ObjectRequest{} }
func (m *ObjectRequest) String() string { return proto.CompactTextString(m) }
func (*ObjectRequest) ProtoMessage()    {}
func (*ObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_08f18543bdf52fb8, []int{2}
}
func (m *ObjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectRequest.Unmarshal(m, b)
}
func (m *ObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectRequest.Marshal(b, m, deterministic)
}
func (m *ObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectRequest.Merge(m, src)
}
func (m *ObjectRequest) XXX_Size() int {
	return xxx_messageInfo_ObjectRequest.Size(m)
}
func (m *ObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectRequest proto.InternalMessageInfo

func (m *ObjectRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *ObjectRequest) GetBucketSpec() *v1alpha1.VirtualBucketSpec {
	if m != nil {
		return m.BucketSpec
	}
	return nil
}

func (m *ObjectRequest) GetCredNamespace() string {
	if m != nil {
		return m.CredNamespace
	}
	return ""
}

func (m *ObjectRequest) GetCredName() string {
	if m != nil {
		return m.CredName
	}
	return ""
}

func (m *ObjectRequest) GetConnectionSpec() *v1alpha1.ConnectionSpec {
	if m != nil {
		return m.ConnectionSpec
	}
	return nil
}

func (m *ObjectRequest) GetSecret() map[string][]byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *ObjectRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ExistInVirtualBucketResponse struct {
	Exist                bool     `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExistInVirtualBucketResponse) Reset()         { *m = ExistInVirtualBucketResponse{} }
func (m *ExistInVirtualBucketResponse) String() string { return proto.CompactTextString(m) }
func (*ExistInVirtualBucketResponse) ProtoMessage()    {}
func (*ExistInVirtualBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_08f18543bdf52fb8, []int{3}
}
func (m *ExistInVirtualBucketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistInVirtualBucketResponse.Unmarshal(m, b)
}
func (m *ExistInVirtualBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistInVirtualBucketResponse.Marshal(b, m, deterministic)
}
func (m *ExistInVirtualBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistInVirtualBucketResponse.Merge(m, src)
}
func (m *ExistInVirtualBucketResponse) XXX_Size() int {
	return xxx_messageInfo_ExistInVirtualBucketResponse.Size(m)
}
func (m *ExistInVirtualBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistInVirtualBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExistInVirtualBucketResponse proto.InternalMessageInfo

func (m *ExistInVirtualBucketResponse) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

func init() {
	proto.RegisterType((*IngestResponse)(nil), "github.com.metaprov.modeld.services.objectstored.IngestResponse")
	proto.RegisterType((*ObjectResponse)(nil), "github.com.metaprov.modeld.services.objectstored.ObjectResponse")
	proto.RegisterType((*ObjectRequest)(nil), "github.com.metaprov.modeld.services.objectstored.ObjectRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "github.com.metaprov.modeld.services.objectstored.ObjectRequest.SecretEntry")
	proto.RegisterType((*ExistInVirtualBucketResponse)(nil), "github.com.metaprov.modeld.services.objectstored.ExistInVirtualBucketResponse")
}

func init() {
	proto.RegisterFile("services/objectstored/objectstored.proto", fileDescriptor_08f18543bdf52fb8)
}

var fileDescriptor_08f18543bdf52fb8 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x5e, 0xd6, 0xb5, 0x1d, 0xaf, 0xac, 0x42, 0x56, 0x0f, 0x51, 0x85, 0x50, 0x15, 0x71, 0xa8,
	0x38, 0x38, 0xac, 0x03, 0x09, 0xb8, 0x00, 0x43, 0x95, 0x98, 0x26, 0x6d, 0x28, 0x95, 0x38, 0x70,
	0x73, 0xdd, 0x47, 0x6b, 0xda, 0xc4, 0xc6, 0x76, 0x22, 0xfa, 0x23, 0xe0, 0x7f, 0xf0, 0xf7, 0x38,
	0x73, 0x40, 0x75, 0x9a, 0x2c, 0x41, 0xdb, 0xa4, 0x6d, 0x97, 0xdd, 0xf2, 0x9e, 0xbf, 0xef, 0xf3,
	0xf7, 0xe5, 0x3d, 0x19, 0x86, 0x06, 0x75, 0x26, 0x38, 0x9a, 0x50, 0x4e, 0xbf, 0x21, 0xb7, 0xc6,
	0x4a, 0x8d, 0xb3, 0x5a, 0x41, 0x95, 0x96, 0x56, 0x92, 0xe7, 0x73, 0x61, 0x17, 0xe9, 0x94, 0x72,
	0x19, 0xd3, 0x18, 0x2d, 0x53, 0x5a, 0x66, 0x34, 0x96, 0x33, 0x5c, 0xcd, 0x68, 0x21, 0x42, 0xab,
	0xbc, 0xfe, 0xf8, 0x82, 0x11, 0x16, 0x8c, 0x30, 0x67, 0x30, 0x25, 0x42, 0xb5, 0x9c, 0x87, 0x4c,
	0x09, 0x13, 0x8a, 0xe4, 0xab, 0x66, 0x61, 0x76, 0xc8, 0x56, 0x6a, 0xc1, 0x0e, 0xc3, 0x39, 0x26,
	0xa8, 0x99, 0x2d, 0x2e, 0x0e, 0x9e, 0x41, 0xf7, 0x24, 0x99, 0xa3, 0xb1, 0x11, 0x1a, 0x25, 0x13,
	0x83, 0xc4, 0x87, 0xf6, 0x4a, 0x64, 0x78, 0x8a, 0x6b, 0xdf, 0x1b, 0x78, 0xc3, 0x07, 0x51, 0x51,
	0x06, 0x23, 0xe8, 0x9e, 0x3b, 0x0b, 0x25, 0x76, 0x00, 0x1d, 0xa6, 0xf9, 0x42, 0x64, 0xf8, 0x89,
	0xd9, 0xc5, 0x16, 0x5f, 0x6d, 0x05, 0x7f, 0x1b, 0x70, 0x50, 0x90, 0xbe, 0xa7, 0x68, 0x2c, 0x79,
	0x02, 0x30, 0x4d, 0xf9, 0x12, 0xed, 0x19, 0x8b, 0x71, 0x4b, 0xa9, 0x74, 0xc8, 0xa2, 0x38, 0x9f,
	0x28, 0xe4, 0xfe, 0xee, 0xc0, 0x1b, 0x76, 0x46, 0x1f, 0xe9, 0xd5, 0xff, 0x87, 0x29, 0x41, 0xd5,
	0x72, 0x4e, 0x37, 0x69, 0xa9, 0x4b, 0x4b, 0x8b, 0xb4, 0xf4, 0xb3, 0xd0, 0x36, 0x65, 0xab, 0xe3,
	0x52, 0x2f, 0xaa, 0x68, 0x93, 0xa7, 0x70, 0xc0, 0x35, 0xce, 0x36, 0xb7, 0x1a, 0xc5, 0x38, 0xfa,
	0x0d, 0x67, 0xa6, 0xde, 0x24, 0x7d, 0xd8, 0x2f, 0x1a, 0xfe, 0x9e, 0x03, 0x94, 0x35, 0x89, 0xa1,
	0xcb, 0x65, 0x92, 0x20, 0xb7, 0x42, 0x26, 0xce, 0x6f, 0xd3, 0xf9, 0x1d, 0xdf, 0xd2, 0xef, 0x87,
	0x9a, 0x58, 0xf4, 0x9f, 0x38, 0xe1, 0xd0, 0x32, 0xc8, 0x35, 0x5a, 0xbf, 0x35, 0x68, 0x0c, 0x3b,
	0xa3, 0x53, 0x7a, 0xd3, 0xb5, 0xa1, 0xb5, 0x59, 0xd0, 0x89, 0x53, 0x1b, 0x27, 0x56, 0xaf, 0xa3,
	0xad, 0x34, 0x79, 0x04, 0x8d, 0x25, 0xae, 0xfd, 0xb6, 0x8b, 0xba, 0xf9, 0xec, 0xbf, 0x86, 0x4e,
	0x05, 0x58, 0x00, 0xbc, 0x12, 0x40, 0x7a, 0xd0, 0xcc, 0xd8, 0x2a, 0x45, 0x37, 0xad, 0x87, 0x51,
	0x5e, 0xbc, 0xd9, 0x7d, 0xe5, 0x05, 0x2f, 0xe0, 0xf1, 0xf8, 0x87, 0x30, 0xf6, 0x24, 0xa9, 0x8d,
	0xa2, 0x5c, 0xa0, 0x1e, 0x34, 0x71, 0x73, 0xee, 0xd4, 0xf6, 0xa3, 0xbc, 0x18, 0xfd, 0xd9, 0x03,
	0x72, 0x7e, 0xe1, 0x7a, 0x92, 0x27, 0x21, 0x3f, 0x3d, 0x68, 0xe5, 0xcb, 0x4a, 0xde, 0xde, 0x31,
	0x79, 0xff, 0xdd, 0xed, 0x05, 0x72, 0xeb, 0xc1, 0x0e, 0xf9, 0xe5, 0x41, 0xfb, 0x7d, 0xbe, 0xeb,
	0xf7, 0xc7, 0x50, 0x84, 0x5c, 0x66, 0xa8, 0xef, 0x87, 0xa1, 0xdf, 0x1e, 0xf4, 0x2e, 0x9b, 0xff,
	0xdd, 0xdd, 0x9d, 0xdd, 0x5c, 0xe0, 0xba, 0x45, 0x0c, 0x76, 0x8e, 0x5f, 0x7e, 0x39, 0xba, 0xfe,
	0x49, 0xbd, 0xf4, 0x31, 0x9f, 0xb6, 0xdc, 0x3b, 0x7a, 0xf4, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xa4,
	0x48, 0x5e, 0xbb, 0xec, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ObjectstoreServiceClient is the client API for ObjectstoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ObjectstoreServiceClient interface {
	// Ingest a new dataset to the store, the store creates a new layouts and set of keys
	// for the new dataset
	Ingest(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	// Delete a dataset from the store. Datasets are not deleted but moved to archive mode
	Archive(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	// Recover an item from the archive into the depot
	Recover(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	// Check if a dataset exist in bucket
	ExistInVirtualBucket(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ExistInVirtualBucketResponse, error)
}

type objectstoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewObjectstoreServiceClient(cc *grpc.ClientConn) ObjectstoreServiceClient {
	return &objectstoreServiceClient{cc}
}

func (c *objectstoreServiceClient) Ingest(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.objectstored.ObjectstoreService/Ingest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectstoreServiceClient) Archive(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.objectstored.ObjectstoreService/Archive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectstoreServiceClient) Recover(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.objectstored.ObjectstoreService/Recover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectstoreServiceClient) ExistInVirtualBucket(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ExistInVirtualBucketResponse, error) {
	out := new(ExistInVirtualBucketResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.objectstored.ObjectstoreService/ExistInVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectstoreServiceServer is the server API for ObjectstoreService service.
type ObjectstoreServiceServer interface {
	// Ingest a new dataset to the store, the store creates a new layouts and set of keys
	// for the new dataset
	Ingest(context.Context, *ObjectRequest) (*ObjectResponse, error)
	// Delete a dataset from the store. Datasets are not deleted but moved to archive mode
	Archive(context.Context, *ObjectRequest) (*ObjectResponse, error)
	// Recover an item from the archive into the depot
	Recover(context.Context, *ObjectRequest) (*ObjectResponse, error)
	// Check if a dataset exist in bucket
	ExistInVirtualBucket(context.Context, *ObjectRequest) (*ExistInVirtualBucketResponse, error)
}

// UnimplementedObjectstoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedObjectstoreServiceServer struct {
}

func (*UnimplementedObjectstoreServiceServer) Ingest(ctx context.Context, req *ObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (*UnimplementedObjectstoreServiceServer) Archive(ctx context.Context, req *ObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Archive not implemented")
}
func (*UnimplementedObjectstoreServiceServer) Recover(ctx context.Context, req *ObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recover not implemented")
}
func (*UnimplementedObjectstoreServiceServer) ExistInVirtualBucket(ctx context.Context, req *ObjectRequest) (*ExistInVirtualBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistInVirtualBucket not implemented")
}

func RegisterObjectstoreServiceServer(s *grpc.Server, srv ObjectstoreServiceServer) {
	s.RegisterService(&_ObjectstoreService_serviceDesc, srv)
}

func _ObjectstoreService_Ingest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectstoreServiceServer).Ingest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.objectstored.ObjectstoreService/Ingest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectstoreServiceServer).Ingest(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectstoreService_Archive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectstoreServiceServer).Archive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.objectstored.ObjectstoreService/Archive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectstoreServiceServer).Archive(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectstoreService_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectstoreServiceServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.objectstored.ObjectstoreService/Recover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectstoreServiceServer).Recover(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectstoreService_ExistInVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectstoreServiceServer).ExistInVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.objectstored.ObjectstoreService/ExistInVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectstoreServiceServer).ExistInVirtualBucket(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObjectstoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeld.services.objectstored.ObjectstoreService",
	HandlerType: (*ObjectstoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ingest",
			Handler:    _ObjectstoreService_Ingest_Handler,
		},
		{
			MethodName: "Archive",
			Handler:    _ObjectstoreService_Archive_Handler,
		},
		{
			MethodName: "Recover",
			Handler:    _ObjectstoreService_Recover_Handler,
		},
		{
			MethodName: "ExistInVirtualBucket",
			Handler:    _ObjectstoreService_ExistInVirtualBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/objectstored/objectstored.proto",
}
