// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/objectstored/v1/objectstored.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectstoreServiceClient is the client API for ObjectstoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectstoreServiceClient interface {
	// Ingest a new dataset to the store, the store creates a new layouts and set of keys
	// for the new dataset
	Ingest(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	// Delete a dataset from the store. Datasets are not deleted but moved to archive mode
	Archive(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	// Recover an item from the archive into the depot
	Recover(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	// Check if a dataset exist in bucket
	ExistInVirtualBucket(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ExistInVirtualBucketResponse, error)
}

type objectstoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectstoreServiceClient(cc grpc.ClientConnInterface) ObjectstoreServiceClient {
	return &objectstoreServiceClient{cc}
}

func (c *objectstoreServiceClient) Ingest(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.objectstored.v1.ObjectstoreService/Ingest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectstoreServiceClient) Archive(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.objectstored.v1.ObjectstoreService/Archive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectstoreServiceClient) Recover(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.objectstored.v1.ObjectstoreService/Recover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectstoreServiceClient) ExistInVirtualBucket(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ExistInVirtualBucketResponse, error) {
	out := new(ExistInVirtualBucketResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.objectstored.v1.ObjectstoreService/ExistInVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectstoreServiceServer is the server API for ObjectstoreService service.
// All implementations must embed UnimplementedObjectstoreServiceServer
// for forward compatibility
type ObjectstoreServiceServer interface {
	// Ingest a new dataset to the store, the store creates a new layouts and set of keys
	// for the new dataset
	Ingest(context.Context, *ObjectRequest) (*ObjectResponse, error)
	// Delete a dataset from the store. Datasets are not deleted but moved to archive mode
	Archive(context.Context, *ObjectRequest) (*ObjectResponse, error)
	// Recover an item from the archive into the depot
	Recover(context.Context, *ObjectRequest) (*ObjectResponse, error)
	// Check if a dataset exist in bucket
	ExistInVirtualBucket(context.Context, *ObjectRequest) (*ExistInVirtualBucketResponse, error)
	mustEmbedUnimplementedObjectstoreServiceServer()
}

// UnimplementedObjectstoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedObjectstoreServiceServer struct {
}

func (UnimplementedObjectstoreServiceServer) Ingest(context.Context, *ObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (UnimplementedObjectstoreServiceServer) Archive(context.Context, *ObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Archive not implemented")
}
func (UnimplementedObjectstoreServiceServer) Recover(context.Context, *ObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recover not implemented")
}
func (UnimplementedObjectstoreServiceServer) ExistInVirtualBucket(context.Context, *ObjectRequest) (*ExistInVirtualBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistInVirtualBucket not implemented")
}
func (UnimplementedObjectstoreServiceServer) mustEmbedUnimplementedObjectstoreServiceServer() {}

// UnsafeObjectstoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectstoreServiceServer will
// result in compilation errors.
type UnsafeObjectstoreServiceServer interface {
	mustEmbedUnimplementedObjectstoreServiceServer()
}

func RegisterObjectstoreServiceServer(s grpc.ServiceRegistrar, srv ObjectstoreServiceServer) {
	s.RegisterService(&ObjectstoreService_ServiceDesc, srv)
}

func _ObjectstoreService_Ingest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectstoreServiceServer).Ingest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.objectstored.v1.ObjectstoreService/Ingest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectstoreServiceServer).Ingest(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectstoreService_Archive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectstoreServiceServer).Archive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.objectstored.v1.ObjectstoreService/Archive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectstoreServiceServer).Archive(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectstoreService_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectstoreServiceServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.objectstored.v1.ObjectstoreService/Recover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectstoreServiceServer).Recover(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectstoreService_ExistInVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectstoreServiceServer).ExistInVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.objectstored.v1.ObjectstoreService/ExistInVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectstoreServiceServer).ExistInVirtualBucket(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectstoreService_ServiceDesc is the grpc.ServiceDesc for ObjectstoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectstoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.objectstored.v1.ObjectstoreService",
	HandlerType: (*ObjectstoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ingest",
			Handler:    _ObjectstoreService_Ingest_Handler,
		},
		{
			MethodName: "Archive",
			Handler:    _ObjectstoreService_Archive_Handler,
		},
		{
			MethodName: "Recover",
			Handler:    _ObjectstoreService_Recover_Handler,
		},
		{
			MethodName: "ExistInVirtualBucket",
			Handler:    _ObjectstoreService_ExistInVirtualBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/objectstored/v1/objectstored.proto",
}
