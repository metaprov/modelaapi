syntax = "proto3";
option go_package = "github.com/metaprov/modeldapi/services/objectstored/v1";
package github.com.metaprov.modeld.services.objectstored.v1;

import "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1/generated.proto";


// Schema request and response

message IngestResponse{
    string liveKey = 1;  // the new live key
}

message ObjectResponse {
    string archivePath = 1;
}

// A request to recover archived object from the archive into the depot.
message ObjectRequest {
    string bucketName = 1;
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucketSpec bucketSpec = 2;
    string credNamespace = 3;
    string credName = 4;
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.ConnectionSpec connectionSpec = 5;
    map<string,bytes>  secret    = 6;
    string key                   = 7; // the depot location of the object
}

message ExistInVirtualBucketResponse {
    bool exist = 1;
}

service ObjectstoreService {
    // Ingest a new dataset to the store, the store creates a new layouts and set of keys
    // for the new dataset
    rpc Ingest(ObjectRequest) returns (ObjectResponse) {}
    // Delete a dataset from the store. Datasets are not deleted but moved to archive mode
    rpc Archive(ObjectRequest) returns (ObjectResponse) {}
    // Recover an item from the archive into the depot
    rpc Recover(ObjectRequest) returns (ObjectResponse) {}
    // Check if a dataset exist in bucket
    rpc ExistInVirtualBucket(ObjectRequest) returns (ExistInVirtualBucketResponse) {}

}