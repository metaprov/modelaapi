// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.5
// source: github.com/metaprov/modeldapi/services/archived/v1/archived.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1alpha11 "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1"
	v1alpha13 "github.com/metaprov/modeldapi/pkg/apis/inference/v1alpha1"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1"
	v1alpha14 "github.com/metaprov/modeldapi/pkg/apis/team/v1alpha1"
	v1alpha12 "github.com/metaprov/modeldapi/pkg/apis/training/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RecordAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha1.Account `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool              `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordAccountRequest) Reset() {
	*x = RecordAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordAccountRequest) ProtoMessage() {}

func (x *RecordAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordAccountRequest.ProtoReflect.Descriptor instead.
func (*RecordAccountRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{0}
}

func (x *RecordAccountRequest) GetItem() *v1alpha1.Account {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordAccountRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type RecordConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha1.Connection `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                 `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordConnectionRequest) Reset() {
	*x = RecordConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordConnectionRequest) ProtoMessage() {}

func (x *RecordConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordConnectionRequest.ProtoReflect.Descriptor instead.
func (*RecordConnectionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{1}
}

func (x *RecordConnectionRequest) GetItem() *v1alpha1.Connection {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordConnectionRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type RecordLabRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha1.Lab `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool          `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordLabRequest) Reset() {
	*x = RecordLabRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordLabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordLabRequest) ProtoMessage() {}

func (x *RecordLabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordLabRequest.ProtoReflect.Descriptor instead.
func (*RecordLabRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{2}
}

func (x *RecordLabRequest) GetItem() *v1alpha1.Lab {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordLabRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type RecordServingSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha1.ServingSite `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                  `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordServingSiteRequest) Reset() {
	*x = RecordServingSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordServingSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordServingSiteRequest) ProtoMessage() {}

func (x *RecordServingSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordServingSiteRequest.ProtoReflect.Descriptor instead.
func (*RecordServingSiteRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{3}
}

func (x *RecordServingSiteRequest) GetItem() *v1alpha1.ServingSite {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordServingSiteRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type RecordLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha1.License `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool              `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordLicenseRequest) Reset() {
	*x = RecordLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordLicenseRequest) ProtoMessage() {}

func (x *RecordLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordLicenseRequest.ProtoReflect.Descriptor instead.
func (*RecordLicenseRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{4}
}

func (x *RecordLicenseRequest) GetItem() *v1alpha1.License {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordLicenseRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type RecordNotifierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha1.Notifier `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool               `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordNotifierRequest) Reset() {
	*x = RecordNotifierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordNotifierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordNotifierRequest) ProtoMessage() {}

func (x *RecordNotifierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordNotifierRequest.ProtoReflect.Descriptor instead.
func (*RecordNotifierRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{5}
}

func (x *RecordNotifierRequest) GetItem() *v1alpha1.Notifier {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordNotifierRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type RecordVirtualBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha1.VirtualBucket `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                    `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordVirtualBucketRequest) Reset() {
	*x = RecordVirtualBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordVirtualBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordVirtualBucketRequest) ProtoMessage() {}

func (x *RecordVirtualBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordVirtualBucketRequest.ProtoReflect.Descriptor instead.
func (*RecordVirtualBucketRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{6}
}

func (x *RecordVirtualBucketRequest) GetItem() *v1alpha1.VirtualBucket {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordVirtualBucketRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type RecordVirtualClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha1.VirtualCluster `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                     `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordVirtualClusterRequest) Reset() {
	*x = RecordVirtualClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordVirtualClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordVirtualClusterRequest) ProtoMessage() {}

func (x *RecordVirtualClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordVirtualClusterRequest.ProtoReflect.Descriptor instead.
func (*RecordVirtualClusterRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{7}
}

func (x *RecordVirtualClusterRequest) GetItem() *v1alpha1.VirtualCluster {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordVirtualClusterRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type RecordVirtualVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha1.VirtualVolume `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                    `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordVirtualVolumeRequest) Reset() {
	*x = RecordVirtualVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordVirtualVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordVirtualVolumeRequest) ProtoMessage() {}

func (x *RecordVirtualVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordVirtualVolumeRequest.ProtoReflect.Descriptor instead.
func (*RecordVirtualVolumeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{8}
}

func (x *RecordVirtualVolumeRequest) GetItem() *v1alpha1.VirtualVolume {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordVirtualVolumeRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// DataPipeline
type RecordDataPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.DataPipeline `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                    `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordDataPipelineRequest) Reset() {
	*x = RecordDataPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataPipelineRequest) ProtoMessage() {}

func (x *RecordDataPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataPipelineRequest.ProtoReflect.Descriptor instead.
func (*RecordDataPipelineRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{9}
}

func (x *RecordDataPipelineRequest) GetItem() *v1alpha11.DataPipeline {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordDataPipelineRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// DataPipelineRun
type RecordDataPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.DataPipelineRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                       `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordDataPipelineRunRequest) Reset() {
	*x = RecordDataPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataPipelineRunRequest) ProtoMessage() {}

func (x *RecordDataPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*RecordDataPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{10}
}

func (x *RecordDataPipelineRunRequest) GetItem() *v1alpha11.DataPipelineRun {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordDataPipelineRunRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// DataProduct
type RecordDataProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.DataProduct `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                   `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordDataProductRequest) Reset() {
	*x = RecordDataProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataProductRequest) ProtoMessage() {}

func (x *RecordDataProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataProductRequest.ProtoReflect.Descriptor instead.
func (*RecordDataProductRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{11}
}

func (x *RecordDataProductRequest) GetItem() *v1alpha11.DataProduct {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordDataProductRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// DataProductVersion
type RecordDataProductVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.DataProductVersion `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                          `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordDataProductVersionRequest) Reset() {
	*x = RecordDataProductVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataProductVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataProductVersionRequest) ProtoMessage() {}

func (x *RecordDataProductVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataProductVersionRequest.ProtoReflect.Descriptor instead.
func (*RecordDataProductVersionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{12}
}

func (x *RecordDataProductVersionRequest) GetItem() *v1alpha11.DataProductVersion {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordDataProductVersionRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// DataSource
type RecordDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.Dataset `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool               `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordDatasetRequest) Reset() {
	*x = RecordDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDatasetRequest) ProtoMessage() {}

func (x *RecordDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDatasetRequest.ProtoReflect.Descriptor instead.
func (*RecordDatasetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{13}
}

func (x *RecordDatasetRequest) GetItem() *v1alpha11.Dataset {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordDatasetRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// DataSource
type RecordDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.DataSource `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                  `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordDataSourceRequest) Reset() {
	*x = RecordDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataSourceRequest) ProtoMessage() {}

func (x *RecordDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataSourceRequest.ProtoReflect.Descriptor instead.
func (*RecordDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{14}
}

func (x *RecordDataSourceRequest) GetItem() *v1alpha11.DataSource {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordDataSourceRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Entity
type RecordEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.Entity `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool              `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordEntityRequest) Reset() {
	*x = RecordEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEntityRequest) ProtoMessage() {}

func (x *RecordEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEntityRequest.ProtoReflect.Descriptor instead.
func (*RecordEntityRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{15}
}

func (x *RecordEntityRequest) GetItem() *v1alpha11.Entity {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordEntityRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type RecordFeaturesetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.Featureset `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                  `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordFeaturesetRequest) Reset() {
	*x = RecordFeaturesetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordFeaturesetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordFeaturesetRequest) ProtoMessage() {}

func (x *RecordFeaturesetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordFeaturesetRequest.ProtoReflect.Descriptor instead.
func (*RecordFeaturesetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{16}
}

func (x *RecordFeaturesetRequest) GetItem() *v1alpha11.Featureset {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordFeaturesetRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Feature
type RecordFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.Feature `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool               `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordFeatureRequest) Reset() {
	*x = RecordFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordFeatureRequest) ProtoMessage() {}

func (x *RecordFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordFeatureRequest.ProtoReflect.Descriptor instead.
func (*RecordFeatureRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{17}
}

func (x *RecordFeatureRequest) GetItem() *v1alpha11.Feature {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordFeatureRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// FetaurePipeline
type RecordFeaturePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.FeaturePipeline `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                       `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordFeaturePipelineRequest) Reset() {
	*x = RecordFeaturePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordFeaturePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordFeaturePipelineRequest) ProtoMessage() {}

func (x *RecordFeaturePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordFeaturePipelineRequest.ProtoReflect.Descriptor instead.
func (*RecordFeaturePipelineRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{18}
}

func (x *RecordFeaturePipelineRequest) GetItem() *v1alpha11.FeaturePipeline {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordFeaturePipelineRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// LabelingPipeline
type RecordLabelingPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.LabelingPipeline `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                        `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordLabelingPipelineRequest) Reset() {
	*x = RecordLabelingPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordLabelingPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordLabelingPipelineRequest) ProtoMessage() {}

func (x *RecordLabelingPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordLabelingPipelineRequest.ProtoReflect.Descriptor instead.
func (*RecordLabelingPipelineRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{19}
}

func (x *RecordLabelingPipelineRequest) GetItem() *v1alpha11.LabelingPipeline {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordLabelingPipelineRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Recipe
type RecordRecipeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.Recipe `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool              `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordRecipeRequest) Reset() {
	*x = RecordRecipeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRecipeRequest) ProtoMessage() {}

func (x *RecordRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRecipeRequest.ProtoReflect.Descriptor instead.
func (*RecordRecipeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{20}
}

func (x *RecordRecipeRequest) GetItem() *v1alpha11.Recipe {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordRecipeRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// RecipeRun
type RecordRecipeRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha11.RecipeRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                 `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordRecipeRunRequest) Reset() {
	*x = RecordRecipeRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordRecipeRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRecipeRunRequest) ProtoMessage() {}

func (x *RecordRecipeRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRecipeRunRequest.ProtoReflect.Descriptor instead.
func (*RecordRecipeRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{21}
}

func (x *RecordRecipeRunRequest) GetItem() *v1alpha11.RecipeRun {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordRecipeRunRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Model
type RecordModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha12.Model `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool             `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordModelRequest) Reset() {
	*x = RecordModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordModelRequest) ProtoMessage() {}

func (x *RecordModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordModelRequest.ProtoReflect.Descriptor instead.
func (*RecordModelRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{22}
}

func (x *RecordModelRequest) GetItem() *v1alpha12.Model {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordModelRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// ModelPipeline
type RecordModelPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha12.ModelPipeline `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                     `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordModelPipelineRequest) Reset() {
	*x = RecordModelPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordModelPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordModelPipelineRequest) ProtoMessage() {}

func (x *RecordModelPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordModelPipelineRequest.ProtoReflect.Descriptor instead.
func (*RecordModelPipelineRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{23}
}

func (x *RecordModelPipelineRequest) GetItem() *v1alpha12.ModelPipeline {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordModelPipelineRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Notebook
type RecordNotebookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha12.Notebook `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordNotebookRequest) Reset() {
	*x = RecordNotebookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordNotebookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordNotebookRequest) ProtoMessage() {}

func (x *RecordNotebookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordNotebookRequest.ProtoReflect.Descriptor instead.
func (*RecordNotebookRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{24}
}

func (x *RecordNotebookRequest) GetItem() *v1alpha12.Notebook {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordNotebookRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// NotebookRun
type RecordNotebookRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha12.NotebookRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                   `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordNotebookRunRequest) Reset() {
	*x = RecordNotebookRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordNotebookRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordNotebookRunRequest) ProtoMessage() {}

func (x *RecordNotebookRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordNotebookRunRequest.ProtoReflect.Descriptor instead.
func (*RecordNotebookRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{25}
}

func (x *RecordNotebookRunRequest) GetItem() *v1alpha12.NotebookRun {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordNotebookRunRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Report
type RecordReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha12.Report `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool              `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordReportRequest) Reset() {
	*x = RecordReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordReportRequest) ProtoMessage() {}

func (x *RecordReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordReportRequest.ProtoReflect.Descriptor instead.
func (*RecordReportRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{26}
}

func (x *RecordReportRequest) GetItem() *v1alpha12.Report {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordReportRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Study
type RecordStudyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha12.Study `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool             `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordStudyRequest) Reset() {
	*x = RecordStudyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordStudyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordStudyRequest) ProtoMessage() {}

func (x *RecordStudyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordStudyRequest.ProtoReflect.Descriptor instead.
func (*RecordStudyRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{27}
}

func (x *RecordStudyRequest) GetItem() *v1alpha12.Study {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordStudyRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type RecordCurtainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha13.Curtain `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool               `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordCurtainRequest) Reset() {
	*x = RecordCurtainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordCurtainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCurtainRequest) ProtoMessage() {}

func (x *RecordCurtainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCurtainRequest.ProtoReflect.Descriptor instead.
func (*RecordCurtainRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{28}
}

func (x *RecordCurtainRequest) GetItem() *v1alpha13.Curtain {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordCurtainRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// PredictionPipeline
type RecordPredictorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha13.Predictor `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                 `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordPredictorRequest) Reset() {
	*x = RecordPredictorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPredictorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPredictorRequest) ProtoMessage() {}

func (x *RecordPredictorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPredictorRequest.ProtoReflect.Descriptor instead.
func (*RecordPredictorRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{29}
}

func (x *RecordPredictorRequest) GetItem() *v1alpha13.Predictor {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordPredictorRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// PredictionPipeline
type RecordPredictionPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha13.PredictionPipeline `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                          `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordPredictionPipelineRequest) Reset() {
	*x = RecordPredictionPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPredictionPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPredictionPipelineRequest) ProtoMessage() {}

func (x *RecordPredictionPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPredictionPipelineRequest.ProtoReflect.Descriptor instead.
func (*RecordPredictionPipelineRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{30}
}

func (x *RecordPredictionPipelineRequest) GetItem() *v1alpha13.PredictionPipeline {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordPredictionPipelineRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Predictor
type RecordPredictionPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha13.PredictionPipelineRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                             `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordPredictionPipelineRunRequest) Reset() {
	*x = RecordPredictionPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPredictionPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPredictionPipelineRunRequest) ProtoMessage() {}

func (x *RecordPredictionPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPredictionPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*RecordPredictionPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{31}
}

func (x *RecordPredictionPipelineRunRequest) GetItem() *v1alpha13.PredictionPipelineRun {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordPredictionPipelineRunRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Conversation
type RecordConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha14.Conversation `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                    `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordConversationRequest) Reset() {
	*x = RecordConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordConversationRequest) ProtoMessage() {}

func (x *RecordConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordConversationRequest.ProtoReflect.Descriptor instead.
func (*RecordConversationRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{32}
}

func (x *RecordConversationRequest) GetItem() *v1alpha14.Conversation {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordConversationRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Postmortem
type RecordPostmortemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha14.PostMortem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool                  `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordPostmortemRequest) Reset() {
	*x = RecordPostmortemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPostmortemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPostmortemRequest) ProtoMessage() {}

func (x *RecordPostmortemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPostmortemRequest.ProtoReflect.Descriptor instead.
func (*RecordPostmortemRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{33}
}

func (x *RecordPostmortemRequest) GetItem() *v1alpha14.PostMortem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordPostmortemRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Runbook
type RecordRunbookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *v1alpha14.RunBook `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Delete bool               `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *RecordRunbookRequest) Reset() {
	*x = RecordRunbookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordRunbookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRunbookRequest) ProtoMessage() {}

func (x *RecordRunbookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRunbookRequest.ProtoReflect.Descriptor instead.
func (*RecordRunbookRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP(), []int{34}
}

func (x *RecordRunbookRequest) GetItem() *v1alpha14.RunBook {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RecordRunbookRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

var File_github_com_metaprov_modeldapi_services_archived_v1_archived_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDesc = []byte{
	0x0a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a,
	0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x7a, 0x0a, 0x10,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x58, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x7f, 0x0a, 0x13,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x87, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x51, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0x93, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x7f, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x56, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52,
	0x75, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x22, 0x83, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x75, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x74, 0x61, 0x69, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x22, 0x9c, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0xa2, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x6d, 0x6f, 0x72, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x72, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x81, 0x01, 0x0a,
	0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6e, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x42, 0x6f,
	0x6f, 0x6b, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x32, 0x83, 0x22, 0x0a, 0x0f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x10, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x61,
	0x62, 0x12, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x12, 0x4c, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x7f, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x4e, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12,
	0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x11, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x73, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x15, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x79, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x47, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x85, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x51, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x4a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x7f, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x74,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x11, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x75, 0x6e, 0x12,
	0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x75, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x48, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x75, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x77, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x53, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x56, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x72, 0x74, 0x65, 0x6d, 0x12, 0x4b, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x72, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x73, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6e, 0x62, 0x6f,
	0x6f, 0x6b, 0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x75,
	0x6e, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescData = file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDesc
)

func file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescData)
	})
	return file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDescData
}

var file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_goTypes = []interface{}{
	(*RecordAccountRequest)(nil),               // 0: github.com.metaprov.modeldapi.services.archived.v1.RecordAccountRequest
	(*RecordConnectionRequest)(nil),            // 1: github.com.metaprov.modeldapi.services.archived.v1.RecordConnectionRequest
	(*RecordLabRequest)(nil),                   // 2: github.com.metaprov.modeldapi.services.archived.v1.RecordLabRequest
	(*RecordServingSiteRequest)(nil),           // 3: github.com.metaprov.modeldapi.services.archived.v1.RecordServingSiteRequest
	(*RecordLicenseRequest)(nil),               // 4: github.com.metaprov.modeldapi.services.archived.v1.RecordLicenseRequest
	(*RecordNotifierRequest)(nil),              // 5: github.com.metaprov.modeldapi.services.archived.v1.RecordNotifierRequest
	(*RecordVirtualBucketRequest)(nil),         // 6: github.com.metaprov.modeldapi.services.archived.v1.RecordVirtualBucketRequest
	(*RecordVirtualClusterRequest)(nil),        // 7: github.com.metaprov.modeldapi.services.archived.v1.RecordVirtualClusterRequest
	(*RecordVirtualVolumeRequest)(nil),         // 8: github.com.metaprov.modeldapi.services.archived.v1.RecordVirtualVolumeRequest
	(*RecordDataPipelineRequest)(nil),          // 9: github.com.metaprov.modeldapi.services.archived.v1.RecordDataPipelineRequest
	(*RecordDataPipelineRunRequest)(nil),       // 10: github.com.metaprov.modeldapi.services.archived.v1.RecordDataPipelineRunRequest
	(*RecordDataProductRequest)(nil),           // 11: github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductRequest
	(*RecordDataProductVersionRequest)(nil),    // 12: github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductVersionRequest
	(*RecordDatasetRequest)(nil),               // 13: github.com.metaprov.modeldapi.services.archived.v1.RecordDatasetRequest
	(*RecordDataSourceRequest)(nil),            // 14: github.com.metaprov.modeldapi.services.archived.v1.RecordDataSourceRequest
	(*RecordEntityRequest)(nil),                // 15: github.com.metaprov.modeldapi.services.archived.v1.RecordEntityRequest
	(*RecordFeaturesetRequest)(nil),            // 16: github.com.metaprov.modeldapi.services.archived.v1.RecordFeaturesetRequest
	(*RecordFeatureRequest)(nil),               // 17: github.com.metaprov.modeldapi.services.archived.v1.RecordFeatureRequest
	(*RecordFeaturePipelineRequest)(nil),       // 18: github.com.metaprov.modeldapi.services.archived.v1.RecordFeaturePipelineRequest
	(*RecordLabelingPipelineRequest)(nil),      // 19: github.com.metaprov.modeldapi.services.archived.v1.RecordLabelingPipelineRequest
	(*RecordRecipeRequest)(nil),                // 20: github.com.metaprov.modeldapi.services.archived.v1.RecordRecipeRequest
	(*RecordRecipeRunRequest)(nil),             // 21: github.com.metaprov.modeldapi.services.archived.v1.RecordRecipeRunRequest
	(*RecordModelRequest)(nil),                 // 22: github.com.metaprov.modeldapi.services.archived.v1.RecordModelRequest
	(*RecordModelPipelineRequest)(nil),         // 23: github.com.metaprov.modeldapi.services.archived.v1.RecordModelPipelineRequest
	(*RecordNotebookRequest)(nil),              // 24: github.com.metaprov.modeldapi.services.archived.v1.RecordNotebookRequest
	(*RecordNotebookRunRequest)(nil),           // 25: github.com.metaprov.modeldapi.services.archived.v1.RecordNotebookRunRequest
	(*RecordReportRequest)(nil),                // 26: github.com.metaprov.modeldapi.services.archived.v1.RecordReportRequest
	(*RecordStudyRequest)(nil),                 // 27: github.com.metaprov.modeldapi.services.archived.v1.RecordStudyRequest
	(*RecordCurtainRequest)(nil),               // 28: github.com.metaprov.modeldapi.services.archived.v1.RecordCurtainRequest
	(*RecordPredictorRequest)(nil),             // 29: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictorRequest
	(*RecordPredictionPipelineRequest)(nil),    // 30: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictionPipelineRequest
	(*RecordPredictionPipelineRunRequest)(nil), // 31: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictionPipelineRunRequest
	(*RecordConversationRequest)(nil),          // 32: github.com.metaprov.modeldapi.services.archived.v1.RecordConversationRequest
	(*RecordPostmortemRequest)(nil),            // 33: github.com.metaprov.modeldapi.services.archived.v1.RecordPostmortemRequest
	(*RecordRunbookRequest)(nil),               // 34: github.com.metaprov.modeldapi.services.archived.v1.RecordRunbookRequest
	(*v1alpha1.Account)(nil),                   // 35: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Account
	(*v1alpha1.Connection)(nil),                // 36: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Connection
	(*v1alpha1.Lab)(nil),                       // 37: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Lab
	(*v1alpha1.ServingSite)(nil),               // 38: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.ServingSite
	(*v1alpha1.License)(nil),                   // 39: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.License
	(*v1alpha1.Notifier)(nil),                  // 40: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Notifier
	(*v1alpha1.VirtualBucket)(nil),             // 41: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucket
	(*v1alpha1.VirtualCluster)(nil),            // 42: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualCluster
	(*v1alpha1.VirtualVolume)(nil),             // 43: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualVolume
	(*v1alpha11.DataPipeline)(nil),             // 44: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataPipeline
	(*v1alpha11.DataPipelineRun)(nil),          // 45: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataPipelineRun
	(*v1alpha11.DataProduct)(nil),              // 46: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProduct
	(*v1alpha11.DataProductVersion)(nil),       // 47: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProductVersion
	(*v1alpha11.Dataset)(nil),                  // 48: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Dataset
	(*v1alpha11.DataSource)(nil),               // 49: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataSource
	(*v1alpha11.Entity)(nil),                   // 50: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Entity
	(*v1alpha11.Featureset)(nil),               // 51: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Featureset
	(*v1alpha11.Feature)(nil),                  // 52: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Feature
	(*v1alpha11.FeaturePipeline)(nil),          // 53: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.FeaturePipeline
	(*v1alpha11.LabelingPipeline)(nil),         // 54: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.LabelingPipeline
	(*v1alpha11.Recipe)(nil),                   // 55: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Recipe
	(*v1alpha11.RecipeRun)(nil),                // 56: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.RecipeRun
	(*v1alpha12.Model)(nil),                    // 57: github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Model
	(*v1alpha12.ModelPipeline)(nil),            // 58: github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.ModelPipeline
	(*v1alpha12.Notebook)(nil),                 // 59: github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Notebook
	(*v1alpha12.NotebookRun)(nil),              // 60: github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.NotebookRun
	(*v1alpha12.Report)(nil),                   // 61: github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Report
	(*v1alpha12.Study)(nil),                    // 62: github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Study
	(*v1alpha13.Curtain)(nil),                  // 63: github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.Curtain
	(*v1alpha13.Predictor)(nil),                // 64: github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.Predictor
	(*v1alpha13.PredictionPipeline)(nil),       // 65: github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipeline
	(*v1alpha13.PredictionPipelineRun)(nil),    // 66: github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipelineRun
	(*v1alpha14.Conversation)(nil),             // 67: github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.Conversation
	(*v1alpha14.PostMortem)(nil),               // 68: github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.PostMortem
	(*v1alpha14.RunBook)(nil),                  // 69: github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.RunBook
	(*empty.Empty)(nil),                        // 70: google.protobuf.Empty
}
var file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_depIdxs = []int32{
	35, // 0: github.com.metaprov.modeldapi.services.archived.v1.RecordAccountRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Account
	36, // 1: github.com.metaprov.modeldapi.services.archived.v1.RecordConnectionRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Connection
	37, // 2: github.com.metaprov.modeldapi.services.archived.v1.RecordLabRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Lab
	38, // 3: github.com.metaprov.modeldapi.services.archived.v1.RecordServingSiteRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.ServingSite
	39, // 4: github.com.metaprov.modeldapi.services.archived.v1.RecordLicenseRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.License
	40, // 5: github.com.metaprov.modeldapi.services.archived.v1.RecordNotifierRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Notifier
	41, // 6: github.com.metaprov.modeldapi.services.archived.v1.RecordVirtualBucketRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucket
	42, // 7: github.com.metaprov.modeldapi.services.archived.v1.RecordVirtualClusterRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualCluster
	43, // 8: github.com.metaprov.modeldapi.services.archived.v1.RecordVirtualVolumeRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualVolume
	44, // 9: github.com.metaprov.modeldapi.services.archived.v1.RecordDataPipelineRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataPipeline
	45, // 10: github.com.metaprov.modeldapi.services.archived.v1.RecordDataPipelineRunRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataPipelineRun
	46, // 11: github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProduct
	47, // 12: github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductVersionRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProductVersion
	48, // 13: github.com.metaprov.modeldapi.services.archived.v1.RecordDatasetRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Dataset
	49, // 14: github.com.metaprov.modeldapi.services.archived.v1.RecordDataSourceRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataSource
	50, // 15: github.com.metaprov.modeldapi.services.archived.v1.RecordEntityRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Entity
	51, // 16: github.com.metaprov.modeldapi.services.archived.v1.RecordFeaturesetRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Featureset
	52, // 17: github.com.metaprov.modeldapi.services.archived.v1.RecordFeatureRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Feature
	53, // 18: github.com.metaprov.modeldapi.services.archived.v1.RecordFeaturePipelineRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.FeaturePipeline
	54, // 19: github.com.metaprov.modeldapi.services.archived.v1.RecordLabelingPipelineRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.LabelingPipeline
	55, // 20: github.com.metaprov.modeldapi.services.archived.v1.RecordRecipeRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Recipe
	56, // 21: github.com.metaprov.modeldapi.services.archived.v1.RecordRecipeRunRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.RecipeRun
	57, // 22: github.com.metaprov.modeldapi.services.archived.v1.RecordModelRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Model
	58, // 23: github.com.metaprov.modeldapi.services.archived.v1.RecordModelPipelineRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.ModelPipeline
	59, // 24: github.com.metaprov.modeldapi.services.archived.v1.RecordNotebookRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Notebook
	60, // 25: github.com.metaprov.modeldapi.services.archived.v1.RecordNotebookRunRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.NotebookRun
	61, // 26: github.com.metaprov.modeldapi.services.archived.v1.RecordReportRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Report
	62, // 27: github.com.metaprov.modeldapi.services.archived.v1.RecordStudyRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Study
	63, // 28: github.com.metaprov.modeldapi.services.archived.v1.RecordCurtainRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.Curtain
	64, // 29: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictorRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.Predictor
	65, // 30: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictionPipelineRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipeline
	66, // 31: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictionPipelineRunRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipelineRun
	67, // 32: github.com.metaprov.modeldapi.services.archived.v1.RecordConversationRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.Conversation
	68, // 33: github.com.metaprov.modeldapi.services.archived.v1.RecordPostmortemRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.PostMortem
	69, // 34: github.com.metaprov.modeldapi.services.archived.v1.RecordRunbookRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1.RunBook
	0,  // 35: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordAccount:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordAccountRequest
	1,  // 36: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordConnection:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordConnectionRequest
	1,  // 37: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordLab:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordConnectionRequest
	3,  // 38: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordServingSite:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordServingSiteRequest
	4,  // 39: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordLicense:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordLicenseRequest
	4,  // 40: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordNotifier:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordLicenseRequest
	6,  // 41: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordVirtualBucket:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordVirtualBucketRequest
	7,  // 42: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordVirtualCluster:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordVirtualClusterRequest
	8,  // 43: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordVirtualVolume:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordVirtualVolumeRequest
	9,  // 44: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataPipeline:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDataPipelineRequest
	10, // 45: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataPipelineRun:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDataPipelineRunRequest
	11, // 46: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataProduct:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductRequest
	12, // 47: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataProductVersion:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductVersionRequest
	14, // 48: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataSource:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDataSourceRequest
	13, // 49: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataset:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDatasetRequest
	17, // 50: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordFeature:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordFeatureRequest
	18, // 51: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordFeaturePipeline:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordFeaturePipelineRequest
	16, // 52: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordFeatureset:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordFeaturesetRequest
	15, // 53: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordEntity:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordEntityRequest
	19, // 54: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordLabelingPipeline:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordLabelingPipelineRequest
	20, // 55: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordRecipe:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordRecipeRequest
	21, // 56: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordRecipeRun:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordRecipeRunRequest
	22, // 57: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordModel:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordModelRequest
	23, // 58: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordModelPipeline:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordModelPipelineRequest
	24, // 59: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordNotebook:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordNotebookRequest
	25, // 60: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordNotebookRun:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordNotebookRunRequest
	26, // 61: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordReport:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordReportRequest
	27, // 62: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordStudy:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordStudyRequest
	28, // 63: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordCurtain:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordCurtainRequest
	29, // 64: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPredictor:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordPredictorRequest
	30, // 65: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPredictionPipeline:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordPredictionPipelineRequest
	31, // 66: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPredictionPipelineRun:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordPredictionPipelineRunRequest
	32, // 67: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordConversation:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordConversationRequest
	33, // 68: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPostmortem:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordPostmortemRequest
	34, // 69: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordRunbook:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordRunbookRequest
	70, // 70: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordAccount:output_type -> google.protobuf.Empty
	70, // 71: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordConnection:output_type -> google.protobuf.Empty
	70, // 72: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordLab:output_type -> google.protobuf.Empty
	70, // 73: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordServingSite:output_type -> google.protobuf.Empty
	70, // 74: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordLicense:output_type -> google.protobuf.Empty
	70, // 75: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordNotifier:output_type -> google.protobuf.Empty
	70, // 76: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordVirtualBucket:output_type -> google.protobuf.Empty
	70, // 77: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordVirtualCluster:output_type -> google.protobuf.Empty
	70, // 78: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordVirtualVolume:output_type -> google.protobuf.Empty
	70, // 79: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataPipeline:output_type -> google.protobuf.Empty
	70, // 80: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataPipelineRun:output_type -> google.protobuf.Empty
	70, // 81: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataProduct:output_type -> google.protobuf.Empty
	70, // 82: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataProductVersion:output_type -> google.protobuf.Empty
	70, // 83: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataSource:output_type -> google.protobuf.Empty
	70, // 84: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataset:output_type -> google.protobuf.Empty
	70, // 85: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordFeature:output_type -> google.protobuf.Empty
	70, // 86: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordFeaturePipeline:output_type -> google.protobuf.Empty
	70, // 87: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordFeatureset:output_type -> google.protobuf.Empty
	70, // 88: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordEntity:output_type -> google.protobuf.Empty
	70, // 89: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordLabelingPipeline:output_type -> google.protobuf.Empty
	70, // 90: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordRecipe:output_type -> google.protobuf.Empty
	70, // 91: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordRecipeRun:output_type -> google.protobuf.Empty
	70, // 92: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordModel:output_type -> google.protobuf.Empty
	70, // 93: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordModelPipeline:output_type -> google.protobuf.Empty
	70, // 94: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordNotebook:output_type -> google.protobuf.Empty
	70, // 95: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordNotebookRun:output_type -> google.protobuf.Empty
	70, // 96: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordReport:output_type -> google.protobuf.Empty
	70, // 97: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordStudy:output_type -> google.protobuf.Empty
	70, // 98: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordCurtain:output_type -> google.protobuf.Empty
	70, // 99: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPredictor:output_type -> google.protobuf.Empty
	70, // 100: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPredictionPipeline:output_type -> google.protobuf.Empty
	70, // 101: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPredictionPipelineRun:output_type -> google.protobuf.Empty
	70, // 102: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordConversation:output_type -> google.protobuf.Empty
	70, // 103: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPostmortem:output_type -> google.protobuf.Empty
	70, // 104: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordRunbook:output_type -> google.protobuf.Empty
	70, // [70:105] is the sub-list for method output_type
	35, // [35:70] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_init() }
func file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_init() {
	if File_github_com_metaprov_modeldapi_services_archived_v1_archived_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordLabRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordServingSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordNotifierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordVirtualBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordVirtualClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordVirtualVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataProductVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordFeaturesetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordFeaturePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordLabelingPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordRecipeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordRecipeRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordModelPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordNotebookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordNotebookRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordStudyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordCurtainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPredictorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPredictionPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPredictionPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPostmortemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordRunbookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_depIdxs,
		MessageInfos:      file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modeldapi_services_archived_v1_archived_proto = out.File
	file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_rawDesc = nil
	file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_goTypes = nil
	file_github_com_metaprov_modeldapi_services_archived_v1_archived_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ArchivedServiceClient is the client API for ArchivedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArchivedServiceClient interface {
	// Infra
	RecordAccount(ctx context.Context, in *RecordAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordConnection(ctx context.Context, in *RecordConnectionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordLab(ctx context.Context, in *RecordConnectionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordServingSite(ctx context.Context, in *RecordServingSiteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordLicense(ctx context.Context, in *RecordLicenseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordNotifier(ctx context.Context, in *RecordLicenseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordVirtualBucket(ctx context.Context, in *RecordVirtualBucketRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordVirtualCluster(ctx context.Context, in *RecordVirtualClusterRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordVirtualVolume(ctx context.Context, in *RecordVirtualVolumeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Data
	RecordDataPipeline(ctx context.Context, in *RecordDataPipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordDataPipelineRun(ctx context.Context, in *RecordDataPipelineRunRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordDataProduct(ctx context.Context, in *RecordDataProductRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordDataProductVersion(ctx context.Context, in *RecordDataProductVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordDataSource(ctx context.Context, in *RecordDataSourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordDataset(ctx context.Context, in *RecordDatasetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordFeature(ctx context.Context, in *RecordFeatureRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordFeaturePipeline(ctx context.Context, in *RecordFeaturePipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordFeatureset(ctx context.Context, in *RecordFeaturesetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordEntity(ctx context.Context, in *RecordEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordLabelingPipeline(ctx context.Context, in *RecordLabelingPipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordRecipe(ctx context.Context, in *RecordRecipeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordRecipeRun(ctx context.Context, in *RecordRecipeRunRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordModel(ctx context.Context, in *RecordModelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordModelPipeline(ctx context.Context, in *RecordModelPipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordNotebook(ctx context.Context, in *RecordNotebookRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordNotebookRun(ctx context.Context, in *RecordNotebookRunRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordReport(ctx context.Context, in *RecordReportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordStudy(ctx context.Context, in *RecordStudyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ==================  inference
	RecordCurtain(ctx context.Context, in *RecordCurtainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordPredictor(ctx context.Context, in *RecordPredictorRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordPredictionPipeline(ctx context.Context, in *RecordPredictionPipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordPredictionPipelineRun(ctx context.Context, in *RecordPredictionPipelineRunRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// =================== team
	RecordConversation(ctx context.Context, in *RecordConversationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordPostmortem(ctx context.Context, in *RecordPostmortemRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecordRunbook(ctx context.Context, in *RecordRunbookRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type archivedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArchivedServiceClient(cc grpc.ClientConnInterface) ArchivedServiceClient {
	return &archivedServiceClient{cc}
}

func (c *archivedServiceClient) RecordAccount(ctx context.Context, in *RecordAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordConnection(ctx context.Context, in *RecordConnectionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordLab(ctx context.Context, in *RecordConnectionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordLab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordServingSite(ctx context.Context, in *RecordServingSiteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordServingSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordLicense(ctx context.Context, in *RecordLicenseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordNotifier(ctx context.Context, in *RecordLicenseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordNotifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordVirtualBucket(ctx context.Context, in *RecordVirtualBucketRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordVirtualCluster(ctx context.Context, in *RecordVirtualClusterRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordVirtualVolume(ctx context.Context, in *RecordVirtualVolumeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordVirtualVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordDataPipeline(ctx context.Context, in *RecordDataPipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordDataPipelineRun(ctx context.Context, in *RecordDataPipelineRunRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordDataProduct(ctx context.Context, in *RecordDataProductRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordDataProductVersion(ctx context.Context, in *RecordDataProductVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataProductVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordDataSource(ctx context.Context, in *RecordDataSourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordDataset(ctx context.Context, in *RecordDatasetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordFeature(ctx context.Context, in *RecordFeatureRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordFeaturePipeline(ctx context.Context, in *RecordFeaturePipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordFeaturePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordFeatureset(ctx context.Context, in *RecordFeaturesetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordFeatureset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordEntity(ctx context.Context, in *RecordEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordLabelingPipeline(ctx context.Context, in *RecordLabelingPipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordLabelingPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordRecipe(ctx context.Context, in *RecordRecipeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordRecipeRun(ctx context.Context, in *RecordRecipeRunRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordRecipeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordModel(ctx context.Context, in *RecordModelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordModelPipeline(ctx context.Context, in *RecordModelPipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordModelPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordNotebook(ctx context.Context, in *RecordNotebookRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordNotebookRun(ctx context.Context, in *RecordNotebookRunRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordNotebookRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordReport(ctx context.Context, in *RecordReportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordStudy(ctx context.Context, in *RecordStudyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordCurtain(ctx context.Context, in *RecordCurtainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordCurtain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordPredictor(ctx context.Context, in *RecordPredictorRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPredictor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordPredictionPipeline(ctx context.Context, in *RecordPredictionPipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPredictionPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordPredictionPipelineRun(ctx context.Context, in *RecordPredictionPipelineRunRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPredictionPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordConversation(ctx context.Context, in *RecordConversationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordPostmortem(ctx context.Context, in *RecordPostmortemRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPostmortem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordRunbook(ctx context.Context, in *RecordRunbookRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordRunbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchivedServiceServer is the server API for ArchivedService service.
type ArchivedServiceServer interface {
	// Infra
	RecordAccount(context.Context, *RecordAccountRequest) (*empty.Empty, error)
	RecordConnection(context.Context, *RecordConnectionRequest) (*empty.Empty, error)
	RecordLab(context.Context, *RecordConnectionRequest) (*empty.Empty, error)
	RecordServingSite(context.Context, *RecordServingSiteRequest) (*empty.Empty, error)
	RecordLicense(context.Context, *RecordLicenseRequest) (*empty.Empty, error)
	RecordNotifier(context.Context, *RecordLicenseRequest) (*empty.Empty, error)
	RecordVirtualBucket(context.Context, *RecordVirtualBucketRequest) (*empty.Empty, error)
	RecordVirtualCluster(context.Context, *RecordVirtualClusterRequest) (*empty.Empty, error)
	RecordVirtualVolume(context.Context, *RecordVirtualVolumeRequest) (*empty.Empty, error)
	// Data
	RecordDataPipeline(context.Context, *RecordDataPipelineRequest) (*empty.Empty, error)
	RecordDataPipelineRun(context.Context, *RecordDataPipelineRunRequest) (*empty.Empty, error)
	RecordDataProduct(context.Context, *RecordDataProductRequest) (*empty.Empty, error)
	RecordDataProductVersion(context.Context, *RecordDataProductVersionRequest) (*empty.Empty, error)
	RecordDataSource(context.Context, *RecordDataSourceRequest) (*empty.Empty, error)
	RecordDataset(context.Context, *RecordDatasetRequest) (*empty.Empty, error)
	RecordFeature(context.Context, *RecordFeatureRequest) (*empty.Empty, error)
	RecordFeaturePipeline(context.Context, *RecordFeaturePipelineRequest) (*empty.Empty, error)
	RecordFeatureset(context.Context, *RecordFeaturesetRequest) (*empty.Empty, error)
	RecordEntity(context.Context, *RecordEntityRequest) (*empty.Empty, error)
	RecordLabelingPipeline(context.Context, *RecordLabelingPipelineRequest) (*empty.Empty, error)
	RecordRecipe(context.Context, *RecordRecipeRequest) (*empty.Empty, error)
	RecordRecipeRun(context.Context, *RecordRecipeRunRequest) (*empty.Empty, error)
	RecordModel(context.Context, *RecordModelRequest) (*empty.Empty, error)
	RecordModelPipeline(context.Context, *RecordModelPipelineRequest) (*empty.Empty, error)
	RecordNotebook(context.Context, *RecordNotebookRequest) (*empty.Empty, error)
	RecordNotebookRun(context.Context, *RecordNotebookRunRequest) (*empty.Empty, error)
	RecordReport(context.Context, *RecordReportRequest) (*empty.Empty, error)
	RecordStudy(context.Context, *RecordStudyRequest) (*empty.Empty, error)
	// ==================  inference
	RecordCurtain(context.Context, *RecordCurtainRequest) (*empty.Empty, error)
	RecordPredictor(context.Context, *RecordPredictorRequest) (*empty.Empty, error)
	RecordPredictionPipeline(context.Context, *RecordPredictionPipelineRequest) (*empty.Empty, error)
	RecordPredictionPipelineRun(context.Context, *RecordPredictionPipelineRunRequest) (*empty.Empty, error)
	// =================== team
	RecordConversation(context.Context, *RecordConversationRequest) (*empty.Empty, error)
	RecordPostmortem(context.Context, *RecordPostmortemRequest) (*empty.Empty, error)
	RecordRunbook(context.Context, *RecordRunbookRequest) (*empty.Empty, error)
}

// UnimplementedArchivedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedArchivedServiceServer struct {
}

func (*UnimplementedArchivedServiceServer) RecordAccount(context.Context, *RecordAccountRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordAccount not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordConnection(context.Context, *RecordConnectionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordConnection not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordLab(context.Context, *RecordConnectionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordLab not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordServingSite(context.Context, *RecordServingSiteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordServingSite not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordLicense(context.Context, *RecordLicenseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordLicense not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordNotifier(context.Context, *RecordLicenseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordNotifier not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordVirtualBucket(context.Context, *RecordVirtualBucketRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordVirtualBucket not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordVirtualCluster(context.Context, *RecordVirtualClusterRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordVirtualCluster not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordVirtualVolume(context.Context, *RecordVirtualVolumeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordVirtualVolume not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordDataPipeline(context.Context, *RecordDataPipelineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordDataPipeline not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordDataPipelineRun(context.Context, *RecordDataPipelineRunRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordDataPipelineRun not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordDataProduct(context.Context, *RecordDataProductRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordDataProduct not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordDataProductVersion(context.Context, *RecordDataProductVersionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordDataProductVersion not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordDataSource(context.Context, *RecordDataSourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordDataSource not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordDataset(context.Context, *RecordDatasetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordDataset not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordFeature(context.Context, *RecordFeatureRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordFeature not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordFeaturePipeline(context.Context, *RecordFeaturePipelineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordFeaturePipeline not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordFeatureset(context.Context, *RecordFeaturesetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordFeatureset not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordEntity(context.Context, *RecordEntityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordEntity not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordLabelingPipeline(context.Context, *RecordLabelingPipelineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordLabelingPipeline not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordRecipe(context.Context, *RecordRecipeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRecipe not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordRecipeRun(context.Context, *RecordRecipeRunRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRecipeRun not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordModel(context.Context, *RecordModelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordModel not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordModelPipeline(context.Context, *RecordModelPipelineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordModelPipeline not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordNotebook(context.Context, *RecordNotebookRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordNotebook not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordNotebookRun(context.Context, *RecordNotebookRunRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordNotebookRun not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordReport(context.Context, *RecordReportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordReport not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordStudy(context.Context, *RecordStudyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordStudy not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordCurtain(context.Context, *RecordCurtainRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordCurtain not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordPredictor(context.Context, *RecordPredictorRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPredictor not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordPredictionPipeline(context.Context, *RecordPredictionPipelineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPredictionPipeline not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordPredictionPipelineRun(context.Context, *RecordPredictionPipelineRunRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPredictionPipelineRun not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordConversation(context.Context, *RecordConversationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordConversation not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordPostmortem(context.Context, *RecordPostmortemRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPostmortem not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordRunbook(context.Context, *RecordRunbookRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRunbook not implemented")
}

func RegisterArchivedServiceServer(s *grpc.Server, srv ArchivedServiceServer) {
	s.RegisterService(&_ArchivedService_serviceDesc, srv)
}

func _ArchivedService_RecordAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordAccount(ctx, req.(*RecordAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordConnection(ctx, req.(*RecordConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordLab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordLab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordLab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordLab(ctx, req.(*RecordConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordServingSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordServingSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordServingSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordServingSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordServingSite(ctx, req.(*RecordServingSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordLicense(ctx, req.(*RecordLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordNotifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordNotifier(ctx, req.(*RecordLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordVirtualBucket(ctx, req.(*RecordVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordVirtualClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordVirtualCluster(ctx, req.(*RecordVirtualClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordVirtualVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordVirtualVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordVirtualVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordVirtualVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordVirtualVolume(ctx, req.(*RecordVirtualVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordDataPipeline(ctx, req.(*RecordDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordDataPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDataPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordDataPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordDataPipelineRun(ctx, req.(*RecordDataPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordDataProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDataProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordDataProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordDataProduct(ctx, req.(*RecordDataProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordDataProductVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDataProductVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordDataProductVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataProductVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordDataProductVersion(ctx, req.(*RecordDataProductVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordDataSource(ctx, req.(*RecordDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordDataset(ctx, req.(*RecordDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordFeature(ctx, req.(*RecordFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordFeaturePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordFeaturePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordFeaturePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordFeaturePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordFeaturePipeline(ctx, req.(*RecordFeaturePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordFeatureset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordFeaturesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordFeatureset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordFeatureset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordFeatureset(ctx, req.(*RecordFeaturesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordEntity(ctx, req.(*RecordEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordLabelingPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordLabelingPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordLabelingPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordLabelingPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordLabelingPipeline(ctx, req.(*RecordLabelingPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordRecipe(ctx, req.(*RecordRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordRecipeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRecipeRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordRecipeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordRecipeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordRecipeRun(ctx, req.(*RecordRecipeRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordModel(ctx, req.(*RecordModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordModelPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordModelPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordModelPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordModelPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordModelPipeline(ctx, req.(*RecordModelPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordNotebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordNotebook(ctx, req.(*RecordNotebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordNotebookRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordNotebookRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordNotebookRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordNotebookRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordNotebookRun(ctx, req.(*RecordNotebookRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordReport(ctx, req.(*RecordReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordStudy(ctx, req.(*RecordStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordCurtain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordCurtainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordCurtain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordCurtain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordCurtain(ctx, req.(*RecordCurtainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordPredictor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPredictorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordPredictor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPredictor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordPredictor(ctx, req.(*RecordPredictorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordPredictionPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPredictionPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordPredictionPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPredictionPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordPredictionPipeline(ctx, req.(*RecordPredictionPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordPredictionPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPredictionPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordPredictionPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPredictionPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordPredictionPipelineRun(ctx, req.(*RecordPredictionPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordConversation(ctx, req.(*RecordConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordPostmortem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPostmortemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordPostmortem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPostmortem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordPostmortem(ctx, req.(*RecordPostmortemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordRunbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRunbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordRunbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordRunbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordRunbook(ctx, req.(*RecordRunbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArchivedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeldapi.services.archived.v1.ArchivedService",
	HandlerType: (*ArchivedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordAccount",
			Handler:    _ArchivedService_RecordAccount_Handler,
		},
		{
			MethodName: "RecordConnection",
			Handler:    _ArchivedService_RecordConnection_Handler,
		},
		{
			MethodName: "RecordLab",
			Handler:    _ArchivedService_RecordLab_Handler,
		},
		{
			MethodName: "RecordServingSite",
			Handler:    _ArchivedService_RecordServingSite_Handler,
		},
		{
			MethodName: "RecordLicense",
			Handler:    _ArchivedService_RecordLicense_Handler,
		},
		{
			MethodName: "RecordNotifier",
			Handler:    _ArchivedService_RecordNotifier_Handler,
		},
		{
			MethodName: "RecordVirtualBucket",
			Handler:    _ArchivedService_RecordVirtualBucket_Handler,
		},
		{
			MethodName: "RecordVirtualCluster",
			Handler:    _ArchivedService_RecordVirtualCluster_Handler,
		},
		{
			MethodName: "RecordVirtualVolume",
			Handler:    _ArchivedService_RecordVirtualVolume_Handler,
		},
		{
			MethodName: "RecordDataPipeline",
			Handler:    _ArchivedService_RecordDataPipeline_Handler,
		},
		{
			MethodName: "RecordDataPipelineRun",
			Handler:    _ArchivedService_RecordDataPipelineRun_Handler,
		},
		{
			MethodName: "RecordDataProduct",
			Handler:    _ArchivedService_RecordDataProduct_Handler,
		},
		{
			MethodName: "RecordDataProductVersion",
			Handler:    _ArchivedService_RecordDataProductVersion_Handler,
		},
		{
			MethodName: "RecordDataSource",
			Handler:    _ArchivedService_RecordDataSource_Handler,
		},
		{
			MethodName: "RecordDataset",
			Handler:    _ArchivedService_RecordDataset_Handler,
		},
		{
			MethodName: "RecordFeature",
			Handler:    _ArchivedService_RecordFeature_Handler,
		},
		{
			MethodName: "RecordFeaturePipeline",
			Handler:    _ArchivedService_RecordFeaturePipeline_Handler,
		},
		{
			MethodName: "RecordFeatureset",
			Handler:    _ArchivedService_RecordFeatureset_Handler,
		},
		{
			MethodName: "RecordEntity",
			Handler:    _ArchivedService_RecordEntity_Handler,
		},
		{
			MethodName: "RecordLabelingPipeline",
			Handler:    _ArchivedService_RecordLabelingPipeline_Handler,
		},
		{
			MethodName: "RecordRecipe",
			Handler:    _ArchivedService_RecordRecipe_Handler,
		},
		{
			MethodName: "RecordRecipeRun",
			Handler:    _ArchivedService_RecordRecipeRun_Handler,
		},
		{
			MethodName: "RecordModel",
			Handler:    _ArchivedService_RecordModel_Handler,
		},
		{
			MethodName: "RecordModelPipeline",
			Handler:    _ArchivedService_RecordModelPipeline_Handler,
		},
		{
			MethodName: "RecordNotebook",
			Handler:    _ArchivedService_RecordNotebook_Handler,
		},
		{
			MethodName: "RecordNotebookRun",
			Handler:    _ArchivedService_RecordNotebookRun_Handler,
		},
		{
			MethodName: "RecordReport",
			Handler:    _ArchivedService_RecordReport_Handler,
		},
		{
			MethodName: "RecordStudy",
			Handler:    _ArchivedService_RecordStudy_Handler,
		},
		{
			MethodName: "RecordCurtain",
			Handler:    _ArchivedService_RecordCurtain_Handler,
		},
		{
			MethodName: "RecordPredictor",
			Handler:    _ArchivedService_RecordPredictor_Handler,
		},
		{
			MethodName: "RecordPredictionPipeline",
			Handler:    _ArchivedService_RecordPredictionPipeline_Handler,
		},
		{
			MethodName: "RecordPredictionPipelineRun",
			Handler:    _ArchivedService_RecordPredictionPipelineRun_Handler,
		},
		{
			MethodName: "RecordConversation",
			Handler:    _ArchivedService_RecordConversation_Handler,
		},
		{
			MethodName: "RecordPostmortem",
			Handler:    _ArchivedService_RecordPostmortem_Handler,
		},
		{
			MethodName: "RecordRunbook",
			Handler:    _ArchivedService_RecordRunbook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modeldapi/services/archived/v1/archived.proto",
}
