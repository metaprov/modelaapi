// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: services/archived/v1/archived.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha11 "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1"
	v1alpha12 "github.com/metaprov/modeldapi/pkg/apis/inference/v1alpha1"
	v1alpha13 "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/training/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RecordModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model *v1alpha1.Model `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *RecordModelRequest) Reset() {
	*x = RecordModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordModelRequest) ProtoMessage() {}

func (x *RecordModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordModelRequest.ProtoReflect.Descriptor instead.
func (*RecordModelRequest) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{0}
}

func (x *RecordModelRequest) GetModel() *v1alpha1.Model {
	if x != nil {
		return x.Model
	}
	return nil
}

type RecordModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordModelResponse) Reset() {
	*x = RecordModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordModelResponse) ProtoMessage() {}

func (x *RecordModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordModelResponse.ProtoReflect.Descriptor instead.
func (*RecordModelResponse) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{1}
}

type RecordStudyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Study *v1alpha1.Study `protobuf:"bytes,1,opt,name=study,proto3" json:"study,omitempty"`
}

func (x *RecordStudyRequest) Reset() {
	*x = RecordStudyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordStudyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordStudyRequest) ProtoMessage() {}

func (x *RecordStudyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordStudyRequest.ProtoReflect.Descriptor instead.
func (*RecordStudyRequest) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{2}
}

func (x *RecordStudyRequest) GetStudy() *v1alpha1.Study {
	if x != nil {
		return x.Study
	}
	return nil
}

type RecordStudyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordStudyResponse) Reset() {
	*x = RecordStudyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordStudyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordStudyResponse) ProtoMessage() {}

func (x *RecordStudyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordStudyResponse.ProtoReflect.Descriptor instead.
func (*RecordStudyResponse) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{3}
}

type RecordDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *v1alpha11.Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *RecordDatasetRequest) Reset() {
	*x = RecordDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDatasetRequest) ProtoMessage() {}

func (x *RecordDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDatasetRequest.ProtoReflect.Descriptor instead.
func (*RecordDatasetRequest) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{4}
}

func (x *RecordDatasetRequest) GetDataset() *v1alpha11.Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type RecordDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordDatasetResponse) Reset() {
	*x = RecordDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDatasetResponse) ProtoMessage() {}

func (x *RecordDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDatasetResponse.ProtoReflect.Descriptor instead.
func (*RecordDatasetResponse) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{5}
}

type RecordPredictionPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prediction *v1alpha12.PredictionPipeline `protobuf:"bytes,1,opt,name=prediction,proto3" json:"prediction,omitempty"`
}

func (x *RecordPredictionPipelineRequest) Reset() {
	*x = RecordPredictionPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPredictionPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPredictionPipelineRequest) ProtoMessage() {}

func (x *RecordPredictionPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPredictionPipelineRequest.ProtoReflect.Descriptor instead.
func (*RecordPredictionPipelineRequest) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{6}
}

func (x *RecordPredictionPipelineRequest) GetPrediction() *v1alpha12.PredictionPipeline {
	if x != nil {
		return x.Prediction
	}
	return nil
}

type RecordPredictionPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordPredictionPipelineResponse) Reset() {
	*x = RecordPredictionPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPredictionPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPredictionPipelineResponse) ProtoMessage() {}

func (x *RecordPredictionPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPredictionPipelineResponse.ProtoReflect.Descriptor instead.
func (*RecordPredictionPipelineResponse) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{7}
}

type RecordPredictorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predictor *v1alpha12.Predictor `protobuf:"bytes,1,opt,name=predictor,proto3" json:"predictor,omitempty"`
}

func (x *RecordPredictorRequest) Reset() {
	*x = RecordPredictorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPredictorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPredictorRequest) ProtoMessage() {}

func (x *RecordPredictorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPredictorRequest.ProtoReflect.Descriptor instead.
func (*RecordPredictorRequest) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{8}
}

func (x *RecordPredictorRequest) GetPredictor() *v1alpha12.Predictor {
	if x != nil {
		return x.Predictor
	}
	return nil
}

type RecordPredictorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordPredictorResponse) Reset() {
	*x = RecordPredictorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPredictorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPredictorResponse) ProtoMessage() {}

func (x *RecordPredictorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPredictorResponse.ProtoReflect.Descriptor instead.
func (*RecordPredictorResponse) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{9}
}

type RecordDataProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *v1alpha11.DataProduct `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *RecordDataProductRequest) Reset() {
	*x = RecordDataProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataProductRequest) ProtoMessage() {}

func (x *RecordDataProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataProductRequest.ProtoReflect.Descriptor instead.
func (*RecordDataProductRequest) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{10}
}

func (x *RecordDataProductRequest) GetProduct() *v1alpha11.DataProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

type RecordDataProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordDataProductResponse) Reset() {
	*x = RecordDataProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataProductResponse) ProtoMessage() {}

func (x *RecordDataProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataProductResponse.ProtoReflect.Descriptor instead.
func (*RecordDataProductResponse) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{11}
}

type RecordDataProductVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *v1alpha11.DataProductVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RecordDataProductVersionRequest) Reset() {
	*x = RecordDataProductVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataProductVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataProductVersionRequest) ProtoMessage() {}

func (x *RecordDataProductVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataProductVersionRequest.ProtoReflect.Descriptor instead.
func (*RecordDataProductVersionRequest) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{12}
}

func (x *RecordDataProductVersionRequest) GetVersion() *v1alpha11.DataProductVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type RecordDataProductVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordDataProductVersionResponse) Reset() {
	*x = RecordDataProductVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataProductVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataProductVersionResponse) ProtoMessage() {}

func (x *RecordDataProductVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataProductVersionResponse.ProtoReflect.Descriptor instead.
func (*RecordDataProductVersionResponse) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{13}
}

type RecordAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *v1alpha13.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *RecordAccountRequest) Reset() {
	*x = RecordAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordAccountRequest) ProtoMessage() {}

func (x *RecordAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordAccountRequest.ProtoReflect.Descriptor instead.
func (*RecordAccountRequest) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{14}
}

func (x *RecordAccountRequest) GetAccount() *v1alpha13.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type RecordAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordAccountResponse) Reset() {
	*x = RecordAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordAccountResponse) ProtoMessage() {}

func (x *RecordAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordAccountResponse.ProtoReflect.Descriptor instead.
func (*RecordAccountResponse) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{15}
}

// Used for delete resultponse
type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_archived_v1_archived_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_archived_v1_archived_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_services_archived_v1_archived_proto_rawDescGZIP(), []int{16}
}

var File_services_archived_v1_archived_proto protoreflect.FileDescriptor

var file_services_archived_v1_archived_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x12, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x55, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6b, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x05, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x05, 0x73, 0x74, 0x75, 0x64, 0x79, 0x22, 0x15, 0x0a, 0x13,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01,
	0x0a, 0x1f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x22, 0x0a, 0x20, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62,
	0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a,
	0x18, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x20, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x70, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x99, 0x0b, 0x0a,
	0x0f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xa0, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x12, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xc7, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x53, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x54, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xac, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xae, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc3, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x53, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa6, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_archived_v1_archived_proto_rawDescOnce sync.Once
	file_services_archived_v1_archived_proto_rawDescData = file_services_archived_v1_archived_proto_rawDesc
)

func file_services_archived_v1_archived_proto_rawDescGZIP() []byte {
	file_services_archived_v1_archived_proto_rawDescOnce.Do(func() {
		file_services_archived_v1_archived_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_archived_v1_archived_proto_rawDescData)
	})
	return file_services_archived_v1_archived_proto_rawDescData
}

var file_services_archived_v1_archived_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_services_archived_v1_archived_proto_goTypes = []interface{}{
	(*RecordModelRequest)(nil),               // 0: github.com.metaprov.modeldapi.services.archived.v1.RecordModelRequest
	(*RecordModelResponse)(nil),              // 1: github.com.metaprov.modeldapi.services.archived.v1.RecordModelResponse
	(*RecordStudyRequest)(nil),               // 2: github.com.metaprov.modeldapi.services.archived.v1.RecordStudyRequest
	(*RecordStudyResponse)(nil),              // 3: github.com.metaprov.modeldapi.services.archived.v1.RecordStudyResponse
	(*RecordDatasetRequest)(nil),             // 4: github.com.metaprov.modeldapi.services.archived.v1.RecordDatasetRequest
	(*RecordDatasetResponse)(nil),            // 5: github.com.metaprov.modeldapi.services.archived.v1.RecordDatasetResponse
	(*RecordPredictionPipelineRequest)(nil),  // 6: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictionPipelineRequest
	(*RecordPredictionPipelineResponse)(nil), // 7: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictionPipelineResponse
	(*RecordPredictorRequest)(nil),           // 8: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictorRequest
	(*RecordPredictorResponse)(nil),          // 9: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictorResponse
	(*RecordDataProductRequest)(nil),         // 10: github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductRequest
	(*RecordDataProductResponse)(nil),        // 11: github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductResponse
	(*RecordDataProductVersionRequest)(nil),  // 12: github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductVersionRequest
	(*RecordDataProductVersionResponse)(nil), // 13: github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductVersionResponse
	(*RecordAccountRequest)(nil),             // 14: github.com.metaprov.modeldapi.services.archived.v1.RecordAccountRequest
	(*RecordAccountResponse)(nil),            // 15: github.com.metaprov.modeldapi.services.archived.v1.RecordAccountResponse
	(*DeleteResponse)(nil),                   // 16: github.com.metaprov.modeldapi.services.archived.v1.DeleteResponse
	(*v1alpha1.Model)(nil),                   // 17: github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Model
	(*v1alpha1.Study)(nil),                   // 18: github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Study
	(*v1alpha11.Dataset)(nil),                // 19: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Dataset
	(*v1alpha12.PredictionPipeline)(nil),     // 20: github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipeline
	(*v1alpha12.Predictor)(nil),              // 21: github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.Predictor
	(*v1alpha11.DataProduct)(nil),            // 22: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProduct
	(*v1alpha11.DataProductVersion)(nil),     // 23: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProductVersion
	(*v1alpha13.Account)(nil),                // 24: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Account
}
var file_services_archived_v1_archived_proto_depIdxs = []int32{
	17, // 0: github.com.metaprov.modeldapi.services.archived.v1.RecordModelRequest.model:type_name -> github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Model
	18, // 1: github.com.metaprov.modeldapi.services.archived.v1.RecordStudyRequest.study:type_name -> github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Study
	19, // 2: github.com.metaprov.modeldapi.services.archived.v1.RecordDatasetRequest.dataset:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Dataset
	20, // 3: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictionPipelineRequest.prediction:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipeline
	21, // 4: github.com.metaprov.modeldapi.services.archived.v1.RecordPredictorRequest.predictor:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.Predictor
	22, // 5: github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductRequest.product:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProduct
	23, // 6: github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductVersionRequest.version:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProductVersion
	24, // 7: github.com.metaprov.modeldapi.services.archived.v1.RecordAccountRequest.account:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Account
	0,  // 8: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordModel:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordModelRequest
	2,  // 9: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordStudy:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordStudyRequest
	4,  // 10: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataset:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDatasetRequest
	6,  // 11: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPredictionPipeline:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordPredictionPipelineRequest
	8,  // 12: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPredictor:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordPredictorRequest
	10, // 13: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordProduct:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductRequest
	12, // 14: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordProductVersion:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductVersionRequest
	14, // 15: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordAccount:input_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordAccountRequest
	1,  // 16: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordModel:output_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordModelResponse
	3,  // 17: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordStudy:output_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordStudyResponse
	5,  // 18: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordDataset:output_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDatasetResponse
	7,  // 19: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPredictionPipeline:output_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordPredictionPipelineResponse
	9,  // 20: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordPredictor:output_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordPredictorResponse
	11, // 21: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordProduct:output_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductResponse
	13, // 22: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordProductVersion:output_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordDataProductVersionResponse
	15, // 23: github.com.metaprov.modeldapi.services.archived.v1.ArchivedService.RecordAccount:output_type -> github.com.metaprov.modeldapi.services.archived.v1.RecordAccountResponse
	16, // [16:24] is the sub-list for method output_type
	8,  // [8:16] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_services_archived_v1_archived_proto_init() }
func file_services_archived_v1_archived_proto_init() {
	if File_services_archived_v1_archived_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_archived_v1_archived_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordStudyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordStudyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPredictionPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPredictionPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPredictorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPredictorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataProductVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataProductVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_archived_v1_archived_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_archived_v1_archived_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_archived_v1_archived_proto_goTypes,
		DependencyIndexes: file_services_archived_v1_archived_proto_depIdxs,
		MessageInfos:      file_services_archived_v1_archived_proto_msgTypes,
	}.Build()
	File_services_archived_v1_archived_proto = out.File
	file_services_archived_v1_archived_proto_rawDesc = nil
	file_services_archived_v1_archived_proto_goTypes = nil
	file_services_archived_v1_archived_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ArchivedServiceClient is the client API for ArchivedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArchivedServiceClient interface {
	// Models
	RecordModel(ctx context.Context, in *RecordModelRequest, opts ...grpc.CallOption) (*RecordModelResponse, error)
	RecordStudy(ctx context.Context, in *RecordStudyRequest, opts ...grpc.CallOption) (*RecordStudyResponse, error)
	RecordDataset(ctx context.Context, in *RecordDatasetRequest, opts ...grpc.CallOption) (*RecordDatasetResponse, error)
	RecordPredictionPipeline(ctx context.Context, in *RecordPredictionPipelineRequest, opts ...grpc.CallOption) (*RecordPredictionPipelineResponse, error)
	RecordPredictor(ctx context.Context, in *RecordPredictorRequest, opts ...grpc.CallOption) (*RecordPredictorResponse, error)
	RecordProduct(ctx context.Context, in *RecordDataProductRequest, opts ...grpc.CallOption) (*RecordDataProductResponse, error)
	RecordProductVersion(ctx context.Context, in *RecordDataProductVersionRequest, opts ...grpc.CallOption) (*RecordDataProductVersionResponse, error)
	RecordAccount(ctx context.Context, in *RecordAccountRequest, opts ...grpc.CallOption) (*RecordAccountResponse, error)
}

type archivedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArchivedServiceClient(cc grpc.ClientConnInterface) ArchivedServiceClient {
	return &archivedServiceClient{cc}
}

func (c *archivedServiceClient) RecordModel(ctx context.Context, in *RecordModelRequest, opts ...grpc.CallOption) (*RecordModelResponse, error) {
	out := new(RecordModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordStudy(ctx context.Context, in *RecordStudyRequest, opts ...grpc.CallOption) (*RecordStudyResponse, error) {
	out := new(RecordStudyResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordDataset(ctx context.Context, in *RecordDatasetRequest, opts ...grpc.CallOption) (*RecordDatasetResponse, error) {
	out := new(RecordDatasetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordPredictionPipeline(ctx context.Context, in *RecordPredictionPipelineRequest, opts ...grpc.CallOption) (*RecordPredictionPipelineResponse, error) {
	out := new(RecordPredictionPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPredictionPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordPredictor(ctx context.Context, in *RecordPredictorRequest, opts ...grpc.CallOption) (*RecordPredictorResponse, error) {
	out := new(RecordPredictorResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPredictor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordProduct(ctx context.Context, in *RecordDataProductRequest, opts ...grpc.CallOption) (*RecordDataProductResponse, error) {
	out := new(RecordDataProductResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordProductVersion(ctx context.Context, in *RecordDataProductVersionRequest, opts ...grpc.CallOption) (*RecordDataProductVersionResponse, error) {
	out := new(RecordDataProductVersionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordProductVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedServiceClient) RecordAccount(ctx context.Context, in *RecordAccountRequest, opts ...grpc.CallOption) (*RecordAccountResponse, error) {
	out := new(RecordAccountResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchivedServiceServer is the server API for ArchivedService service.
type ArchivedServiceServer interface {
	// Models
	RecordModel(context.Context, *RecordModelRequest) (*RecordModelResponse, error)
	RecordStudy(context.Context, *RecordStudyRequest) (*RecordStudyResponse, error)
	RecordDataset(context.Context, *RecordDatasetRequest) (*RecordDatasetResponse, error)
	RecordPredictionPipeline(context.Context, *RecordPredictionPipelineRequest) (*RecordPredictionPipelineResponse, error)
	RecordPredictor(context.Context, *RecordPredictorRequest) (*RecordPredictorResponse, error)
	RecordProduct(context.Context, *RecordDataProductRequest) (*RecordDataProductResponse, error)
	RecordProductVersion(context.Context, *RecordDataProductVersionRequest) (*RecordDataProductVersionResponse, error)
	RecordAccount(context.Context, *RecordAccountRequest) (*RecordAccountResponse, error)
}

// UnimplementedArchivedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedArchivedServiceServer struct {
}

func (*UnimplementedArchivedServiceServer) RecordModel(context.Context, *RecordModelRequest) (*RecordModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordModel not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordStudy(context.Context, *RecordStudyRequest) (*RecordStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordStudy not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordDataset(context.Context, *RecordDatasetRequest) (*RecordDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordDataset not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordPredictionPipeline(context.Context, *RecordPredictionPipelineRequest) (*RecordPredictionPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPredictionPipeline not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordPredictor(context.Context, *RecordPredictorRequest) (*RecordPredictorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPredictor not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordProduct(context.Context, *RecordDataProductRequest) (*RecordDataProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordProduct not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordProductVersion(context.Context, *RecordDataProductVersionRequest) (*RecordDataProductVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordProductVersion not implemented")
}
func (*UnimplementedArchivedServiceServer) RecordAccount(context.Context, *RecordAccountRequest) (*RecordAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordAccount not implemented")
}

func RegisterArchivedServiceServer(s *grpc.Server, srv ArchivedServiceServer) {
	s.RegisterService(&_ArchivedService_serviceDesc, srv)
}

func _ArchivedService_RecordModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordModel(ctx, req.(*RecordModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordStudy(ctx, req.(*RecordStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordDataset(ctx, req.(*RecordDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordPredictionPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPredictionPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordPredictionPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPredictionPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordPredictionPipeline(ctx, req.(*RecordPredictionPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordPredictor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPredictorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordPredictor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordPredictor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordPredictor(ctx, req.(*RecordPredictorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDataProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordProduct(ctx, req.(*RecordDataProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordProductVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDataProductVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordProductVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordProductVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordProductVersion(ctx, req.(*RecordDataProductVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedService_RecordAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedServiceServer).RecordAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.archived.v1.ArchivedService/RecordAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedServiceServer).RecordAccount(ctx, req.(*RecordAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArchivedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeldapi.services.archived.v1.ArchivedService",
	HandlerType: (*ArchivedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordModel",
			Handler:    _ArchivedService_RecordModel_Handler,
		},
		{
			MethodName: "RecordStudy",
			Handler:    _ArchivedService_RecordStudy_Handler,
		},
		{
			MethodName: "RecordDataset",
			Handler:    _ArchivedService_RecordDataset_Handler,
		},
		{
			MethodName: "RecordPredictionPipeline",
			Handler:    _ArchivedService_RecordPredictionPipeline_Handler,
		},
		{
			MethodName: "RecordPredictor",
			Handler:    _ArchivedService_RecordPredictor_Handler,
		},
		{
			MethodName: "RecordProduct",
			Handler:    _ArchivedService_RecordProduct_Handler,
		},
		{
			MethodName: "RecordProductVersion",
			Handler:    _ArchivedService_RecordProductVersion_Handler,
		},
		{
			MethodName: "RecordAccount",
			Handler:    _ArchivedService_RecordAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/archived/v1/archived.proto",
}
