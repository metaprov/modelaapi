// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/onlinefeaturestored/v1/onlinefeaturestored.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OnlineFeatureStoreServiceClient is the client API for OnlineFeatureStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnlineFeatureStoreServiceClient interface {
	OnlineGet(ctx context.Context, in *OnlineGetRequest, opts ...grpc.CallOption) (*OnlineGetResponse, error)
	OnlineMultiGet(ctx context.Context, in *OnlineMultiGetRequest, opts ...grpc.CallOption) (*OnlineMultiGetResponse, error)
	Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error)
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type onlineFeatureStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnlineFeatureStoreServiceClient(cc grpc.ClientConnInterface) OnlineFeatureStoreServiceClient {
	return &onlineFeatureStoreServiceClient{cc}
}

func (c *onlineFeatureStoreServiceClient) OnlineGet(ctx context.Context, in *OnlineGetRequest, opts ...grpc.CallOption) (*OnlineGetResponse, error) {
	out := new(OnlineGetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.onlinefeaturestored.v1.OnlineFeatureStoreService/OnlineGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineFeatureStoreServiceClient) OnlineMultiGet(ctx context.Context, in *OnlineMultiGetRequest, opts ...grpc.CallOption) (*OnlineMultiGetResponse, error) {
	out := new(OnlineMultiGetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.onlinefeaturestored.v1.OnlineFeatureStoreService/OnlineMultiGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineFeatureStoreServiceClient) Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.onlinefeaturestored.v1.OnlineFeatureStoreService/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineFeatureStoreServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.onlinefeaturestored.v1.OnlineFeatureStoreService/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlineFeatureStoreServiceServer is the server API for OnlineFeatureStoreService service.
// All implementations must embed UnimplementedOnlineFeatureStoreServiceServer
// for forward compatibility
type OnlineFeatureStoreServiceServer interface {
	OnlineGet(context.Context, *OnlineGetRequest) (*OnlineGetResponse, error)
	OnlineMultiGet(context.Context, *OnlineMultiGetRequest) (*OnlineMultiGetResponse, error)
	Import(context.Context, *ImportRequest) (*ImportResponse, error)
	Push(context.Context, *PushRequest) (*PushResponse, error)
	mustEmbedUnimplementedOnlineFeatureStoreServiceServer()
}

// UnimplementedOnlineFeatureStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOnlineFeatureStoreServiceServer struct {
}

func (UnimplementedOnlineFeatureStoreServiceServer) OnlineGet(context.Context, *OnlineGetRequest) (*OnlineGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineGet not implemented")
}
func (UnimplementedOnlineFeatureStoreServiceServer) OnlineMultiGet(context.Context, *OnlineMultiGetRequest) (*OnlineMultiGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineMultiGet not implemented")
}
func (UnimplementedOnlineFeatureStoreServiceServer) Import(context.Context, *ImportRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedOnlineFeatureStoreServiceServer) Push(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedOnlineFeatureStoreServiceServer) mustEmbedUnimplementedOnlineFeatureStoreServiceServer() {
}

// UnsafeOnlineFeatureStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnlineFeatureStoreServiceServer will
// result in compilation errors.
type UnsafeOnlineFeatureStoreServiceServer interface {
	mustEmbedUnimplementedOnlineFeatureStoreServiceServer()
}

func RegisterOnlineFeatureStoreServiceServer(s grpc.ServiceRegistrar, srv OnlineFeatureStoreServiceServer) {
	s.RegisterService(&OnlineFeatureStoreService_ServiceDesc, srv)
}

func _OnlineFeatureStoreService_OnlineGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineFeatureStoreServiceServer).OnlineGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.onlinefeaturestored.v1.OnlineFeatureStoreService/OnlineGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineFeatureStoreServiceServer).OnlineGet(ctx, req.(*OnlineGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineFeatureStoreService_OnlineMultiGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineMultiGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineFeatureStoreServiceServer).OnlineMultiGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.onlinefeaturestored.v1.OnlineFeatureStoreService/OnlineMultiGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineFeatureStoreServiceServer).OnlineMultiGet(ctx, req.(*OnlineMultiGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineFeatureStoreService_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineFeatureStoreServiceServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.onlinefeaturestored.v1.OnlineFeatureStoreService/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineFeatureStoreServiceServer).Import(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineFeatureStoreService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineFeatureStoreServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.onlinefeaturestored.v1.OnlineFeatureStoreService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineFeatureStoreServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnlineFeatureStoreService_ServiceDesc is the grpc.ServiceDesc for OnlineFeatureStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnlineFeatureStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.onlinefeaturestored.v1.OnlineFeatureStoreService",
	HandlerType: (*OnlineFeatureStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnlineGet",
			Handler:    _OnlineFeatureStoreService_OnlineGet_Handler,
		},
		{
			MethodName: "OnlineMultiGet",
			Handler:    _OnlineFeatureStoreService_OnlineMultiGet_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _OnlineFeatureStoreService_Import_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _OnlineFeatureStoreService_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/onlinefeaturestored/v1/onlinefeaturestored.proto",
}
