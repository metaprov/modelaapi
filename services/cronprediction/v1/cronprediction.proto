syntax = "proto3";

option go_package = "github.com/metaprov/modelaapi/services/cronprediction/v1";
package github.com.metaprov.modelaapi.services.cronprediction.v1;


import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/inference/v1alpha1/generated.proto";


message ListCronPredictionsRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message ListCronPredictionsResponse {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPredictionList items = 1;
}

message CreateCronPredictionResponse {}

message CreateCronPredictionRequest {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPrediction item = 1;
}

message UpdateCronPredictionRequest {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPrediction item = 1;
}

message UpdateCronPredictionResponse {

}

message GetCronPredictionRequest {
    string namespace = 1;
    string name      = 2;
}

message GetCronPredictionResponse {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPrediction item = 1;
    string yaml = 2;
}

message DeleteCronPredictionRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteCronPredictionResponse {

}

message PauseCronPredictionRequest {
    string namespace = 1;
    string name      = 2;
}

message PauseCronPredictionResponse {

}

message ResumeCronPredictionRequest {
    string namespace = 1;
    string name      = 2;
}

message ResumeCronPredictionResponse {

}



message RunCronPredictionRequest {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPrediction item = 1;
}


message RunCronPredictionResponse {
    
}


service CronPredictionService {

    rpc ListCronPredictions(ListCronPredictionsRequest) returns (ListCronPredictionsResponse) {
        option (google.api.http).get = "/v1/cronpredictions/{namespace}";
    }

    rpc CreateCronPrediction(CreateCronPredictionRequest) returns (CreateCronPredictionResponse) {
        option (google.api.http) = {
			post: "/v1/cronpredictions"
			body: "*"
		};
    }

    rpc GetCronPrediction(GetCronPredictionRequest) returns (GetCronPredictionResponse) {
        option (google.api.http).get = "/v1/cronpredictions/{name}";
    }

    rpc UpdateCronPrediction(UpdateCronPredictionRequest) returns (UpdateCronPredictionResponse) {
        option (google.api.http) = {
			put: "/v1/cronpredictions/{item.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteCronPrediction(DeleteCronPredictionRequest) returns (DeleteCronPredictionResponse) {
        option (google.api.http).delete = "/v1/cronpredictions/{name}";
    }

    rpc PauseCronPrediction(PauseCronPredictionRequest) returns (PauseCronPredictionResponse) {
        option (google.api.http).post = "/v1/cronpredictions/{name}:pause";
    }

    rpc ResumeCronPrediction(ResumeCronPredictionRequest) returns (ResumeCronPredictionResponse) {
        option (google.api.http).post = "/v1/cronpredictions/{name}:resume";
    }

    rpc RunPrediction(RunCronPredictionRequest) returns (RunCronPredictionResponse) {
        option (google.api.http).post = "/v1/cronpredictions/{item.metadata.name}:run";
    }
}