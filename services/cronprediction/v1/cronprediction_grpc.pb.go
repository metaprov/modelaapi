// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/cronprediction/v1/cronprediction.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CronPredictionServiceClient is the client API for CronPredictionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CronPredictionServiceClient interface {
	ListCronPredictions(ctx context.Context, in *ListCronPredictionsRequest, opts ...grpc.CallOption) (*ListCronPredictionsResponse, error)
	CreateCronPrediction(ctx context.Context, in *CreateCronPredictionRequest, opts ...grpc.CallOption) (*CreateCronPredictionResponse, error)
	GetCronPrediction(ctx context.Context, in *GetCronPredictionRequest, opts ...grpc.CallOption) (*GetCronPredictionResponse, error)
	UpdateCronPrediction(ctx context.Context, in *UpdateCronPredictionRequest, opts ...grpc.CallOption) (*UpdateCronPredictionResponse, error)
	DeleteCronPrediction(ctx context.Context, in *DeleteCronPredictionRequest, opts ...grpc.CallOption) (*DeleteCronPredictionResponse, error)
	PauseCronPrediction(ctx context.Context, in *PauseCronPredictionRequest, opts ...grpc.CallOption) (*PauseCronPredictionResponse, error)
	ResumeCronPrediction(ctx context.Context, in *ResumeCronPredictionRequest, opts ...grpc.CallOption) (*ResumeCronPredictionResponse, error)
	RunPrediction(ctx context.Context, in *RunCronPredictionRequest, opts ...grpc.CallOption) (*RunCronPredictionResponse, error)
}

type cronPredictionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCronPredictionServiceClient(cc grpc.ClientConnInterface) CronPredictionServiceClient {
	return &cronPredictionServiceClient{cc}
}

func (c *cronPredictionServiceClient) ListCronPredictions(ctx context.Context, in *ListCronPredictionsRequest, opts ...grpc.CallOption) (*ListCronPredictionsResponse, error) {
	out := new(ListCronPredictionsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/ListCronPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) CreateCronPrediction(ctx context.Context, in *CreateCronPredictionRequest, opts ...grpc.CallOption) (*CreateCronPredictionResponse, error) {
	out := new(CreateCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/CreateCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) GetCronPrediction(ctx context.Context, in *GetCronPredictionRequest, opts ...grpc.CallOption) (*GetCronPredictionResponse, error) {
	out := new(GetCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/GetCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) UpdateCronPrediction(ctx context.Context, in *UpdateCronPredictionRequest, opts ...grpc.CallOption) (*UpdateCronPredictionResponse, error) {
	out := new(UpdateCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/UpdateCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) DeleteCronPrediction(ctx context.Context, in *DeleteCronPredictionRequest, opts ...grpc.CallOption) (*DeleteCronPredictionResponse, error) {
	out := new(DeleteCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/DeleteCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) PauseCronPrediction(ctx context.Context, in *PauseCronPredictionRequest, opts ...grpc.CallOption) (*PauseCronPredictionResponse, error) {
	out := new(PauseCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/PauseCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) ResumeCronPrediction(ctx context.Context, in *ResumeCronPredictionRequest, opts ...grpc.CallOption) (*ResumeCronPredictionResponse, error) {
	out := new(ResumeCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/ResumeCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) RunPrediction(ctx context.Context, in *RunCronPredictionRequest, opts ...grpc.CallOption) (*RunCronPredictionResponse, error) {
	out := new(RunCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/RunPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronPredictionServiceServer is the server API for CronPredictionService service.
// All implementations must embed UnimplementedCronPredictionServiceServer
// for forward compatibility
type CronPredictionServiceServer interface {
	ListCronPredictions(context.Context, *ListCronPredictionsRequest) (*ListCronPredictionsResponse, error)
	CreateCronPrediction(context.Context, *CreateCronPredictionRequest) (*CreateCronPredictionResponse, error)
	GetCronPrediction(context.Context, *GetCronPredictionRequest) (*GetCronPredictionResponse, error)
	UpdateCronPrediction(context.Context, *UpdateCronPredictionRequest) (*UpdateCronPredictionResponse, error)
	DeleteCronPrediction(context.Context, *DeleteCronPredictionRequest) (*DeleteCronPredictionResponse, error)
	PauseCronPrediction(context.Context, *PauseCronPredictionRequest) (*PauseCronPredictionResponse, error)
	ResumeCronPrediction(context.Context, *ResumeCronPredictionRequest) (*ResumeCronPredictionResponse, error)
	RunPrediction(context.Context, *RunCronPredictionRequest) (*RunCronPredictionResponse, error)
	mustEmbedUnimplementedCronPredictionServiceServer()
}

// UnimplementedCronPredictionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCronPredictionServiceServer struct {
}

func (UnimplementedCronPredictionServiceServer) ListCronPredictions(context.Context, *ListCronPredictionsRequest) (*ListCronPredictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronPredictions not implemented")
}
func (UnimplementedCronPredictionServiceServer) CreateCronPrediction(context.Context, *CreateCronPredictionRequest) (*CreateCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronPrediction not implemented")
}
func (UnimplementedCronPredictionServiceServer) GetCronPrediction(context.Context, *GetCronPredictionRequest) (*GetCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronPrediction not implemented")
}
func (UnimplementedCronPredictionServiceServer) UpdateCronPrediction(context.Context, *UpdateCronPredictionRequest) (*UpdateCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronPrediction not implemented")
}
func (UnimplementedCronPredictionServiceServer) DeleteCronPrediction(context.Context, *DeleteCronPredictionRequest) (*DeleteCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronPrediction not implemented")
}
func (UnimplementedCronPredictionServiceServer) PauseCronPrediction(context.Context, *PauseCronPredictionRequest) (*PauseCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCronPrediction not implemented")
}
func (UnimplementedCronPredictionServiceServer) ResumeCronPrediction(context.Context, *ResumeCronPredictionRequest) (*ResumeCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeCronPrediction not implemented")
}
func (UnimplementedCronPredictionServiceServer) RunPrediction(context.Context, *RunCronPredictionRequest) (*RunCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPrediction not implemented")
}
func (UnimplementedCronPredictionServiceServer) mustEmbedUnimplementedCronPredictionServiceServer() {}

// UnsafeCronPredictionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CronPredictionServiceServer will
// result in compilation errors.
type UnsafeCronPredictionServiceServer interface {
	mustEmbedUnimplementedCronPredictionServiceServer()
}

func RegisterCronPredictionServiceServer(s grpc.ServiceRegistrar, srv CronPredictionServiceServer) {
	s.RegisterService(&CronPredictionService_ServiceDesc, srv)
}

func _CronPredictionService_ListCronPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).ListCronPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/ListCronPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).ListCronPredictions(ctx, req.(*ListCronPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_CreateCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).CreateCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/CreateCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).CreateCronPrediction(ctx, req.(*CreateCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_GetCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).GetCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/GetCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).GetCronPrediction(ctx, req.(*GetCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_UpdateCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).UpdateCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/UpdateCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).UpdateCronPrediction(ctx, req.(*UpdateCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_DeleteCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).DeleteCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/DeleteCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).DeleteCronPrediction(ctx, req.(*DeleteCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_PauseCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).PauseCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/PauseCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).PauseCronPrediction(ctx, req.(*PauseCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_ResumeCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).ResumeCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/ResumeCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).ResumeCronPrediction(ctx, req.(*ResumeCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_RunPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).RunPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/RunPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).RunPrediction(ctx, req.(*RunCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CronPredictionService_ServiceDesc is the grpc.ServiceDesc for CronPredictionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CronPredictionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService",
	HandlerType: (*CronPredictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCronPredictions",
			Handler:    _CronPredictionService_ListCronPredictions_Handler,
		},
		{
			MethodName: "CreateCronPrediction",
			Handler:    _CronPredictionService_CreateCronPrediction_Handler,
		},
		{
			MethodName: "GetCronPrediction",
			Handler:    _CronPredictionService_GetCronPrediction_Handler,
		},
		{
			MethodName: "UpdateCronPrediction",
			Handler:    _CronPredictionService_UpdateCronPrediction_Handler,
		},
		{
			MethodName: "DeleteCronPrediction",
			Handler:    _CronPredictionService_DeleteCronPrediction_Handler,
		},
		{
			MethodName: "PauseCronPrediction",
			Handler:    _CronPredictionService_PauseCronPrediction_Handler,
		},
		{
			MethodName: "ResumeCronPrediction",
			Handler:    _CronPredictionService_ResumeCronPrediction_Handler,
		},
		{
			MethodName: "RunPrediction",
			Handler:    _CronPredictionService_RunPrediction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/cronprediction/v1/cronprediction.proto",
}
