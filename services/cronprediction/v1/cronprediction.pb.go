// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.7
// source: github.com/metaprov/modelaapi/services/cronprediction/v1/cronprediction.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/inference/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListCronPredictionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListCronPredictionsRequest) Reset() {
	*x = ListCronPredictionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronPredictionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronPredictionsRequest) ProtoMessage() {}

func (x *ListCronPredictionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronPredictionsRequest.ProtoReflect.Descriptor instead.
func (*ListCronPredictionsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{0}
}

func (x *ListCronPredictionsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListCronPredictionsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListCronPredictionsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListCronPredictionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *v1alpha1.CronPredictionList `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCronPredictionsResponse) Reset() {
	*x = ListCronPredictionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronPredictionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronPredictionsResponse) ProtoMessage() {}

func (x *ListCronPredictionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronPredictionsResponse.ProtoReflect.Descriptor instead.
func (*ListCronPredictionsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{1}
}

func (x *ListCronPredictionsResponse) GetItems() *v1alpha1.CronPredictionList {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateCronPredictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCronPredictionResponse) Reset() {
	*x = CreateCronPredictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronPredictionResponse) ProtoMessage() {}

func (x *CreateCronPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronPredictionResponse.ProtoReflect.Descriptor instead.
func (*CreateCronPredictionResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{2}
}

type CreateCronPredictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronPrediction `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateCronPredictionRequest) Reset() {
	*x = CreateCronPredictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronPredictionRequest) ProtoMessage() {}

func (x *CreateCronPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronPredictionRequest.ProtoReflect.Descriptor instead.
func (*CreateCronPredictionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCronPredictionRequest) GetItem() *v1alpha1.CronPrediction {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateCronPredictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronPrediction `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateCronPredictionRequest) Reset() {
	*x = UpdateCronPredictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronPredictionRequest) ProtoMessage() {}

func (x *UpdateCronPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronPredictionRequest.ProtoReflect.Descriptor instead.
func (*UpdateCronPredictionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCronPredictionRequest) GetItem() *v1alpha1.CronPrediction {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateCronPredictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCronPredictionResponse) Reset() {
	*x = UpdateCronPredictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronPredictionResponse) ProtoMessage() {}

func (x *UpdateCronPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronPredictionResponse.ProtoReflect.Descriptor instead.
func (*UpdateCronPredictionResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{5}
}

type GetCronPredictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCronPredictionRequest) Reset() {
	*x = GetCronPredictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronPredictionRequest) ProtoMessage() {}

func (x *GetCronPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronPredictionRequest.ProtoReflect.Descriptor instead.
func (*GetCronPredictionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{6}
}

func (x *GetCronPredictionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetCronPredictionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCronPredictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronPrediction `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Yaml string                   `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetCronPredictionResponse) Reset() {
	*x = GetCronPredictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronPredictionResponse) ProtoMessage() {}

func (x *GetCronPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronPredictionResponse.ProtoReflect.Descriptor instead.
func (*GetCronPredictionResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{7}
}

func (x *GetCronPredictionResponse) GetItem() *v1alpha1.CronPrediction {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetCronPredictionResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeleteCronPredictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteCronPredictionRequest) Reset() {
	*x = DeleteCronPredictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronPredictionRequest) ProtoMessage() {}

func (x *DeleteCronPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronPredictionRequest.ProtoReflect.Descriptor instead.
func (*DeleteCronPredictionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCronPredictionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteCronPredictionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteCronPredictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCronPredictionResponse) Reset() {
	*x = DeleteCronPredictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronPredictionResponse) ProtoMessage() {}

func (x *DeleteCronPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronPredictionResponse.ProtoReflect.Descriptor instead.
func (*DeleteCronPredictionResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{9}
}

type PauseCronPredictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PauseCronPredictionRequest) Reset() {
	*x = PauseCronPredictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseCronPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseCronPredictionRequest) ProtoMessage() {}

func (x *PauseCronPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseCronPredictionRequest.ProtoReflect.Descriptor instead.
func (*PauseCronPredictionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{10}
}

func (x *PauseCronPredictionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PauseCronPredictionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PauseCronPredictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PauseCronPredictionResponse) Reset() {
	*x = PauseCronPredictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseCronPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseCronPredictionResponse) ProtoMessage() {}

func (x *PauseCronPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseCronPredictionResponse.ProtoReflect.Descriptor instead.
func (*PauseCronPredictionResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{11}
}

type ResumeCronPredictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ResumeCronPredictionRequest) Reset() {
	*x = ResumeCronPredictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeCronPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeCronPredictionRequest) ProtoMessage() {}

func (x *ResumeCronPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeCronPredictionRequest.ProtoReflect.Descriptor instead.
func (*ResumeCronPredictionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{12}
}

func (x *ResumeCronPredictionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResumeCronPredictionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResumeCronPredictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResumeCronPredictionResponse) Reset() {
	*x = ResumeCronPredictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeCronPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeCronPredictionResponse) ProtoMessage() {}

func (x *ResumeCronPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeCronPredictionResponse.ProtoReflect.Descriptor instead.
func (*ResumeCronPredictionResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{13}
}

type RunCronPredictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronPrediction `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *RunCronPredictionRequest) Reset() {
	*x = RunCronPredictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronPredictionRequest) ProtoMessage() {}

func (x *RunCronPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronPredictionRequest.ProtoReflect.Descriptor instead.
func (*RunCronPredictionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{14}
}

func (x *RunCronPredictionRequest) GetItem() *v1alpha1.CronPrediction {
	if x != nil {
		return x.Item
	}
	return nil
}

type RunCronPredictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunCronPredictionResponse) Reset() {
	*x = RunCronPredictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronPredictionResponse) ProtoMessage() {}

func (x *RunCronPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronPredictionResponse.ProtoReflect.Descriptor instead.
func (*RunCronPredictionResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP(), []int{15}
}

var File_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDesc = []byte{
	0x0a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x1e, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x7c, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x4f, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x1a, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x18, 0x52, 0x75, 0x6e,
	0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xfc, 0x0e, 0x0a, 0x15, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xdf, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x54, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xe5, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xe0, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x53, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x84, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x1a, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12,
	0xe9, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x56, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xec, 0x01, 0x0a, 0x13,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x54, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0xe0, 0x01,
	0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x72,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x72, 0x75, 0x6e,
	0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescData = file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDesc
)

func file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescData)
	})
	return file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDescData
}

var file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_goTypes = []interface{}{
	(*ListCronPredictionsRequest)(nil),   // 0: github.com.metaprov.modelaapi.services.cronprediction.v1.ListCronPredictionsRequest
	(*ListCronPredictionsResponse)(nil),  // 1: github.com.metaprov.modelaapi.services.cronprediction.v1.ListCronPredictionsResponse
	(*CreateCronPredictionResponse)(nil), // 2: github.com.metaprov.modelaapi.services.cronprediction.v1.CreateCronPredictionResponse
	(*CreateCronPredictionRequest)(nil),  // 3: github.com.metaprov.modelaapi.services.cronprediction.v1.CreateCronPredictionRequest
	(*UpdateCronPredictionRequest)(nil),  // 4: github.com.metaprov.modelaapi.services.cronprediction.v1.UpdateCronPredictionRequest
	(*UpdateCronPredictionResponse)(nil), // 5: github.com.metaprov.modelaapi.services.cronprediction.v1.UpdateCronPredictionResponse
	(*GetCronPredictionRequest)(nil),     // 6: github.com.metaprov.modelaapi.services.cronprediction.v1.GetCronPredictionRequest
	(*GetCronPredictionResponse)(nil),    // 7: github.com.metaprov.modelaapi.services.cronprediction.v1.GetCronPredictionResponse
	(*DeleteCronPredictionRequest)(nil),  // 8: github.com.metaprov.modelaapi.services.cronprediction.v1.DeleteCronPredictionRequest
	(*DeleteCronPredictionResponse)(nil), // 9: github.com.metaprov.modelaapi.services.cronprediction.v1.DeleteCronPredictionResponse
	(*PauseCronPredictionRequest)(nil),   // 10: github.com.metaprov.modelaapi.services.cronprediction.v1.PauseCronPredictionRequest
	(*PauseCronPredictionResponse)(nil),  // 11: github.com.metaprov.modelaapi.services.cronprediction.v1.PauseCronPredictionResponse
	(*ResumeCronPredictionRequest)(nil),  // 12: github.com.metaprov.modelaapi.services.cronprediction.v1.ResumeCronPredictionRequest
	(*ResumeCronPredictionResponse)(nil), // 13: github.com.metaprov.modelaapi.services.cronprediction.v1.ResumeCronPredictionResponse
	(*RunCronPredictionRequest)(nil),     // 14: github.com.metaprov.modelaapi.services.cronprediction.v1.RunCronPredictionRequest
	(*RunCronPredictionResponse)(nil),    // 15: github.com.metaprov.modelaapi.services.cronprediction.v1.RunCronPredictionResponse
	nil,                                  // 16: github.com.metaprov.modelaapi.services.cronprediction.v1.ListCronPredictionsRequest.LabelsEntry
	(*v1alpha1.CronPredictionList)(nil),  // 17: github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPredictionList
	(*v1alpha1.CronPrediction)(nil),      // 18: github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPrediction
}
var file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_depIdxs = []int32{
	16, // 0: github.com.metaprov.modelaapi.services.cronprediction.v1.ListCronPredictionsRequest.labels:type_name -> github.com.metaprov.modelaapi.services.cronprediction.v1.ListCronPredictionsRequest.LabelsEntry
	17, // 1: github.com.metaprov.modelaapi.services.cronprediction.v1.ListCronPredictionsResponse.items:type_name -> github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPredictionList
	18, // 2: github.com.metaprov.modelaapi.services.cronprediction.v1.CreateCronPredictionRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPrediction
	18, // 3: github.com.metaprov.modelaapi.services.cronprediction.v1.UpdateCronPredictionRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPrediction
	18, // 4: github.com.metaprov.modelaapi.services.cronprediction.v1.GetCronPredictionResponse.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPrediction
	18, // 5: github.com.metaprov.modelaapi.services.cronprediction.v1.RunCronPredictionRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CronPrediction
	0,  // 6: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.ListCronPredictions:input_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.ListCronPredictionsRequest
	3,  // 7: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.CreateCronPrediction:input_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.CreateCronPredictionRequest
	6,  // 8: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.GetCronPrediction:input_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.GetCronPredictionRequest
	4,  // 9: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.UpdateCronPrediction:input_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.UpdateCronPredictionRequest
	8,  // 10: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.DeleteCronPrediction:input_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.DeleteCronPredictionRequest
	10, // 11: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.PauseCronPrediction:input_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.PauseCronPredictionRequest
	12, // 12: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.ResumeCronPrediction:input_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.ResumeCronPredictionRequest
	14, // 13: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.RunPrediction:input_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.RunCronPredictionRequest
	1,  // 14: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.ListCronPredictions:output_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.ListCronPredictionsResponse
	2,  // 15: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.CreateCronPrediction:output_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.CreateCronPredictionResponse
	7,  // 16: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.GetCronPrediction:output_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.GetCronPredictionResponse
	5,  // 17: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.UpdateCronPrediction:output_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.UpdateCronPredictionResponse
	9,  // 18: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.DeleteCronPrediction:output_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.DeleteCronPredictionResponse
	11, // 19: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.PauseCronPrediction:output_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.PauseCronPredictionResponse
	13, // 20: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.ResumeCronPrediction:output_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.ResumeCronPredictionResponse
	15, // 21: github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService.RunPrediction:output_type -> github.com.metaprov.modelaapi.services.cronprediction.v1.RunCronPredictionResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() {
	file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_init()
}
func file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_init() {
	if File_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronPredictionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronPredictionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronPredictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronPredictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronPredictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronPredictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronPredictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronPredictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronPredictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronPredictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseCronPredictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseCronPredictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeCronPredictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeCronPredictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronPredictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronPredictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_depIdxs,
		MessageInfos:      file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto = out.File
	file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_rawDesc = nil
	file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_goTypes = nil
	file_github_com_metaprov_modelaapi_services_cronprediction_v1_cronprediction_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CronPredictionServiceClient is the client API for CronPredictionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronPredictionServiceClient interface {
	ListCronPredictions(ctx context.Context, in *ListCronPredictionsRequest, opts ...grpc.CallOption) (*ListCronPredictionsResponse, error)
	CreateCronPrediction(ctx context.Context, in *CreateCronPredictionRequest, opts ...grpc.CallOption) (*CreateCronPredictionResponse, error)
	GetCronPrediction(ctx context.Context, in *GetCronPredictionRequest, opts ...grpc.CallOption) (*GetCronPredictionResponse, error)
	UpdateCronPrediction(ctx context.Context, in *UpdateCronPredictionRequest, opts ...grpc.CallOption) (*UpdateCronPredictionResponse, error)
	DeleteCronPrediction(ctx context.Context, in *DeleteCronPredictionRequest, opts ...grpc.CallOption) (*DeleteCronPredictionResponse, error)
	PauseCronPrediction(ctx context.Context, in *PauseCronPredictionRequest, opts ...grpc.CallOption) (*PauseCronPredictionResponse, error)
	ResumeCronPrediction(ctx context.Context, in *ResumeCronPredictionRequest, opts ...grpc.CallOption) (*ResumeCronPredictionResponse, error)
	RunPrediction(ctx context.Context, in *RunCronPredictionRequest, opts ...grpc.CallOption) (*RunCronPredictionResponse, error)
}

type cronPredictionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCronPredictionServiceClient(cc grpc.ClientConnInterface) CronPredictionServiceClient {
	return &cronPredictionServiceClient{cc}
}

func (c *cronPredictionServiceClient) ListCronPredictions(ctx context.Context, in *ListCronPredictionsRequest, opts ...grpc.CallOption) (*ListCronPredictionsResponse, error) {
	out := new(ListCronPredictionsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/ListCronPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) CreateCronPrediction(ctx context.Context, in *CreateCronPredictionRequest, opts ...grpc.CallOption) (*CreateCronPredictionResponse, error) {
	out := new(CreateCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/CreateCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) GetCronPrediction(ctx context.Context, in *GetCronPredictionRequest, opts ...grpc.CallOption) (*GetCronPredictionResponse, error) {
	out := new(GetCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/GetCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) UpdateCronPrediction(ctx context.Context, in *UpdateCronPredictionRequest, opts ...grpc.CallOption) (*UpdateCronPredictionResponse, error) {
	out := new(UpdateCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/UpdateCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) DeleteCronPrediction(ctx context.Context, in *DeleteCronPredictionRequest, opts ...grpc.CallOption) (*DeleteCronPredictionResponse, error) {
	out := new(DeleteCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/DeleteCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) PauseCronPrediction(ctx context.Context, in *PauseCronPredictionRequest, opts ...grpc.CallOption) (*PauseCronPredictionResponse, error) {
	out := new(PauseCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/PauseCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) ResumeCronPrediction(ctx context.Context, in *ResumeCronPredictionRequest, opts ...grpc.CallOption) (*ResumeCronPredictionResponse, error) {
	out := new(ResumeCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/ResumeCronPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronPredictionServiceClient) RunPrediction(ctx context.Context, in *RunCronPredictionRequest, opts ...grpc.CallOption) (*RunCronPredictionResponse, error) {
	out := new(RunCronPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/RunPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronPredictionServiceServer is the server API for CronPredictionService service.
type CronPredictionServiceServer interface {
	ListCronPredictions(context.Context, *ListCronPredictionsRequest) (*ListCronPredictionsResponse, error)
	CreateCronPrediction(context.Context, *CreateCronPredictionRequest) (*CreateCronPredictionResponse, error)
	GetCronPrediction(context.Context, *GetCronPredictionRequest) (*GetCronPredictionResponse, error)
	UpdateCronPrediction(context.Context, *UpdateCronPredictionRequest) (*UpdateCronPredictionResponse, error)
	DeleteCronPrediction(context.Context, *DeleteCronPredictionRequest) (*DeleteCronPredictionResponse, error)
	PauseCronPrediction(context.Context, *PauseCronPredictionRequest) (*PauseCronPredictionResponse, error)
	ResumeCronPrediction(context.Context, *ResumeCronPredictionRequest) (*ResumeCronPredictionResponse, error)
	RunPrediction(context.Context, *RunCronPredictionRequest) (*RunCronPredictionResponse, error)
}

// UnimplementedCronPredictionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCronPredictionServiceServer struct {
}

func (*UnimplementedCronPredictionServiceServer) ListCronPredictions(context.Context, *ListCronPredictionsRequest) (*ListCronPredictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronPredictions not implemented")
}
func (*UnimplementedCronPredictionServiceServer) CreateCronPrediction(context.Context, *CreateCronPredictionRequest) (*CreateCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronPrediction not implemented")
}
func (*UnimplementedCronPredictionServiceServer) GetCronPrediction(context.Context, *GetCronPredictionRequest) (*GetCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronPrediction not implemented")
}
func (*UnimplementedCronPredictionServiceServer) UpdateCronPrediction(context.Context, *UpdateCronPredictionRequest) (*UpdateCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronPrediction not implemented")
}
func (*UnimplementedCronPredictionServiceServer) DeleteCronPrediction(context.Context, *DeleteCronPredictionRequest) (*DeleteCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronPrediction not implemented")
}
func (*UnimplementedCronPredictionServiceServer) PauseCronPrediction(context.Context, *PauseCronPredictionRequest) (*PauseCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCronPrediction not implemented")
}
func (*UnimplementedCronPredictionServiceServer) ResumeCronPrediction(context.Context, *ResumeCronPredictionRequest) (*ResumeCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeCronPrediction not implemented")
}
func (*UnimplementedCronPredictionServiceServer) RunPrediction(context.Context, *RunCronPredictionRequest) (*RunCronPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPrediction not implemented")
}

func RegisterCronPredictionServiceServer(s *grpc.Server, srv CronPredictionServiceServer) {
	s.RegisterService(&_CronPredictionService_serviceDesc, srv)
}

func _CronPredictionService_ListCronPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).ListCronPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/ListCronPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).ListCronPredictions(ctx, req.(*ListCronPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_CreateCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).CreateCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/CreateCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).CreateCronPrediction(ctx, req.(*CreateCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_GetCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).GetCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/GetCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).GetCronPrediction(ctx, req.(*GetCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_UpdateCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).UpdateCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/UpdateCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).UpdateCronPrediction(ctx, req.(*UpdateCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_DeleteCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).DeleteCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/DeleteCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).DeleteCronPrediction(ctx, req.(*DeleteCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_PauseCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).PauseCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/PauseCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).PauseCronPrediction(ctx, req.(*PauseCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_ResumeCronPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).ResumeCronPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/ResumeCronPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).ResumeCronPrediction(ctx, req.(*ResumeCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronPredictionService_RunPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCronPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronPredictionServiceServer).RunPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService/RunPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronPredictionServiceServer).RunPrediction(ctx, req.(*RunCronPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronPredictionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.cronprediction.v1.CronPredictionService",
	HandlerType: (*CronPredictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCronPredictions",
			Handler:    _CronPredictionService_ListCronPredictions_Handler,
		},
		{
			MethodName: "CreateCronPrediction",
			Handler:    _CronPredictionService_CreateCronPrediction_Handler,
		},
		{
			MethodName: "GetCronPrediction",
			Handler:    _CronPredictionService_GetCronPrediction_Handler,
		},
		{
			MethodName: "UpdateCronPrediction",
			Handler:    _CronPredictionService_UpdateCronPrediction_Handler,
		},
		{
			MethodName: "DeleteCronPrediction",
			Handler:    _CronPredictionService_DeleteCronPrediction_Handler,
		},
		{
			MethodName: "PauseCronPrediction",
			Handler:    _CronPredictionService_PauseCronPrediction_Handler,
		},
		{
			MethodName: "ResumeCronPrediction",
			Handler:    _CronPredictionService_ResumeCronPrediction_Handler,
		},
		{
			MethodName: "RunPrediction",
			Handler:    _CronPredictionService_RunPrediction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/cronprediction/v1/cronprediction.proto",
}
