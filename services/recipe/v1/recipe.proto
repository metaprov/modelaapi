syntax = "proto3";
option go_package = "github.com/metaprov/modeldapi/services/recipe/v1";
package github.com.metaprov.modeldapi.services.recipe.v1;

import "google/api/annotations.proto";
import "github.com/metaprov/modeldapi/services/common/v1/common.proto";
import "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1/generated.proto";

message ListRecipesRequest {
    string namespace = 1;
    map<string,string> labels =3;
}

message ListRecipesResponse {
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.RecipeList items = 1;
}

message CreateRecipeRequest {
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Recipe item = 1;
}

message CreateRecipeResponse {
}

message UpdateRecipeRequest {
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Recipe item = 1;
}

message UpdateRecipeResponse {

}

message GetRecipeRequest {
    string namespace = 1;
    string name      = 2;
}


message ProfileRecipeRequest {
    string namespace = 1;
    string name      = 2;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.RecipeSpec spec = 3;
}

message ProfileRecipeResponse {
    github.com.metaprov.modeldapi.services.common.v1.TableView   table   =1;
}


message RunRecipeRequest {
    string namespace = 1;
    string name      = 2;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.RecipeSpec spec = 3;
}


message RunRecipeResponse {
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Recipe recipe = 1;
    string yaml = 2;
}



message GetRecipeResponse {
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Recipe item = 1;
    string yaml = 2;
}


message DeleteRecipeRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteRecipeResponse {

}


service RecipeService {
    rpc ListRecipes(ListRecipesRequest) returns (ListRecipesResponse) {
        option (google.api.http).get = "/v1/recipes";
    }
    rpc CreateRecipe(CreateRecipeRequest) returns (CreateRecipeResponse) {
        option (google.api.http) = {
			post: "/v1/recipes"
			body: "*"
		};
    }
    rpc GetRecipe(GetRecipeRequest) returns (GetRecipeResponse) {
        option (google.api.http).get = "/v1/recipes/{name}";
    }
    rpc RunRecipe(RunRecipeRequest) returns (RunRecipeResponse) {
        option (google.api.http).get = "/v1/recipes/{name}:run";
    }
    // profile the recipe based on the sample
    rpc ProfileRecipe(ProfileRecipeRequest) returns (ProfileRecipeResponse) {
        option (google.api.http).get = "/v1/recipes/{name}:profile";
    }


    rpc UpdateRecipe(UpdateRecipeRequest) returns (UpdateRecipeResponse) {
        option (google.api.http) = {
			put: "/v1/recipes/{recipe.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteRecipe(DeleteRecipeRequest) returns (DeleteRecipeResponse) {}
}