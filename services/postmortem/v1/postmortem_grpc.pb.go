// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: github.com/metaprov/modelaapi/services/postmortem/v1/postmortem.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostMortemServiceClient is the client API for PostMortemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostMortemServiceClient interface {
	ListPostMortems(ctx context.Context, in *ListPostMortemsRequest, opts ...grpc.CallOption) (*ListPostMortemsResponse, error)
	CreatePostMortem(ctx context.Context, in *CreatePostMortemRequest, opts ...grpc.CallOption) (*CreatePostMortemResponse, error)
	GetPostMortem(ctx context.Context, in *GetPostMortemRequest, opts ...grpc.CallOption) (*GetPostMortemResponse, error)
	UpdatePostMortem(ctx context.Context, in *UpdatePostMortemRequest, opts ...grpc.CallOption) (*UpdatePostMortemResponse, error)
	DeletePostMortem(ctx context.Context, in *DeletePostMortemRequest, opts ...grpc.CallOption) (*DeletePostMortemResponse, error)
}

type postMortemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostMortemServiceClient(cc grpc.ClientConnInterface) PostMortemServiceClient {
	return &postMortemServiceClient{cc}
}

func (c *postMortemServiceClient) ListPostMortems(ctx context.Context, in *ListPostMortemsRequest, opts ...grpc.CallOption) (*ListPostMortemsResponse, error) {
	out := new(ListPostMortemsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.postmortem.v1.PostMortemService/ListPostMortems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postMortemServiceClient) CreatePostMortem(ctx context.Context, in *CreatePostMortemRequest, opts ...grpc.CallOption) (*CreatePostMortemResponse, error) {
	out := new(CreatePostMortemResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.postmortem.v1.PostMortemService/CreatePostMortem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postMortemServiceClient) GetPostMortem(ctx context.Context, in *GetPostMortemRequest, opts ...grpc.CallOption) (*GetPostMortemResponse, error) {
	out := new(GetPostMortemResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.postmortem.v1.PostMortemService/GetPostMortem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postMortemServiceClient) UpdatePostMortem(ctx context.Context, in *UpdatePostMortemRequest, opts ...grpc.CallOption) (*UpdatePostMortemResponse, error) {
	out := new(UpdatePostMortemResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.postmortem.v1.PostMortemService/UpdatePostMortem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postMortemServiceClient) DeletePostMortem(ctx context.Context, in *DeletePostMortemRequest, opts ...grpc.CallOption) (*DeletePostMortemResponse, error) {
	out := new(DeletePostMortemResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.postmortem.v1.PostMortemService/DeletePostMortem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostMortemServiceServer is the server API for PostMortemService service.
// All implementations must embed UnimplementedPostMortemServiceServer
// for forward compatibility
type PostMortemServiceServer interface {
	ListPostMortems(context.Context, *ListPostMortemsRequest) (*ListPostMortemsResponse, error)
	CreatePostMortem(context.Context, *CreatePostMortemRequest) (*CreatePostMortemResponse, error)
	GetPostMortem(context.Context, *GetPostMortemRequest) (*GetPostMortemResponse, error)
	UpdatePostMortem(context.Context, *UpdatePostMortemRequest) (*UpdatePostMortemResponse, error)
	DeletePostMortem(context.Context, *DeletePostMortemRequest) (*DeletePostMortemResponse, error)
	mustEmbedUnimplementedPostMortemServiceServer()
}

// UnimplementedPostMortemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostMortemServiceServer struct {
}

func (UnimplementedPostMortemServiceServer) ListPostMortems(context.Context, *ListPostMortemsRequest) (*ListPostMortemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostMortems not implemented")
}
func (UnimplementedPostMortemServiceServer) CreatePostMortem(context.Context, *CreatePostMortemRequest) (*CreatePostMortemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostMortem not implemented")
}
func (UnimplementedPostMortemServiceServer) GetPostMortem(context.Context, *GetPostMortemRequest) (*GetPostMortemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostMortem not implemented")
}
func (UnimplementedPostMortemServiceServer) UpdatePostMortem(context.Context, *UpdatePostMortemRequest) (*UpdatePostMortemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostMortem not implemented")
}
func (UnimplementedPostMortemServiceServer) DeletePostMortem(context.Context, *DeletePostMortemRequest) (*DeletePostMortemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostMortem not implemented")
}
func (UnimplementedPostMortemServiceServer) mustEmbedUnimplementedPostMortemServiceServer() {}

// UnsafePostMortemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostMortemServiceServer will
// result in compilation errors.
type UnsafePostMortemServiceServer interface {
	mustEmbedUnimplementedPostMortemServiceServer()
}

func RegisterPostMortemServiceServer(s grpc.ServiceRegistrar, srv PostMortemServiceServer) {
	s.RegisterService(&PostMortemService_ServiceDesc, srv)
}

func _PostMortemService_ListPostMortems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostMortemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostMortemServiceServer).ListPostMortems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.postmortem.v1.PostMortemService/ListPostMortems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostMortemServiceServer).ListPostMortems(ctx, req.(*ListPostMortemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostMortemService_CreatePostMortem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostMortemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostMortemServiceServer).CreatePostMortem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.postmortem.v1.PostMortemService/CreatePostMortem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostMortemServiceServer).CreatePostMortem(ctx, req.(*CreatePostMortemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostMortemService_GetPostMortem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostMortemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostMortemServiceServer).GetPostMortem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.postmortem.v1.PostMortemService/GetPostMortem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostMortemServiceServer).GetPostMortem(ctx, req.(*GetPostMortemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostMortemService_UpdatePostMortem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostMortemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostMortemServiceServer).UpdatePostMortem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.postmortem.v1.PostMortemService/UpdatePostMortem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostMortemServiceServer).UpdatePostMortem(ctx, req.(*UpdatePostMortemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostMortemService_DeletePostMortem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostMortemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostMortemServiceServer).DeletePostMortem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.postmortem.v1.PostMortemService/DeletePostMortem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostMortemServiceServer).DeletePostMortem(ctx, req.(*DeletePostMortemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostMortemService_ServiceDesc is the grpc.ServiceDesc for PostMortemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostMortemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.postmortem.v1.PostMortemService",
	HandlerType: (*PostMortemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPostMortems",
			Handler:    _PostMortemService_ListPostMortems_Handler,
		},
		{
			MethodName: "CreatePostMortem",
			Handler:    _PostMortemService_CreatePostMortem_Handler,
		},
		{
			MethodName: "GetPostMortem",
			Handler:    _PostMortemService_GetPostMortem_Handler,
		},
		{
			MethodName: "UpdatePostMortem",
			Handler:    _PostMortemService_UpdatePostMortem_Handler,
		},
		{
			MethodName: "DeletePostMortem",
			Handler:    _PostMortemService_DeletePostMortem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/postmortem/v1/postmortem.proto",
}
