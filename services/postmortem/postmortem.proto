syntax = "proto3";
option go_package = "github.com/metaprov/modeld/services/postmortem";

package github.com.metaprov.modeld.services.postmortem;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modeld-api/pkg/apis/team/v1alpha1/generated.proto";
import "github.com/metaprov/modeld/services/common/common.proto";

message PostMortemQuery {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message PostMortemResponse {}

message PostMortemCreateRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeld-api.pkg.apis.team.v1alpha1.PostMortemSpec spec = 5;
    string password = 6;
    bool upsert = 7;
}

message PostMortemUpdateRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeld-api.pkg.apis.team.v1alpha1.PostMortemSpec spec = 5;
}

message PostMortemGetResponse {
    github.com.metaprov.modeld-api.pkg.apis.team.v1alpha1.PostMortem postmortem = 1;
    string yaml = 2;
}

message PostMortemGetNamespacesRequest {
    string namespace = 1;
    string name      = 2;
}


message PostMortemGetNamespacesResponse {
    repeated github.com.metaprov.modeld.services.common.NamespaceInfo namespaces= 1;
}


service PostMortemService {
    rpc List(PostMortemQuery) returns (github.com.metaprov.modeld-api.pkg.apis.team.v1alpha1.PostMortemList) {
        option (google.api.http).get = "/api/v1alpha1/postmortems";
    }
    rpc Create(PostMortemCreateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
			post: "/api/v1alpha1/postmortems"
			body: "postmortem"
		};
    }
    rpc Get(PostMortemQuery) returns (PostMortemGetResponse) {
        option (google.api.http).get = "/api/v1alpha1/postmortems/{name}";
    }
    rpc Update(PostMortemUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
			put: "/api/v1alpha1/postmortems/{postmortem.metadata.name}"
			body: "postmortem"
		};
    }

    rpc Delete(PostMortemQuery) returns (google.protobuf.Empty) {}



}