// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: github.com/metaprov/modelaapi/services/cronreport/v1/cronreport.proto

package v1

import (
	context "context"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListCronReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels    map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PageSize  int32             `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string            `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	OrderBy   string            `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListCronReportsRequest) Reset() {
	*x = ListCronReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronReportsRequest) ProtoMessage() {}

func (x *ListCronReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronReportsRequest.ProtoReflect.Descriptor instead.
func (*ListCronReportsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{0}
}

func (x *ListCronReportsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListCronReportsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListCronReportsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCronReportsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCronReportsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListCronReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronReports   *v1alpha1.CronReportList `protobuf:"bytes,1,opt,name=cronReports,proto3" json:"cronReports,omitempty"`
	NextPageToken string                   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListCronReportsResponse) Reset() {
	*x = ListCronReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronReportsResponse) ProtoMessage() {}

func (x *ListCronReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronReportsResponse.ProtoReflect.Descriptor instead.
func (*ListCronReportsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{1}
}

func (x *ListCronReportsResponse) GetCronReports() *v1alpha1.CronReportList {
	if x != nil {
		return x.CronReports
	}
	return nil
}

func (x *ListCronReportsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateCronReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCronReportResponse) Reset() {
	*x = CreateCronReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronReportResponse) ProtoMessage() {}

func (x *CreateCronReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronReportResponse.ProtoReflect.Descriptor instead.
func (*CreateCronReportResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{2}
}

type CreateCronReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronReport `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateCronReportRequest) Reset() {
	*x = CreateCronReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronReportRequest) ProtoMessage() {}

func (x *CreateCronReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronReportRequest.ProtoReflect.Descriptor instead.
func (*CreateCronReportRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCronReportRequest) GetItem() *v1alpha1.CronReport {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateCronReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item      *v1alpha1.CronReport  `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	FieldMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *UpdateCronReportRequest) Reset() {
	*x = UpdateCronReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronReportRequest) ProtoMessage() {}

func (x *UpdateCronReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronReportRequest.ProtoReflect.Descriptor instead.
func (*UpdateCronReportRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCronReportRequest) GetItem() *v1alpha1.CronReport {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *UpdateCronReportRequest) GetFieldMask() *field_mask.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type UpdateCronReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCronReportResponse) Reset() {
	*x = UpdateCronReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronReportResponse) ProtoMessage() {}

func (x *UpdateCronReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronReportResponse.ProtoReflect.Descriptor instead.
func (*UpdateCronReportResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{5}
}

type GetCronReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCronReportRequest) Reset() {
	*x = GetCronReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronReportRequest) ProtoMessage() {}

func (x *GetCronReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronReportRequest.ProtoReflect.Descriptor instead.
func (*GetCronReportRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{6}
}

func (x *GetCronReportRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetCronReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCronReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronReport `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Yaml string               `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetCronReportResponse) Reset() {
	*x = GetCronReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronReportResponse) ProtoMessage() {}

func (x *GetCronReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronReportResponse.ProtoReflect.Descriptor instead.
func (*GetCronReportResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{7}
}

func (x *GetCronReportResponse) GetItem() *v1alpha1.CronReport {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetCronReportResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeleteCronReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteCronReportRequest) Reset() {
	*x = DeleteCronReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronReportRequest) ProtoMessage() {}

func (x *DeleteCronReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronReportRequest.ProtoReflect.Descriptor instead.
func (*DeleteCronReportRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCronReportRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteCronReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteCronReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCronReportResponse) Reset() {
	*x = DeleteCronReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronReportResponse) ProtoMessage() {}

func (x *DeleteCronReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronReportResponse.ProtoReflect.Descriptor instead.
func (*DeleteCronReportResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{9}
}

type PauseCronReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PauseCronReportRequest) Reset() {
	*x = PauseCronReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseCronReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseCronReportRequest) ProtoMessage() {}

func (x *PauseCronReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseCronReportRequest.ProtoReflect.Descriptor instead.
func (*PauseCronReportRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{10}
}

func (x *PauseCronReportRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PauseCronReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PauseCronReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PauseCronReportResponse) Reset() {
	*x = PauseCronReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseCronReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseCronReportResponse) ProtoMessage() {}

func (x *PauseCronReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseCronReportResponse.ProtoReflect.Descriptor instead.
func (*PauseCronReportResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{11}
}

type ResumeCronReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ResumeCronReportRequest) Reset() {
	*x = ResumeCronReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeCronReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeCronReportRequest) ProtoMessage() {}

func (x *ResumeCronReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeCronReportRequest.ProtoReflect.Descriptor instead.
func (*ResumeCronReportRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{12}
}

func (x *ResumeCronReportRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResumeCronReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResumeCronReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResumeCronReportResponse) Reset() {
	*x = ResumeCronReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeCronReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeCronReportResponse) ProtoMessage() {}

func (x *ResumeCronReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeCronReportResponse.ProtoReflect.Descriptor instead.
func (*ResumeCronReportResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{13}
}

type RunCronReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronReport `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *RunCronReportRequest) Reset() {
	*x = RunCronReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronReportRequest) ProtoMessage() {}

func (x *RunCronReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronReportRequest.ProtoReflect.Descriptor instead.
func (*RunCronReportRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{14}
}

func (x *RunCronReportRequest) GetItem() *v1alpha1.CronReport {
	if x != nil {
		return x.Item
	}
	return nil
}

type RunCronReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunCronReportResponse) Reset() {
	*x = RunCronReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronReportResponse) ProtoMessage() {}

func (x *RunCronReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronReportResponse.ProtoReflect.Descriptor instead.
func (*RunCronReportResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP(), []int{15}
}

var File_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDesc = []byte{
	0x0a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x70, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6a, 0x0a, 0x0b, 0x63, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0b, 0x63, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x73, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x58, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x48, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x79, 0x61, 0x6d, 0x6c, 0x22, 0x4b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a,
	0x16, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a,
	0x14, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x17, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xac, 0x0e, 0x0a, 0x11, 0x43, 0x72, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd3,
	0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f,
	0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x12, 0xcd, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0xd4, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f,
	0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xfc, 0x01, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x1a, 0x3e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f,
	0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xdd, 0x01, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x09, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x43,
	0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x22, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x72, 0x75, 0x6e, 0x12, 0xe0, 0x01,
	0x0a, 0x0f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x12, 0xe4, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x29, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x3a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescData = file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDesc
)

func file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescData)
	})
	return file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDescData
}

var file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_goTypes = []interface{}{
	(*ListCronReportsRequest)(nil),   // 0: github.com.metaprov.modelaapi.services.cronreport.v1.ListCronReportsRequest
	(*ListCronReportsResponse)(nil),  // 1: github.com.metaprov.modelaapi.services.cronreport.v1.ListCronReportsResponse
	(*CreateCronReportResponse)(nil), // 2: github.com.metaprov.modelaapi.services.cronreport.v1.CreateCronReportResponse
	(*CreateCronReportRequest)(nil),  // 3: github.com.metaprov.modelaapi.services.cronreport.v1.CreateCronReportRequest
	(*UpdateCronReportRequest)(nil),  // 4: github.com.metaprov.modelaapi.services.cronreport.v1.UpdateCronReportRequest
	(*UpdateCronReportResponse)(nil), // 5: github.com.metaprov.modelaapi.services.cronreport.v1.UpdateCronReportResponse
	(*GetCronReportRequest)(nil),     // 6: github.com.metaprov.modelaapi.services.cronreport.v1.GetCronReportRequest
	(*GetCronReportResponse)(nil),    // 7: github.com.metaprov.modelaapi.services.cronreport.v1.GetCronReportResponse
	(*DeleteCronReportRequest)(nil),  // 8: github.com.metaprov.modelaapi.services.cronreport.v1.DeleteCronReportRequest
	(*DeleteCronReportResponse)(nil), // 9: github.com.metaprov.modelaapi.services.cronreport.v1.DeleteCronReportResponse
	(*PauseCronReportRequest)(nil),   // 10: github.com.metaprov.modelaapi.services.cronreport.v1.PauseCronReportRequest
	(*PauseCronReportResponse)(nil),  // 11: github.com.metaprov.modelaapi.services.cronreport.v1.PauseCronReportResponse
	(*ResumeCronReportRequest)(nil),  // 12: github.com.metaprov.modelaapi.services.cronreport.v1.ResumeCronReportRequest
	(*ResumeCronReportResponse)(nil), // 13: github.com.metaprov.modelaapi.services.cronreport.v1.ResumeCronReportResponse
	(*RunCronReportRequest)(nil),     // 14: github.com.metaprov.modelaapi.services.cronreport.v1.RunCronReportRequest
	(*RunCronReportResponse)(nil),    // 15: github.com.metaprov.modelaapi.services.cronreport.v1.RunCronReportResponse
	nil,                              // 16: github.com.metaprov.modelaapi.services.cronreport.v1.ListCronReportsRequest.LabelsEntry
	(*v1alpha1.CronReportList)(nil),  // 17: github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.CronReportList
	(*v1alpha1.CronReport)(nil),      // 18: github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.CronReport
	(*field_mask.FieldMask)(nil),     // 19: google.protobuf.FieldMask
}
var file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_depIdxs = []int32{
	16, // 0: github.com.metaprov.modelaapi.services.cronreport.v1.ListCronReportsRequest.labels:type_name -> github.com.metaprov.modelaapi.services.cronreport.v1.ListCronReportsRequest.LabelsEntry
	17, // 1: github.com.metaprov.modelaapi.services.cronreport.v1.ListCronReportsResponse.cronReports:type_name -> github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.CronReportList
	18, // 2: github.com.metaprov.modelaapi.services.cronreport.v1.CreateCronReportRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.CronReport
	18, // 3: github.com.metaprov.modelaapi.services.cronreport.v1.UpdateCronReportRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.CronReport
	19, // 4: github.com.metaprov.modelaapi.services.cronreport.v1.UpdateCronReportRequest.field_mask:type_name -> google.protobuf.FieldMask
	18, // 5: github.com.metaprov.modelaapi.services.cronreport.v1.GetCronReportResponse.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.CronReport
	18, // 6: github.com.metaprov.modelaapi.services.cronreport.v1.RunCronReportRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.CronReport
	0,  // 7: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.ListCronReports:input_type -> github.com.metaprov.modelaapi.services.cronreport.v1.ListCronReportsRequest
	3,  // 8: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.CreateCronReport:input_type -> github.com.metaprov.modelaapi.services.cronreport.v1.CreateCronReportRequest
	6,  // 9: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.GetCronReport:input_type -> github.com.metaprov.modelaapi.services.cronreport.v1.GetCronReportRequest
	4,  // 10: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.UpdateCronReport:input_type -> github.com.metaprov.modelaapi.services.cronreport.v1.UpdateCronReportRequest
	8,  // 11: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.DeleteCronReport:input_type -> github.com.metaprov.modelaapi.services.cronreport.v1.DeleteCronReportRequest
	14, // 12: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.RunReport:input_type -> github.com.metaprov.modelaapi.services.cronreport.v1.RunCronReportRequest
	10, // 13: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.PauseCronReport:input_type -> github.com.metaprov.modelaapi.services.cronreport.v1.PauseCronReportRequest
	12, // 14: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.ResumeCronReport:input_type -> github.com.metaprov.modelaapi.services.cronreport.v1.ResumeCronReportRequest
	1,  // 15: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.ListCronReports:output_type -> github.com.metaprov.modelaapi.services.cronreport.v1.ListCronReportsResponse
	2,  // 16: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.CreateCronReport:output_type -> github.com.metaprov.modelaapi.services.cronreport.v1.CreateCronReportResponse
	7,  // 17: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.GetCronReport:output_type -> github.com.metaprov.modelaapi.services.cronreport.v1.GetCronReportResponse
	5,  // 18: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.UpdateCronReport:output_type -> github.com.metaprov.modelaapi.services.cronreport.v1.UpdateCronReportResponse
	9,  // 19: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.DeleteCronReport:output_type -> github.com.metaprov.modelaapi.services.cronreport.v1.DeleteCronReportResponse
	15, // 20: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.RunReport:output_type -> github.com.metaprov.modelaapi.services.cronreport.v1.RunCronReportResponse
	11, // 21: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.PauseCronReport:output_type -> github.com.metaprov.modelaapi.services.cronreport.v1.PauseCronReportResponse
	13, // 22: github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService.ResumeCronReport:output_type -> github.com.metaprov.modelaapi.services.cronreport.v1.ResumeCronReportResponse
	15, // [15:23] is the sub-list for method output_type
	7,  // [7:15] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_init() }
func file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_init() {
	if File_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseCronReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseCronReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeCronReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeCronReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_depIdxs,
		MessageInfos:      file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto = out.File
	file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_rawDesc = nil
	file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_goTypes = nil
	file_github_com_metaprov_modelaapi_services_cronreport_v1_cronreport_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CronReportServiceClient is the client API for CronReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronReportServiceClient interface {
	ListCronReports(ctx context.Context, in *ListCronReportsRequest, opts ...grpc.CallOption) (*ListCronReportsResponse, error)
	CreateCronReport(ctx context.Context, in *CreateCronReportRequest, opts ...grpc.CallOption) (*CreateCronReportResponse, error)
	GetCronReport(ctx context.Context, in *GetCronReportRequest, opts ...grpc.CallOption) (*GetCronReportResponse, error)
	UpdateCronReport(ctx context.Context, in *UpdateCronReportRequest, opts ...grpc.CallOption) (*UpdateCronReportResponse, error)
	DeleteCronReport(ctx context.Context, in *DeleteCronReportRequest, opts ...grpc.CallOption) (*DeleteCronReportResponse, error)
	RunReport(ctx context.Context, in *RunCronReportRequest, opts ...grpc.CallOption) (*RunCronReportResponse, error)
	PauseCronReport(ctx context.Context, in *PauseCronReportRequest, opts ...grpc.CallOption) (*PauseCronReportResponse, error)
	ResumeCronReport(ctx context.Context, in *ResumeCronReportRequest, opts ...grpc.CallOption) (*ResumeCronReportResponse, error)
}

type cronReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCronReportServiceClient(cc grpc.ClientConnInterface) CronReportServiceClient {
	return &cronReportServiceClient{cc}
}

func (c *cronReportServiceClient) ListCronReports(ctx context.Context, in *ListCronReportsRequest, opts ...grpc.CallOption) (*ListCronReportsResponse, error) {
	out := new(ListCronReportsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/ListCronReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronReportServiceClient) CreateCronReport(ctx context.Context, in *CreateCronReportRequest, opts ...grpc.CallOption) (*CreateCronReportResponse, error) {
	out := new(CreateCronReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/CreateCronReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronReportServiceClient) GetCronReport(ctx context.Context, in *GetCronReportRequest, opts ...grpc.CallOption) (*GetCronReportResponse, error) {
	out := new(GetCronReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/GetCronReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronReportServiceClient) UpdateCronReport(ctx context.Context, in *UpdateCronReportRequest, opts ...grpc.CallOption) (*UpdateCronReportResponse, error) {
	out := new(UpdateCronReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/UpdateCronReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronReportServiceClient) DeleteCronReport(ctx context.Context, in *DeleteCronReportRequest, opts ...grpc.CallOption) (*DeleteCronReportResponse, error) {
	out := new(DeleteCronReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/DeleteCronReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronReportServiceClient) RunReport(ctx context.Context, in *RunCronReportRequest, opts ...grpc.CallOption) (*RunCronReportResponse, error) {
	out := new(RunCronReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/RunReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronReportServiceClient) PauseCronReport(ctx context.Context, in *PauseCronReportRequest, opts ...grpc.CallOption) (*PauseCronReportResponse, error) {
	out := new(PauseCronReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/PauseCronReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronReportServiceClient) ResumeCronReport(ctx context.Context, in *ResumeCronReportRequest, opts ...grpc.CallOption) (*ResumeCronReportResponse, error) {
	out := new(ResumeCronReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/ResumeCronReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronReportServiceServer is the server API for CronReportService service.
type CronReportServiceServer interface {
	ListCronReports(context.Context, *ListCronReportsRequest) (*ListCronReportsResponse, error)
	CreateCronReport(context.Context, *CreateCronReportRequest) (*CreateCronReportResponse, error)
	GetCronReport(context.Context, *GetCronReportRequest) (*GetCronReportResponse, error)
	UpdateCronReport(context.Context, *UpdateCronReportRequest) (*UpdateCronReportResponse, error)
	DeleteCronReport(context.Context, *DeleteCronReportRequest) (*DeleteCronReportResponse, error)
	RunReport(context.Context, *RunCronReportRequest) (*RunCronReportResponse, error)
	PauseCronReport(context.Context, *PauseCronReportRequest) (*PauseCronReportResponse, error)
	ResumeCronReport(context.Context, *ResumeCronReportRequest) (*ResumeCronReportResponse, error)
}

// UnimplementedCronReportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCronReportServiceServer struct {
}

func (*UnimplementedCronReportServiceServer) ListCronReports(context.Context, *ListCronReportsRequest) (*ListCronReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronReports not implemented")
}
func (*UnimplementedCronReportServiceServer) CreateCronReport(context.Context, *CreateCronReportRequest) (*CreateCronReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronReport not implemented")
}
func (*UnimplementedCronReportServiceServer) GetCronReport(context.Context, *GetCronReportRequest) (*GetCronReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronReport not implemented")
}
func (*UnimplementedCronReportServiceServer) UpdateCronReport(context.Context, *UpdateCronReportRequest) (*UpdateCronReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronReport not implemented")
}
func (*UnimplementedCronReportServiceServer) DeleteCronReport(context.Context, *DeleteCronReportRequest) (*DeleteCronReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronReport not implemented")
}
func (*UnimplementedCronReportServiceServer) RunReport(context.Context, *RunCronReportRequest) (*RunCronReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunReport not implemented")
}
func (*UnimplementedCronReportServiceServer) PauseCronReport(context.Context, *PauseCronReportRequest) (*PauseCronReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCronReport not implemented")
}
func (*UnimplementedCronReportServiceServer) ResumeCronReport(context.Context, *ResumeCronReportRequest) (*ResumeCronReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeCronReport not implemented")
}

func RegisterCronReportServiceServer(s *grpc.Server, srv CronReportServiceServer) {
	s.RegisterService(&_CronReportService_serviceDesc, srv)
}

func _CronReportService_ListCronReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronReportServiceServer).ListCronReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/ListCronReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronReportServiceServer).ListCronReports(ctx, req.(*ListCronReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronReportService_CreateCronReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronReportServiceServer).CreateCronReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/CreateCronReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronReportServiceServer).CreateCronReport(ctx, req.(*CreateCronReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronReportService_GetCronReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronReportServiceServer).GetCronReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/GetCronReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronReportServiceServer).GetCronReport(ctx, req.(*GetCronReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronReportService_UpdateCronReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCronReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronReportServiceServer).UpdateCronReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/UpdateCronReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronReportServiceServer).UpdateCronReport(ctx, req.(*UpdateCronReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronReportService_DeleteCronReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronReportServiceServer).DeleteCronReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/DeleteCronReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronReportServiceServer).DeleteCronReport(ctx, req.(*DeleteCronReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronReportService_RunReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCronReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronReportServiceServer).RunReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/RunReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronReportServiceServer).RunReport(ctx, req.(*RunCronReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronReportService_PauseCronReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseCronReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronReportServiceServer).PauseCronReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/PauseCronReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronReportServiceServer).PauseCronReport(ctx, req.(*PauseCronReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronReportService_ResumeCronReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeCronReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronReportServiceServer).ResumeCronReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService/ResumeCronReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronReportServiceServer).ResumeCronReport(ctx, req.(*ResumeCronReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.cronreport.v1.CronReportService",
	HandlerType: (*CronReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCronReports",
			Handler:    _CronReportService_ListCronReports_Handler,
		},
		{
			MethodName: "CreateCronReport",
			Handler:    _CronReportService_CreateCronReport_Handler,
		},
		{
			MethodName: "GetCronReport",
			Handler:    _CronReportService_GetCronReport_Handler,
		},
		{
			MethodName: "UpdateCronReport",
			Handler:    _CronReportService_UpdateCronReport_Handler,
		},
		{
			MethodName: "DeleteCronReport",
			Handler:    _CronReportService_DeleteCronReport_Handler,
		},
		{
			MethodName: "RunReport",
			Handler:    _CronReportService_RunReport_Handler,
		},
		{
			MethodName: "PauseCronReport",
			Handler:    _CronReportService_PauseCronReport_Handler,
		},
		{
			MethodName: "ResumeCronReport",
			Handler:    _CronReportService_ResumeCronReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/cronreport/v1/cronreport.proto",
}
