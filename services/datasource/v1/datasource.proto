syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/datasource/v1";

package github.com.metaprov.modelaapi.services.datasource.v1;


import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/services/common/v1/common.proto";

message ListDataSourceRequest {
    string namespace = 1;
    map<string,string> labels = 2;
}

message ListDataSourceResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSourceList list = 1;

}

message GetDataSourceRequest {
    string namespace = 1;
    string name      = 2;
}

message GetDataSourceResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource item = 1;
    string yaml = 2;
}


message UpdateDataSourceRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource item = 1;
}

message UpdateDataSourceResponse {}


message CreateDataSourceRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource item = 1;
}

message CreateDataSourceResponse {}


message DeleteDataSourceRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteDataSourceResponse {}

message InferSchemaRequest {
    string namespace = 1;
    string name      = 2;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource datasource = 3;    
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 4; 
}

message InferSchemaResponse {
    repeated github.com.metaprov.modelaapi.services.common.v1.ColumnProfile  columns = 1;

}

message GetTableViewRequest {
    string tenant = 1;
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CsvFileSpec   flatfilespec = 2; // contain the csv or table definition
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation   location = 3; // contain the csv or table definition
}

message GetTableViewResponse {
    github.com.metaprov.modelaapi.services.common.v1.TableView table   =1;
}


// EDA request/response

service DataSourceService {
    rpc ListDataSources(ListDataSourceRequest) returns (ListDataSourceResponse) {
        option (google.api.http).get = "/v1/datasources/{namespace}";
    }

    rpc CreateDataSource(CreateDataSourceRequest) returns (CreateDataSourceResponse) {
        option (google.api.http) = {
			post: "/v1/datasources"
			body: "*"
		};
    }
    rpc GetDataSource(GetDataSourceRequest) returns (GetDataSourceResponse) {
        option (google.api.http).get = "/v1/datasources/{namespace}/{name}";
    }

    rpc UpdateDataSource(UpdateDataSourceRequest) returns (UpdateDataSourceResponse) {
        option (google.api.http) = {
			put: "/v1/datasources/{item.metadata.namespace}/{item.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteDataSource(DeleteDataSourceRequest) returns (DeleteDataSourceResponse) {
        option (google.api.http).delete = "/v1/datasources/{namespace}/{name}";
    }

    rpc InferSchema(InferSchemaRequest) returns (InferSchemaResponse) {
        option (google.api.http).post = "/v1/datasources/{namespace}/{name}:infer";
    }

    // get the table view from the data source. used to present table view.
    rpc GetTableView(GetTableViewRequest) returns (GetTableViewResponse) {}



}