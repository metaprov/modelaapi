// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/data/v1/data.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	// Read from a flat file and create a dataset
	ReadFile(ctx context.Context, in *DsReadFileRequest, opts ...grpc.CallOption) (*DsReadFromStoreResponse, error)
	// Read from a feature and create a dataset
	ReadFeature(ctx context.Context, in *DsReadFeatureRequest, opts ...grpc.CallOption) (*DsReadFromStoreResponse, error)
	// Read from audio and create an audio dataset
	ReadAudio(ctx context.Context, in *DsReadAudioRequest, opts ...grpc.CallOption) (*DsReadFromStoreResponse, error)
	// Run the data flow
	RunDataPipeline(ctx context.Context, in *DsRunDataPipelineRequest, opts ...grpc.CallOption) (*DsRunDataPipelineResponse, error)
	// Run recipe
	RunRecipe(ctx context.Context, in *DsRunRecipeRequest, opts ...grpc.CallOption) (*DsRunRecipeResponse, error)
	// Read from a flat file and create a dataset
	WriteFile(ctx context.Context, in *DsWriteFileRequest, opts ...grpc.CallOption) (*DsReadFromStoreResponse, error)
	// Based on the datasource, generate test dataset
	GenerateDataset(ctx context.Context, in *DsGenerateDatasetRequest, opts ...grpc.CallOption) (*DsGenerateDatasetResponse, error)
	// Preform the split. The dataset is assumed to be in the live area after validation
	SplitDataset(ctx context.Context, in *DsSplitDatasetRequest, opts ...grpc.CallOption) (*DsSplitDatasetResponse, error)
	// Preform the split. The dataset is assumed to be in the live area after validation
	Transform(ctx context.Context, in *DsTransformRequest, opts ...grpc.CallOption) (*DsTransformResponse, error)
	// Visualize a specific column
	CreateColumnProfile(ctx context.Context, in *DsCreateColumnProfileRequest, opts ...grpc.CallOption) (*DsCreateColumnProfileResponse, error)
	// Just infer the datasource, do no plots
	InferSchema(ctx context.Context, in *DsInferSchemaRequest, opts ...grpc.CallOption) (*DsInferSchemaResponse, error)
	// Just infer the datasource, do no plots
	GetTableView(ctx context.Context, in *DsGetTableViewRequest, opts ...grpc.CallOption) (*DsGetTableViewResponse, error)
	// split the dataset to rungs
	SplitDatasetToRungs(ctx context.Context, in *DsSplitDatasetToRungsRequest, opts ...grpc.CallOption) (*DsSplitDatasetToRungsResponse, error)
	// create dataset profile
	CreateDatasetProfile(ctx context.Context, in *DsCreateDatasetProfileRequest, opts ...grpc.CallOption) (*DsCreateDatasetProfileResponse, error)
	// create model profile
	CreateModelProfile(ctx context.Context, in *DsCreateModelProfileRequest, opts ...grpc.CallOption) (*DsCreateModelProfileResponse, error)
	// create study profile
	CreateStudyProfile(ctx context.Context, in *DsCreateStudyProfileRequest, opts ...grpc.CallOption) (*DsCreateStudyProfileResponse, error)
	CreateRecipeProfile(ctx context.Context, in *DsCreateRecipeProfileRequest, opts ...grpc.CallOption) (*DsCreateRecipeProfileResponse, error)
	// report services
	CreateModelReport(ctx context.Context, in *CreateModelReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error)
	CreateStudyReport(ctx context.Context, in *CreateStudyReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error)
	CreateDatasetReport(ctx context.Context, in *CreateDatasetReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error)
	CreateForecastReport(ctx context.Context, in *CreateForecastReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error)
	CreateSummaryReport(ctx context.Context, in *CreateSummaryReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error)
	// sample feature engineering pipeline
	AskFE(ctx context.Context, in *AskModelRequest, opts ...grpc.CallOption) (*AskModelResponse, error)
	AskBaseline(ctx context.Context, in *AskBaselineRequest, opts ...grpc.CallOption) (*AskBaselineResponse, error)
	AskEnsemble(ctx context.Context, in *AskEnsembleRequest, opts ...grpc.CallOption) (*AskEnsembleResponse, error)
	AskForecastModel(ctx context.Context, in *AskForecastModelRequest, opts ...grpc.CallOption) (*AskForecastModelResponse, error)
	// sample model randomly for a given budget
	AskModel(ctx context.Context, in *AskModelRequest, opts ...grpc.CallOption) (*AskModelResponse, error)
	// sample model randomly for a given budget
	AskAllModelsForTask(ctx context.Context, in *AskAllModelsForTaskRequest, opts ...grpc.CallOption) (*AskAllModelsForTaskResponse, error)
	// If a model is a partial model (sample < 100%)
	TellPartialModel(ctx context.Context, in *TellModelRequest, opts ...grpc.CallOption) (*TellModelResponse, error)
	// for bayaisn optimization, we tell the planner the result of the model evaluation
	TellModel(ctx context.Context, in *TellModelRequest, opts ...grpc.CallOption) (*TellModelResponse, error)
	// Merge the forecast back to one file.
	MergeForecastFile(ctx context.Context, in *DsMergeForecastFileRequest, opts ...grpc.CallOption) (*DsMergeForecastFileResponse, error)
	// test connection from python presepective
	DsTestConnection(ctx context.Context, in *DsTestConnectionRequest, opts ...grpc.CallOption) (*DsTestConnectionResponse, error)
	ShutDown(ctx context.Context, in *DsShutdownRequest, opts ...grpc.CallOption) (*DsShutdownResponse, error)
	StudyEnded(ctx context.Context, in *DsStudyEndedRequest, opts ...grpc.CallOption) (*DsStudyEndedResponse, error)
	SaveOptimizerDB(ctx context.Context, in *SaveOptimizerDBRequest, opts ...grpc.CallOption) (*SaveOptimizerDBResponse, error)
	GetDatabases(ctx context.Context, in *DsGetDatabasesRequest, opts ...grpc.CallOption) (*DsGetDatabasesResponse, error)
	GetTables(ctx context.Context, in *DsGetTablesRequest, opts ...grpc.CallOption) (*DsGetTablesResponse, error)
	ExecuteSql(ctx context.Context, in *DsExecuteSqlRequest, opts ...grpc.CallOption) (*DsExecuteSqlResponse, error)
	Snapshot(ctx context.Context, in *DsSnapshotRequest, opts ...grpc.CallOption) (*DsSnapshotResponse, error)
	// Tests
	UnitTestDataset(ctx context.Context, in *RunTestSuiteRequest, opts ...grpc.CallOption) (*RunTestSuiteResponse, error)
	UnitTestModel(ctx context.Context, in *RunTestSuiteRequest, opts ...grpc.CallOption) (*RunTestSuiteResponse, error)
	UnitTestFeedback(ctx context.Context, in *RunTestSuiteRequest, opts ...grpc.CallOption) (*RunTestSuiteResponse, error)
	UnitTestFeatureHistogram(ctx context.Context, in *RunTestSuiteRequest, opts ...grpc.CallOption) (*RunTestSuiteResponse, error)
	UnitTestPredictor(ctx context.Context, in *RunTestSuiteRequest, opts ...grpc.CallOption) (*RunTestSuiteResponse, error)
	GetTimeSeriesDatasetKeys(ctx context.Context, in *GetTimeSeriesDatasetKeysRequest, opts ...grpc.CallOption) (*GetTimeSeriesDatasetKeysResponse, error)
	GroupByDataset(ctx context.Context, in *DsGroupByDatasetRequest, opts ...grpc.CallOption) (*DsGroupByDatasetResponse, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) ReadFile(ctx context.Context, in *DsReadFileRequest, opts ...grpc.CallOption) (*DsReadFromStoreResponse, error) {
	out := new(DsReadFromStoreResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/ReadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ReadFeature(ctx context.Context, in *DsReadFeatureRequest, opts ...grpc.CallOption) (*DsReadFromStoreResponse, error) {
	out := new(DsReadFromStoreResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/ReadFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ReadAudio(ctx context.Context, in *DsReadAudioRequest, opts ...grpc.CallOption) (*DsReadFromStoreResponse, error) {
	out := new(DsReadFromStoreResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/ReadAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RunDataPipeline(ctx context.Context, in *DsRunDataPipelineRequest, opts ...grpc.CallOption) (*DsRunDataPipelineResponse, error) {
	out := new(DsRunDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/RunDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RunRecipe(ctx context.Context, in *DsRunRecipeRequest, opts ...grpc.CallOption) (*DsRunRecipeResponse, error) {
	out := new(DsRunRecipeResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/RunRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) WriteFile(ctx context.Context, in *DsWriteFileRequest, opts ...grpc.CallOption) (*DsReadFromStoreResponse, error) {
	out := new(DsReadFromStoreResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GenerateDataset(ctx context.Context, in *DsGenerateDatasetRequest, opts ...grpc.CallOption) (*DsGenerateDatasetResponse, error) {
	out := new(DsGenerateDatasetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/GenerateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) SplitDataset(ctx context.Context, in *DsSplitDatasetRequest, opts ...grpc.CallOption) (*DsSplitDatasetResponse, error) {
	out := new(DsSplitDatasetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/SplitDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) Transform(ctx context.Context, in *DsTransformRequest, opts ...grpc.CallOption) (*DsTransformResponse, error) {
	out := new(DsTransformResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/Transform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateColumnProfile(ctx context.Context, in *DsCreateColumnProfileRequest, opts ...grpc.CallOption) (*DsCreateColumnProfileResponse, error) {
	out := new(DsCreateColumnProfileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateColumnProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) InferSchema(ctx context.Context, in *DsInferSchemaRequest, opts ...grpc.CallOption) (*DsInferSchemaResponse, error) {
	out := new(DsInferSchemaResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/InferSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetTableView(ctx context.Context, in *DsGetTableViewRequest, opts ...grpc.CallOption) (*DsGetTableViewResponse, error) {
	out := new(DsGetTableViewResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/GetTableView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) SplitDatasetToRungs(ctx context.Context, in *DsSplitDatasetToRungsRequest, opts ...grpc.CallOption) (*DsSplitDatasetToRungsResponse, error) {
	out := new(DsSplitDatasetToRungsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/SplitDatasetToRungs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateDatasetProfile(ctx context.Context, in *DsCreateDatasetProfileRequest, opts ...grpc.CallOption) (*DsCreateDatasetProfileResponse, error) {
	out := new(DsCreateDatasetProfileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateDatasetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateModelProfile(ctx context.Context, in *DsCreateModelProfileRequest, opts ...grpc.CallOption) (*DsCreateModelProfileResponse, error) {
	out := new(DsCreateModelProfileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateModelProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateStudyProfile(ctx context.Context, in *DsCreateStudyProfileRequest, opts ...grpc.CallOption) (*DsCreateStudyProfileResponse, error) {
	out := new(DsCreateStudyProfileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateStudyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateRecipeProfile(ctx context.Context, in *DsCreateRecipeProfileRequest, opts ...grpc.CallOption) (*DsCreateRecipeProfileResponse, error) {
	out := new(DsCreateRecipeProfileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateRecipeProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateModelReport(ctx context.Context, in *CreateModelReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error) {
	out := new(CreateReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateModelReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateStudyReport(ctx context.Context, in *CreateStudyReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error) {
	out := new(CreateReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateStudyReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateDatasetReport(ctx context.Context, in *CreateDatasetReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error) {
	out := new(CreateReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateDatasetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateForecastReport(ctx context.Context, in *CreateForecastReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error) {
	out := new(CreateReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateForecastReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateSummaryReport(ctx context.Context, in *CreateSummaryReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error) {
	out := new(CreateReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateSummaryReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AskFE(ctx context.Context, in *AskModelRequest, opts ...grpc.CallOption) (*AskModelResponse, error) {
	out := new(AskModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskFE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AskBaseline(ctx context.Context, in *AskBaselineRequest, opts ...grpc.CallOption) (*AskBaselineResponse, error) {
	out := new(AskBaselineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskBaseline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AskEnsemble(ctx context.Context, in *AskEnsembleRequest, opts ...grpc.CallOption) (*AskEnsembleResponse, error) {
	out := new(AskEnsembleResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskEnsemble", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AskForecastModel(ctx context.Context, in *AskForecastModelRequest, opts ...grpc.CallOption) (*AskForecastModelResponse, error) {
	out := new(AskForecastModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskForecastModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AskModel(ctx context.Context, in *AskModelRequest, opts ...grpc.CallOption) (*AskModelResponse, error) {
	out := new(AskModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AskAllModelsForTask(ctx context.Context, in *AskAllModelsForTaskRequest, opts ...grpc.CallOption) (*AskAllModelsForTaskResponse, error) {
	out := new(AskAllModelsForTaskResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskAllModelsForTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) TellPartialModel(ctx context.Context, in *TellModelRequest, opts ...grpc.CallOption) (*TellModelResponse, error) {
	out := new(TellModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/TellPartialModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) TellModel(ctx context.Context, in *TellModelRequest, opts ...grpc.CallOption) (*TellModelResponse, error) {
	out := new(TellModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/TellModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) MergeForecastFile(ctx context.Context, in *DsMergeForecastFileRequest, opts ...grpc.CallOption) (*DsMergeForecastFileResponse, error) {
	out := new(DsMergeForecastFileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/MergeForecastFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DsTestConnection(ctx context.Context, in *DsTestConnectionRequest, opts ...grpc.CallOption) (*DsTestConnectionResponse, error) {
	out := new(DsTestConnectionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/DsTestConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ShutDown(ctx context.Context, in *DsShutdownRequest, opts ...grpc.CallOption) (*DsShutdownResponse, error) {
	out := new(DsShutdownResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/ShutDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) StudyEnded(ctx context.Context, in *DsStudyEndedRequest, opts ...grpc.CallOption) (*DsStudyEndedResponse, error) {
	out := new(DsStudyEndedResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/StudyEnded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) SaveOptimizerDB(ctx context.Context, in *SaveOptimizerDBRequest, opts ...grpc.CallOption) (*SaveOptimizerDBResponse, error) {
	out := new(SaveOptimizerDBResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/SaveOptimizerDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDatabases(ctx context.Context, in *DsGetDatabasesRequest, opts ...grpc.CallOption) (*DsGetDatabasesResponse, error) {
	out := new(DsGetDatabasesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/GetDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetTables(ctx context.Context, in *DsGetTablesRequest, opts ...grpc.CallOption) (*DsGetTablesResponse, error) {
	out := new(DsGetTablesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/GetTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ExecuteSql(ctx context.Context, in *DsExecuteSqlRequest, opts ...grpc.CallOption) (*DsExecuteSqlResponse, error) {
	out := new(DsExecuteSqlResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/ExecuteSql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) Snapshot(ctx context.Context, in *DsSnapshotRequest, opts ...grpc.CallOption) (*DsSnapshotResponse, error) {
	out := new(DsSnapshotResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UnitTestDataset(ctx context.Context, in *RunTestSuiteRequest, opts ...grpc.CallOption) (*RunTestSuiteResponse, error) {
	out := new(RunTestSuiteResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/UnitTestDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UnitTestModel(ctx context.Context, in *RunTestSuiteRequest, opts ...grpc.CallOption) (*RunTestSuiteResponse, error) {
	out := new(RunTestSuiteResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/UnitTestModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UnitTestFeedback(ctx context.Context, in *RunTestSuiteRequest, opts ...grpc.CallOption) (*RunTestSuiteResponse, error) {
	out := new(RunTestSuiteResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/UnitTestFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UnitTestFeatureHistogram(ctx context.Context, in *RunTestSuiteRequest, opts ...grpc.CallOption) (*RunTestSuiteResponse, error) {
	out := new(RunTestSuiteResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/UnitTestFeatureHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UnitTestPredictor(ctx context.Context, in *RunTestSuiteRequest, opts ...grpc.CallOption) (*RunTestSuiteResponse, error) {
	out := new(RunTestSuiteResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/UnitTestPredictor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetTimeSeriesDatasetKeys(ctx context.Context, in *GetTimeSeriesDatasetKeysRequest, opts ...grpc.CallOption) (*GetTimeSeriesDatasetKeysResponse, error) {
	out := new(GetTimeSeriesDatasetKeysResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/GetTimeSeriesDatasetKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GroupByDataset(ctx context.Context, in *DsGroupByDatasetRequest, opts ...grpc.CallOption) (*DsGroupByDatasetResponse, error) {
	out := new(DsGroupByDatasetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.data.v1.DataService/GroupByDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	// Read from a flat file and create a dataset
	ReadFile(context.Context, *DsReadFileRequest) (*DsReadFromStoreResponse, error)
	// Read from a feature and create a dataset
	ReadFeature(context.Context, *DsReadFeatureRequest) (*DsReadFromStoreResponse, error)
	// Read from audio and create an audio dataset
	ReadAudio(context.Context, *DsReadAudioRequest) (*DsReadFromStoreResponse, error)
	// Run the data flow
	RunDataPipeline(context.Context, *DsRunDataPipelineRequest) (*DsRunDataPipelineResponse, error)
	// Run recipe
	RunRecipe(context.Context, *DsRunRecipeRequest) (*DsRunRecipeResponse, error)
	// Read from a flat file and create a dataset
	WriteFile(context.Context, *DsWriteFileRequest) (*DsReadFromStoreResponse, error)
	// Based on the datasource, generate test dataset
	GenerateDataset(context.Context, *DsGenerateDatasetRequest) (*DsGenerateDatasetResponse, error)
	// Preform the split. The dataset is assumed to be in the live area after validation
	SplitDataset(context.Context, *DsSplitDatasetRequest) (*DsSplitDatasetResponse, error)
	// Preform the split. The dataset is assumed to be in the live area after validation
	Transform(context.Context, *DsTransformRequest) (*DsTransformResponse, error)
	// Visualize a specific column
	CreateColumnProfile(context.Context, *DsCreateColumnProfileRequest) (*DsCreateColumnProfileResponse, error)
	// Just infer the datasource, do no plots
	InferSchema(context.Context, *DsInferSchemaRequest) (*DsInferSchemaResponse, error)
	// Just infer the datasource, do no plots
	GetTableView(context.Context, *DsGetTableViewRequest) (*DsGetTableViewResponse, error)
	// split the dataset to rungs
	SplitDatasetToRungs(context.Context, *DsSplitDatasetToRungsRequest) (*DsSplitDatasetToRungsResponse, error)
	// create dataset profile
	CreateDatasetProfile(context.Context, *DsCreateDatasetProfileRequest) (*DsCreateDatasetProfileResponse, error)
	// create model profile
	CreateModelProfile(context.Context, *DsCreateModelProfileRequest) (*DsCreateModelProfileResponse, error)
	// create study profile
	CreateStudyProfile(context.Context, *DsCreateStudyProfileRequest) (*DsCreateStudyProfileResponse, error)
	CreateRecipeProfile(context.Context, *DsCreateRecipeProfileRequest) (*DsCreateRecipeProfileResponse, error)
	// report services
	CreateModelReport(context.Context, *CreateModelReportRequest) (*CreateReportResponse, error)
	CreateStudyReport(context.Context, *CreateStudyReportRequest) (*CreateReportResponse, error)
	CreateDatasetReport(context.Context, *CreateDatasetReportRequest) (*CreateReportResponse, error)
	CreateForecastReport(context.Context, *CreateForecastReportRequest) (*CreateReportResponse, error)
	CreateSummaryReport(context.Context, *CreateSummaryReportRequest) (*CreateReportResponse, error)
	// sample feature engineering pipeline
	AskFE(context.Context, *AskModelRequest) (*AskModelResponse, error)
	AskBaseline(context.Context, *AskBaselineRequest) (*AskBaselineResponse, error)
	AskEnsemble(context.Context, *AskEnsembleRequest) (*AskEnsembleResponse, error)
	AskForecastModel(context.Context, *AskForecastModelRequest) (*AskForecastModelResponse, error)
	// sample model randomly for a given budget
	AskModel(context.Context, *AskModelRequest) (*AskModelResponse, error)
	// sample model randomly for a given budget
	AskAllModelsForTask(context.Context, *AskAllModelsForTaskRequest) (*AskAllModelsForTaskResponse, error)
	// If a model is a partial model (sample < 100%)
	TellPartialModel(context.Context, *TellModelRequest) (*TellModelResponse, error)
	// for bayaisn optimization, we tell the planner the result of the model evaluation
	TellModel(context.Context, *TellModelRequest) (*TellModelResponse, error)
	// Merge the forecast back to one file.
	MergeForecastFile(context.Context, *DsMergeForecastFileRequest) (*DsMergeForecastFileResponse, error)
	// test connection from python presepective
	DsTestConnection(context.Context, *DsTestConnectionRequest) (*DsTestConnectionResponse, error)
	ShutDown(context.Context, *DsShutdownRequest) (*DsShutdownResponse, error)
	StudyEnded(context.Context, *DsStudyEndedRequest) (*DsStudyEndedResponse, error)
	SaveOptimizerDB(context.Context, *SaveOptimizerDBRequest) (*SaveOptimizerDBResponse, error)
	GetDatabases(context.Context, *DsGetDatabasesRequest) (*DsGetDatabasesResponse, error)
	GetTables(context.Context, *DsGetTablesRequest) (*DsGetTablesResponse, error)
	ExecuteSql(context.Context, *DsExecuteSqlRequest) (*DsExecuteSqlResponse, error)
	Snapshot(context.Context, *DsSnapshotRequest) (*DsSnapshotResponse, error)
	// Tests
	UnitTestDataset(context.Context, *RunTestSuiteRequest) (*RunTestSuiteResponse, error)
	UnitTestModel(context.Context, *RunTestSuiteRequest) (*RunTestSuiteResponse, error)
	UnitTestFeedback(context.Context, *RunTestSuiteRequest) (*RunTestSuiteResponse, error)
	UnitTestFeatureHistogram(context.Context, *RunTestSuiteRequest) (*RunTestSuiteResponse, error)
	UnitTestPredictor(context.Context, *RunTestSuiteRequest) (*RunTestSuiteResponse, error)
	GetTimeSeriesDatasetKeys(context.Context, *GetTimeSeriesDatasetKeysRequest) (*GetTimeSeriesDatasetKeysResponse, error)
	GroupByDataset(context.Context, *DsGroupByDatasetRequest) (*DsGroupByDatasetResponse, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) ReadFile(context.Context, *DsReadFileRequest) (*DsReadFromStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedDataServiceServer) ReadFeature(context.Context, *DsReadFeatureRequest) (*DsReadFromStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFeature not implemented")
}
func (UnimplementedDataServiceServer) ReadAudio(context.Context, *DsReadAudioRequest) (*DsReadFromStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAudio not implemented")
}
func (UnimplementedDataServiceServer) RunDataPipeline(context.Context, *DsRunDataPipelineRequest) (*DsRunDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunDataPipeline not implemented")
}
func (UnimplementedDataServiceServer) RunRecipe(context.Context, *DsRunRecipeRequest) (*DsRunRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRecipe not implemented")
}
func (UnimplementedDataServiceServer) WriteFile(context.Context, *DsWriteFileRequest) (*DsReadFromStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedDataServiceServer) GenerateDataset(context.Context, *DsGenerateDatasetRequest) (*DsGenerateDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDataset not implemented")
}
func (UnimplementedDataServiceServer) SplitDataset(context.Context, *DsSplitDatasetRequest) (*DsSplitDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitDataset not implemented")
}
func (UnimplementedDataServiceServer) Transform(context.Context, *DsTransformRequest) (*DsTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transform not implemented")
}
func (UnimplementedDataServiceServer) CreateColumnProfile(context.Context, *DsCreateColumnProfileRequest) (*DsCreateColumnProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColumnProfile not implemented")
}
func (UnimplementedDataServiceServer) InferSchema(context.Context, *DsInferSchemaRequest) (*DsInferSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferSchema not implemented")
}
func (UnimplementedDataServiceServer) GetTableView(context.Context, *DsGetTableViewRequest) (*DsGetTableViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableView not implemented")
}
func (UnimplementedDataServiceServer) SplitDatasetToRungs(context.Context, *DsSplitDatasetToRungsRequest) (*DsSplitDatasetToRungsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitDatasetToRungs not implemented")
}
func (UnimplementedDataServiceServer) CreateDatasetProfile(context.Context, *DsCreateDatasetProfileRequest) (*DsCreateDatasetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatasetProfile not implemented")
}
func (UnimplementedDataServiceServer) CreateModelProfile(context.Context, *DsCreateModelProfileRequest) (*DsCreateModelProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelProfile not implemented")
}
func (UnimplementedDataServiceServer) CreateStudyProfile(context.Context, *DsCreateStudyProfileRequest) (*DsCreateStudyProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudyProfile not implemented")
}
func (UnimplementedDataServiceServer) CreateRecipeProfile(context.Context, *DsCreateRecipeProfileRequest) (*DsCreateRecipeProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipeProfile not implemented")
}
func (UnimplementedDataServiceServer) CreateModelReport(context.Context, *CreateModelReportRequest) (*CreateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelReport not implemented")
}
func (UnimplementedDataServiceServer) CreateStudyReport(context.Context, *CreateStudyReportRequest) (*CreateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudyReport not implemented")
}
func (UnimplementedDataServiceServer) CreateDatasetReport(context.Context, *CreateDatasetReportRequest) (*CreateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatasetReport not implemented")
}
func (UnimplementedDataServiceServer) CreateForecastReport(context.Context, *CreateForecastReportRequest) (*CreateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForecastReport not implemented")
}
func (UnimplementedDataServiceServer) CreateSummaryReport(context.Context, *CreateSummaryReportRequest) (*CreateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSummaryReport not implemented")
}
func (UnimplementedDataServiceServer) AskFE(context.Context, *AskModelRequest) (*AskModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskFE not implemented")
}
func (UnimplementedDataServiceServer) AskBaseline(context.Context, *AskBaselineRequest) (*AskBaselineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskBaseline not implemented")
}
func (UnimplementedDataServiceServer) AskEnsemble(context.Context, *AskEnsembleRequest) (*AskEnsembleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskEnsemble not implemented")
}
func (UnimplementedDataServiceServer) AskForecastModel(context.Context, *AskForecastModelRequest) (*AskForecastModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForecastModel not implemented")
}
func (UnimplementedDataServiceServer) AskModel(context.Context, *AskModelRequest) (*AskModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskModel not implemented")
}
func (UnimplementedDataServiceServer) AskAllModelsForTask(context.Context, *AskAllModelsForTaskRequest) (*AskAllModelsForTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskAllModelsForTask not implemented")
}
func (UnimplementedDataServiceServer) TellPartialModel(context.Context, *TellModelRequest) (*TellModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TellPartialModel not implemented")
}
func (UnimplementedDataServiceServer) TellModel(context.Context, *TellModelRequest) (*TellModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TellModel not implemented")
}
func (UnimplementedDataServiceServer) MergeForecastFile(context.Context, *DsMergeForecastFileRequest) (*DsMergeForecastFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeForecastFile not implemented")
}
func (UnimplementedDataServiceServer) DsTestConnection(context.Context, *DsTestConnectionRequest) (*DsTestConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DsTestConnection not implemented")
}
func (UnimplementedDataServiceServer) ShutDown(context.Context, *DsShutdownRequest) (*DsShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutDown not implemented")
}
func (UnimplementedDataServiceServer) StudyEnded(context.Context, *DsStudyEndedRequest) (*DsStudyEndedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudyEnded not implemented")
}
func (UnimplementedDataServiceServer) SaveOptimizerDB(context.Context, *SaveOptimizerDBRequest) (*SaveOptimizerDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOptimizerDB not implemented")
}
func (UnimplementedDataServiceServer) GetDatabases(context.Context, *DsGetDatabasesRequest) (*DsGetDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabases not implemented")
}
func (UnimplementedDataServiceServer) GetTables(context.Context, *DsGetTablesRequest) (*DsGetTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTables not implemented")
}
func (UnimplementedDataServiceServer) ExecuteSql(context.Context, *DsExecuteSqlRequest) (*DsExecuteSqlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSql not implemented")
}
func (UnimplementedDataServiceServer) Snapshot(context.Context, *DsSnapshotRequest) (*DsSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedDataServiceServer) UnitTestDataset(context.Context, *RunTestSuiteRequest) (*RunTestSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitTestDataset not implemented")
}
func (UnimplementedDataServiceServer) UnitTestModel(context.Context, *RunTestSuiteRequest) (*RunTestSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitTestModel not implemented")
}
func (UnimplementedDataServiceServer) UnitTestFeedback(context.Context, *RunTestSuiteRequest) (*RunTestSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitTestFeedback not implemented")
}
func (UnimplementedDataServiceServer) UnitTestFeatureHistogram(context.Context, *RunTestSuiteRequest) (*RunTestSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitTestFeatureHistogram not implemented")
}
func (UnimplementedDataServiceServer) UnitTestPredictor(context.Context, *RunTestSuiteRequest) (*RunTestSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitTestPredictor not implemented")
}
func (UnimplementedDataServiceServer) GetTimeSeriesDatasetKeys(context.Context, *GetTimeSeriesDatasetKeysRequest) (*GetTimeSeriesDatasetKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeSeriesDatasetKeys not implemented")
}
func (UnimplementedDataServiceServer) GroupByDataset(context.Context, *DsGroupByDatasetRequest) (*DsGroupByDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupByDataset not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ReadFile(ctx, req.(*DsReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ReadFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsReadFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ReadFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/ReadFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ReadFeature(ctx, req.(*DsReadFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ReadAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsReadAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ReadAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/ReadAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ReadAudio(ctx, req.(*DsReadAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RunDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsRunDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RunDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/RunDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RunDataPipeline(ctx, req.(*DsRunDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RunRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsRunRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RunRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/RunRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RunRecipe(ctx, req.(*DsRunRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsWriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).WriteFile(ctx, req.(*DsWriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GenerateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsGenerateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GenerateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/GenerateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GenerateDataset(ctx, req.(*DsGenerateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_SplitDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsSplitDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).SplitDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/SplitDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).SplitDataset(ctx, req.(*DsSplitDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_Transform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Transform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/Transform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Transform(ctx, req.(*DsTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateColumnProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsCreateColumnProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateColumnProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateColumnProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateColumnProfile(ctx, req.(*DsCreateColumnProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_InferSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsInferSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).InferSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/InferSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).InferSchema(ctx, req.(*DsInferSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetTableView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsGetTableViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetTableView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/GetTableView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetTableView(ctx, req.(*DsGetTableViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_SplitDatasetToRungs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsSplitDatasetToRungsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).SplitDatasetToRungs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/SplitDatasetToRungs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).SplitDatasetToRungs(ctx, req.(*DsSplitDatasetToRungsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateDatasetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsCreateDatasetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateDatasetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateDatasetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateDatasetProfile(ctx, req.(*DsCreateDatasetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateModelProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsCreateModelProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateModelProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateModelProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateModelProfile(ctx, req.(*DsCreateModelProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateStudyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsCreateStudyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateStudyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateStudyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateStudyProfile(ctx, req.(*DsCreateStudyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateRecipeProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsCreateRecipeProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateRecipeProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateRecipeProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateRecipeProfile(ctx, req.(*DsCreateRecipeProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateModelReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateModelReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateModelReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateModelReport(ctx, req.(*CreateModelReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateStudyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateStudyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateStudyReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateStudyReport(ctx, req.(*CreateStudyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateDatasetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateDatasetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateDatasetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateDatasetReport(ctx, req.(*CreateDatasetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateForecastReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForecastReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateForecastReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateForecastReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateForecastReport(ctx, req.(*CreateForecastReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateSummaryReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummaryReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateSummaryReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/CreateSummaryReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateSummaryReport(ctx, req.(*CreateSummaryReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AskFE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AskFE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskFE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AskFE(ctx, req.(*AskModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AskBaseline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskBaselineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AskBaseline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskBaseline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AskBaseline(ctx, req.(*AskBaselineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AskEnsemble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskEnsembleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AskEnsemble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskEnsemble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AskEnsemble(ctx, req.(*AskEnsembleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AskForecastModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskForecastModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AskForecastModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskForecastModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AskForecastModel(ctx, req.(*AskForecastModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AskModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AskModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AskModel(ctx, req.(*AskModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AskAllModelsForTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskAllModelsForTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AskAllModelsForTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/AskAllModelsForTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AskAllModelsForTask(ctx, req.(*AskAllModelsForTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_TellPartialModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TellModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).TellPartialModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/TellPartialModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).TellPartialModel(ctx, req.(*TellModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_TellModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TellModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).TellModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/TellModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).TellModel(ctx, req.(*TellModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_MergeForecastFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsMergeForecastFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).MergeForecastFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/MergeForecastFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).MergeForecastFile(ctx, req.(*DsMergeForecastFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DsTestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsTestConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DsTestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/DsTestConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DsTestConnection(ctx, req.(*DsTestConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ShutDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ShutDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/ShutDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ShutDown(ctx, req.(*DsShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_StudyEnded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsStudyEndedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).StudyEnded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/StudyEnded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).StudyEnded(ctx, req.(*DsStudyEndedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_SaveOptimizerDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveOptimizerDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).SaveOptimizerDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/SaveOptimizerDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).SaveOptimizerDB(ctx, req.(*SaveOptimizerDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsGetDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/GetDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDatabases(ctx, req.(*DsGetDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsGetTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/GetTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetTables(ctx, req.(*DsGetTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ExecuteSql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsExecuteSqlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ExecuteSql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/ExecuteSql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ExecuteSql(ctx, req.(*DsExecuteSqlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Snapshot(ctx, req.(*DsSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UnitTestDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UnitTestDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/UnitTestDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UnitTestDataset(ctx, req.(*RunTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UnitTestModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UnitTestModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/UnitTestModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UnitTestModel(ctx, req.(*RunTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UnitTestFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UnitTestFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/UnitTestFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UnitTestFeedback(ctx, req.(*RunTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UnitTestFeatureHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UnitTestFeatureHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/UnitTestFeatureHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UnitTestFeatureHistogram(ctx, req.(*RunTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UnitTestPredictor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UnitTestPredictor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/UnitTestPredictor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UnitTestPredictor(ctx, req.(*RunTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetTimeSeriesDatasetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeSeriesDatasetKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetTimeSeriesDatasetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/GetTimeSeriesDatasetKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetTimeSeriesDatasetKeys(ctx, req.(*GetTimeSeriesDatasetKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GroupByDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsGroupByDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GroupByDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.data.v1.DataService/GroupByDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GroupByDataset(ctx, req.(*DsGroupByDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.data.v1.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadFile",
			Handler:    _DataService_ReadFile_Handler,
		},
		{
			MethodName: "ReadFeature",
			Handler:    _DataService_ReadFeature_Handler,
		},
		{
			MethodName: "ReadAudio",
			Handler:    _DataService_ReadAudio_Handler,
		},
		{
			MethodName: "RunDataPipeline",
			Handler:    _DataService_RunDataPipeline_Handler,
		},
		{
			MethodName: "RunRecipe",
			Handler:    _DataService_RunRecipe_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _DataService_WriteFile_Handler,
		},
		{
			MethodName: "GenerateDataset",
			Handler:    _DataService_GenerateDataset_Handler,
		},
		{
			MethodName: "SplitDataset",
			Handler:    _DataService_SplitDataset_Handler,
		},
		{
			MethodName: "Transform",
			Handler:    _DataService_Transform_Handler,
		},
		{
			MethodName: "CreateColumnProfile",
			Handler:    _DataService_CreateColumnProfile_Handler,
		},
		{
			MethodName: "InferSchema",
			Handler:    _DataService_InferSchema_Handler,
		},
		{
			MethodName: "GetTableView",
			Handler:    _DataService_GetTableView_Handler,
		},
		{
			MethodName: "SplitDatasetToRungs",
			Handler:    _DataService_SplitDatasetToRungs_Handler,
		},
		{
			MethodName: "CreateDatasetProfile",
			Handler:    _DataService_CreateDatasetProfile_Handler,
		},
		{
			MethodName: "CreateModelProfile",
			Handler:    _DataService_CreateModelProfile_Handler,
		},
		{
			MethodName: "CreateStudyProfile",
			Handler:    _DataService_CreateStudyProfile_Handler,
		},
		{
			MethodName: "CreateRecipeProfile",
			Handler:    _DataService_CreateRecipeProfile_Handler,
		},
		{
			MethodName: "CreateModelReport",
			Handler:    _DataService_CreateModelReport_Handler,
		},
		{
			MethodName: "CreateStudyReport",
			Handler:    _DataService_CreateStudyReport_Handler,
		},
		{
			MethodName: "CreateDatasetReport",
			Handler:    _DataService_CreateDatasetReport_Handler,
		},
		{
			MethodName: "CreateForecastReport",
			Handler:    _DataService_CreateForecastReport_Handler,
		},
		{
			MethodName: "CreateSummaryReport",
			Handler:    _DataService_CreateSummaryReport_Handler,
		},
		{
			MethodName: "AskFE",
			Handler:    _DataService_AskFE_Handler,
		},
		{
			MethodName: "AskBaseline",
			Handler:    _DataService_AskBaseline_Handler,
		},
		{
			MethodName: "AskEnsemble",
			Handler:    _DataService_AskEnsemble_Handler,
		},
		{
			MethodName: "AskForecastModel",
			Handler:    _DataService_AskForecastModel_Handler,
		},
		{
			MethodName: "AskModel",
			Handler:    _DataService_AskModel_Handler,
		},
		{
			MethodName: "AskAllModelsForTask",
			Handler:    _DataService_AskAllModelsForTask_Handler,
		},
		{
			MethodName: "TellPartialModel",
			Handler:    _DataService_TellPartialModel_Handler,
		},
		{
			MethodName: "TellModel",
			Handler:    _DataService_TellModel_Handler,
		},
		{
			MethodName: "MergeForecastFile",
			Handler:    _DataService_MergeForecastFile_Handler,
		},
		{
			MethodName: "DsTestConnection",
			Handler:    _DataService_DsTestConnection_Handler,
		},
		{
			MethodName: "ShutDown",
			Handler:    _DataService_ShutDown_Handler,
		},
		{
			MethodName: "StudyEnded",
			Handler:    _DataService_StudyEnded_Handler,
		},
		{
			MethodName: "SaveOptimizerDB",
			Handler:    _DataService_SaveOptimizerDB_Handler,
		},
		{
			MethodName: "GetDatabases",
			Handler:    _DataService_GetDatabases_Handler,
		},
		{
			MethodName: "GetTables",
			Handler:    _DataService_GetTables_Handler,
		},
		{
			MethodName: "ExecuteSql",
			Handler:    _DataService_ExecuteSql_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _DataService_Snapshot_Handler,
		},
		{
			MethodName: "UnitTestDataset",
			Handler:    _DataService_UnitTestDataset_Handler,
		},
		{
			MethodName: "UnitTestModel",
			Handler:    _DataService_UnitTestModel_Handler,
		},
		{
			MethodName: "UnitTestFeedback",
			Handler:    _DataService_UnitTestFeedback_Handler,
		},
		{
			MethodName: "UnitTestFeatureHistogram",
			Handler:    _DataService_UnitTestFeatureHistogram_Handler,
		},
		{
			MethodName: "UnitTestPredictor",
			Handler:    _DataService_UnitTestPredictor_Handler,
		},
		{
			MethodName: "GetTimeSeriesDatasetKeys",
			Handler:    _DataService_GetTimeSeriesDatasetKeys_Handler,
		},
		{
			MethodName: "GroupByDataset",
			Handler:    _DataService_GroupByDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/data/v1/data.proto",
}
