// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: github.com/metaprov/modelaapi/services/featuregroup/v1/featuregroup.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureGroupServiceClient is the client API for FeatureGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureGroupServiceClient interface {
	ListFeatureGroups(ctx context.Context, in *ListFeatureGroupRequest, opts ...grpc.CallOption) (*ListFeatureGroupResponse, error)
	CreateFeatureGroup(ctx context.Context, in *CreateFeatureGroupRequest, opts ...grpc.CallOption) (*CreateFeatureGroupResponse, error)
	GetFeatureGroup(ctx context.Context, in *GetFeatureGroupRequest, opts ...grpc.CallOption) (*GetFeatureGroupResponse, error)
	UpdateFeatureGroup(ctx context.Context, in *UpdateFeatureGroupRequest, opts ...grpc.CallOption) (*UpdateFeatureGroupResponse, error)
	DeleteFeatureGroup(ctx context.Context, in *DeleteFeatureGroupRequest, opts ...grpc.CallOption) (*DeleteFeatureGroupResponse, error)
	PauseFeatureGroup(ctx context.Context, in *PauseFeatureGroupRequest, opts ...grpc.CallOption) (*PauseFeatureGroupResponse, error)
	ResumeFeatureGroup(ctx context.Context, in *ResumeFeatureGroupRequest, opts ...grpc.CallOption) (*ResumeFeatureGroupResponse, error)
	IngestNow(ctx context.Context, in *IngestFeatureGroupRequest, opts ...grpc.CallOption) (*IngestFeatureGroupResponse, error)
	SyncNow(ctx context.Context, in *SyncFeatureGroupRequest, opts ...grpc.CallOption) (*SyncFeatureGroupResponse, error)
}

type featureGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureGroupServiceClient(cc grpc.ClientConnInterface) FeatureGroupServiceClient {
	return &featureGroupServiceClient{cc}
}

func (c *featureGroupServiceClient) ListFeatureGroups(ctx context.Context, in *ListFeatureGroupRequest, opts ...grpc.CallOption) (*ListFeatureGroupResponse, error) {
	out := new(ListFeatureGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/ListFeatureGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureGroupServiceClient) CreateFeatureGroup(ctx context.Context, in *CreateFeatureGroupRequest, opts ...grpc.CallOption) (*CreateFeatureGroupResponse, error) {
	out := new(CreateFeatureGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/CreateFeatureGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureGroupServiceClient) GetFeatureGroup(ctx context.Context, in *GetFeatureGroupRequest, opts ...grpc.CallOption) (*GetFeatureGroupResponse, error) {
	out := new(GetFeatureGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/GetFeatureGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureGroupServiceClient) UpdateFeatureGroup(ctx context.Context, in *UpdateFeatureGroupRequest, opts ...grpc.CallOption) (*UpdateFeatureGroupResponse, error) {
	out := new(UpdateFeatureGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/UpdateFeatureGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureGroupServiceClient) DeleteFeatureGroup(ctx context.Context, in *DeleteFeatureGroupRequest, opts ...grpc.CallOption) (*DeleteFeatureGroupResponse, error) {
	out := new(DeleteFeatureGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/DeleteFeatureGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureGroupServiceClient) PauseFeatureGroup(ctx context.Context, in *PauseFeatureGroupRequest, opts ...grpc.CallOption) (*PauseFeatureGroupResponse, error) {
	out := new(PauseFeatureGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/PauseFeatureGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureGroupServiceClient) ResumeFeatureGroup(ctx context.Context, in *ResumeFeatureGroupRequest, opts ...grpc.CallOption) (*ResumeFeatureGroupResponse, error) {
	out := new(ResumeFeatureGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/ResumeFeatureGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureGroupServiceClient) IngestNow(ctx context.Context, in *IngestFeatureGroupRequest, opts ...grpc.CallOption) (*IngestFeatureGroupResponse, error) {
	out := new(IngestFeatureGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/IngestNow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureGroupServiceClient) SyncNow(ctx context.Context, in *SyncFeatureGroupRequest, opts ...grpc.CallOption) (*SyncFeatureGroupResponse, error) {
	out := new(SyncFeatureGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/SyncNow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureGroupServiceServer is the server API for FeatureGroupService service.
// All implementations must embed UnimplementedFeatureGroupServiceServer
// for forward compatibility
type FeatureGroupServiceServer interface {
	ListFeatureGroups(context.Context, *ListFeatureGroupRequest) (*ListFeatureGroupResponse, error)
	CreateFeatureGroup(context.Context, *CreateFeatureGroupRequest) (*CreateFeatureGroupResponse, error)
	GetFeatureGroup(context.Context, *GetFeatureGroupRequest) (*GetFeatureGroupResponse, error)
	UpdateFeatureGroup(context.Context, *UpdateFeatureGroupRequest) (*UpdateFeatureGroupResponse, error)
	DeleteFeatureGroup(context.Context, *DeleteFeatureGroupRequest) (*DeleteFeatureGroupResponse, error)
	PauseFeatureGroup(context.Context, *PauseFeatureGroupRequest) (*PauseFeatureGroupResponse, error)
	ResumeFeatureGroup(context.Context, *ResumeFeatureGroupRequest) (*ResumeFeatureGroupResponse, error)
	IngestNow(context.Context, *IngestFeatureGroupRequest) (*IngestFeatureGroupResponse, error)
	SyncNow(context.Context, *SyncFeatureGroupRequest) (*SyncFeatureGroupResponse, error)
	mustEmbedUnimplementedFeatureGroupServiceServer()
}

// UnimplementedFeatureGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureGroupServiceServer struct {
}

func (UnimplementedFeatureGroupServiceServer) ListFeatureGroups(context.Context, *ListFeatureGroupRequest) (*ListFeatureGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureGroups not implemented")
}
func (UnimplementedFeatureGroupServiceServer) CreateFeatureGroup(context.Context, *CreateFeatureGroupRequest) (*CreateFeatureGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatureGroup not implemented")
}
func (UnimplementedFeatureGroupServiceServer) GetFeatureGroup(context.Context, *GetFeatureGroupRequest) (*GetFeatureGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureGroup not implemented")
}
func (UnimplementedFeatureGroupServiceServer) UpdateFeatureGroup(context.Context, *UpdateFeatureGroupRequest) (*UpdateFeatureGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureGroup not implemented")
}
func (UnimplementedFeatureGroupServiceServer) DeleteFeatureGroup(context.Context, *DeleteFeatureGroupRequest) (*DeleteFeatureGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatureGroup not implemented")
}
func (UnimplementedFeatureGroupServiceServer) PauseFeatureGroup(context.Context, *PauseFeatureGroupRequest) (*PauseFeatureGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseFeatureGroup not implemented")
}
func (UnimplementedFeatureGroupServiceServer) ResumeFeatureGroup(context.Context, *ResumeFeatureGroupRequest) (*ResumeFeatureGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeFeatureGroup not implemented")
}
func (UnimplementedFeatureGroupServiceServer) IngestNow(context.Context, *IngestFeatureGroupRequest) (*IngestFeatureGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestNow not implemented")
}
func (UnimplementedFeatureGroupServiceServer) SyncNow(context.Context, *SyncFeatureGroupRequest) (*SyncFeatureGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncNow not implemented")
}
func (UnimplementedFeatureGroupServiceServer) mustEmbedUnimplementedFeatureGroupServiceServer() {}

// UnsafeFeatureGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureGroupServiceServer will
// result in compilation errors.
type UnsafeFeatureGroupServiceServer interface {
	mustEmbedUnimplementedFeatureGroupServiceServer()
}

func RegisterFeatureGroupServiceServer(s grpc.ServiceRegistrar, srv FeatureGroupServiceServer) {
	s.RegisterService(&FeatureGroupService_ServiceDesc, srv)
}

func _FeatureGroupService_ListFeatureGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServiceServer).ListFeatureGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/ListFeatureGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServiceServer).ListFeatureGroups(ctx, req.(*ListFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureGroupService_CreateFeatureGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServiceServer).CreateFeatureGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/CreateFeatureGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServiceServer).CreateFeatureGroup(ctx, req.(*CreateFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureGroupService_GetFeatureGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServiceServer).GetFeatureGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/GetFeatureGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServiceServer).GetFeatureGroup(ctx, req.(*GetFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureGroupService_UpdateFeatureGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServiceServer).UpdateFeatureGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/UpdateFeatureGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServiceServer).UpdateFeatureGroup(ctx, req.(*UpdateFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureGroupService_DeleteFeatureGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServiceServer).DeleteFeatureGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/DeleteFeatureGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServiceServer).DeleteFeatureGroup(ctx, req.(*DeleteFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureGroupService_PauseFeatureGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServiceServer).PauseFeatureGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/PauseFeatureGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServiceServer).PauseFeatureGroup(ctx, req.(*PauseFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureGroupService_ResumeFeatureGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServiceServer).ResumeFeatureGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/ResumeFeatureGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServiceServer).ResumeFeatureGroup(ctx, req.(*ResumeFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureGroupService_IngestNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServiceServer).IngestNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/IngestNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServiceServer).IngestNow(ctx, req.(*IngestFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureGroupService_SyncNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServiceServer).SyncNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService/SyncNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServiceServer).SyncNow(ctx, req.(*SyncFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureGroupService_ServiceDesc is the grpc.ServiceDesc for FeatureGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.featuregroup.v1.FeatureGroupService",
	HandlerType: (*FeatureGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFeatureGroups",
			Handler:    _FeatureGroupService_ListFeatureGroups_Handler,
		},
		{
			MethodName: "CreateFeatureGroup",
			Handler:    _FeatureGroupService_CreateFeatureGroup_Handler,
		},
		{
			MethodName: "GetFeatureGroup",
			Handler:    _FeatureGroupService_GetFeatureGroup_Handler,
		},
		{
			MethodName: "UpdateFeatureGroup",
			Handler:    _FeatureGroupService_UpdateFeatureGroup_Handler,
		},
		{
			MethodName: "DeleteFeatureGroup",
			Handler:    _FeatureGroupService_DeleteFeatureGroup_Handler,
		},
		{
			MethodName: "PauseFeatureGroup",
			Handler:    _FeatureGroupService_PauseFeatureGroup_Handler,
		},
		{
			MethodName: "ResumeFeatureGroup",
			Handler:    _FeatureGroupService_ResumeFeatureGroup_Handler,
		},
		{
			MethodName: "IngestNow",
			Handler:    _FeatureGroupService_IngestNow_Handler,
		},
		{
			MethodName: "SyncNow",
			Handler:    _FeatureGroupService_SyncNow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/featuregroup/v1/featuregroup.proto",
}
