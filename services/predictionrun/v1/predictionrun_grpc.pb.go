// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: github.com/metaprov/modelaapi/services/predictionrun/v1/predictionrun.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PredictionRunServiceClient is the client API for PredictionRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PredictionRunServiceClient interface {
	ListPredictionRuns(ctx context.Context, in *ListPredictionRunsRequest, opts ...grpc.CallOption) (*ListPredictionRunsResponse, error)
	CreatePredictionRun(ctx context.Context, in *CreatePredictionRunRequest, opts ...grpc.CallOption) (*CreatePredictionRunResponse, error)
	GetPredictionRun(ctx context.Context, in *GetPredictionRunRequest, opts ...grpc.CallOption) (*GetPredictionRunResponse, error)
	UpdatePredictionRun(ctx context.Context, in *UpdatePredictionRunRequest, opts ...grpc.CallOption) (*UpdatePredictionRunResponse, error)
	DeletePredictionRun(ctx context.Context, in *DeletePredictionRunRequest, opts ...grpc.CallOption) (*DeletePredictionRunResponse, error)
	DownloadPredictionRun(ctx context.Context, in *DownloadPredictionRunRequest, opts ...grpc.CallOption) (*DownloadPredictionRunResponse, error)
	AbortPredictionRun(ctx context.Context, in *AbortPredictionRunRequest, opts ...grpc.CallOption) (*AbortPredictionRunResponse, error)
}

type predictionRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPredictionRunServiceClient(cc grpc.ClientConnInterface) PredictionRunServiceClient {
	return &predictionRunServiceClient{cc}
}

func (c *predictionRunServiceClient) ListPredictionRuns(ctx context.Context, in *ListPredictionRunsRequest, opts ...grpc.CallOption) (*ListPredictionRunsResponse, error) {
	out := new(ListPredictionRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/ListPredictionRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionRunServiceClient) CreatePredictionRun(ctx context.Context, in *CreatePredictionRunRequest, opts ...grpc.CallOption) (*CreatePredictionRunResponse, error) {
	out := new(CreatePredictionRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/CreatePredictionRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionRunServiceClient) GetPredictionRun(ctx context.Context, in *GetPredictionRunRequest, opts ...grpc.CallOption) (*GetPredictionRunResponse, error) {
	out := new(GetPredictionRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/GetPredictionRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionRunServiceClient) UpdatePredictionRun(ctx context.Context, in *UpdatePredictionRunRequest, opts ...grpc.CallOption) (*UpdatePredictionRunResponse, error) {
	out := new(UpdatePredictionRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/UpdatePredictionRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionRunServiceClient) DeletePredictionRun(ctx context.Context, in *DeletePredictionRunRequest, opts ...grpc.CallOption) (*DeletePredictionRunResponse, error) {
	out := new(DeletePredictionRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/DeletePredictionRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionRunServiceClient) DownloadPredictionRun(ctx context.Context, in *DownloadPredictionRunRequest, opts ...grpc.CallOption) (*DownloadPredictionRunResponse, error) {
	out := new(DownloadPredictionRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/DownloadPredictionRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionRunServiceClient) AbortPredictionRun(ctx context.Context, in *AbortPredictionRunRequest, opts ...grpc.CallOption) (*AbortPredictionRunResponse, error) {
	out := new(AbortPredictionRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/AbortPredictionRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PredictionRunServiceServer is the server API for PredictionRunService service.
// All implementations must embed UnimplementedPredictionRunServiceServer
// for forward compatibility
type PredictionRunServiceServer interface {
	ListPredictionRuns(context.Context, *ListPredictionRunsRequest) (*ListPredictionRunsResponse, error)
	CreatePredictionRun(context.Context, *CreatePredictionRunRequest) (*CreatePredictionRunResponse, error)
	GetPredictionRun(context.Context, *GetPredictionRunRequest) (*GetPredictionRunResponse, error)
	UpdatePredictionRun(context.Context, *UpdatePredictionRunRequest) (*UpdatePredictionRunResponse, error)
	DeletePredictionRun(context.Context, *DeletePredictionRunRequest) (*DeletePredictionRunResponse, error)
	DownloadPredictionRun(context.Context, *DownloadPredictionRunRequest) (*DownloadPredictionRunResponse, error)
	AbortPredictionRun(context.Context, *AbortPredictionRunRequest) (*AbortPredictionRunResponse, error)
	mustEmbedUnimplementedPredictionRunServiceServer()
}

// UnimplementedPredictionRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPredictionRunServiceServer struct {
}

func (UnimplementedPredictionRunServiceServer) ListPredictionRuns(context.Context, *ListPredictionRunsRequest) (*ListPredictionRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPredictionRuns not implemented")
}
func (UnimplementedPredictionRunServiceServer) CreatePredictionRun(context.Context, *CreatePredictionRunRequest) (*CreatePredictionRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePredictionRun not implemented")
}
func (UnimplementedPredictionRunServiceServer) GetPredictionRun(context.Context, *GetPredictionRunRequest) (*GetPredictionRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictionRun not implemented")
}
func (UnimplementedPredictionRunServiceServer) UpdatePredictionRun(context.Context, *UpdatePredictionRunRequest) (*UpdatePredictionRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePredictionRun not implemented")
}
func (UnimplementedPredictionRunServiceServer) DeletePredictionRun(context.Context, *DeletePredictionRunRequest) (*DeletePredictionRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePredictionRun not implemented")
}
func (UnimplementedPredictionRunServiceServer) DownloadPredictionRun(context.Context, *DownloadPredictionRunRequest) (*DownloadPredictionRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadPredictionRun not implemented")
}
func (UnimplementedPredictionRunServiceServer) AbortPredictionRun(context.Context, *AbortPredictionRunRequest) (*AbortPredictionRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortPredictionRun not implemented")
}
func (UnimplementedPredictionRunServiceServer) mustEmbedUnimplementedPredictionRunServiceServer() {}

// UnsafePredictionRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PredictionRunServiceServer will
// result in compilation errors.
type UnsafePredictionRunServiceServer interface {
	mustEmbedUnimplementedPredictionRunServiceServer()
}

func RegisterPredictionRunServiceServer(s grpc.ServiceRegistrar, srv PredictionRunServiceServer) {
	s.RegisterService(&PredictionRunService_ServiceDesc, srv)
}

func _PredictionRunService_ListPredictionRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPredictionRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionRunServiceServer).ListPredictionRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/ListPredictionRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionRunServiceServer).ListPredictionRuns(ctx, req.(*ListPredictionRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionRunService_CreatePredictionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePredictionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionRunServiceServer).CreatePredictionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/CreatePredictionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionRunServiceServer).CreatePredictionRun(ctx, req.(*CreatePredictionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionRunService_GetPredictionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionRunServiceServer).GetPredictionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/GetPredictionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionRunServiceServer).GetPredictionRun(ctx, req.(*GetPredictionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionRunService_UpdatePredictionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePredictionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionRunServiceServer).UpdatePredictionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/UpdatePredictionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionRunServiceServer).UpdatePredictionRun(ctx, req.(*UpdatePredictionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionRunService_DeletePredictionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePredictionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionRunServiceServer).DeletePredictionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/DeletePredictionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionRunServiceServer).DeletePredictionRun(ctx, req.(*DeletePredictionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionRunService_DownloadPredictionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadPredictionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionRunServiceServer).DownloadPredictionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/DownloadPredictionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionRunServiceServer).DownloadPredictionRun(ctx, req.(*DownloadPredictionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionRunService_AbortPredictionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortPredictionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionRunServiceServer).AbortPredictionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService/AbortPredictionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionRunServiceServer).AbortPredictionRun(ctx, req.(*AbortPredictionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PredictionRunService_ServiceDesc is the grpc.ServiceDesc for PredictionRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PredictionRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.prediction.v1.PredictionRunService",
	HandlerType: (*PredictionRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPredictionRuns",
			Handler:    _PredictionRunService_ListPredictionRuns_Handler,
		},
		{
			MethodName: "CreatePredictionRun",
			Handler:    _PredictionRunService_CreatePredictionRun_Handler,
		},
		{
			MethodName: "GetPredictionRun",
			Handler:    _PredictionRunService_GetPredictionRun_Handler,
		},
		{
			MethodName: "UpdatePredictionRun",
			Handler:    _PredictionRunService_UpdatePredictionRun_Handler,
		},
		{
			MethodName: "DeletePredictionRun",
			Handler:    _PredictionRunService_DeletePredictionRun_Handler,
		},
		{
			MethodName: "DownloadPredictionRun",
			Handler:    _PredictionRunService_DownloadPredictionRun_Handler,
		},
		{
			MethodName: "AbortPredictionRun",
			Handler:    _PredictionRunService_AbortPredictionRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/predictionrun/v1/predictionrun.proto",
}
