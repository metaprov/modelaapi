syntax = "proto3";
option go_package = "github.com/metaprov/modeldapi/services/feature/v1";
package github.com.metaprov.modeldapi.services.feature.v1;


import "google/api/annotations.proto";
import "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1/generated.proto";

message ListFeaturesRequest {
    string namespace = 1;
    map<string,string> labels =2;
}

message ListFeaturesResponse {
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.FeatureList items = 1;
}

message CreateFeatureRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.FeatureSpec spec = 4;
}

message CreateFeatureResponse {

}

message UpdateFeatureRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.FeatureSpec spec = 5;
}

message UpdateFeatureResponse {

}

message GetFeatureRequest {
    string namespace = 1;
    string name      = 2;
}


message GetFeatureResponse {
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Feature item = 1;
    string yaml = 2;
}


message DeleteFeatureRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteFeatureResponse {

}


service FeatureService {
    rpc ListFeatures(ListFeaturesRequest) returns (ListFeaturesResponse) {
        option (google.api.http).get = "/v1/features";
    }
    rpc CreateFeature(CreateFeatureRequest) returns (CreateFeatureResponse) {
        option (google.api.http) = {
			post: "/v1/features"
			body: "feature"
		};
    }
    rpc GetFeature(GetFeatureRequest) returns (GetFeatureResponse) {
        option (google.api.http).get = "/v1/features/{name}";
    }
    rpc UpdateFeature(UpdateFeatureRequest) returns (UpdateFeatureResponse) {
        option (google.api.http) = {
			put: "/v1/features/{feature.metadata.name}"
			body: "feature"
		};
    }

    rpc DeleteFeature(DeleteFeatureRequest) returns (DeleteFeatureResponse) {}



}