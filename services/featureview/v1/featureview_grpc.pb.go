// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/featureview/v1/featureview.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureViewServiceClient is the client API for FeatureViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureViewServiceClient interface {
	ListFeatureViews(ctx context.Context, in *ListFeatureViewRequest, opts ...grpc.CallOption) (*ListFeatureViewResponse, error)
	CreateFeatureView(ctx context.Context, in *CreateFeatureViewRequest, opts ...grpc.CallOption) (*CreateFeatureViewResponse, error)
	GetFeatureView(ctx context.Context, in *GetFeatureViewRequest, opts ...grpc.CallOption) (*GetFeatureViewResponse, error)
	UpdateFeatureView(ctx context.Context, in *UpdateFeatureViewRequest, opts ...grpc.CallOption) (*UpdateFeatureViewResponse, error)
	DeleteFeatureView(ctx context.Context, in *DeleteFeatureViewRequest, opts ...grpc.CallOption) (*DeleteFeatureViewResponse, error)
	PauseFeatureView(ctx context.Context, in *PauseFeatureViewRequest, opts ...grpc.CallOption) (*PauseFeatureViewResponse, error)
	ResumeFeatureView(ctx context.Context, in *ResumeFeatureViewRequest, opts ...grpc.CallOption) (*ResumeFeatureViewResponse, error)
}

type featureViewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureViewServiceClient(cc grpc.ClientConnInterface) FeatureViewServiceClient {
	return &featureViewServiceClient{cc}
}

func (c *featureViewServiceClient) ListFeatureViews(ctx context.Context, in *ListFeatureViewRequest, opts ...grpc.CallOption) (*ListFeatureViewResponse, error) {
	out := new(ListFeatureViewResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/ListFeatureViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureViewServiceClient) CreateFeatureView(ctx context.Context, in *CreateFeatureViewRequest, opts ...grpc.CallOption) (*CreateFeatureViewResponse, error) {
	out := new(CreateFeatureViewResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/CreateFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureViewServiceClient) GetFeatureView(ctx context.Context, in *GetFeatureViewRequest, opts ...grpc.CallOption) (*GetFeatureViewResponse, error) {
	out := new(GetFeatureViewResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/GetFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureViewServiceClient) UpdateFeatureView(ctx context.Context, in *UpdateFeatureViewRequest, opts ...grpc.CallOption) (*UpdateFeatureViewResponse, error) {
	out := new(UpdateFeatureViewResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/UpdateFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureViewServiceClient) DeleteFeatureView(ctx context.Context, in *DeleteFeatureViewRequest, opts ...grpc.CallOption) (*DeleteFeatureViewResponse, error) {
	out := new(DeleteFeatureViewResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/DeleteFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureViewServiceClient) PauseFeatureView(ctx context.Context, in *PauseFeatureViewRequest, opts ...grpc.CallOption) (*PauseFeatureViewResponse, error) {
	out := new(PauseFeatureViewResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/PauseFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureViewServiceClient) ResumeFeatureView(ctx context.Context, in *ResumeFeatureViewRequest, opts ...grpc.CallOption) (*ResumeFeatureViewResponse, error) {
	out := new(ResumeFeatureViewResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/ResumeFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureViewServiceServer is the server API for FeatureViewService service.
// All implementations must embed UnimplementedFeatureViewServiceServer
// for forward compatibility
type FeatureViewServiceServer interface {
	ListFeatureViews(context.Context, *ListFeatureViewRequest) (*ListFeatureViewResponse, error)
	CreateFeatureView(context.Context, *CreateFeatureViewRequest) (*CreateFeatureViewResponse, error)
	GetFeatureView(context.Context, *GetFeatureViewRequest) (*GetFeatureViewResponse, error)
	UpdateFeatureView(context.Context, *UpdateFeatureViewRequest) (*UpdateFeatureViewResponse, error)
	DeleteFeatureView(context.Context, *DeleteFeatureViewRequest) (*DeleteFeatureViewResponse, error)
	PauseFeatureView(context.Context, *PauseFeatureViewRequest) (*PauseFeatureViewResponse, error)
	ResumeFeatureView(context.Context, *ResumeFeatureViewRequest) (*ResumeFeatureViewResponse, error)
	mustEmbedUnimplementedFeatureViewServiceServer()
}

// UnimplementedFeatureViewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureViewServiceServer struct {
}

func (UnimplementedFeatureViewServiceServer) ListFeatureViews(context.Context, *ListFeatureViewRequest) (*ListFeatureViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureViews not implemented")
}
func (UnimplementedFeatureViewServiceServer) CreateFeatureView(context.Context, *CreateFeatureViewRequest) (*CreateFeatureViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatureView not implemented")
}
func (UnimplementedFeatureViewServiceServer) GetFeatureView(context.Context, *GetFeatureViewRequest) (*GetFeatureViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureView not implemented")
}
func (UnimplementedFeatureViewServiceServer) UpdateFeatureView(context.Context, *UpdateFeatureViewRequest) (*UpdateFeatureViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureView not implemented")
}
func (UnimplementedFeatureViewServiceServer) DeleteFeatureView(context.Context, *DeleteFeatureViewRequest) (*DeleteFeatureViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatureView not implemented")
}
func (UnimplementedFeatureViewServiceServer) PauseFeatureView(context.Context, *PauseFeatureViewRequest) (*PauseFeatureViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseFeatureView not implemented")
}
func (UnimplementedFeatureViewServiceServer) ResumeFeatureView(context.Context, *ResumeFeatureViewRequest) (*ResumeFeatureViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeFeatureView not implemented")
}
func (UnimplementedFeatureViewServiceServer) mustEmbedUnimplementedFeatureViewServiceServer() {}

// UnsafeFeatureViewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureViewServiceServer will
// result in compilation errors.
type UnsafeFeatureViewServiceServer interface {
	mustEmbedUnimplementedFeatureViewServiceServer()
}

func RegisterFeatureViewServiceServer(s grpc.ServiceRegistrar, srv FeatureViewServiceServer) {
	s.RegisterService(&FeatureViewService_ServiceDesc, srv)
}

func _FeatureViewService_ListFeatureViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).ListFeatureViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/ListFeatureViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).ListFeatureViews(ctx, req.(*ListFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureViewService_CreateFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).CreateFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/CreateFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).CreateFeatureView(ctx, req.(*CreateFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureViewService_GetFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).GetFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/GetFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).GetFeatureView(ctx, req.(*GetFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureViewService_UpdateFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).UpdateFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/UpdateFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).UpdateFeatureView(ctx, req.(*UpdateFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureViewService_DeleteFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).DeleteFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/DeleteFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).DeleteFeatureView(ctx, req.(*DeleteFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureViewService_PauseFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).PauseFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/PauseFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).PauseFeatureView(ctx, req.(*PauseFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureViewService_ResumeFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).ResumeFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService/ResumeFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).ResumeFeatureView(ctx, req.(*ResumeFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureViewService_ServiceDesc is the grpc.ServiceDesc for FeatureViewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureViewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.featureview.v1.FeatureViewService",
	HandlerType: (*FeatureViewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFeatureViews",
			Handler:    _FeatureViewService_ListFeatureViews_Handler,
		},
		{
			MethodName: "CreateFeatureView",
			Handler:    _FeatureViewService_CreateFeatureView_Handler,
		},
		{
			MethodName: "GetFeatureView",
			Handler:    _FeatureViewService_GetFeatureView_Handler,
		},
		{
			MethodName: "UpdateFeatureView",
			Handler:    _FeatureViewService_UpdateFeatureView_Handler,
		},
		{
			MethodName: "DeleteFeatureView",
			Handler:    _FeatureViewService_DeleteFeatureView_Handler,
		},
		{
			MethodName: "PauseFeatureView",
			Handler:    _FeatureViewService_PauseFeatureView_Handler,
		},
		{
			MethodName: "ResumeFeatureView",
			Handler:    _FeatureViewService_ResumeFeatureView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/featureview/v1/featureview.proto",
}
