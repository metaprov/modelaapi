syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/featureview/v1";
package github.com.metaprov.modelaapi.services.featureview.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";

message ListFeatureViewRequest {
    string namespace = 1;
    map<string,string> labels = 2;
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;
}

message ListFeatureViewResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeatureViewList featureviews = 1;
    string next_page_token = 2;
}

message CreateFeatureViewRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeatureView featureview = 1;
}

message CreateFeatureViewResponse {

}

message UpdateFeatureViewRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeatureView featureview = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateFeatureViewResponse {

}

message GetFeatureViewRequest {
    string namespace = 1;
    string name      = 2;
    
}


message GetFeatureViewResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeatureView featureview = 1;
    string yaml = 2;
}


message DeleteFeatureViewRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteFeatureViewResponse {

}

message PauseFeatureViewResponse {
}

message PauseFeatureViewRequest {
    string namespace = 1;
    string name      = 2;
}


message ResumeFeatureViewResponse {
}

message ResumeFeatureViewRequest {
    string namespace = 1;
    string name      = 2;
}



service FeatureViewService {
    rpc ListFeatureViews(ListFeatureViewRequest) returns (ListFeatureViewResponse) {
        option (google.api.http).get = "/v1/featureviews/{namespace}";
    }

    rpc CreateFeatureView(CreateFeatureViewRequest) returns (CreateFeatureViewResponse) {
        option (google.api.http) = {
			post: "/v1/featureviews"
			body: "*"
		};
    }

    rpc GetFeatureView(GetFeatureViewRequest) returns (GetFeatureViewResponse) {
        option (google.api.http).get = "/v1/featureviews/{namespace}/{name}";
    }

    rpc UpdateFeatureView(UpdateFeatureViewRequest) returns (UpdateFeatureViewResponse) {
        option (google.api.http) = {
			put: "/v1/featureviews/{featureview.metadata.namespace}/{featureview.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteFeatureView(DeleteFeatureViewRequest) returns (DeleteFeatureViewResponse) {
        option (google.api.http).delete = "/v1/featureviews/{namespace}/{name}";
    }
    
    rpc PauseFeatureView(PauseFeatureViewRequest) returns (PauseFeatureViewResponse) {
        option (google.api.http).post = "/v1/featureviews/{namespace}/{name}:pause";
    }

    rpc ResumeFeatureView(ResumeFeatureViewRequest) returns (ResumeFeatureViewResponse) {
        option (google.api.http).post = "/v1/featureviews/{namespace}/{name}:pause";
    }
    




}