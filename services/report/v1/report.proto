syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/report/v1";
package github.com.metaprov.modelaapi.services.report.v1;


import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1/generated.proto";



message ListReportsRequest {
    string namespace = 1;    
    map<string,string> labels = 2;
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;
}

message ListReportsResponse {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ReportList items = 1;
}

message CreateReportRequest {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Report item = 1;
}

message CreateReportResponse {}


message UpdateReportRequest {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Report item = 5;
}

message UpdateReportResponse {

}

message GetReportRequest {
    string namespace = 1;
    string name      = 2;
}

message GetReportResponse {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Report item = 1;
    string yaml = 2;

}

message DeleteReportRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteReportResponse {

}


message DownloadReportRequest {
    string namespace = 1;
    string name      = 2;
}

// Answer the report in base 64
message DownloadReportResponse {
    bytes raw = 1;

}

service ReportService {

    rpc ListReports(ListReportsRequest) returns (ListReportsResponse) {
        option (google.api.http).get = "/v1/reports/{namespace}";
    }

    rpc CreateReport(CreateReportRequest) returns (CreateReportResponse) {
        option (google.api.http) = {
			post: "/v1/reports"
			body: "*"
		};
    }

    rpc GetReport(GetReportRequest) returns (GetReportResponse) {
        option (google.api.http).get = "/v1/reports/{namespace}/{name}";
    }

    rpc UpdateReport(UpdateReportRequest) returns (UpdateReportResponse) {
        option (google.api.http) = {
			put: "/v1/reports/{item.metadata.namespace}/{item.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteReport(DeleteReportRequest) returns (DeleteReportResponse) {
        option (google.api.http).delete = "/v1/reports/{namespace}/{name}";
    }

    rpc Download(DownloadReportRequest) returns (DownloadReportResponse) {
        option (google.api.http).delete = "/v1/reports/{name}";
    }
}