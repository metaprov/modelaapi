syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/featureSource/v1";
package github.com.metaprov.modelaapi.services.featureSource.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";

message ListFeatureSourceRequest {
    string namespace = 1;
    map<string,string> labels =2;
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;
}

message ListFeatureSourceResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeatureSourceList featureSources = 1;
    string next_page_token = 2;
}

message CreateFeatureSourceRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeatureSource featureSource = 1;
}

message CreateFeatureSourceResponse {

}

message UpdateFeatureSourceRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeatureSource featureSource = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateFeatureSourceResponse {

}

message GetFeatureSourceRequest {
    string namespace = 1;
    string name      = 2;
    
}


message GetFeatureSourceResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeatureSource featureSource = 1;
    string yaml = 2;
}


message DeleteFeatureSourceRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteFeatureSourceResponse {

}


service FeatureSourceService {
    rpc ListFeatureSources(ListFeatureSourceRequest) returns (ListFeatureSourceResponse) {
        option (google.api.http).get = "/v1/featureSources/{namespace}";
    }
    rpc CreateFeatureSource(CreateFeatureSourceRequest) returns (CreateFeatureSourceResponse) {
        option (google.api.http) = {
			post: "/v1/featureSources"
			body: "*"
		};
    }
    rpc GetFeatureSource(GetFeatureSourceRequest) returns (GetFeatureSourceResponse) {
        option (google.api.http).get = "/v1/featureSources/{namespace}/{name}";
    }
    rpc UpdateFeatureSource(UpdateFeatureSourceRequest) returns (UpdateFeatureSourceResponse) {
        option (google.api.http) = {
			put: "/v1/featureSources/{featureSource.metadata.namespace}/{featureSource.metadata.name}"
			body: "*"
		};
    }
    rpc DeleteFeatureSource(DeleteFeatureSourceRequest) returns (DeleteFeatureSourceResponse) {
        option (google.api.http).delete = "/v1/featureSources/{namespace}/{name}";
    }
}