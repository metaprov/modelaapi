// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/featuresource/v1/featuresource.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureSourceServiceClient is the client API for FeatureSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureSourceServiceClient interface {
	ListFeatureSources(ctx context.Context, in *ListFeatureSourceRequest, opts ...grpc.CallOption) (*ListFeatureSourceResponse, error)
	CreateFeatureSource(ctx context.Context, in *CreateFeatureSourceRequest, opts ...grpc.CallOption) (*CreateFeatureSourceResponse, error)
	GetFeatureSource(ctx context.Context, in *GetFeatureSourceRequest, opts ...grpc.CallOption) (*GetFeatureSourceResponse, error)
	UpdateFeatureSource(ctx context.Context, in *UpdateFeatureSourceRequest, opts ...grpc.CallOption) (*UpdateFeatureSourceResponse, error)
	DeleteFeatureSource(ctx context.Context, in *DeleteFeatureSourceRequest, opts ...grpc.CallOption) (*DeleteFeatureSourceResponse, error)
}

type featureSourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureSourceServiceClient(cc grpc.ClientConnInterface) FeatureSourceServiceClient {
	return &featureSourceServiceClient{cc}
}

func (c *featureSourceServiceClient) ListFeatureSources(ctx context.Context, in *ListFeatureSourceRequest, opts ...grpc.CallOption) (*ListFeatureSourceResponse, error) {
	out := new(ListFeatureSourceResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureSource.v1.FeatureSourceService/ListFeatureSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureSourceServiceClient) CreateFeatureSource(ctx context.Context, in *CreateFeatureSourceRequest, opts ...grpc.CallOption) (*CreateFeatureSourceResponse, error) {
	out := new(CreateFeatureSourceResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureSource.v1.FeatureSourceService/CreateFeatureSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureSourceServiceClient) GetFeatureSource(ctx context.Context, in *GetFeatureSourceRequest, opts ...grpc.CallOption) (*GetFeatureSourceResponse, error) {
	out := new(GetFeatureSourceResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureSource.v1.FeatureSourceService/GetFeatureSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureSourceServiceClient) UpdateFeatureSource(ctx context.Context, in *UpdateFeatureSourceRequest, opts ...grpc.CallOption) (*UpdateFeatureSourceResponse, error) {
	out := new(UpdateFeatureSourceResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureSource.v1.FeatureSourceService/UpdateFeatureSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureSourceServiceClient) DeleteFeatureSource(ctx context.Context, in *DeleteFeatureSourceRequest, opts ...grpc.CallOption) (*DeleteFeatureSourceResponse, error) {
	out := new(DeleteFeatureSourceResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureSource.v1.FeatureSourceService/DeleteFeatureSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureSourceServiceServer is the server API for FeatureSourceService service.
// All implementations must embed UnimplementedFeatureSourceServiceServer
// for forward compatibility
type FeatureSourceServiceServer interface {
	ListFeatureSources(context.Context, *ListFeatureSourceRequest) (*ListFeatureSourceResponse, error)
	CreateFeatureSource(context.Context, *CreateFeatureSourceRequest) (*CreateFeatureSourceResponse, error)
	GetFeatureSource(context.Context, *GetFeatureSourceRequest) (*GetFeatureSourceResponse, error)
	UpdateFeatureSource(context.Context, *UpdateFeatureSourceRequest) (*UpdateFeatureSourceResponse, error)
	DeleteFeatureSource(context.Context, *DeleteFeatureSourceRequest) (*DeleteFeatureSourceResponse, error)
	mustEmbedUnimplementedFeatureSourceServiceServer()
}

// UnimplementedFeatureSourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureSourceServiceServer struct {
}

func (UnimplementedFeatureSourceServiceServer) ListFeatureSources(context.Context, *ListFeatureSourceRequest) (*ListFeatureSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureSources not implemented")
}
func (UnimplementedFeatureSourceServiceServer) CreateFeatureSource(context.Context, *CreateFeatureSourceRequest) (*CreateFeatureSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatureSource not implemented")
}
func (UnimplementedFeatureSourceServiceServer) GetFeatureSource(context.Context, *GetFeatureSourceRequest) (*GetFeatureSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureSource not implemented")
}
func (UnimplementedFeatureSourceServiceServer) UpdateFeatureSource(context.Context, *UpdateFeatureSourceRequest) (*UpdateFeatureSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureSource not implemented")
}
func (UnimplementedFeatureSourceServiceServer) DeleteFeatureSource(context.Context, *DeleteFeatureSourceRequest) (*DeleteFeatureSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatureSource not implemented")
}
func (UnimplementedFeatureSourceServiceServer) mustEmbedUnimplementedFeatureSourceServiceServer() {}

// UnsafeFeatureSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureSourceServiceServer will
// result in compilation errors.
type UnsafeFeatureSourceServiceServer interface {
	mustEmbedUnimplementedFeatureSourceServiceServer()
}

func RegisterFeatureSourceServiceServer(s grpc.ServiceRegistrar, srv FeatureSourceServiceServer) {
	s.RegisterService(&FeatureSourceService_ServiceDesc, srv)
}

func _FeatureSourceService_ListFeatureSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureSourceServiceServer).ListFeatureSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureSource.v1.FeatureSourceService/ListFeatureSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureSourceServiceServer).ListFeatureSources(ctx, req.(*ListFeatureSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureSourceService_CreateFeatureSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureSourceServiceServer).CreateFeatureSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureSource.v1.FeatureSourceService/CreateFeatureSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureSourceServiceServer).CreateFeatureSource(ctx, req.(*CreateFeatureSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureSourceService_GetFeatureSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureSourceServiceServer).GetFeatureSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureSource.v1.FeatureSourceService/GetFeatureSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureSourceServiceServer).GetFeatureSource(ctx, req.(*GetFeatureSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureSourceService_UpdateFeatureSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureSourceServiceServer).UpdateFeatureSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureSource.v1.FeatureSourceService/UpdateFeatureSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureSourceServiceServer).UpdateFeatureSource(ctx, req.(*UpdateFeatureSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureSourceService_DeleteFeatureSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureSourceServiceServer).DeleteFeatureSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureSource.v1.FeatureSourceService/DeleteFeatureSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureSourceServiceServer).DeleteFeatureSource(ctx, req.(*DeleteFeatureSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureSourceService_ServiceDesc is the grpc.ServiceDesc for FeatureSourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureSourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.featureSource.v1.FeatureSourceService",
	HandlerType: (*FeatureSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFeatureSources",
			Handler:    _FeatureSourceService_ListFeatureSources_Handler,
		},
		{
			MethodName: "CreateFeatureSource",
			Handler:    _FeatureSourceService_CreateFeatureSource_Handler,
		},
		{
			MethodName: "GetFeatureSource",
			Handler:    _FeatureSourceService_GetFeatureSource_Handler,
		},
		{
			MethodName: "UpdateFeatureSource",
			Handler:    _FeatureSourceService_UpdateFeatureSource_Handler,
		},
		{
			MethodName: "DeleteFeatureSource",
			Handler:    _FeatureSourceService_DeleteFeatureSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/featuresource/v1/featuresource.proto",
}
