// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/modelpipeline/v1/modelpipeline.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelPipelineServiceClient is the client API for ModelPipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelPipelineServiceClient interface {
	ListModelPipelines(ctx context.Context, in *ListModelPipelinesRequest, opts ...grpc.CallOption) (*ListModelPipelinesResponse, error)
	CreateModelPipeline(ctx context.Context, in *CreateModelPipelineRequest, opts ...grpc.CallOption) (*CreateModelPipelineResponse, error)
	GetModelPipeline(ctx context.Context, in *GetModelPipelineRequest, opts ...grpc.CallOption) (*GetModelPipelineResponse, error)
	UpdateModelPipeline(ctx context.Context, in *UpdateModelPipelineRequest, opts ...grpc.CallOption) (*UpdateModelPipelineResponse, error)
	DeleteModelPipeline(ctx context.Context, in *DeleteModelPipelineRequest, opts ...grpc.CallOption) (*DeleteModelPipelineResponse, error)
	RunModelPipeline(ctx context.Context, in *RunModelPipelineRequest, opts ...grpc.CallOption) (*RunModelPipelineResponse, error)
	PauseModelPipeline(ctx context.Context, in *PauseModelPipelineRequest, opts ...grpc.CallOption) (*PauseModelPipelineResponse, error)
	ResumeModelPipeline(ctx context.Context, in *ResumeModelPipelineRequest, opts ...grpc.CallOption) (*ResumeModelPipelineResponse, error)
}

type modelPipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelPipelineServiceClient(cc grpc.ClientConnInterface) ModelPipelineServiceClient {
	return &modelPipelineServiceClient{cc}
}

func (c *modelPipelineServiceClient) ListModelPipelines(ctx context.Context, in *ListModelPipelinesRequest, opts ...grpc.CallOption) (*ListModelPipelinesResponse, error) {
	out := new(ListModelPipelinesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/ListModelPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineServiceClient) CreateModelPipeline(ctx context.Context, in *CreateModelPipelineRequest, opts ...grpc.CallOption) (*CreateModelPipelineResponse, error) {
	out := new(CreateModelPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/CreateModelPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineServiceClient) GetModelPipeline(ctx context.Context, in *GetModelPipelineRequest, opts ...grpc.CallOption) (*GetModelPipelineResponse, error) {
	out := new(GetModelPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/GetModelPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineServiceClient) UpdateModelPipeline(ctx context.Context, in *UpdateModelPipelineRequest, opts ...grpc.CallOption) (*UpdateModelPipelineResponse, error) {
	out := new(UpdateModelPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/UpdateModelPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineServiceClient) DeleteModelPipeline(ctx context.Context, in *DeleteModelPipelineRequest, opts ...grpc.CallOption) (*DeleteModelPipelineResponse, error) {
	out := new(DeleteModelPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/DeleteModelPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineServiceClient) RunModelPipeline(ctx context.Context, in *RunModelPipelineRequest, opts ...grpc.CallOption) (*RunModelPipelineResponse, error) {
	out := new(RunModelPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/RunModelPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineServiceClient) PauseModelPipeline(ctx context.Context, in *PauseModelPipelineRequest, opts ...grpc.CallOption) (*PauseModelPipelineResponse, error) {
	out := new(PauseModelPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/PauseModelPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPipelineServiceClient) ResumeModelPipeline(ctx context.Context, in *ResumeModelPipelineRequest, opts ...grpc.CallOption) (*ResumeModelPipelineResponse, error) {
	out := new(ResumeModelPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/ResumeModelPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelPipelineServiceServer is the server API for ModelPipelineService service.
// All implementations must embed UnimplementedModelPipelineServiceServer
// for forward compatibility
type ModelPipelineServiceServer interface {
	ListModelPipelines(context.Context, *ListModelPipelinesRequest) (*ListModelPipelinesResponse, error)
	CreateModelPipeline(context.Context, *CreateModelPipelineRequest) (*CreateModelPipelineResponse, error)
	GetModelPipeline(context.Context, *GetModelPipelineRequest) (*GetModelPipelineResponse, error)
	UpdateModelPipeline(context.Context, *UpdateModelPipelineRequest) (*UpdateModelPipelineResponse, error)
	DeleteModelPipeline(context.Context, *DeleteModelPipelineRequest) (*DeleteModelPipelineResponse, error)
	RunModelPipeline(context.Context, *RunModelPipelineRequest) (*RunModelPipelineResponse, error)
	PauseModelPipeline(context.Context, *PauseModelPipelineRequest) (*PauseModelPipelineResponse, error)
	ResumeModelPipeline(context.Context, *ResumeModelPipelineRequest) (*ResumeModelPipelineResponse, error)
	mustEmbedUnimplementedModelPipelineServiceServer()
}

// UnimplementedModelPipelineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelPipelineServiceServer struct {
}

func (UnimplementedModelPipelineServiceServer) ListModelPipelines(context.Context, *ListModelPipelinesRequest) (*ListModelPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelPipelines not implemented")
}
func (UnimplementedModelPipelineServiceServer) CreateModelPipeline(context.Context, *CreateModelPipelineRequest) (*CreateModelPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelPipeline not implemented")
}
func (UnimplementedModelPipelineServiceServer) GetModelPipeline(context.Context, *GetModelPipelineRequest) (*GetModelPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelPipeline not implemented")
}
func (UnimplementedModelPipelineServiceServer) UpdateModelPipeline(context.Context, *UpdateModelPipelineRequest) (*UpdateModelPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelPipeline not implemented")
}
func (UnimplementedModelPipelineServiceServer) DeleteModelPipeline(context.Context, *DeleteModelPipelineRequest) (*DeleteModelPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelPipeline not implemented")
}
func (UnimplementedModelPipelineServiceServer) RunModelPipeline(context.Context, *RunModelPipelineRequest) (*RunModelPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunModelPipeline not implemented")
}
func (UnimplementedModelPipelineServiceServer) PauseModelPipeline(context.Context, *PauseModelPipelineRequest) (*PauseModelPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseModelPipeline not implemented")
}
func (UnimplementedModelPipelineServiceServer) ResumeModelPipeline(context.Context, *ResumeModelPipelineRequest) (*ResumeModelPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeModelPipeline not implemented")
}
func (UnimplementedModelPipelineServiceServer) mustEmbedUnimplementedModelPipelineServiceServer() {}

// UnsafeModelPipelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelPipelineServiceServer will
// result in compilation errors.
type UnsafeModelPipelineServiceServer interface {
	mustEmbedUnimplementedModelPipelineServiceServer()
}

func RegisterModelPipelineServiceServer(s grpc.ServiceRegistrar, srv ModelPipelineServiceServer) {
	s.RegisterService(&ModelPipelineService_ServiceDesc, srv)
}

func _ModelPipelineService_ListModelPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineServiceServer).ListModelPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/ListModelPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineServiceServer).ListModelPipelines(ctx, req.(*ListModelPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineService_CreateModelPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineServiceServer).CreateModelPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/CreateModelPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineServiceServer).CreateModelPipeline(ctx, req.(*CreateModelPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineService_GetModelPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineServiceServer).GetModelPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/GetModelPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineServiceServer).GetModelPipeline(ctx, req.(*GetModelPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineService_UpdateModelPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineServiceServer).UpdateModelPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/UpdateModelPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineServiceServer).UpdateModelPipeline(ctx, req.(*UpdateModelPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineService_DeleteModelPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineServiceServer).DeleteModelPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/DeleteModelPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineServiceServer).DeleteModelPipeline(ctx, req.(*DeleteModelPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineService_RunModelPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunModelPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineServiceServer).RunModelPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/RunModelPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineServiceServer).RunModelPipeline(ctx, req.(*RunModelPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineService_PauseModelPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseModelPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineServiceServer).PauseModelPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/PauseModelPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineServiceServer).PauseModelPipeline(ctx, req.(*PauseModelPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPipelineService_ResumeModelPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeModelPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPipelineServiceServer).ResumeModelPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService/ResumeModelPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPipelineServiceServer).ResumeModelPipeline(ctx, req.(*ResumeModelPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelPipelineService_ServiceDesc is the grpc.ServiceDesc for ModelPipelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelPipelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.modelpipeline.v1.ModelPipelineService",
	HandlerType: (*ModelPipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListModelPipelines",
			Handler:    _ModelPipelineService_ListModelPipelines_Handler,
		},
		{
			MethodName: "CreateModelPipeline",
			Handler:    _ModelPipelineService_CreateModelPipeline_Handler,
		},
		{
			MethodName: "GetModelPipeline",
			Handler:    _ModelPipelineService_GetModelPipeline_Handler,
		},
		{
			MethodName: "UpdateModelPipeline",
			Handler:    _ModelPipelineService_UpdateModelPipeline_Handler,
		},
		{
			MethodName: "DeleteModelPipeline",
			Handler:    _ModelPipelineService_DeleteModelPipeline_Handler,
		},
		{
			MethodName: "RunModelPipeline",
			Handler:    _ModelPipelineService_RunModelPipeline_Handler,
		},
		{
			MethodName: "PauseModelPipeline",
			Handler:    _ModelPipelineService_PauseModelPipeline_Handler,
		},
		{
			MethodName: "ResumeModelPipeline",
			Handler:    _ModelPipelineService_ResumeModelPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/modelpipeline/v1/modelpipeline.proto",
}
