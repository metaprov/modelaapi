syntax = "proto3";
option go_package = "github.com/metaprov/modeldapi/services/modelpipeline/v1";
package github.com.metaprov.modeld.services.modelpipeline.v1;

import "google/api/annotations.proto";
import "github.com/metaprov/modeldapi/pkg/apis/training/v1alpha1/generated.proto";

message ListModelPipelinesRequest {
    string namespace = 1;
    map<string,string> labels =3;
}

message ListModelPipelinesResponse {
    github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.ModelPipelineList items = 1;
}

message ModelPipelineResponse {}

message CreateModelPipelineRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.ModelPipelineSpec spec = 4;
}

message CreateModelPipelineResponse {

}

message UpdateModelPipelineRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.ModelPipelineSpec spec = 5;
}

message UpdateModelPipelineResponse {

}

message GetModelPipelineRequest {
    string namespace = 1;
    string name      = 2;
}


message GetModelPipelineResponse {
    github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.ModelPipeline item = 1;
    string yaml = 2;
}


message DeleteModelPipelineRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteModelPipelineResponse {

}




service ModelPipelineService {
    rpc ListModelPipelines(ListModelPipelinesRequest) returns (ListModelPipelinesResponse) {
        option (google.api.http).get = "/api/v1alpha1/modelpipelines";
    }
    rpc CreateModelPipeline(CreateModelPipelineRequest) returns (CreateModelPipelineResponse) {
        option (google.api.http) = {
			post: "/api/v1alpha1/modelpipelines"
			body: "modelpipeline"
		};
    }
    rpc GetModelPipeline(GetModelPipelineRequest) returns (GetModelPipelineResponse) {
        option (google.api.http).get = "/api/v1alpha1/modelpipelines/{name}";
    }
    rpc UpdateModelPipeline(UpdateModelPipelineRequest) returns (UpdateModelPipelineResponse) {
        option (google.api.http) = {
			put: "/api/v1alpha1/modelpipelines/{modelpipeline.metadata.name}"
			body: "modelpipeline"
		};
    }

    rpc DeleteModelPipeline(DeleteModelPipelineRequest) returns (DeleteModelPipelineResponse) {}

}