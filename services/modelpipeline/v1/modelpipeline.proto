syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/modelpipeline/v1";
package github.com.metaprov.modelaapi.services.modelpipeline.v1;

import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1/generated.proto";

message ListModelPipelinesRequest {
    string namespace = 1;
    map<string,string> labels =3;
}

message ListModelPipelinesResponse {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelPipelineList items = 1;
}

message ModelPipelineResponse {}

message CreateModelPipelineRequest {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelPipeline item = 1;
}

message CreateModelPipelineResponse {

}

message UpdateModelPipelineRequest {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelPipeline item = 1;
}

message UpdateModelPipelineResponse {

}

message GetModelPipelineRequest {
    string namespace = 1;
    string name      = 2;
}


message GetModelPipelineResponse {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelPipeline item = 1;
    string yaml = 2;
}


message DeleteModelPipelineRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteModelPipelineResponse {

}



message RunModelPipelineRequest {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelPipeline item = 1;
}

message RunModelPipelineResponse {
    
}



message PauseModelPipelineResponse {
}

message PauseModelPipelineRequest {
    string namespace = 1;
    string name      = 2;
}


message ResumeModelPipelineResponse {
}

message ResumeModelPipelineRequest {
    string namespace = 1;
    string name      = 2;
}




service ModelPipelineService {
    rpc ListModelPipelines(ListModelPipelinesRequest) returns (ListModelPipelinesResponse) {
        option (google.api.http).get = "/api/v1alpha1/modelpipelines";
    }
    rpc CreateModelPipeline(CreateModelPipelineRequest) returns (CreateModelPipelineResponse) {
        option (google.api.http) = {
			post: "/api/v1alpha1/modelpipelines"
			body: "*"
		};
    }
    rpc GetModelPipeline(GetModelPipelineRequest) returns (GetModelPipelineResponse) {
        option (google.api.http).get = "/api/v1alpha1/modelpipelines/{name}";
    }
    rpc UpdateModelPipeline(UpdateModelPipelineRequest) returns (UpdateModelPipelineResponse) {
        option (google.api.http) = {
			put: "/api/v1alpha1/modelpipelines/{modelpipeline.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteModelPipeline(DeleteModelPipelineRequest) returns (DeleteModelPipelineResponse) {
        option (google.api.http).delete = "/api/v1/modelpipelines/{modelpipeline.metadata.name}";
    }

 

    rpc RunModelPipeline(RunModelPipelineRequest) returns (RunModelPipelineResponse) {
        option (google.api.http).post = "/api/v1/modelpipelines/{namespace}/{name}:run";
    }

        
    rpc PauseModelPipeline(PauseModelPipelineRequest) returns (PauseModelPipelineResponse) {
        option (google.api.http).post = "/v1/modelpipelines/{name}:pause";
    }

    rpc ResumeModelPipeline(ResumeModelPipelineRequest) returns (ResumeModelPipelineResponse) {
        option (google.api.http).post = "/v1/modelpipelines/{name}:resume";
    }

}