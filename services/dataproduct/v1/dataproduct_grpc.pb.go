// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: github.com/metaprov/modelaapi/services/dataproduct/v1/dataproduct.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataProductServiceClient is the client API for DataProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataProductServiceClient interface {
	ListDataProducts(ctx context.Context, in *ListDataProductsRequest, opts ...grpc.CallOption) (*ListDataProductsResponse, error)
	CreateDataProduct(ctx context.Context, in *CreateDataProductRequest, opts ...grpc.CallOption) (*CreateDataProductResponse, error)
	GetDataProduct(ctx context.Context, in *GetDataProductRequest, opts ...grpc.CallOption) (*GetDataProductResponse, error)
	UpdateDataProduct(ctx context.Context, in *UpdateDataProductRequest, opts ...grpc.CallOption) (*UpdateDataProductResponse, error)
	DeleteDataProduct(ctx context.Context, in *DeleteDataProductRequest, opts ...grpc.CallOption) (*DeleteDataProductResponse, error)
}

type dataProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProductServiceClient(cc grpc.ClientConnInterface) DataProductServiceClient {
	return &dataProductServiceClient{cc}
}

func (c *dataProductServiceClient) ListDataProducts(ctx context.Context, in *ListDataProductsRequest, opts ...grpc.CallOption) (*ListDataProductsResponse, error) {
	out := new(ListDataProductsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataproduct.v1.DataProductService/ListDataProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProductServiceClient) CreateDataProduct(ctx context.Context, in *CreateDataProductRequest, opts ...grpc.CallOption) (*CreateDataProductResponse, error) {
	out := new(CreateDataProductResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataproduct.v1.DataProductService/CreateDataProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProductServiceClient) GetDataProduct(ctx context.Context, in *GetDataProductRequest, opts ...grpc.CallOption) (*GetDataProductResponse, error) {
	out := new(GetDataProductResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataproduct.v1.DataProductService/GetDataProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProductServiceClient) UpdateDataProduct(ctx context.Context, in *UpdateDataProductRequest, opts ...grpc.CallOption) (*UpdateDataProductResponse, error) {
	out := new(UpdateDataProductResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataproduct.v1.DataProductService/UpdateDataProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProductServiceClient) DeleteDataProduct(ctx context.Context, in *DeleteDataProductRequest, opts ...grpc.CallOption) (*DeleteDataProductResponse, error) {
	out := new(DeleteDataProductResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataproduct.v1.DataProductService/DeleteDataProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProductServiceServer is the server API for DataProductService service.
// All implementations must embed UnimplementedDataProductServiceServer
// for forward compatibility
type DataProductServiceServer interface {
	ListDataProducts(context.Context, *ListDataProductsRequest) (*ListDataProductsResponse, error)
	CreateDataProduct(context.Context, *CreateDataProductRequest) (*CreateDataProductResponse, error)
	GetDataProduct(context.Context, *GetDataProductRequest) (*GetDataProductResponse, error)
	UpdateDataProduct(context.Context, *UpdateDataProductRequest) (*UpdateDataProductResponse, error)
	DeleteDataProduct(context.Context, *DeleteDataProductRequest) (*DeleteDataProductResponse, error)
	mustEmbedUnimplementedDataProductServiceServer()
}

// UnimplementedDataProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataProductServiceServer struct {
}

func (UnimplementedDataProductServiceServer) ListDataProducts(context.Context, *ListDataProductsRequest) (*ListDataProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataProducts not implemented")
}
func (UnimplementedDataProductServiceServer) CreateDataProduct(context.Context, *CreateDataProductRequest) (*CreateDataProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataProduct not implemented")
}
func (UnimplementedDataProductServiceServer) GetDataProduct(context.Context, *GetDataProductRequest) (*GetDataProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataProduct not implemented")
}
func (UnimplementedDataProductServiceServer) UpdateDataProduct(context.Context, *UpdateDataProductRequest) (*UpdateDataProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataProduct not implemented")
}
func (UnimplementedDataProductServiceServer) DeleteDataProduct(context.Context, *DeleteDataProductRequest) (*DeleteDataProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataProduct not implemented")
}
func (UnimplementedDataProductServiceServer) mustEmbedUnimplementedDataProductServiceServer() {}

// UnsafeDataProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProductServiceServer will
// result in compilation errors.
type UnsafeDataProductServiceServer interface {
	mustEmbedUnimplementedDataProductServiceServer()
}

func RegisterDataProductServiceServer(s grpc.ServiceRegistrar, srv DataProductServiceServer) {
	s.RegisterService(&DataProductService_ServiceDesc, srv)
}

func _DataProductService_ListDataProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProductServiceServer).ListDataProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataproduct.v1.DataProductService/ListDataProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProductServiceServer).ListDataProducts(ctx, req.(*ListDataProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProductService_CreateDataProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProductServiceServer).CreateDataProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataproduct.v1.DataProductService/CreateDataProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProductServiceServer).CreateDataProduct(ctx, req.(*CreateDataProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProductService_GetDataProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProductServiceServer).GetDataProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataproduct.v1.DataProductService/GetDataProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProductServiceServer).GetDataProduct(ctx, req.(*GetDataProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProductService_UpdateDataProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProductServiceServer).UpdateDataProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataproduct.v1.DataProductService/UpdateDataProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProductServiceServer).UpdateDataProduct(ctx, req.(*UpdateDataProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProductService_DeleteDataProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProductServiceServer).DeleteDataProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataproduct.v1.DataProductService/DeleteDataProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProductServiceServer).DeleteDataProduct(ctx, req.(*DeleteDataProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataProductService_ServiceDesc is the grpc.ServiceDesc for DataProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.dataproduct.v1.DataProductService",
	HandlerType: (*DataProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataProducts",
			Handler:    _DataProductService_ListDataProducts_Handler,
		},
		{
			MethodName: "CreateDataProduct",
			Handler:    _DataProductService_CreateDataProduct_Handler,
		},
		{
			MethodName: "GetDataProduct",
			Handler:    _DataProductService_GetDataProduct_Handler,
		},
		{
			MethodName: "UpdateDataProduct",
			Handler:    _DataProductService_UpdateDataProduct_Handler,
		},
		{
			MethodName: "DeleteDataProduct",
			Handler:    _DataProductService_DeleteDataProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/dataproduct/v1/dataproduct.proto",
}
