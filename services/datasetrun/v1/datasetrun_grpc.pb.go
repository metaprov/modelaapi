// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: github.com/metaprov/modelaapi/services/datasetrun/v1/datasetrun.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatasetRunServiceClient is the client API for DatasetRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetRunServiceClient interface {
	// Datasets
	ListDatasetRuns(ctx context.Context, in *ListDatasetRunsRequest, opts ...grpc.CallOption) (*ListDatasetRunsResponse, error)
	GetDatasetRun(ctx context.Context, in *GetDatasetRunRequest, opts ...grpc.CallOption) (*GetDatasetRunResponse, error)
	CreateDataset(ctx context.Context, in *CreateDatasetRunRequest, opts ...grpc.CallOption) (*CreateDatasetRunResponse, error)
	UpdateDataset(ctx context.Context, in *UpdateDatasetRunRequest, opts ...grpc.CallOption) (*UpdateDatasetRunResponse, error)
	DeleteDataset(ctx context.Context, in *DeleteDatasetRunRequest, opts ...grpc.CallOption) (*DeleteDatasetRunResponse, error)
	CompareDatasets(ctx context.Context, in *CompareDatasetRunsRequest, opts ...grpc.CallOption) (*CompareDatasetRunsResponse, error)
	GetDatasetRunProfile(ctx context.Context, in *GetDatasetRunProfileRequest, opts ...grpc.CallOption) (*GetDatasetRunProfileResponse, error)
	DownloadDatasetRun(ctx context.Context, in *DownloadDatasetRunRequest, opts ...grpc.CallOption) (*DownloadDatasetRunResponse, error)
	GetAnomalies(ctx context.Context, in *GetDatasetRunAnomaliesRequest, opts ...grpc.CallOption) (*GetDatasetRunAnomaliesResponse, error)
}

type datasetRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetRunServiceClient(cc grpc.ClientConnInterface) DatasetRunServiceClient {
	return &datasetRunServiceClient{cc}
}

func (c *datasetRunServiceClient) ListDatasetRuns(ctx context.Context, in *ListDatasetRunsRequest, opts ...grpc.CallOption) (*ListDatasetRunsResponse, error) {
	out := new(ListDatasetRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/ListDatasetRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetRunServiceClient) GetDatasetRun(ctx context.Context, in *GetDatasetRunRequest, opts ...grpc.CallOption) (*GetDatasetRunResponse, error) {
	out := new(GetDatasetRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/GetDatasetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetRunServiceClient) CreateDataset(ctx context.Context, in *CreateDatasetRunRequest, opts ...grpc.CallOption) (*CreateDatasetRunResponse, error) {
	out := new(CreateDatasetRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/CreateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetRunServiceClient) UpdateDataset(ctx context.Context, in *UpdateDatasetRunRequest, opts ...grpc.CallOption) (*UpdateDatasetRunResponse, error) {
	out := new(UpdateDatasetRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/UpdateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetRunServiceClient) DeleteDataset(ctx context.Context, in *DeleteDatasetRunRequest, opts ...grpc.CallOption) (*DeleteDatasetRunResponse, error) {
	out := new(DeleteDatasetRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/DeleteDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetRunServiceClient) CompareDatasets(ctx context.Context, in *CompareDatasetRunsRequest, opts ...grpc.CallOption) (*CompareDatasetRunsResponse, error) {
	out := new(CompareDatasetRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/CompareDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetRunServiceClient) GetDatasetRunProfile(ctx context.Context, in *GetDatasetRunProfileRequest, opts ...grpc.CallOption) (*GetDatasetRunProfileResponse, error) {
	out := new(GetDatasetRunProfileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/GetDatasetRunProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetRunServiceClient) DownloadDatasetRun(ctx context.Context, in *DownloadDatasetRunRequest, opts ...grpc.CallOption) (*DownloadDatasetRunResponse, error) {
	out := new(DownloadDatasetRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/DownloadDatasetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetRunServiceClient) GetAnomalies(ctx context.Context, in *GetDatasetRunAnomaliesRequest, opts ...grpc.CallOption) (*GetDatasetRunAnomaliesResponse, error) {
	out := new(GetDatasetRunAnomaliesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/GetAnomalies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetRunServiceServer is the server API for DatasetRunService service.
// All implementations must embed UnimplementedDatasetRunServiceServer
// for forward compatibility
type DatasetRunServiceServer interface {
	// Datasets
	ListDatasetRuns(context.Context, *ListDatasetRunsRequest) (*ListDatasetRunsResponse, error)
	GetDatasetRun(context.Context, *GetDatasetRunRequest) (*GetDatasetRunResponse, error)
	CreateDataset(context.Context, *CreateDatasetRunRequest) (*CreateDatasetRunResponse, error)
	UpdateDataset(context.Context, *UpdateDatasetRunRequest) (*UpdateDatasetRunResponse, error)
	DeleteDataset(context.Context, *DeleteDatasetRunRequest) (*DeleteDatasetRunResponse, error)
	CompareDatasets(context.Context, *CompareDatasetRunsRequest) (*CompareDatasetRunsResponse, error)
	GetDatasetRunProfile(context.Context, *GetDatasetRunProfileRequest) (*GetDatasetRunProfileResponse, error)
	DownloadDatasetRun(context.Context, *DownloadDatasetRunRequest) (*DownloadDatasetRunResponse, error)
	GetAnomalies(context.Context, *GetDatasetRunAnomaliesRequest) (*GetDatasetRunAnomaliesResponse, error)
	mustEmbedUnimplementedDatasetRunServiceServer()
}

// UnimplementedDatasetRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasetRunServiceServer struct {
}

func (UnimplementedDatasetRunServiceServer) ListDatasetRuns(context.Context, *ListDatasetRunsRequest) (*ListDatasetRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasetRuns not implemented")
}
func (UnimplementedDatasetRunServiceServer) GetDatasetRun(context.Context, *GetDatasetRunRequest) (*GetDatasetRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetRun not implemented")
}
func (UnimplementedDatasetRunServiceServer) CreateDataset(context.Context, *CreateDatasetRunRequest) (*CreateDatasetRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedDatasetRunServiceServer) UpdateDataset(context.Context, *UpdateDatasetRunRequest) (*UpdateDatasetRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataset not implemented")
}
func (UnimplementedDatasetRunServiceServer) DeleteDataset(context.Context, *DeleteDatasetRunRequest) (*DeleteDatasetRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedDatasetRunServiceServer) CompareDatasets(context.Context, *CompareDatasetRunsRequest) (*CompareDatasetRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareDatasets not implemented")
}
func (UnimplementedDatasetRunServiceServer) GetDatasetRunProfile(context.Context, *GetDatasetRunProfileRequest) (*GetDatasetRunProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetRunProfile not implemented")
}
func (UnimplementedDatasetRunServiceServer) DownloadDatasetRun(context.Context, *DownloadDatasetRunRequest) (*DownloadDatasetRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDatasetRun not implemented")
}
func (UnimplementedDatasetRunServiceServer) GetAnomalies(context.Context, *GetDatasetRunAnomaliesRequest) (*GetDatasetRunAnomaliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnomalies not implemented")
}
func (UnimplementedDatasetRunServiceServer) mustEmbedUnimplementedDatasetRunServiceServer() {}

// UnsafeDatasetRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetRunServiceServer will
// result in compilation errors.
type UnsafeDatasetRunServiceServer interface {
	mustEmbedUnimplementedDatasetRunServiceServer()
}

func RegisterDatasetRunServiceServer(s grpc.ServiceRegistrar, srv DatasetRunServiceServer) {
	s.RegisterService(&DatasetRunService_ServiceDesc, srv)
}

func _DatasetRunService_ListDatasetRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetRunServiceServer).ListDatasetRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/ListDatasetRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetRunServiceServer).ListDatasetRuns(ctx, req.(*ListDatasetRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetRunService_GetDatasetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetRunServiceServer).GetDatasetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/GetDatasetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetRunServiceServer).GetDatasetRun(ctx, req.(*GetDatasetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetRunService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetRunServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/CreateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetRunServiceServer).CreateDataset(ctx, req.(*CreateDatasetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetRunService_UpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetRunServiceServer).UpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/UpdateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetRunServiceServer).UpdateDataset(ctx, req.(*UpdateDatasetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetRunService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetRunServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/DeleteDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetRunServiceServer).DeleteDataset(ctx, req.(*DeleteDatasetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetRunService_CompareDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareDatasetRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetRunServiceServer).CompareDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/CompareDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetRunServiceServer).CompareDatasets(ctx, req.(*CompareDatasetRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetRunService_GetDatasetRunProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRunProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetRunServiceServer).GetDatasetRunProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/GetDatasetRunProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetRunServiceServer).GetDatasetRunProfile(ctx, req.(*GetDatasetRunProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetRunService_DownloadDatasetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDatasetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetRunServiceServer).DownloadDatasetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/DownloadDatasetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetRunServiceServer).DownloadDatasetRun(ctx, req.(*DownloadDatasetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetRunService_GetAnomalies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRunAnomaliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetRunServiceServer).GetAnomalies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService/GetAnomalies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetRunServiceServer).GetAnomalies(ctx, req.(*GetDatasetRunAnomaliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetRunService_ServiceDesc is the grpc.ServiceDesc for DatasetRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.dataset.v1.DatasetRunService",
	HandlerType: (*DatasetRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDatasetRuns",
			Handler:    _DatasetRunService_ListDatasetRuns_Handler,
		},
		{
			MethodName: "GetDatasetRun",
			Handler:    _DatasetRunService_GetDatasetRun_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _DatasetRunService_CreateDataset_Handler,
		},
		{
			MethodName: "UpdateDataset",
			Handler:    _DatasetRunService_UpdateDataset_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _DatasetRunService_DeleteDataset_Handler,
		},
		{
			MethodName: "CompareDatasets",
			Handler:    _DatasetRunService_CompareDatasets_Handler,
		},
		{
			MethodName: "GetDatasetRunProfile",
			Handler:    _DatasetRunService_GetDatasetRunProfile_Handler,
		},
		{
			MethodName: "DownloadDatasetRun",
			Handler:    _DatasetRunService_DownloadDatasetRun_Handler,
		},
		{
			MethodName: "GetAnomalies",
			Handler:    _DatasetRunService_GetAnomalies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/datasetrun/v1/datasetrun.proto",
}
