syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/commit/v1";

package github.com.metaprov.modelaapi.services.commit.v1;
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/services/common/v1/common.proto";
import "google/protobuf/field_mask.proto";

message ListCommitsRequest {
    string             namespace  = 1;
    map<string,string> labels     = 2;   
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;  
}

message ListCommitsResponse {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.CommitList items = 1;   
}

message CommitResponse {}

message CreateCommitRequest {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Commit  item = 1;
    string password = 2;    
}

message CreateCommitResponse {

}

message UpdateCommitRequest {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Commit item = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateCommitResponse {

}

message GetCommitRequest {
    string namespace = 1;
    string name      = 2;
    
}


message GetCommitResponse {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Commit item = 1;
    string yaml = 2;
}



message GetCommitNamespacesRequest {
    string namespace = 1;
    string name      = 2;
}


message GetCommitNamespacesResponse {
    repeated github.com.metaprov.modelaapi.services.common.v1.NamespaceInfo namespaces= 1;
}




message DeleteCommitRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteCommitResponse {}


message CommitCreateResponse {}



service CommitService {
    rpc ListCommits(ListCommitsRequest) returns (ListCommitsResponse) {
        option (google.api.http).get = "/v1/commits/{namespace}";
    }
    rpc CreateCommit(CreateCommitRequest) returns (CreateCommitResponse) {
        option (google.api.http) = {
			post: "/v1/commits"
			body: "*"
		};
    }
    rpc GetCommit(GetCommitRequest) returns (GetCommitResponse) {
        option (google.api.http).get = "/v1/commits/{namespace}/{name}";
    }
    rpc UpdateCommit(UpdateCommitRequest) returns (UpdateCommitResponse) {
        option (google.api.http) = {
			put: "/v1/commits/{item.metadata.namespace}/{item.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteCommit(DeleteCommitRequest) returns (DeleteCommitResponse) {
        option (google.api.http).delete = "/v1/commits/{namespace}/{name}";
    }

}