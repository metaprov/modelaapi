// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: github.com/metaprov/modelaapi/services/apikeygroup/v1/apikeygroup.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIKeyGroupServiceClient is the client API for APIKeyGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIKeyGroupServiceClient interface {
	ListAPIKeyGroups(ctx context.Context, in *ListAPIKeyGroupsRequest, opts ...grpc.CallOption) (*ListAPIKeyGroupsResponse, error)
	CreateAPIKeyGroup(ctx context.Context, in *CreateAPIKeyGroupRequest, opts ...grpc.CallOption) (*CreateAPIKeyGroupResponse, error)
	GetAPIKeyGroup(ctx context.Context, in *GetAPIKeyGroupRequest, opts ...grpc.CallOption) (*GetAPIKeyGroupResponse, error)
	UpdateAPIKeyGroup(ctx context.Context, in *UpdateAPIKeyGroupRequest, opts ...grpc.CallOption) (*UpdateAPIKeyGroupResponse, error)
	DeleteAPIKeyGroup(ctx context.Context, in *DeleteAPIKeyGroupRequest, opts ...grpc.CallOption) (*DeleteAPIKeyGroupResponse, error)
	GenerateAPIKey(ctx context.Context, in *CreateAPIKeyGroupRequest, opts ...grpc.CallOption) (*CreateAPIKeyGroupResponse, error)
	RefreshAPIKeyGroup(ctx context.Context, in *RefreshAPIKeyGroupRequest, opts ...grpc.CallOption) (*RefreshAPIKeyGroupResponse, error)
}

type aPIKeyGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIKeyGroupServiceClient(cc grpc.ClientConnInterface) APIKeyGroupServiceClient {
	return &aPIKeyGroupServiceClient{cc}
}

func (c *aPIKeyGroupServiceClient) ListAPIKeyGroups(ctx context.Context, in *ListAPIKeyGroupsRequest, opts ...grpc.CallOption) (*ListAPIKeyGroupsResponse, error) {
	out := new(ListAPIKeyGroupsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/ListAPIKeyGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyGroupServiceClient) CreateAPIKeyGroup(ctx context.Context, in *CreateAPIKeyGroupRequest, opts ...grpc.CallOption) (*CreateAPIKeyGroupResponse, error) {
	out := new(CreateAPIKeyGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/CreateAPIKeyGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyGroupServiceClient) GetAPIKeyGroup(ctx context.Context, in *GetAPIKeyGroupRequest, opts ...grpc.CallOption) (*GetAPIKeyGroupResponse, error) {
	out := new(GetAPIKeyGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/GetAPIKeyGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyGroupServiceClient) UpdateAPIKeyGroup(ctx context.Context, in *UpdateAPIKeyGroupRequest, opts ...grpc.CallOption) (*UpdateAPIKeyGroupResponse, error) {
	out := new(UpdateAPIKeyGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/UpdateAPIKeyGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyGroupServiceClient) DeleteAPIKeyGroup(ctx context.Context, in *DeleteAPIKeyGroupRequest, opts ...grpc.CallOption) (*DeleteAPIKeyGroupResponse, error) {
	out := new(DeleteAPIKeyGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/DeleteAPIKeyGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyGroupServiceClient) GenerateAPIKey(ctx context.Context, in *CreateAPIKeyGroupRequest, opts ...grpc.CallOption) (*CreateAPIKeyGroupResponse, error) {
	out := new(CreateAPIKeyGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/GenerateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyGroupServiceClient) RefreshAPIKeyGroup(ctx context.Context, in *RefreshAPIKeyGroupRequest, opts ...grpc.CallOption) (*RefreshAPIKeyGroupResponse, error) {
	out := new(RefreshAPIKeyGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/RefreshAPIKeyGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIKeyGroupServiceServer is the server API for APIKeyGroupService service.
// All implementations must embed UnimplementedAPIKeyGroupServiceServer
// for forward compatibility
type APIKeyGroupServiceServer interface {
	ListAPIKeyGroups(context.Context, *ListAPIKeyGroupsRequest) (*ListAPIKeyGroupsResponse, error)
	CreateAPIKeyGroup(context.Context, *CreateAPIKeyGroupRequest) (*CreateAPIKeyGroupResponse, error)
	GetAPIKeyGroup(context.Context, *GetAPIKeyGroupRequest) (*GetAPIKeyGroupResponse, error)
	UpdateAPIKeyGroup(context.Context, *UpdateAPIKeyGroupRequest) (*UpdateAPIKeyGroupResponse, error)
	DeleteAPIKeyGroup(context.Context, *DeleteAPIKeyGroupRequest) (*DeleteAPIKeyGroupResponse, error)
	GenerateAPIKey(context.Context, *CreateAPIKeyGroupRequest) (*CreateAPIKeyGroupResponse, error)
	RefreshAPIKeyGroup(context.Context, *RefreshAPIKeyGroupRequest) (*RefreshAPIKeyGroupResponse, error)
	mustEmbedUnimplementedAPIKeyGroupServiceServer()
}

// UnimplementedAPIKeyGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIKeyGroupServiceServer struct {
}

func (UnimplementedAPIKeyGroupServiceServer) ListAPIKeyGroups(context.Context, *ListAPIKeyGroupsRequest) (*ListAPIKeyGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeyGroups not implemented")
}
func (UnimplementedAPIKeyGroupServiceServer) CreateAPIKeyGroup(context.Context, *CreateAPIKeyGroupRequest) (*CreateAPIKeyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKeyGroup not implemented")
}
func (UnimplementedAPIKeyGroupServiceServer) GetAPIKeyGroup(context.Context, *GetAPIKeyGroupRequest) (*GetAPIKeyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKeyGroup not implemented")
}
func (UnimplementedAPIKeyGroupServiceServer) UpdateAPIKeyGroup(context.Context, *UpdateAPIKeyGroupRequest) (*UpdateAPIKeyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKeyGroup not implemented")
}
func (UnimplementedAPIKeyGroupServiceServer) DeleteAPIKeyGroup(context.Context, *DeleteAPIKeyGroupRequest) (*DeleteAPIKeyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKeyGroup not implemented")
}
func (UnimplementedAPIKeyGroupServiceServer) GenerateAPIKey(context.Context, *CreateAPIKeyGroupRequest) (*CreateAPIKeyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAPIKey not implemented")
}
func (UnimplementedAPIKeyGroupServiceServer) RefreshAPIKeyGroup(context.Context, *RefreshAPIKeyGroupRequest) (*RefreshAPIKeyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAPIKeyGroup not implemented")
}
func (UnimplementedAPIKeyGroupServiceServer) mustEmbedUnimplementedAPIKeyGroupServiceServer() {}

// UnsafeAPIKeyGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIKeyGroupServiceServer will
// result in compilation errors.
type UnsafeAPIKeyGroupServiceServer interface {
	mustEmbedUnimplementedAPIKeyGroupServiceServer()
}

func RegisterAPIKeyGroupServiceServer(s grpc.ServiceRegistrar, srv APIKeyGroupServiceServer) {
	s.RegisterService(&APIKeyGroupService_ServiceDesc, srv)
}

func _APIKeyGroupService_ListAPIKeyGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeyGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyGroupServiceServer).ListAPIKeyGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/ListAPIKeyGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyGroupServiceServer).ListAPIKeyGroups(ctx, req.(*ListAPIKeyGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyGroupService_CreateAPIKeyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyGroupServiceServer).CreateAPIKeyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/CreateAPIKeyGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyGroupServiceServer).CreateAPIKeyGroup(ctx, req.(*CreateAPIKeyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyGroupService_GetAPIKeyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIKeyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyGroupServiceServer).GetAPIKeyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/GetAPIKeyGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyGroupServiceServer).GetAPIKeyGroup(ctx, req.(*GetAPIKeyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyGroupService_UpdateAPIKeyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIKeyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyGroupServiceServer).UpdateAPIKeyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/UpdateAPIKeyGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyGroupServiceServer).UpdateAPIKeyGroup(ctx, req.(*UpdateAPIKeyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyGroupService_DeleteAPIKeyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPIKeyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyGroupServiceServer).DeleteAPIKeyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/DeleteAPIKeyGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyGroupServiceServer).DeleteAPIKeyGroup(ctx, req.(*DeleteAPIKeyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyGroupService_GenerateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyGroupServiceServer).GenerateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/GenerateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyGroupServiceServer).GenerateAPIKey(ctx, req.(*CreateAPIKeyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyGroupService_RefreshAPIKeyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAPIKeyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyGroupServiceServer).RefreshAPIKeyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService/RefreshAPIKeyGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyGroupServiceServer).RefreshAPIKeyGroup(ctx, req.(*RefreshAPIKeyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIKeyGroupService_ServiceDesc is the grpc.ServiceDesc for APIKeyGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIKeyGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.apikeygroup.v1.APIKeyGroupService",
	HandlerType: (*APIKeyGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAPIKeyGroups",
			Handler:    _APIKeyGroupService_ListAPIKeyGroups_Handler,
		},
		{
			MethodName: "CreateAPIKeyGroup",
			Handler:    _APIKeyGroupService_CreateAPIKeyGroup_Handler,
		},
		{
			MethodName: "GetAPIKeyGroup",
			Handler:    _APIKeyGroupService_GetAPIKeyGroup_Handler,
		},
		{
			MethodName: "UpdateAPIKeyGroup",
			Handler:    _APIKeyGroupService_UpdateAPIKeyGroup_Handler,
		},
		{
			MethodName: "DeleteAPIKeyGroup",
			Handler:    _APIKeyGroupService_DeleteAPIKeyGroup_Handler,
		},
		{
			MethodName: "GenerateAPIKey",
			Handler:    _APIKeyGroupService_GenerateAPIKey_Handler,
		},
		{
			MethodName: "RefreshAPIKeyGroup",
			Handler:    _APIKeyGroupService_RefreshAPIKeyGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/apikeygroup/v1/apikeygroup.proto",
}
