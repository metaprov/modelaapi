// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: github.com/metaprov/modelaapi/services/datasetsnapshot/v1/datasetsnapshot.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatasetSnapshotServiceClient is the client API for DatasetSnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetSnapshotServiceClient interface {
	// Datasets
	ListDatasetSnapshots(ctx context.Context, in *ListDatasetSnapshotsRequest, opts ...grpc.CallOption) (*ListDatasetSnapshotsResponse, error)
	GetDatasetSnapshot(ctx context.Context, in *GetDatasetSnapshotRequest, opts ...grpc.CallOption) (*GetDatasetSnapshotResponse, error)
	UpdateDataset(ctx context.Context, in *UpdateDatasetSnapshotRequest, opts ...grpc.CallOption) (*UpdateDatasetSnapshotResponse, error)
	DeleteDataset(ctx context.Context, in *DeleteDatasetSnapshotRequest, opts ...grpc.CallOption) (*DeleteDatasetSnapshotResponse, error)
	CompareDatasetSnapshots(ctx context.Context, in *CompareDatasetSnapshotsRequest, opts ...grpc.CallOption) (*CompareDatasetSnapshotsResponse, error)
	GetDatasetSnapshotProfile(ctx context.Context, in *GetDatasetSnapshotProfileRequest, opts ...grpc.CallOption) (*GetDatasetSnapshotProfileResponse, error)
	DownloadDatasetSnapshot(ctx context.Context, in *DownloadDatasetSnapshotRequest, opts ...grpc.CallOption) (*DownloadDatasetSnapshotResponse, error)
	GetAnomalies(ctx context.Context, in *GetDatasetSnapshotAnomaliesRequest, opts ...grpc.CallOption) (*GetDatasetSnapshotAnomaliesResponse, error)
}

type datasetSnapshotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetSnapshotServiceClient(cc grpc.ClientConnInterface) DatasetSnapshotServiceClient {
	return &datasetSnapshotServiceClient{cc}
}

func (c *datasetSnapshotServiceClient) ListDatasetSnapshots(ctx context.Context, in *ListDatasetSnapshotsRequest, opts ...grpc.CallOption) (*ListDatasetSnapshotsResponse, error) {
	out := new(ListDatasetSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/ListDatasetSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetSnapshotServiceClient) GetDatasetSnapshot(ctx context.Context, in *GetDatasetSnapshotRequest, opts ...grpc.CallOption) (*GetDatasetSnapshotResponse, error) {
	out := new(GetDatasetSnapshotResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/GetDatasetSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetSnapshotServiceClient) UpdateDataset(ctx context.Context, in *UpdateDatasetSnapshotRequest, opts ...grpc.CallOption) (*UpdateDatasetSnapshotResponse, error) {
	out := new(UpdateDatasetSnapshotResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/UpdateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetSnapshotServiceClient) DeleteDataset(ctx context.Context, in *DeleteDatasetSnapshotRequest, opts ...grpc.CallOption) (*DeleteDatasetSnapshotResponse, error) {
	out := new(DeleteDatasetSnapshotResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/DeleteDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetSnapshotServiceClient) CompareDatasetSnapshots(ctx context.Context, in *CompareDatasetSnapshotsRequest, opts ...grpc.CallOption) (*CompareDatasetSnapshotsResponse, error) {
	out := new(CompareDatasetSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/CompareDatasetSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetSnapshotServiceClient) GetDatasetSnapshotProfile(ctx context.Context, in *GetDatasetSnapshotProfileRequest, opts ...grpc.CallOption) (*GetDatasetSnapshotProfileResponse, error) {
	out := new(GetDatasetSnapshotProfileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/GetDatasetSnapshotProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetSnapshotServiceClient) DownloadDatasetSnapshot(ctx context.Context, in *DownloadDatasetSnapshotRequest, opts ...grpc.CallOption) (*DownloadDatasetSnapshotResponse, error) {
	out := new(DownloadDatasetSnapshotResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/DownloadDatasetSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetSnapshotServiceClient) GetAnomalies(ctx context.Context, in *GetDatasetSnapshotAnomaliesRequest, opts ...grpc.CallOption) (*GetDatasetSnapshotAnomaliesResponse, error) {
	out := new(GetDatasetSnapshotAnomaliesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/GetAnomalies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetSnapshotServiceServer is the server API for DatasetSnapshotService service.
// All implementations must embed UnimplementedDatasetSnapshotServiceServer
// for forward compatibility
type DatasetSnapshotServiceServer interface {
	// Datasets
	ListDatasetSnapshots(context.Context, *ListDatasetSnapshotsRequest) (*ListDatasetSnapshotsResponse, error)
	GetDatasetSnapshot(context.Context, *GetDatasetSnapshotRequest) (*GetDatasetSnapshotResponse, error)
	UpdateDataset(context.Context, *UpdateDatasetSnapshotRequest) (*UpdateDatasetSnapshotResponse, error)
	DeleteDataset(context.Context, *DeleteDatasetSnapshotRequest) (*DeleteDatasetSnapshotResponse, error)
	CompareDatasetSnapshots(context.Context, *CompareDatasetSnapshotsRequest) (*CompareDatasetSnapshotsResponse, error)
	GetDatasetSnapshotProfile(context.Context, *GetDatasetSnapshotProfileRequest) (*GetDatasetSnapshotProfileResponse, error)
	DownloadDatasetSnapshot(context.Context, *DownloadDatasetSnapshotRequest) (*DownloadDatasetSnapshotResponse, error)
	GetAnomalies(context.Context, *GetDatasetSnapshotAnomaliesRequest) (*GetDatasetSnapshotAnomaliesResponse, error)
	mustEmbedUnimplementedDatasetSnapshotServiceServer()
}

// UnimplementedDatasetSnapshotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasetSnapshotServiceServer struct {
}

func (UnimplementedDatasetSnapshotServiceServer) ListDatasetSnapshots(context.Context, *ListDatasetSnapshotsRequest) (*ListDatasetSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasetSnapshots not implemented")
}
func (UnimplementedDatasetSnapshotServiceServer) GetDatasetSnapshot(context.Context, *GetDatasetSnapshotRequest) (*GetDatasetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetSnapshot not implemented")
}
func (UnimplementedDatasetSnapshotServiceServer) UpdateDataset(context.Context, *UpdateDatasetSnapshotRequest) (*UpdateDatasetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataset not implemented")
}
func (UnimplementedDatasetSnapshotServiceServer) DeleteDataset(context.Context, *DeleteDatasetSnapshotRequest) (*DeleteDatasetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedDatasetSnapshotServiceServer) CompareDatasetSnapshots(context.Context, *CompareDatasetSnapshotsRequest) (*CompareDatasetSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareDatasetSnapshots not implemented")
}
func (UnimplementedDatasetSnapshotServiceServer) GetDatasetSnapshotProfile(context.Context, *GetDatasetSnapshotProfileRequest) (*GetDatasetSnapshotProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetSnapshotProfile not implemented")
}
func (UnimplementedDatasetSnapshotServiceServer) DownloadDatasetSnapshot(context.Context, *DownloadDatasetSnapshotRequest) (*DownloadDatasetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDatasetSnapshot not implemented")
}
func (UnimplementedDatasetSnapshotServiceServer) GetAnomalies(context.Context, *GetDatasetSnapshotAnomaliesRequest) (*GetDatasetSnapshotAnomaliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnomalies not implemented")
}
func (UnimplementedDatasetSnapshotServiceServer) mustEmbedUnimplementedDatasetSnapshotServiceServer() {
}

// UnsafeDatasetSnapshotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetSnapshotServiceServer will
// result in compilation errors.
type UnsafeDatasetSnapshotServiceServer interface {
	mustEmbedUnimplementedDatasetSnapshotServiceServer()
}

func RegisterDatasetSnapshotServiceServer(s grpc.ServiceRegistrar, srv DatasetSnapshotServiceServer) {
	s.RegisterService(&DatasetSnapshotService_ServiceDesc, srv)
}

func _DatasetSnapshotService_ListDatasetSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetSnapshotServiceServer).ListDatasetSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/ListDatasetSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetSnapshotServiceServer).ListDatasetSnapshots(ctx, req.(*ListDatasetSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetSnapshotService_GetDatasetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetSnapshotServiceServer).GetDatasetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/GetDatasetSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetSnapshotServiceServer).GetDatasetSnapshot(ctx, req.(*GetDatasetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetSnapshotService_UpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetSnapshotServiceServer).UpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/UpdateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetSnapshotServiceServer).UpdateDataset(ctx, req.(*UpdateDatasetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetSnapshotService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetSnapshotServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/DeleteDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetSnapshotServiceServer).DeleteDataset(ctx, req.(*DeleteDatasetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetSnapshotService_CompareDatasetSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareDatasetSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetSnapshotServiceServer).CompareDatasetSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/CompareDatasetSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetSnapshotServiceServer).CompareDatasetSnapshots(ctx, req.(*CompareDatasetSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetSnapshotService_GetDatasetSnapshotProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetSnapshotProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetSnapshotServiceServer).GetDatasetSnapshotProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/GetDatasetSnapshotProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetSnapshotServiceServer).GetDatasetSnapshotProfile(ctx, req.(*GetDatasetSnapshotProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetSnapshotService_DownloadDatasetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDatasetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetSnapshotServiceServer).DownloadDatasetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/DownloadDatasetSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetSnapshotServiceServer).DownloadDatasetSnapshot(ctx, req.(*DownloadDatasetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetSnapshotService_GetAnomalies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetSnapshotAnomaliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetSnapshotServiceServer).GetAnomalies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService/GetAnomalies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetSnapshotServiceServer).GetAnomalies(ctx, req.(*GetDatasetSnapshotAnomaliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetSnapshotService_ServiceDesc is the grpc.ServiceDesc for DatasetSnapshotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetSnapshotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.dataset.v1.DatasetSnapshotService",
	HandlerType: (*DatasetSnapshotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDatasetSnapshots",
			Handler:    _DatasetSnapshotService_ListDatasetSnapshots_Handler,
		},
		{
			MethodName: "GetDatasetSnapshot",
			Handler:    _DatasetSnapshotService_GetDatasetSnapshot_Handler,
		},
		{
			MethodName: "UpdateDataset",
			Handler:    _DatasetSnapshotService_UpdateDataset_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _DatasetSnapshotService_DeleteDataset_Handler,
		},
		{
			MethodName: "CompareDatasetSnapshots",
			Handler:    _DatasetSnapshotService_CompareDatasetSnapshots_Handler,
		},
		{
			MethodName: "GetDatasetSnapshotProfile",
			Handler:    _DatasetSnapshotService_GetDatasetSnapshotProfile_Handler,
		},
		{
			MethodName: "DownloadDatasetSnapshot",
			Handler:    _DatasetSnapshotService_DownloadDatasetSnapshot_Handler,
		},
		{
			MethodName: "GetAnomalies",
			Handler:    _DatasetSnapshotService_GetAnomalies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/datasetsnapshot/v1/datasetsnapshot.proto",
}
