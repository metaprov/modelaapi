// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/modelasystem/v1/modelasystem.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelaSystemServiceClient is the client API for ModelaSystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelaSystemServiceClient interface {
	ListModelaSystems(ctx context.Context, in *ListModelaSystemsRequest, opts ...grpc.CallOption) (*ListModelaSystemsResponse, error)
	CreateModelaSystem(ctx context.Context, in *CreateModelaSystemRequest, opts ...grpc.CallOption) (*CreateModelaSystemResponse, error)
	GetModelaSystem(ctx context.Context, in *GetModelaSystemRequest, opts ...grpc.CallOption) (*GetModelaSystemResponse, error)
	UpdateModelaSystem(ctx context.Context, in *UpdateModelaSystemRequest, opts ...grpc.CallOption) (*UpdateModelaSystemResponse, error)
	DeleteModelaSystem(ctx context.Context, in *DeleteModelaSystemRequest, opts ...grpc.CallOption) (*DeleteModelaSystemResponse, error)
	DownloadLogfile(ctx context.Context, in *DownloadLogFileRequest, opts ...grpc.CallOption) (*DownloadLogFileResponse, error)
	BackupDatabase(ctx context.Context, in *BackupDatabaseRequest, opts ...grpc.CallOption) (*BackupDatabaseResponse, error)
	BackupEtcd(ctx context.Context, in *BackupEtcdRequest, opts ...grpc.CallOption) (*BackupEtcdResponse, error)
}

type modelaSystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelaSystemServiceClient(cc grpc.ClientConnInterface) ModelaSystemServiceClient {
	return &modelaSystemServiceClient{cc}
}

func (c *modelaSystemServiceClient) ListModelaSystems(ctx context.Context, in *ListModelaSystemsRequest, opts ...grpc.CallOption) (*ListModelaSystemsResponse, error) {
	out := new(ListModelaSystemsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/ListModelaSystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelaSystemServiceClient) CreateModelaSystem(ctx context.Context, in *CreateModelaSystemRequest, opts ...grpc.CallOption) (*CreateModelaSystemResponse, error) {
	out := new(CreateModelaSystemResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/CreateModelaSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelaSystemServiceClient) GetModelaSystem(ctx context.Context, in *GetModelaSystemRequest, opts ...grpc.CallOption) (*GetModelaSystemResponse, error) {
	out := new(GetModelaSystemResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/GetModelaSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelaSystemServiceClient) UpdateModelaSystem(ctx context.Context, in *UpdateModelaSystemRequest, opts ...grpc.CallOption) (*UpdateModelaSystemResponse, error) {
	out := new(UpdateModelaSystemResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/UpdateModelaSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelaSystemServiceClient) DeleteModelaSystem(ctx context.Context, in *DeleteModelaSystemRequest, opts ...grpc.CallOption) (*DeleteModelaSystemResponse, error) {
	out := new(DeleteModelaSystemResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/DeleteModelaSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelaSystemServiceClient) DownloadLogfile(ctx context.Context, in *DownloadLogFileRequest, opts ...grpc.CallOption) (*DownloadLogFileResponse, error) {
	out := new(DownloadLogFileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/DownloadLogfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelaSystemServiceClient) BackupDatabase(ctx context.Context, in *BackupDatabaseRequest, opts ...grpc.CallOption) (*BackupDatabaseResponse, error) {
	out := new(BackupDatabaseResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/BackupDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelaSystemServiceClient) BackupEtcd(ctx context.Context, in *BackupEtcdRequest, opts ...grpc.CallOption) (*BackupEtcdResponse, error) {
	out := new(BackupEtcdResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/BackupEtcd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelaSystemServiceServer is the server API for ModelaSystemService service.
// All implementations must embed UnimplementedModelaSystemServiceServer
// for forward compatibility
type ModelaSystemServiceServer interface {
	ListModelaSystems(context.Context, *ListModelaSystemsRequest) (*ListModelaSystemsResponse, error)
	CreateModelaSystem(context.Context, *CreateModelaSystemRequest) (*CreateModelaSystemResponse, error)
	GetModelaSystem(context.Context, *GetModelaSystemRequest) (*GetModelaSystemResponse, error)
	UpdateModelaSystem(context.Context, *UpdateModelaSystemRequest) (*UpdateModelaSystemResponse, error)
	DeleteModelaSystem(context.Context, *DeleteModelaSystemRequest) (*DeleteModelaSystemResponse, error)
	DownloadLogfile(context.Context, *DownloadLogFileRequest) (*DownloadLogFileResponse, error)
	BackupDatabase(context.Context, *BackupDatabaseRequest) (*BackupDatabaseResponse, error)
	BackupEtcd(context.Context, *BackupEtcdRequest) (*BackupEtcdResponse, error)
	mustEmbedUnimplementedModelaSystemServiceServer()
}

// UnimplementedModelaSystemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelaSystemServiceServer struct {
}

func (UnimplementedModelaSystemServiceServer) ListModelaSystems(context.Context, *ListModelaSystemsRequest) (*ListModelaSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelaSystems not implemented")
}
func (UnimplementedModelaSystemServiceServer) CreateModelaSystem(context.Context, *CreateModelaSystemRequest) (*CreateModelaSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelaSystem not implemented")
}
func (UnimplementedModelaSystemServiceServer) GetModelaSystem(context.Context, *GetModelaSystemRequest) (*GetModelaSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelaSystem not implemented")
}
func (UnimplementedModelaSystemServiceServer) UpdateModelaSystem(context.Context, *UpdateModelaSystemRequest) (*UpdateModelaSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelaSystem not implemented")
}
func (UnimplementedModelaSystemServiceServer) DeleteModelaSystem(context.Context, *DeleteModelaSystemRequest) (*DeleteModelaSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelaSystem not implemented")
}
func (UnimplementedModelaSystemServiceServer) DownloadLogfile(context.Context, *DownloadLogFileRequest) (*DownloadLogFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadLogfile not implemented")
}
func (UnimplementedModelaSystemServiceServer) BackupDatabase(context.Context, *BackupDatabaseRequest) (*BackupDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupDatabase not implemented")
}
func (UnimplementedModelaSystemServiceServer) BackupEtcd(context.Context, *BackupEtcdRequest) (*BackupEtcdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupEtcd not implemented")
}
func (UnimplementedModelaSystemServiceServer) mustEmbedUnimplementedModelaSystemServiceServer() {}

// UnsafeModelaSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelaSystemServiceServer will
// result in compilation errors.
type UnsafeModelaSystemServiceServer interface {
	mustEmbedUnimplementedModelaSystemServiceServer()
}

func RegisterModelaSystemServiceServer(s grpc.ServiceRegistrar, srv ModelaSystemServiceServer) {
	s.RegisterService(&ModelaSystemService_ServiceDesc, srv)
}

func _ModelaSystemService_ListModelaSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelaSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelaSystemServiceServer).ListModelaSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/ListModelaSystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelaSystemServiceServer).ListModelaSystems(ctx, req.(*ListModelaSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelaSystemService_CreateModelaSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelaSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelaSystemServiceServer).CreateModelaSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/CreateModelaSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelaSystemServiceServer).CreateModelaSystem(ctx, req.(*CreateModelaSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelaSystemService_GetModelaSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelaSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelaSystemServiceServer).GetModelaSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/GetModelaSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelaSystemServiceServer).GetModelaSystem(ctx, req.(*GetModelaSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelaSystemService_UpdateModelaSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelaSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelaSystemServiceServer).UpdateModelaSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/UpdateModelaSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelaSystemServiceServer).UpdateModelaSystem(ctx, req.(*UpdateModelaSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelaSystemService_DeleteModelaSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelaSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelaSystemServiceServer).DeleteModelaSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/DeleteModelaSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelaSystemServiceServer).DeleteModelaSystem(ctx, req.(*DeleteModelaSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelaSystemService_DownloadLogfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadLogFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelaSystemServiceServer).DownloadLogfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/DownloadLogfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelaSystemServiceServer).DownloadLogfile(ctx, req.(*DownloadLogFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelaSystemService_BackupDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelaSystemServiceServer).BackupDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/BackupDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelaSystemServiceServer).BackupDatabase(ctx, req.(*BackupDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelaSystemService_BackupEtcd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupEtcdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelaSystemServiceServer).BackupEtcd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService/BackupEtcd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelaSystemServiceServer).BackupEtcd(ctx, req.(*BackupEtcdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelaSystemService_ServiceDesc is the grpc.ServiceDesc for ModelaSystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelaSystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.modelasystem.v1.ModelaSystemService",
	HandlerType: (*ModelaSystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListModelaSystems",
			Handler:    _ModelaSystemService_ListModelaSystems_Handler,
		},
		{
			MethodName: "CreateModelaSystem",
			Handler:    _ModelaSystemService_CreateModelaSystem_Handler,
		},
		{
			MethodName: "GetModelaSystem",
			Handler:    _ModelaSystemService_GetModelaSystem_Handler,
		},
		{
			MethodName: "UpdateModelaSystem",
			Handler:    _ModelaSystemService_UpdateModelaSystem_Handler,
		},
		{
			MethodName: "DeleteModelaSystem",
			Handler:    _ModelaSystemService_DeleteModelaSystem_Handler,
		},
		{
			MethodName: "DownloadLogfile",
			Handler:    _ModelaSystemService_DownloadLogfile_Handler,
		},
		{
			MethodName: "BackupDatabase",
			Handler:    _ModelaSystemService_BackupDatabase_Handler,
		},
		{
			MethodName: "BackupEtcd",
			Handler:    _ModelaSystemService_BackupEtcd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/modelasystem/v1/modelasystem.proto",
}
