// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/featurepipeline/v1/featurepipeline.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeaturePipelineServiceClient is the client API for FeaturePipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeaturePipelineServiceClient interface {
	ListFeaturePipelines(ctx context.Context, in *ListFeaturePipelineRequest, opts ...grpc.CallOption) (*ListFeaturePipelineResponse, error)
	CreateFeaturePipeline(ctx context.Context, in *CreateFeaturePipelineRequest, opts ...grpc.CallOption) (*CreateFeaturePipelineResponse, error)
	GetFeaturePipeline(ctx context.Context, in *GetFeaturePipelineRequest, opts ...grpc.CallOption) (*GetFeaturePipelineResponse, error)
	UpdateFeaturePipeline(ctx context.Context, in *UpdateFeaturePipelineRequest, opts ...grpc.CallOption) (*UpdateFeaturePipelineResponse, error)
	DeleteFeaturePipeline(ctx context.Context, in *DeleteFeaturePipelineRequest, opts ...grpc.CallOption) (*DeleteFeaturePipelineResponse, error)
	PauseFeaturePipeline(ctx context.Context, in *PauseFeaturePipelineRequest, opts ...grpc.CallOption) (*PauseFeaturePipelineResponse, error)
	ResumeFeaturePipeline(ctx context.Context, in *ResumeFeaturePipelineRequest, opts ...grpc.CallOption) (*ResumeFeaturePipelineResponse, error)
}

type featurePipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeaturePipelineServiceClient(cc grpc.ClientConnInterface) FeaturePipelineServiceClient {
	return &featurePipelineServiceClient{cc}
}

func (c *featurePipelineServiceClient) ListFeaturePipelines(ctx context.Context, in *ListFeaturePipelineRequest, opts ...grpc.CallOption) (*ListFeaturePipelineResponse, error) {
	out := new(ListFeaturePipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/ListFeaturePipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineServiceClient) CreateFeaturePipeline(ctx context.Context, in *CreateFeaturePipelineRequest, opts ...grpc.CallOption) (*CreateFeaturePipelineResponse, error) {
	out := new(CreateFeaturePipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/CreateFeaturePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineServiceClient) GetFeaturePipeline(ctx context.Context, in *GetFeaturePipelineRequest, opts ...grpc.CallOption) (*GetFeaturePipelineResponse, error) {
	out := new(GetFeaturePipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/GetFeaturePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineServiceClient) UpdateFeaturePipeline(ctx context.Context, in *UpdateFeaturePipelineRequest, opts ...grpc.CallOption) (*UpdateFeaturePipelineResponse, error) {
	out := new(UpdateFeaturePipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/UpdateFeaturePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineServiceClient) DeleteFeaturePipeline(ctx context.Context, in *DeleteFeaturePipelineRequest, opts ...grpc.CallOption) (*DeleteFeaturePipelineResponse, error) {
	out := new(DeleteFeaturePipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/DeleteFeaturePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineServiceClient) PauseFeaturePipeline(ctx context.Context, in *PauseFeaturePipelineRequest, opts ...grpc.CallOption) (*PauseFeaturePipelineResponse, error) {
	out := new(PauseFeaturePipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/PauseFeaturePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineServiceClient) ResumeFeaturePipeline(ctx context.Context, in *ResumeFeaturePipelineRequest, opts ...grpc.CallOption) (*ResumeFeaturePipelineResponse, error) {
	out := new(ResumeFeaturePipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/ResumeFeaturePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeaturePipelineServiceServer is the server API for FeaturePipelineService service.
// All implementations must embed UnimplementedFeaturePipelineServiceServer
// for forward compatibility
type FeaturePipelineServiceServer interface {
	ListFeaturePipelines(context.Context, *ListFeaturePipelineRequest) (*ListFeaturePipelineResponse, error)
	CreateFeaturePipeline(context.Context, *CreateFeaturePipelineRequest) (*CreateFeaturePipelineResponse, error)
	GetFeaturePipeline(context.Context, *GetFeaturePipelineRequest) (*GetFeaturePipelineResponse, error)
	UpdateFeaturePipeline(context.Context, *UpdateFeaturePipelineRequest) (*UpdateFeaturePipelineResponse, error)
	DeleteFeaturePipeline(context.Context, *DeleteFeaturePipelineRequest) (*DeleteFeaturePipelineResponse, error)
	PauseFeaturePipeline(context.Context, *PauseFeaturePipelineRequest) (*PauseFeaturePipelineResponse, error)
	ResumeFeaturePipeline(context.Context, *ResumeFeaturePipelineRequest) (*ResumeFeaturePipelineResponse, error)
	mustEmbedUnimplementedFeaturePipelineServiceServer()
}

// UnimplementedFeaturePipelineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeaturePipelineServiceServer struct {
}

func (UnimplementedFeaturePipelineServiceServer) ListFeaturePipelines(context.Context, *ListFeaturePipelineRequest) (*ListFeaturePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeaturePipelines not implemented")
}
func (UnimplementedFeaturePipelineServiceServer) CreateFeaturePipeline(context.Context, *CreateFeaturePipelineRequest) (*CreateFeaturePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeaturePipeline not implemented")
}
func (UnimplementedFeaturePipelineServiceServer) GetFeaturePipeline(context.Context, *GetFeaturePipelineRequest) (*GetFeaturePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeaturePipeline not implemented")
}
func (UnimplementedFeaturePipelineServiceServer) UpdateFeaturePipeline(context.Context, *UpdateFeaturePipelineRequest) (*UpdateFeaturePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeaturePipeline not implemented")
}
func (UnimplementedFeaturePipelineServiceServer) DeleteFeaturePipeline(context.Context, *DeleteFeaturePipelineRequest) (*DeleteFeaturePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeaturePipeline not implemented")
}
func (UnimplementedFeaturePipelineServiceServer) PauseFeaturePipeline(context.Context, *PauseFeaturePipelineRequest) (*PauseFeaturePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseFeaturePipeline not implemented")
}
func (UnimplementedFeaturePipelineServiceServer) ResumeFeaturePipeline(context.Context, *ResumeFeaturePipelineRequest) (*ResumeFeaturePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeFeaturePipeline not implemented")
}
func (UnimplementedFeaturePipelineServiceServer) mustEmbedUnimplementedFeaturePipelineServiceServer() {
}

// UnsafeFeaturePipelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeaturePipelineServiceServer will
// result in compilation errors.
type UnsafeFeaturePipelineServiceServer interface {
	mustEmbedUnimplementedFeaturePipelineServiceServer()
}

func RegisterFeaturePipelineServiceServer(s grpc.ServiceRegistrar, srv FeaturePipelineServiceServer) {
	s.RegisterService(&FeaturePipelineService_ServiceDesc, srv)
}

func _FeaturePipelineService_ListFeaturePipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeaturePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineServiceServer).ListFeaturePipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/ListFeaturePipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineServiceServer).ListFeaturePipelines(ctx, req.(*ListFeaturePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineService_CreateFeaturePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeaturePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineServiceServer).CreateFeaturePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/CreateFeaturePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineServiceServer).CreateFeaturePipeline(ctx, req.(*CreateFeaturePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineService_GetFeaturePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeaturePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineServiceServer).GetFeaturePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/GetFeaturePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineServiceServer).GetFeaturePipeline(ctx, req.(*GetFeaturePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineService_UpdateFeaturePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeaturePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineServiceServer).UpdateFeaturePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/UpdateFeaturePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineServiceServer).UpdateFeaturePipeline(ctx, req.(*UpdateFeaturePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineService_DeleteFeaturePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeaturePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineServiceServer).DeleteFeaturePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/DeleteFeaturePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineServiceServer).DeleteFeaturePipeline(ctx, req.(*DeleteFeaturePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineService_PauseFeaturePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseFeaturePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineServiceServer).PauseFeaturePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/PauseFeaturePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineServiceServer).PauseFeaturePipeline(ctx, req.(*PauseFeaturePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineService_ResumeFeaturePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeFeaturePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineServiceServer).ResumeFeaturePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService/ResumeFeaturePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineServiceServer).ResumeFeaturePipeline(ctx, req.(*ResumeFeaturePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeaturePipelineService_ServiceDesc is the grpc.ServiceDesc for FeaturePipelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeaturePipelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.featurepipeline.v1.FeaturePipelineService",
	HandlerType: (*FeaturePipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFeaturePipelines",
			Handler:    _FeaturePipelineService_ListFeaturePipelines_Handler,
		},
		{
			MethodName: "CreateFeaturePipeline",
			Handler:    _FeaturePipelineService_CreateFeaturePipeline_Handler,
		},
		{
			MethodName: "GetFeaturePipeline",
			Handler:    _FeaturePipelineService_GetFeaturePipeline_Handler,
		},
		{
			MethodName: "UpdateFeaturePipeline",
			Handler:    _FeaturePipelineService_UpdateFeaturePipeline_Handler,
		},
		{
			MethodName: "DeleteFeaturePipeline",
			Handler:    _FeaturePipelineService_DeleteFeaturePipeline_Handler,
		},
		{
			MethodName: "PauseFeaturePipeline",
			Handler:    _FeaturePipelineService_PauseFeaturePipeline_Handler,
		},
		{
			MethodName: "ResumeFeaturePipeline",
			Handler:    _FeaturePipelineService_ResumeFeaturePipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/featurepipeline/v1/featurepipeline.proto",
}
