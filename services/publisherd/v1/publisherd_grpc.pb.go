// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: github.com/metaprov/modelaapi/services/publisherd/v1/publisherd.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublisherdServiceClient is the client API for PublisherdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherdServiceClient interface {
	// publish tar file including the reports
	PackageModel(ctx context.Context, in *PackageModelRequest, opts ...grpc.CallOption) (*PackageModelResponse, error)
	PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type publisherdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherdServiceClient(cc grpc.ClientConnInterface) PublisherdServiceClient {
	return &publisherdServiceClient{cc}
}

func (c *publisherdServiceClient) PackageModel(ctx context.Context, in *PackageModelRequest, opts ...grpc.CallOption) (*PackageModelResponse, error) {
	out := new(PackageModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/PackageModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherdServiceClient) PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error) {
	out := new(PublishModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/PublishModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherdServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherdServiceServer is the server API for PublisherdService service.
// All implementations must embed UnimplementedPublisherdServiceServer
// for forward compatibility
type PublisherdServiceServer interface {
	// publish tar file including the reports
	PackageModel(context.Context, *PackageModelRequest) (*PackageModelResponse, error)
	PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedPublisherdServiceServer()
}

// UnimplementedPublisherdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublisherdServiceServer struct {
}

func (UnimplementedPublisherdServiceServer) PackageModel(context.Context, *PackageModelRequest) (*PackageModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PackageModel not implemented")
}
func (UnimplementedPublisherdServiceServer) PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishModel not implemented")
}
func (UnimplementedPublisherdServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedPublisherdServiceServer) mustEmbedUnimplementedPublisherdServiceServer() {}

// UnsafePublisherdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherdServiceServer will
// result in compilation errors.
type UnsafePublisherdServiceServer interface {
	mustEmbedUnimplementedPublisherdServiceServer()
}

func RegisterPublisherdServiceServer(s grpc.ServiceRegistrar, srv PublisherdServiceServer) {
	s.RegisterService(&PublisherdService_ServiceDesc, srv)
}

func _PublisherdService_PackageModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherdServiceServer).PackageModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/PackageModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherdServiceServer).PackageModel(ctx, req.(*PackageModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherdService_PublishModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherdServiceServer).PublishModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/PublishModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherdServiceServer).PublishModel(ctx, req.(*PublishModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherdService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherdServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherdServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublisherdService_ServiceDesc is the grpc.ServiceDesc for PublisherdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublisherdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService",
	HandlerType: (*PublisherdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PackageModel",
			Handler:    _PublisherdService_PackageModel_Handler,
		},
		{
			MethodName: "PublishModel",
			Handler:    _PublisherdService_PublishModel_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _PublisherdService_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/publisherd/v1/publisherd.proto",
}
