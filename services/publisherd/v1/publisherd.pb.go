// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.7
// source: github.com/metaprov/modelaapi/services/publisherd/v1/publisherd.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha11 "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1"
	v1alpha12 "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PublishNotebookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotebookName      string                 `protobuf:"bytes,1,opt,name=notebookName,proto3" json:"notebookName,omitempty"`
	NotebookNamespace string                 `protobuf:"bytes,2,opt,name=notebookNamespace,proto3" json:"notebookNamespace,omitempty"`
	NotebookSpec      *v1alpha1.NotebookSpec `protobuf:"bytes,3,opt,name=notebookSpec,proto3" json:"notebookSpec,omitempty"`
	NotebookContent   string                 `protobuf:"bytes,4,opt,name=NotebookContent,proto3" json:"NotebookContent,omitempty"`
	Dockerfile        string                 `protobuf:"bytes,5,opt,name=Dockerfile,proto3" json:"Dockerfile,omitempty"`
	Provider          string                 `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`                                                                                     // the image registry provider
	Secret            map[string][]byte      `protobuf:"bytes,7,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the image registry login details
}

func (x *PublishNotebookRequest) Reset() {
	*x = PublishNotebookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishNotebookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishNotebookRequest) ProtoMessage() {}

func (x *PublishNotebookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishNotebookRequest.ProtoReflect.Descriptor instead.
func (*PublishNotebookRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescGZIP(), []int{0}
}

func (x *PublishNotebookRequest) GetNotebookName() string {
	if x != nil {
		return x.NotebookName
	}
	return ""
}

func (x *PublishNotebookRequest) GetNotebookNamespace() string {
	if x != nil {
		return x.NotebookNamespace
	}
	return ""
}

func (x *PublishNotebookRequest) GetNotebookSpec() *v1alpha1.NotebookSpec {
	if x != nil {
		return x.NotebookSpec
	}
	return nil
}

func (x *PublishNotebookRequest) GetNotebookContent() string {
	if x != nil {
		return x.NotebookContent
	}
	return ""
}

func (x *PublishNotebookRequest) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

func (x *PublishNotebookRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *PublishNotebookRequest) GetSecret() map[string][]byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

type PublishNotebookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName string `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
}

func (x *PublishNotebookResponse) Reset() {
	*x = PublishNotebookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishNotebookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishNotebookResponse) ProtoMessage() {}

func (x *PublishNotebookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishNotebookResponse.ProtoReflect.Descriptor instead.
func (*PublishNotebookResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescGZIP(), []int{1}
}

func (x *PublishNotebookResponse) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

type BakeModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataproduct          *v1alpha11.DataProduct        `protobuf:"bytes,1,opt,name=dataproduct,proto3" json:"dataproduct,omitempty"`
	Dataproductversion   *v1alpha11.DataProductVersion `protobuf:"bytes,2,opt,name=dataproductversion,proto3" json:"dataproductversion,omitempty"`
	Model                *v1alpha1.Model               `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Study                *v1alpha1.Study               `protobuf:"bytes,4,opt,name=study,proto3" json:"study,omitempty"`
	Datasource           *v1alpha11.DataSource         `protobuf:"bytes,5,opt,name=datasource,proto3" json:"datasource,omitempty"`
	Dataset              *v1alpha11.Dataset            `protobuf:"bytes,6,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Provider             string                        `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider,omitempty"` // the image registry provider
	Imagename            string                        `protobuf:"bytes,8,opt,name=imagename,proto3" json:"imagename,omitempty"`
	ImagenameWithVersion string                        `protobuf:"bytes,9,opt,name=imagenameWithVersion,proto3" json:"imagenameWithVersion,omitempty"`
	Push                 bool                          `protobuf:"varint,10,opt,name=push,proto3" json:"push,omitempty"`
	Bucket               *v1alpha12.VirtualBucket      `protobuf:"bytes,11,opt,name=bucket,proto3" json:"bucket,omitempty"`
	CloudConn            *v1alpha12.Connection         `protobuf:"bytes,12,opt,name=cloudConn,proto3" json:"cloudConn,omitempty"`
	CloudSecret          map[string][]byte             `protobuf:"bytes,13,rep,name=cloudSecret,proto3" json:"cloudSecret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the image registry login details.
	DockerConnection     *v1alpha12.Connection         `protobuf:"bytes,14,opt,name=dockerConnection,proto3" json:"dockerConnection,omitempty"`
	DockerRegistrySecret map[string][]byte             `protobuf:"bytes,15,rep,name=dockerRegistrySecret,proto3" json:"dockerRegistrySecret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the image registry login details.
	Kaniko               bool                          `protobuf:"varint,19,opt,name=kaniko,proto3" json:"kaniko,omitempty"`
}

func (x *BakeModelRequest) Reset() {
	*x = BakeModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakeModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakeModelRequest) ProtoMessage() {}

func (x *BakeModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakeModelRequest.ProtoReflect.Descriptor instead.
func (*BakeModelRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescGZIP(), []int{2}
}

func (x *BakeModelRequest) GetDataproduct() *v1alpha11.DataProduct {
	if x != nil {
		return x.Dataproduct
	}
	return nil
}

func (x *BakeModelRequest) GetDataproductversion() *v1alpha11.DataProductVersion {
	if x != nil {
		return x.Dataproductversion
	}
	return nil
}

func (x *BakeModelRequest) GetModel() *v1alpha1.Model {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *BakeModelRequest) GetStudy() *v1alpha1.Study {
	if x != nil {
		return x.Study
	}
	return nil
}

func (x *BakeModelRequest) GetDatasource() *v1alpha11.DataSource {
	if x != nil {
		return x.Datasource
	}
	return nil
}

func (x *BakeModelRequest) GetDataset() *v1alpha11.Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *BakeModelRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *BakeModelRequest) GetImagename() string {
	if x != nil {
		return x.Imagename
	}
	return ""
}

func (x *BakeModelRequest) GetImagenameWithVersion() string {
	if x != nil {
		return x.ImagenameWithVersion
	}
	return ""
}

func (x *BakeModelRequest) GetPush() bool {
	if x != nil {
		return x.Push
	}
	return false
}

func (x *BakeModelRequest) GetBucket() *v1alpha12.VirtualBucket {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *BakeModelRequest) GetCloudConn() *v1alpha12.Connection {
	if x != nil {
		return x.CloudConn
	}
	return nil
}

func (x *BakeModelRequest) GetCloudSecret() map[string][]byte {
	if x != nil {
		return x.CloudSecret
	}
	return nil
}

func (x *BakeModelRequest) GetDockerConnection() *v1alpha12.Connection {
	if x != nil {
		return x.DockerConnection
	}
	return nil
}

func (x *BakeModelRequest) GetDockerRegistrySecret() map[string][]byte {
	if x != nil {
		return x.DockerRegistrySecret
	}
	return nil
}

func (x *BakeModelRequest) GetKaniko() bool {
	if x != nil {
		return x.Kaniko
	}
	return false
}

type BakeModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName string `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
}

func (x *BakeModelResponse) Reset() {
	*x = BakeModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakeModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakeModelResponse) ProtoMessage() {}

func (x *BakeModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakeModelResponse.ProtoReflect.Descriptor instead.
func (*BakeModelResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescGZIP(), []int{3}
}

func (x *BakeModelResponse) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

type TarModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataproduct        *v1alpha11.DataProduct        `protobuf:"bytes,1,opt,name=dataproduct,proto3" json:"dataproduct,omitempty"`
	Dataproductversion *v1alpha11.DataProductVersion `protobuf:"bytes,2,opt,name=dataproductversion,proto3" json:"dataproductversion,omitempty"`
	Model              *v1alpha1.Model               `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Study              *v1alpha1.Study               `protobuf:"bytes,4,opt,name=study,proto3" json:"study,omitempty"`
	Datasource         *v1alpha11.DataSource         `protobuf:"bytes,5,opt,name=datasource,proto3" json:"datasource,omitempty"`
	Dataset            *v1alpha11.Dataset            `protobuf:"bytes,6,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Bucket             *v1alpha12.VirtualBucket      `protobuf:"bytes,7,opt,name=bucket,proto3" json:"bucket,omitempty"`
	CloudConn          *v1alpha12.Connection         `protobuf:"bytes,8,opt,name=cloudConn,proto3" json:"cloudConn,omitempty"`
	CloudSecret        map[string][]byte             `protobuf:"bytes,9,rep,name=cloudSecret,proto3" json:"cloudSecret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TarModelRequest) Reset() {
	*x = TarModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TarModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TarModelRequest) ProtoMessage() {}

func (x *TarModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TarModelRequest.ProtoReflect.Descriptor instead.
func (*TarModelRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescGZIP(), []int{4}
}

func (x *TarModelRequest) GetDataproduct() *v1alpha11.DataProduct {
	if x != nil {
		return x.Dataproduct
	}
	return nil
}

func (x *TarModelRequest) GetDataproductversion() *v1alpha11.DataProductVersion {
	if x != nil {
		return x.Dataproductversion
	}
	return nil
}

func (x *TarModelRequest) GetModel() *v1alpha1.Model {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *TarModelRequest) GetStudy() *v1alpha1.Study {
	if x != nil {
		return x.Study
	}
	return nil
}

func (x *TarModelRequest) GetDatasource() *v1alpha11.DataSource {
	if x != nil {
		return x.Datasource
	}
	return nil
}

func (x *TarModelRequest) GetDataset() *v1alpha11.Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *TarModelRequest) GetBucket() *v1alpha12.VirtualBucket {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *TarModelRequest) GetCloudConn() *v1alpha12.Connection {
	if x != nil {
		return x.CloudConn
	}
	return nil
}

func (x *TarModelRequest) GetCloudSecret() map[string][]byte {
	if x != nil {
		return x.CloudSecret
	}
	return nil
}

type TarModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TarUri string `protobuf:"bytes,1,opt,name=tarUri,proto3" json:"tarUri,omitempty"` // the uri of the tar file
	Sig    string `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *TarModelResponse) Reset() {
	*x = TarModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TarModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TarModelResponse) ProtoMessage() {}

func (x *TarModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TarModelResponse.ProtoReflect.Descriptor instead.
func (*TarModelResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescGZIP(), []int{5}
}

func (x *TarModelResponse) GetTarUri() string {
	if x != nil {
		return x.TarUri
	}
	return ""
}

func (x *TarModelResponse) GetSig() string {
	if x != nil {
		return x.Sig
	}
	return ""
}

type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescGZIP(), []int{6}
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescGZIP(), []int{7}
}

var File_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDesc = []byte{
	0x0a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x48, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x03, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x6a, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a,
	0x0f, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x37, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x0b, 0x0a, 0x10, 0x42, 0x61,
	0x6b, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x78, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x05, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x05, 0x73, 0x74, 0x75, 0x64, 0x79, 0x12, 0x60, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x57, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x5c, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6e, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x79, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x6d, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x94, 0x01, 0x0a, 0x14, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x60, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x61, 0x6e, 0x69,
	0x6b, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6b, 0x61, 0x6e, 0x69, 0x6b, 0x6f,
	0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x47, 0x0a, 0x19, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x11, 0x42, 0x61, 0x6b,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd2, 0x07, 0x0a,
	0x0f, 0x54, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x63, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x78, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x05, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x05, 0x73, 0x74, 0x75, 0x64, 0x79, 0x12, 0x60, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6e, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x78, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3c, 0x0a, 0x10, 0x54, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x55, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x55, 0x72, 0x69, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x67, 0x22,
	0x11, 0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa0, 0x05, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9d, 0x01, 0x0a,
	0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x72, 0x12, 0x45, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a,
	0x04, 0x42, 0x61, 0x6b, 0x65, 0x12, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6b,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb0, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x4c, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x08,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x64, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescData = file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDesc
)

func file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescData)
	})
	return file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDescData
}

var file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_goTypes = []interface{}{
	(*PublishNotebookRequest)(nil),       // 0: github.com.metaprov.modelaapi.services.publisherd.v1.PublishNotebookRequest
	(*PublishNotebookResponse)(nil),      // 1: github.com.metaprov.modelaapi.services.publisherd.v1.PublishNotebookResponse
	(*BakeModelRequest)(nil),             // 2: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest
	(*BakeModelResponse)(nil),            // 3: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelResponse
	(*TarModelRequest)(nil),              // 4: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest
	(*TarModelResponse)(nil),             // 5: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelResponse
	(*ShutdownRequest)(nil),              // 6: github.com.metaprov.modelaapi.services.publisherd.v1.ShutdownRequest
	(*ShutdownResponse)(nil),             // 7: github.com.metaprov.modelaapi.services.publisherd.v1.ShutdownResponse
	nil,                                  // 8: github.com.metaprov.modelaapi.services.publisherd.v1.PublishNotebookRequest.SecretEntry
	nil,                                  // 9: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.CloudSecretEntry
	nil,                                  // 10: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.DockerRegistrySecretEntry
	nil,                                  // 11: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest.CloudSecretEntry
	(*v1alpha1.NotebookSpec)(nil),        // 12: github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.NotebookSpec
	(*v1alpha11.DataProduct)(nil),        // 13: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProduct
	(*v1alpha11.DataProductVersion)(nil), // 14: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProductVersion
	(*v1alpha1.Model)(nil),               // 15: github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model
	(*v1alpha1.Study)(nil),               // 16: github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Study
	(*v1alpha11.DataSource)(nil),         // 17: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource
	(*v1alpha11.Dataset)(nil),            // 18: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Dataset
	(*v1alpha12.VirtualBucket)(nil),      // 19: github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket
	(*v1alpha12.Connection)(nil),         // 20: github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Connection
}
var file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_depIdxs = []int32{
	12, // 0: github.com.metaprov.modelaapi.services.publisherd.v1.PublishNotebookRequest.notebookSpec:type_name -> github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.NotebookSpec
	8,  // 1: github.com.metaprov.modelaapi.services.publisherd.v1.PublishNotebookRequest.secret:type_name -> github.com.metaprov.modelaapi.services.publisherd.v1.PublishNotebookRequest.SecretEntry
	13, // 2: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.dataproduct:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProduct
	14, // 3: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.dataproductversion:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProductVersion
	15, // 4: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.model:type_name -> github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model
	16, // 5: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.study:type_name -> github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Study
	17, // 6: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.datasource:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource
	18, // 7: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.dataset:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Dataset
	19, // 8: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.bucket:type_name -> github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket
	20, // 9: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.cloudConn:type_name -> github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Connection
	9,  // 10: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.cloudSecret:type_name -> github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.CloudSecretEntry
	20, // 11: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.dockerConnection:type_name -> github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Connection
	10, // 12: github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.dockerRegistrySecret:type_name -> github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest.DockerRegistrySecretEntry
	13, // 13: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest.dataproduct:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProduct
	14, // 14: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest.dataproductversion:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataProductVersion
	15, // 15: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest.model:type_name -> github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model
	16, // 16: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest.study:type_name -> github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Study
	17, // 17: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest.datasource:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSource
	18, // 18: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest.dataset:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Dataset
	19, // 19: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest.bucket:type_name -> github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket
	20, // 20: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest.cloudConn:type_name -> github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Connection
	11, // 21: github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest.cloudSecret:type_name -> github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest.CloudSecretEntry
	4,  // 22: github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService.PublishTar:input_type -> github.com.metaprov.modelaapi.services.publisherd.v1.TarModelRequest
	2,  // 23: github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService.Bake:input_type -> github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelRequest
	0,  // 24: github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService.PublishNotebook:input_type -> github.com.metaprov.modelaapi.services.publisherd.v1.PublishNotebookRequest
	6,  // 25: github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService.Shutdown:input_type -> github.com.metaprov.modelaapi.services.publisherd.v1.ShutdownRequest
	5,  // 26: github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService.PublishTar:output_type -> github.com.metaprov.modelaapi.services.publisherd.v1.TarModelResponse
	3,  // 27: github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService.Bake:output_type -> github.com.metaprov.modelaapi.services.publisherd.v1.BakeModelResponse
	1,  // 28: github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService.PublishNotebook:output_type -> github.com.metaprov.modelaapi.services.publisherd.v1.PublishNotebookResponse
	7,  // 29: github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService.Shutdown:output_type -> github.com.metaprov.modelaapi.services.publisherd.v1.ShutdownResponse
	26, // [26:30] is the sub-list for method output_type
	22, // [22:26] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_init() }
func file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_init() {
	if File_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishNotebookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishNotebookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakeModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakeModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TarModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TarModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_depIdxs,
		MessageInfos:      file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto = out.File
	file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_rawDesc = nil
	file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_goTypes = nil
	file_github_com_metaprov_modelaapi_services_publisherd_v1_publisherd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PublisherdServiceClient is the client API for PublisherdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublisherdServiceClient interface {
	// publish tar file including the reports
	PublishTar(ctx context.Context, in *TarModelRequest, opts ...grpc.CallOption) (*TarModelResponse, error)
	Bake(ctx context.Context, in *BakeModelRequest, opts ...grpc.CallOption) (*BakeModelResponse, error)
	// Publish a notebook.
	PublishNotebook(ctx context.Context, in *PublishNotebookRequest, opts ...grpc.CallOption) (*PublishNotebookResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type publisherdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherdServiceClient(cc grpc.ClientConnInterface) PublisherdServiceClient {
	return &publisherdServiceClient{cc}
}

func (c *publisherdServiceClient) PublishTar(ctx context.Context, in *TarModelRequest, opts ...grpc.CallOption) (*TarModelResponse, error) {
	out := new(TarModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/PublishTar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherdServiceClient) Bake(ctx context.Context, in *BakeModelRequest, opts ...grpc.CallOption) (*BakeModelResponse, error) {
	out := new(BakeModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/Bake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherdServiceClient) PublishNotebook(ctx context.Context, in *PublishNotebookRequest, opts ...grpc.CallOption) (*PublishNotebookResponse, error) {
	out := new(PublishNotebookResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/PublishNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherdServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherdServiceServer is the server API for PublisherdService service.
type PublisherdServiceServer interface {
	// publish tar file including the reports
	PublishTar(context.Context, *TarModelRequest) (*TarModelResponse, error)
	Bake(context.Context, *BakeModelRequest) (*BakeModelResponse, error)
	// Publish a notebook.
	PublishNotebook(context.Context, *PublishNotebookRequest) (*PublishNotebookResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
}

// UnimplementedPublisherdServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPublisherdServiceServer struct {
}

func (*UnimplementedPublisherdServiceServer) PublishTar(context.Context, *TarModelRequest) (*TarModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTar not implemented")
}
func (*UnimplementedPublisherdServiceServer) Bake(context.Context, *BakeModelRequest) (*BakeModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bake not implemented")
}
func (*UnimplementedPublisherdServiceServer) PublishNotebook(context.Context, *PublishNotebookRequest) (*PublishNotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNotebook not implemented")
}
func (*UnimplementedPublisherdServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}

func RegisterPublisherdServiceServer(s *grpc.Server, srv PublisherdServiceServer) {
	s.RegisterService(&_PublisherdService_serviceDesc, srv)
}

func _PublisherdService_PublishTar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TarModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherdServiceServer).PublishTar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/PublishTar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherdServiceServer).PublishTar(ctx, req.(*TarModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherdService_Bake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BakeModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherdServiceServer).Bake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/Bake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherdServiceServer).Bake(ctx, req.(*BakeModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherdService_PublishNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishNotebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherdServiceServer).PublishNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/PublishNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherdServiceServer).PublishNotebook(ctx, req.(*PublishNotebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherdService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherdServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherdServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublisherdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.publisherd.v1.PublisherdService",
	HandlerType: (*PublisherdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishTar",
			Handler:    _PublisherdService_PublishTar_Handler,
		},
		{
			MethodName: "Bake",
			Handler:    _PublisherdService_Bake_Handler,
		},
		{
			MethodName: "PublishNotebook",
			Handler:    _PublisherdService_PublishNotebook_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _PublisherdService_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/publisherd/v1/publisherd.proto",
}
