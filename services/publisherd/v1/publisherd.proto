syntax = "proto3";
option go_package = "github.com/metaprov/modeldapi/services/publisherd/v1";
package github.com.metaprov.modeldapi.services.publisherd.v1;


import "github.com/metaprov/modeldapi/pkg/apis/training/v1alpha1/generated.proto";
import "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1/generated.proto";
import "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1/generated.proto";

message PublishNotebookRequest {
    string notebookName = 1;
    string notebookNamespace = 2;
    github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.NotebookSpec notebookSpec            = 3;
    string   NotebookContent     = 4;
    string   Dockerfile          = 5;
    string   provider            = 6;  // the image registry provider
    map<string,bytes>  secret    = 7;  // the image registry login details
}

message PublishNotebookResponse {
    string ImageName     = 1;
}

message PublishModelRequest {
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProduct           dataproduct         = 1;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProductVersion    dataproductversion  = 2;
    github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Model             model               = 3;
    github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Study             study               = 4;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataSource            datasource          = 5;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Dataset               dataset             = 6;
    string                                                                     provider            = 7; // the image registry provider
    string                                                                     imagename           = 8;
    string                                                                     imagenameWithVersion = 9;
    bool                                                                       push                = 10;
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucket        bucket      = 11;
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Connection           cloudConn   = 12;
    map<string,bytes>  cloudSecret   = 13; // the image registry login details.
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Connection           dockerConnection   = 14;
    map<string,bytes>  dockerRegistrySecret    = 15; // the image registry login details.
    string    modelWeightsUri        = 16;
    string    preprocessorWeightsUri = 17;
    string    labelEncoderUri        = 18;
    bool      kaniko                 = 19;
}



message PublishModelResponse {
    string ImageName     = 1;
}

message TarModelRequest {
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProduct           dataproduct         = 1;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProductVersion    dataproductversion  = 2;
    github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Model             model               = 3;
    github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.Study             study               = 4;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataSource            datasource          = 5;
    github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.Dataset               dataset             = 6;
    string                                                                     provider            = 7; // the image registry provider
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucket        bucket      = 8;
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Connection           cloudConn   = 9;
    map<string,bytes>  cloudSecret   = 10; // the image registry login details.
    string    modelWeightsUri        = 11;
    string    preprocessorWeightsUri = 12;
    string    labelEncoderUri        = 13; 
    bytes     modelReport            = 14;    // the model report
    bytes     datasetReport          = 15;    // the dataset report
}

message TarModelResponse {

}

message ShutdownRequest {}
message ShutdownResponse {}

service PublisherdService {
    // publish tar file including the reports
    rpc PublishTar(TarModelRequest) returns (TarModelResponse) {}

    rpc PublishCombined(PublishModelRequest) returns (PublishModelResponse) {}

    // Publish a notebook.
    rpc PublishNotebook(PublishNotebookRequest) returns (PublishNotebookResponse) {}

    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {}
}


