syntax = "proto3";

option go_package = "github.com/metaprov/modelaapi/services/forecast/v1";
package github.com.metaprov.modelaapi.services.forecast.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/inference/v1alpha1/generated.proto";


message ListForecastsRequest {
    string namespace = 1;
    map<string,string> labels =2;
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;
}

message ListForecastsResponse {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.ForecastList forecasts = 1;
    string next_page_token = 2;
}


message CreateForecastResponse {}

message CreateForecastRequest {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.Forecast forecast = 1;
}

message UpdateForecastRequest {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.Forecast forecast = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateForecastResponse {

}

message GetForecastRequest {
    string namespace = 1;
    string name      = 2;
}

message GetForecastResponse {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.Forecast forecast = 1;
    string yaml = 2;

}

message DeleteForecastRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteForecastResponse {

}

message DownloadForecastRequest {
    string namespace = 1;
    string name      = 2;
}

// Answer the report in base 64
message DownloadForecastResponse {
    bytes raw = 1;

}

message AbortForecastRequest {
    string namespace = 1;
    string name      = 2;
}

// Answer the report in base 64
message AbortForecastResponse {
    

}



service ForecastService {
    rpc ListForecasts(ListForecastsRequest) returns (ListForecastsResponse) {
        option (google.api.http).get = "/v1/forecasts/{namespace}";
    }

    rpc CreateForecast(CreateForecastRequest) returns (CreateForecastResponse) {
        option (google.api.http) = {
			post: "/v1/forecasts"
			body: "*"
		};
    }

    rpc GetForecast(GetForecastRequest) returns (GetForecastResponse) {
        option (google.api.http).get = "/v1/forecasts/{namespace}/{name}";
    }

    rpc UpdateForecast(UpdateForecastRequest) returns (UpdateForecastResponse) {
        option (google.api.http) = {
			put: "/v1/forecasts/{forecast.metadata.namespace}/{forecast.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteForecast(DeleteForecastRequest) returns (DeleteForecastResponse) {
        option (google.api.http).delete = "/v1/forecasts/{namespace}/{name}";
    }

    rpc Download(DownloadForecastRequest) returns (DownloadForecastResponse) {
        option (google.api.http).get = "/v1/forecasts/{namespace}/{name}:download";
    }

    rpc Abort(AbortForecastRequest) returns (AbortForecastResponse) {
        option (google.api.http).post = "/v1/forecasts/{namespace}/{name}:abort";
    }


    
}