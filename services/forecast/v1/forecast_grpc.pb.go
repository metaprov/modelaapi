// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/forecast/v1/forecast.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForecastServiceClient is the client API for ForecastService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForecastServiceClient interface {
	ListForecasts(ctx context.Context, in *ListForecastsRequest, opts ...grpc.CallOption) (*ListForecastsResponse, error)
	CreateForecast(ctx context.Context, in *CreateForecastRequest, opts ...grpc.CallOption) (*CreateForecastResponse, error)
	GetForecast(ctx context.Context, in *GetForecastRequest, opts ...grpc.CallOption) (*GetForecastResponse, error)
	UpdateForecast(ctx context.Context, in *UpdateForecastRequest, opts ...grpc.CallOption) (*UpdateForecastResponse, error)
	DeleteForecast(ctx context.Context, in *DeleteForecastRequest, opts ...grpc.CallOption) (*DeleteForecastResponse, error)
	Download(ctx context.Context, in *DownloadForecastRequest, opts ...grpc.CallOption) (*DownloadForecastResponse, error)
	Abort(ctx context.Context, in *AbortForecastRequest, opts ...grpc.CallOption) (*AbortForecastResponse, error)
}

type forecastServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForecastServiceClient(cc grpc.ClientConnInterface) ForecastServiceClient {
	return &forecastServiceClient{cc}
}

func (c *forecastServiceClient) ListForecasts(ctx context.Context, in *ListForecastsRequest, opts ...grpc.CallOption) (*ListForecastsResponse, error) {
	out := new(ListForecastsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/ListForecasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastServiceClient) CreateForecast(ctx context.Context, in *CreateForecastRequest, opts ...grpc.CallOption) (*CreateForecastResponse, error) {
	out := new(CreateForecastResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/CreateForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastServiceClient) GetForecast(ctx context.Context, in *GetForecastRequest, opts ...grpc.CallOption) (*GetForecastResponse, error) {
	out := new(GetForecastResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/GetForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastServiceClient) UpdateForecast(ctx context.Context, in *UpdateForecastRequest, opts ...grpc.CallOption) (*UpdateForecastResponse, error) {
	out := new(UpdateForecastResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/UpdateForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastServiceClient) DeleteForecast(ctx context.Context, in *DeleteForecastRequest, opts ...grpc.CallOption) (*DeleteForecastResponse, error) {
	out := new(DeleteForecastResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/DeleteForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastServiceClient) Download(ctx context.Context, in *DownloadForecastRequest, opts ...grpc.CallOption) (*DownloadForecastResponse, error) {
	out := new(DownloadForecastResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forecastServiceClient) Abort(ctx context.Context, in *AbortForecastRequest, opts ...grpc.CallOption) (*AbortForecastResponse, error) {
	out := new(AbortForecastResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForecastServiceServer is the server API for ForecastService service.
// All implementations must embed UnimplementedForecastServiceServer
// for forward compatibility
type ForecastServiceServer interface {
	ListForecasts(context.Context, *ListForecastsRequest) (*ListForecastsResponse, error)
	CreateForecast(context.Context, *CreateForecastRequest) (*CreateForecastResponse, error)
	GetForecast(context.Context, *GetForecastRequest) (*GetForecastResponse, error)
	UpdateForecast(context.Context, *UpdateForecastRequest) (*UpdateForecastResponse, error)
	DeleteForecast(context.Context, *DeleteForecastRequest) (*DeleteForecastResponse, error)
	Download(context.Context, *DownloadForecastRequest) (*DownloadForecastResponse, error)
	Abort(context.Context, *AbortForecastRequest) (*AbortForecastResponse, error)
	mustEmbedUnimplementedForecastServiceServer()
}

// UnimplementedForecastServiceServer must be embedded to have forward compatible implementations.
type UnimplementedForecastServiceServer struct {
}

func (UnimplementedForecastServiceServer) ListForecasts(context.Context, *ListForecastsRequest) (*ListForecastsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListForecasts not implemented")
}
func (UnimplementedForecastServiceServer) CreateForecast(context.Context, *CreateForecastRequest) (*CreateForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForecast not implemented")
}
func (UnimplementedForecastServiceServer) GetForecast(context.Context, *GetForecastRequest) (*GetForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecast not implemented")
}
func (UnimplementedForecastServiceServer) UpdateForecast(context.Context, *UpdateForecastRequest) (*UpdateForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForecast not implemented")
}
func (UnimplementedForecastServiceServer) DeleteForecast(context.Context, *DeleteForecastRequest) (*DeleteForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForecast not implemented")
}
func (UnimplementedForecastServiceServer) Download(context.Context, *DownloadForecastRequest) (*DownloadForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedForecastServiceServer) Abort(context.Context, *AbortForecastRequest) (*AbortForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedForecastServiceServer) mustEmbedUnimplementedForecastServiceServer() {}

// UnsafeForecastServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForecastServiceServer will
// result in compilation errors.
type UnsafeForecastServiceServer interface {
	mustEmbedUnimplementedForecastServiceServer()
}

func RegisterForecastServiceServer(s grpc.ServiceRegistrar, srv ForecastServiceServer) {
	s.RegisterService(&ForecastService_ServiceDesc, srv)
}

func _ForecastService_ListForecasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListForecastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServiceServer).ListForecasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/ListForecasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServiceServer).ListForecasts(ctx, req.(*ListForecastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastService_CreateForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServiceServer).CreateForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/CreateForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServiceServer).CreateForecast(ctx, req.(*CreateForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastService_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServiceServer).GetForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/GetForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServiceServer).GetForecast(ctx, req.(*GetForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastService_UpdateForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServiceServer).UpdateForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/UpdateForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServiceServer).UpdateForecast(ctx, req.(*UpdateForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastService_DeleteForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServiceServer).DeleteForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/DeleteForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServiceServer).DeleteForecast(ctx, req.(*DeleteForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServiceServer).Download(ctx, req.(*DownloadForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForecastService_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServiceServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.forecast.v1.ForecastService/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServiceServer).Abort(ctx, req.(*AbortForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ForecastService_ServiceDesc is the grpc.ServiceDesc for ForecastService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForecastService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.forecast.v1.ForecastService",
	HandlerType: (*ForecastServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListForecasts",
			Handler:    _ForecastService_ListForecasts_Handler,
		},
		{
			MethodName: "CreateForecast",
			Handler:    _ForecastService_CreateForecast_Handler,
		},
		{
			MethodName: "GetForecast",
			Handler:    _ForecastService_GetForecast_Handler,
		},
		{
			MethodName: "UpdateForecast",
			Handler:    _ForecastService_UpdateForecast_Handler,
		},
		{
			MethodName: "DeleteForecast",
			Handler:    _ForecastService_DeleteForecast_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _ForecastService_Download_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _ForecastService_Abort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/forecast/v1/forecast.proto",
}
