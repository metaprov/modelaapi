// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: github.com/metaprov/modelaapi/services/study/v1/study.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudyServiceClient is the client API for StudyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyServiceClient interface {
	ListStudies(ctx context.Context, in *ListStudyRequest, opts ...grpc.CallOption) (*ListStudyResponse, error)
	CreateStudy(ctx context.Context, in *CreateStudyRequest, opts ...grpc.CallOption) (*CreateStudyResponse, error)
	GetStudy(ctx context.Context, in *GetStudyRequest, opts ...grpc.CallOption) (*GetStudyResponse, error)
	UpdateStudy(ctx context.Context, in *UpdateStudyRequest, opts ...grpc.CallOption) (*UpdateStudyResponse, error)
	DeleteStudy(ctx context.Context, in *DeleteStudyRequest, opts ...grpc.CallOption) (*DeleteStudyResponse, error)
	GetStudyProfile(ctx context.Context, in *GetStudyProfileRequest, opts ...grpc.CallOption) (*GetStudyProfileResponse, error)
	AbortStudy(ctx context.Context, in *AbortStudyRequest, opts ...grpc.CallOption) (*AbortStudyResponse, error)
	PauseStudy(ctx context.Context, in *PauseStudyRequest, opts ...grpc.CallOption) (*PauseStudyResponse, error)
	ResumeStudy(ctx context.Context, in *ResumeStudyRequest, opts ...grpc.CallOption) (*ResumeStudyResponse, error)
	// Force completion of the search.
	CompleteStudySearch(ctx context.Context, in *CompleteStudySearchRequest, opts ...grpc.CallOption) (*CompleteStudySearchResponse, error)
}

type studyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyServiceClient(cc grpc.ClientConnInterface) StudyServiceClient {
	return &studyServiceClient{cc}
}

func (c *studyServiceClient) ListStudies(ctx context.Context, in *ListStudyRequest, opts ...grpc.CallOption) (*ListStudyResponse, error) {
	out := new(ListStudyResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyService/ListStudies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceClient) CreateStudy(ctx context.Context, in *CreateStudyRequest, opts ...grpc.CallOption) (*CreateStudyResponse, error) {
	out := new(CreateStudyResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyService/CreateStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceClient) GetStudy(ctx context.Context, in *GetStudyRequest, opts ...grpc.CallOption) (*GetStudyResponse, error) {
	out := new(GetStudyResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyService/GetStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceClient) UpdateStudy(ctx context.Context, in *UpdateStudyRequest, opts ...grpc.CallOption) (*UpdateStudyResponse, error) {
	out := new(UpdateStudyResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyService/UpdateStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceClient) DeleteStudy(ctx context.Context, in *DeleteStudyRequest, opts ...grpc.CallOption) (*DeleteStudyResponse, error) {
	out := new(DeleteStudyResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyService/DeleteStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceClient) GetStudyProfile(ctx context.Context, in *GetStudyProfileRequest, opts ...grpc.CallOption) (*GetStudyProfileResponse, error) {
	out := new(GetStudyProfileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyService/GetStudyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceClient) AbortStudy(ctx context.Context, in *AbortStudyRequest, opts ...grpc.CallOption) (*AbortStudyResponse, error) {
	out := new(AbortStudyResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyService/AbortStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceClient) PauseStudy(ctx context.Context, in *PauseStudyRequest, opts ...grpc.CallOption) (*PauseStudyResponse, error) {
	out := new(PauseStudyResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyService/PauseStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceClient) ResumeStudy(ctx context.Context, in *ResumeStudyRequest, opts ...grpc.CallOption) (*ResumeStudyResponse, error) {
	out := new(ResumeStudyResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyService/ResumeStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceClient) CompleteStudySearch(ctx context.Context, in *CompleteStudySearchRequest, opts ...grpc.CallOption) (*CompleteStudySearchResponse, error) {
	out := new(CompleteStudySearchResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyService/CompleteStudySearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyServiceServer is the server API for StudyService service.
// All implementations must embed UnimplementedStudyServiceServer
// for forward compatibility
type StudyServiceServer interface {
	ListStudies(context.Context, *ListStudyRequest) (*ListStudyResponse, error)
	CreateStudy(context.Context, *CreateStudyRequest) (*CreateStudyResponse, error)
	GetStudy(context.Context, *GetStudyRequest) (*GetStudyResponse, error)
	UpdateStudy(context.Context, *UpdateStudyRequest) (*UpdateStudyResponse, error)
	DeleteStudy(context.Context, *DeleteStudyRequest) (*DeleteStudyResponse, error)
	GetStudyProfile(context.Context, *GetStudyProfileRequest) (*GetStudyProfileResponse, error)
	AbortStudy(context.Context, *AbortStudyRequest) (*AbortStudyResponse, error)
	PauseStudy(context.Context, *PauseStudyRequest) (*PauseStudyResponse, error)
	ResumeStudy(context.Context, *ResumeStudyRequest) (*ResumeStudyResponse, error)
	// Force completion of the search.
	CompleteStudySearch(context.Context, *CompleteStudySearchRequest) (*CompleteStudySearchResponse, error)
	mustEmbedUnimplementedStudyServiceServer()
}

// UnimplementedStudyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudyServiceServer struct {
}

func (UnimplementedStudyServiceServer) ListStudies(context.Context, *ListStudyRequest) (*ListStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudies not implemented")
}
func (UnimplementedStudyServiceServer) CreateStudy(context.Context, *CreateStudyRequest) (*CreateStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudy not implemented")
}
func (UnimplementedStudyServiceServer) GetStudy(context.Context, *GetStudyRequest) (*GetStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudy not implemented")
}
func (UnimplementedStudyServiceServer) UpdateStudy(context.Context, *UpdateStudyRequest) (*UpdateStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudy not implemented")
}
func (UnimplementedStudyServiceServer) DeleteStudy(context.Context, *DeleteStudyRequest) (*DeleteStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudy not implemented")
}
func (UnimplementedStudyServiceServer) GetStudyProfile(context.Context, *GetStudyProfileRequest) (*GetStudyProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyProfile not implemented")
}
func (UnimplementedStudyServiceServer) AbortStudy(context.Context, *AbortStudyRequest) (*AbortStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortStudy not implemented")
}
func (UnimplementedStudyServiceServer) PauseStudy(context.Context, *PauseStudyRequest) (*PauseStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseStudy not implemented")
}
func (UnimplementedStudyServiceServer) ResumeStudy(context.Context, *ResumeStudyRequest) (*ResumeStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeStudy not implemented")
}
func (UnimplementedStudyServiceServer) CompleteStudySearch(context.Context, *CompleteStudySearchRequest) (*CompleteStudySearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteStudySearch not implemented")
}
func (UnimplementedStudyServiceServer) mustEmbedUnimplementedStudyServiceServer() {}

// UnsafeStudyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyServiceServer will
// result in compilation errors.
type UnsafeStudyServiceServer interface {
	mustEmbedUnimplementedStudyServiceServer()
}

func RegisterStudyServiceServer(s grpc.ServiceRegistrar, srv StudyServiceServer) {
	s.RegisterService(&StudyService_ServiceDesc, srv)
}

func _StudyService_ListStudies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).ListStudies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyService/ListStudies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).ListStudies(ctx, req.(*ListStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyService_CreateStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).CreateStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyService/CreateStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).CreateStudy(ctx, req.(*CreateStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyService_GetStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).GetStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyService/GetStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).GetStudy(ctx, req.(*GetStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyService_UpdateStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).UpdateStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyService/UpdateStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).UpdateStudy(ctx, req.(*UpdateStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyService_DeleteStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).DeleteStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyService/DeleteStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).DeleteStudy(ctx, req.(*DeleteStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyService_GetStudyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).GetStudyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyService/GetStudyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).GetStudyProfile(ctx, req.(*GetStudyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyService_AbortStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).AbortStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyService/AbortStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).AbortStudy(ctx, req.(*AbortStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyService_PauseStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).PauseStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyService/PauseStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).PauseStudy(ctx, req.(*PauseStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyService_ResumeStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).ResumeStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyService/ResumeStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).ResumeStudy(ctx, req.(*ResumeStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyService_CompleteStudySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteStudySearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).CompleteStudySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyService/CompleteStudySearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).CompleteStudySearch(ctx, req.(*CompleteStudySearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudyService_ServiceDesc is the grpc.ServiceDesc for StudyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.study.v1.StudyService",
	HandlerType: (*StudyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStudies",
			Handler:    _StudyService_ListStudies_Handler,
		},
		{
			MethodName: "CreateStudy",
			Handler:    _StudyService_CreateStudy_Handler,
		},
		{
			MethodName: "GetStudy",
			Handler:    _StudyService_GetStudy_Handler,
		},
		{
			MethodName: "UpdateStudy",
			Handler:    _StudyService_UpdateStudy_Handler,
		},
		{
			MethodName: "DeleteStudy",
			Handler:    _StudyService_DeleteStudy_Handler,
		},
		{
			MethodName: "GetStudyProfile",
			Handler:    _StudyService_GetStudyProfile_Handler,
		},
		{
			MethodName: "AbortStudy",
			Handler:    _StudyService_AbortStudy_Handler,
		},
		{
			MethodName: "PauseStudy",
			Handler:    _StudyService_PauseStudy_Handler,
		},
		{
			MethodName: "ResumeStudy",
			Handler:    _StudyService_ResumeStudy_Handler,
		},
		{
			MethodName: "CompleteStudySearch",
			Handler:    _StudyService_CompleteStudySearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/study/v1/study.proto",
}
