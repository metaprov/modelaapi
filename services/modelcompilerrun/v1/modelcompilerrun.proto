syntax = "proto3";

option go_package = "github.com/metaprov/modelaapi/services/modelcompilerrun/v1";
package github.com.metaprov.modelaapi.services.modelcompilerrun.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1/generated.proto";


message ListModelCompilerRunsRequest {
    string namespace = 1;
    map<string,string> labels =2;
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;
}

message ListModelCompilerRunsResponse {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelCompilerRunList modelCompilerRuns = 1;
    string next_page_token = 2;
}

message ModelCompilerRunResponse {}

message CreateModelCompilerRunRequest {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelCompilerRun modelCompilerRun = 1;
}

message CreateModelCompilerRunResponse {

}

message UpdateModelCompilerRunRequest {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelCompilerRun modelCompilerRun = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateModelCompilerRunResponse {

}

message GetModelCompilerRunRequest {
    string namespace = 1;
    string name      = 2;
}


message GetModelCompilerRunResponse {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelCompilerRun modelCompilerRun = 1;
    string yaml = 2;
}

message DeleteModelCompilerRunRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteModelCompilerRunResponse {

}


service ModelCompilerRunService {
    rpc ListModelCompilerRuns(ListModelCompilerRunsRequest) returns (ListModelCompilerRunsResponse) {
        option (google.api.http).get = "/v1/modelcompilerruns/{namespace}";
    }
    rpc CreateModelCompilerRun(CreateModelCompilerRunRequest) returns (CreateModelCompilerRunResponse) {
        option (google.api.http) = {
			post: "/v1/modelcompilerruns"
			body: "*"
		};
    }
    rpc GetModelCompilerRun(GetModelCompilerRunRequest) returns (GetModelCompilerRunResponse) {
        option (google.api.http).get = "/v1/modelcompilerruns/{namespace}/{name}";
    }
    rpc UpdateModelCompilerRun(UpdateModelCompilerRunRequest) returns (UpdateModelCompilerRunResponse) {
        option (google.api.http) = {
			put: "/v1/modelcompilerruns/{modelcompilerrun.metadata.namespace}/{modelcompilerrun.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteModelCompilerRun(DeleteModelCompilerRunRequest) returns (DeleteModelCompilerRunResponse) {
        option (google.api.http).delete = "/v1/modelcompilerruns/{namespace}/{name}";
    }

}