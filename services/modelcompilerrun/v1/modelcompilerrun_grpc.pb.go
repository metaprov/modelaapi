// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/modelcompilerrun/v1/modelcompilerrun.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelCompilerRunServiceClient is the client API for ModelCompilerRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelCompilerRunServiceClient interface {
	ListModelCompilerRuns(ctx context.Context, in *ListModelCompilerRunsRequest, opts ...grpc.CallOption) (*ListModelCompilerRunsResponse, error)
	CreateModelCompilerRun(ctx context.Context, in *CreateModelCompilerRunRequest, opts ...grpc.CallOption) (*CreateModelCompilerRunResponse, error)
	GetModelCompilerRun(ctx context.Context, in *GetModelCompilerRunRequest, opts ...grpc.CallOption) (*GetModelCompilerRunResponse, error)
	UpdateModelCompilerRun(ctx context.Context, in *UpdateModelCompilerRunRequest, opts ...grpc.CallOption) (*UpdateModelCompilerRunResponse, error)
	DeleteModelCompilerRun(ctx context.Context, in *DeleteModelCompilerRunRequest, opts ...grpc.CallOption) (*DeleteModelCompilerRunResponse, error)
}

type modelCompilerRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelCompilerRunServiceClient(cc grpc.ClientConnInterface) ModelCompilerRunServiceClient {
	return &modelCompilerRunServiceClient{cc}
}

func (c *modelCompilerRunServiceClient) ListModelCompilerRuns(ctx context.Context, in *ListModelCompilerRunsRequest, opts ...grpc.CallOption) (*ListModelCompilerRunsResponse, error) {
	out := new(ListModelCompilerRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelcompilerrun.v1.ModelCompilerRunService/ListModelCompilerRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelCompilerRunServiceClient) CreateModelCompilerRun(ctx context.Context, in *CreateModelCompilerRunRequest, opts ...grpc.CallOption) (*CreateModelCompilerRunResponse, error) {
	out := new(CreateModelCompilerRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelcompilerrun.v1.ModelCompilerRunService/CreateModelCompilerRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelCompilerRunServiceClient) GetModelCompilerRun(ctx context.Context, in *GetModelCompilerRunRequest, opts ...grpc.CallOption) (*GetModelCompilerRunResponse, error) {
	out := new(GetModelCompilerRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelcompilerrun.v1.ModelCompilerRunService/GetModelCompilerRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelCompilerRunServiceClient) UpdateModelCompilerRun(ctx context.Context, in *UpdateModelCompilerRunRequest, opts ...grpc.CallOption) (*UpdateModelCompilerRunResponse, error) {
	out := new(UpdateModelCompilerRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelcompilerrun.v1.ModelCompilerRunService/UpdateModelCompilerRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelCompilerRunServiceClient) DeleteModelCompilerRun(ctx context.Context, in *DeleteModelCompilerRunRequest, opts ...grpc.CallOption) (*DeleteModelCompilerRunResponse, error) {
	out := new(DeleteModelCompilerRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.modelcompilerrun.v1.ModelCompilerRunService/DeleteModelCompilerRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelCompilerRunServiceServer is the server API for ModelCompilerRunService service.
// All implementations must embed UnimplementedModelCompilerRunServiceServer
// for forward compatibility
type ModelCompilerRunServiceServer interface {
	ListModelCompilerRuns(context.Context, *ListModelCompilerRunsRequest) (*ListModelCompilerRunsResponse, error)
	CreateModelCompilerRun(context.Context, *CreateModelCompilerRunRequest) (*CreateModelCompilerRunResponse, error)
	GetModelCompilerRun(context.Context, *GetModelCompilerRunRequest) (*GetModelCompilerRunResponse, error)
	UpdateModelCompilerRun(context.Context, *UpdateModelCompilerRunRequest) (*UpdateModelCompilerRunResponse, error)
	DeleteModelCompilerRun(context.Context, *DeleteModelCompilerRunRequest) (*DeleteModelCompilerRunResponse, error)
	mustEmbedUnimplementedModelCompilerRunServiceServer()
}

// UnimplementedModelCompilerRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelCompilerRunServiceServer struct {
}

func (UnimplementedModelCompilerRunServiceServer) ListModelCompilerRuns(context.Context, *ListModelCompilerRunsRequest) (*ListModelCompilerRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelCompilerRuns not implemented")
}
func (UnimplementedModelCompilerRunServiceServer) CreateModelCompilerRun(context.Context, *CreateModelCompilerRunRequest) (*CreateModelCompilerRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelCompilerRun not implemented")
}
func (UnimplementedModelCompilerRunServiceServer) GetModelCompilerRun(context.Context, *GetModelCompilerRunRequest) (*GetModelCompilerRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelCompilerRun not implemented")
}
func (UnimplementedModelCompilerRunServiceServer) UpdateModelCompilerRun(context.Context, *UpdateModelCompilerRunRequest) (*UpdateModelCompilerRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelCompilerRun not implemented")
}
func (UnimplementedModelCompilerRunServiceServer) DeleteModelCompilerRun(context.Context, *DeleteModelCompilerRunRequest) (*DeleteModelCompilerRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelCompilerRun not implemented")
}
func (UnimplementedModelCompilerRunServiceServer) mustEmbedUnimplementedModelCompilerRunServiceServer() {
}

// UnsafeModelCompilerRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelCompilerRunServiceServer will
// result in compilation errors.
type UnsafeModelCompilerRunServiceServer interface {
	mustEmbedUnimplementedModelCompilerRunServiceServer()
}

func RegisterModelCompilerRunServiceServer(s grpc.ServiceRegistrar, srv ModelCompilerRunServiceServer) {
	s.RegisterService(&ModelCompilerRunService_ServiceDesc, srv)
}

func _ModelCompilerRunService_ListModelCompilerRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelCompilerRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelCompilerRunServiceServer).ListModelCompilerRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelcompilerrun.v1.ModelCompilerRunService/ListModelCompilerRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelCompilerRunServiceServer).ListModelCompilerRuns(ctx, req.(*ListModelCompilerRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelCompilerRunService_CreateModelCompilerRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelCompilerRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelCompilerRunServiceServer).CreateModelCompilerRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelcompilerrun.v1.ModelCompilerRunService/CreateModelCompilerRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelCompilerRunServiceServer).CreateModelCompilerRun(ctx, req.(*CreateModelCompilerRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelCompilerRunService_GetModelCompilerRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelCompilerRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelCompilerRunServiceServer).GetModelCompilerRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelcompilerrun.v1.ModelCompilerRunService/GetModelCompilerRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelCompilerRunServiceServer).GetModelCompilerRun(ctx, req.(*GetModelCompilerRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelCompilerRunService_UpdateModelCompilerRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelCompilerRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelCompilerRunServiceServer).UpdateModelCompilerRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelcompilerrun.v1.ModelCompilerRunService/UpdateModelCompilerRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelCompilerRunServiceServer).UpdateModelCompilerRun(ctx, req.(*UpdateModelCompilerRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelCompilerRunService_DeleteModelCompilerRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelCompilerRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelCompilerRunServiceServer).DeleteModelCompilerRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.modelcompilerrun.v1.ModelCompilerRunService/DeleteModelCompilerRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelCompilerRunServiceServer).DeleteModelCompilerRun(ctx, req.(*DeleteModelCompilerRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelCompilerRunService_ServiceDesc is the grpc.ServiceDesc for ModelCompilerRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelCompilerRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.modelcompilerrun.v1.ModelCompilerRunService",
	HandlerType: (*ModelCompilerRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListModelCompilerRuns",
			Handler:    _ModelCompilerRunService_ListModelCompilerRuns_Handler,
		},
		{
			MethodName: "CreateModelCompilerRun",
			Handler:    _ModelCompilerRunService_CreateModelCompilerRun_Handler,
		},
		{
			MethodName: "GetModelCompilerRun",
			Handler:    _ModelCompilerRunService_GetModelCompilerRun_Handler,
		},
		{
			MethodName: "UpdateModelCompilerRun",
			Handler:    _ModelCompilerRunService_UpdateModelCompilerRun_Handler,
		},
		{
			MethodName: "DeleteModelCompilerRun",
			Handler:    _ModelCompilerRunService_DeleteModelCompilerRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/modelcompilerrun/v1/modelcompilerrun.proto",
}
