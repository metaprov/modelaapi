// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.7
// source: github.com/metaprov/modelaapi/services/cronsqlquery/v1/cronsqlquery.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListCronSqlQuerysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListCronSqlQuerysRequest) Reset() {
	*x = ListCronSqlQuerysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronSqlQuerysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronSqlQuerysRequest) ProtoMessage() {}

func (x *ListCronSqlQuerysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronSqlQuerysRequest.ProtoReflect.Descriptor instead.
func (*ListCronSqlQuerysRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{0}
}

func (x *ListCronSqlQuerysRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListCronSqlQuerysRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListCronSqlQuerysRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListCronSqlQuerysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *v1alpha1.CronSqlQueryList `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCronSqlQuerysResponse) Reset() {
	*x = ListCronSqlQuerysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronSqlQuerysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronSqlQuerysResponse) ProtoMessage() {}

func (x *ListCronSqlQuerysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronSqlQuerysResponse.ProtoReflect.Descriptor instead.
func (*ListCronSqlQuerysResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{1}
}

func (x *ListCronSqlQuerysResponse) GetItems() *v1alpha1.CronSqlQueryList {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateCronSqlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCronSqlQueryResponse) Reset() {
	*x = CreateCronSqlQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronSqlQueryResponse) ProtoMessage() {}

func (x *CreateCronSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*CreateCronSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{2}
}

type CreateCronSqlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronSqlQuery `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateCronSqlQueryRequest) Reset() {
	*x = CreateCronSqlQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronSqlQueryRequest) ProtoMessage() {}

func (x *CreateCronSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*CreateCronSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCronSqlQueryRequest) GetItem() *v1alpha1.CronSqlQuery {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateCronSqlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronSqlQuery `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateCronSqlQueryRequest) Reset() {
	*x = UpdateCronSqlQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronSqlQueryRequest) ProtoMessage() {}

func (x *UpdateCronSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*UpdateCronSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCronSqlQueryRequest) GetItem() *v1alpha1.CronSqlQuery {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateCronSqlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCronSqlQueryResponse) Reset() {
	*x = UpdateCronSqlQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronSqlQueryResponse) ProtoMessage() {}

func (x *UpdateCronSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*UpdateCronSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{5}
}

type GetCronSqlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCronSqlQueryRequest) Reset() {
	*x = GetCronSqlQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronSqlQueryRequest) ProtoMessage() {}

func (x *GetCronSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*GetCronSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{6}
}

func (x *GetCronSqlQueryRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetCronSqlQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCronSqlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronSqlQuery `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Yaml string                 `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetCronSqlQueryResponse) Reset() {
	*x = GetCronSqlQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronSqlQueryResponse) ProtoMessage() {}

func (x *GetCronSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*GetCronSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{7}
}

func (x *GetCronSqlQueryResponse) GetItem() *v1alpha1.CronSqlQuery {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetCronSqlQueryResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeleteCronSqlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteCronSqlQueryRequest) Reset() {
	*x = DeleteCronSqlQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronSqlQueryRequest) ProtoMessage() {}

func (x *DeleteCronSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*DeleteCronSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCronSqlQueryRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteCronSqlQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteCronSqlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCronSqlQueryResponse) Reset() {
	*x = DeleteCronSqlQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronSqlQueryResponse) ProtoMessage() {}

func (x *DeleteCronSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*DeleteCronSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{9}
}

type RunCronSqlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronSqlQuery `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *RunCronSqlQueryRequest) Reset() {
	*x = RunCronSqlQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronSqlQueryRequest) ProtoMessage() {}

func (x *RunCronSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*RunCronSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{10}
}

func (x *RunCronSqlQueryRequest) GetItem() *v1alpha1.CronSqlQuery {
	if x != nil {
		return x.Item
	}
	return nil
}

type RunCronSqlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunCronSqlQueryResponse) Reset() {
	*x = RunCronSqlQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronSqlQueryResponse) ProtoMessage() {}

func (x *RunCronSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*RunCronSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP(), []int{11}
}

var File_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDesc = []byte{
	0x0a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x79, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x53,
	0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x73, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x73, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e,
	0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x4d, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x16, 0x52, 0x75, 0x6e,
	0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x19, 0x0a, 0x17, 0x52,
	0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd6, 0x0a, 0x0a, 0x13, 0x43, 0x72, 0x6f, 0x6e, 0x53,
	0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd4,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x73, 0x12, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x51, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x52, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0xd5, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xf6, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x51, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71,
	0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x1a,
	0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a,
	0x01, 0x2a, 0x12, 0xde, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f,
	0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x51, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0xd9, 0x01, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x53,
	0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x72, 0x75, 0x6e, 0x42,
	0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x71,
	0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescData = file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDesc
)

func file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescData)
	})
	return file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDescData
}

var file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_goTypes = []interface{}{
	(*ListCronSqlQuerysRequest)(nil),   // 0: github.com.metaprov.modelaapi.services.cronsqlquery.v1.ListCronSqlQuerysRequest
	(*ListCronSqlQuerysResponse)(nil),  // 1: github.com.metaprov.modelaapi.services.cronsqlquery.v1.ListCronSqlQuerysResponse
	(*CreateCronSqlQueryResponse)(nil), // 2: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CreateCronSqlQueryResponse
	(*CreateCronSqlQueryRequest)(nil),  // 3: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CreateCronSqlQueryRequest
	(*UpdateCronSqlQueryRequest)(nil),  // 4: github.com.metaprov.modelaapi.services.cronsqlquery.v1.UpdateCronSqlQueryRequest
	(*UpdateCronSqlQueryResponse)(nil), // 5: github.com.metaprov.modelaapi.services.cronsqlquery.v1.UpdateCronSqlQueryResponse
	(*GetCronSqlQueryRequest)(nil),     // 6: github.com.metaprov.modelaapi.services.cronsqlquery.v1.GetCronSqlQueryRequest
	(*GetCronSqlQueryResponse)(nil),    // 7: github.com.metaprov.modelaapi.services.cronsqlquery.v1.GetCronSqlQueryResponse
	(*DeleteCronSqlQueryRequest)(nil),  // 8: github.com.metaprov.modelaapi.services.cronsqlquery.v1.DeleteCronSqlQueryRequest
	(*DeleteCronSqlQueryResponse)(nil), // 9: github.com.metaprov.modelaapi.services.cronsqlquery.v1.DeleteCronSqlQueryResponse
	(*RunCronSqlQueryRequest)(nil),     // 10: github.com.metaprov.modelaapi.services.cronsqlquery.v1.RunCronSqlQueryRequest
	(*RunCronSqlQueryResponse)(nil),    // 11: github.com.metaprov.modelaapi.services.cronsqlquery.v1.RunCronSqlQueryResponse
	nil,                                // 12: github.com.metaprov.modelaapi.services.cronsqlquery.v1.ListCronSqlQuerysRequest.LabelsEntry
	(*v1alpha1.CronSqlQueryList)(nil),  // 13: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronSqlQueryList
	(*v1alpha1.CronSqlQuery)(nil),      // 14: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronSqlQuery
}
var file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_depIdxs = []int32{
	12, // 0: github.com.metaprov.modelaapi.services.cronsqlquery.v1.ListCronSqlQuerysRequest.labels:type_name -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.ListCronSqlQuerysRequest.LabelsEntry
	13, // 1: github.com.metaprov.modelaapi.services.cronsqlquery.v1.ListCronSqlQuerysResponse.items:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronSqlQueryList
	14, // 2: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CreateCronSqlQueryRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronSqlQuery
	14, // 3: github.com.metaprov.modelaapi.services.cronsqlquery.v1.UpdateCronSqlQueryRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronSqlQuery
	14, // 4: github.com.metaprov.modelaapi.services.cronsqlquery.v1.GetCronSqlQueryResponse.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronSqlQuery
	14, // 5: github.com.metaprov.modelaapi.services.cronsqlquery.v1.RunCronSqlQueryRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronSqlQuery
	0,  // 6: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.ListCronSqlQuerys:input_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.ListCronSqlQuerysRequest
	3,  // 7: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.CreateCronSqlQuery:input_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.CreateCronSqlQueryRequest
	6,  // 8: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.GetCronSqlQuery:input_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.GetCronSqlQueryRequest
	4,  // 9: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.UpdateCronSqlQuery:input_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.UpdateCronSqlQueryRequest
	8,  // 10: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.DeleteCronSqlQuery:input_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.DeleteCronSqlQueryRequest
	10, // 11: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.RunCronSqlQuery:input_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.RunCronSqlQueryRequest
	1,  // 12: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.ListCronSqlQuerys:output_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.ListCronSqlQuerysResponse
	2,  // 13: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.CreateCronSqlQuery:output_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.CreateCronSqlQueryResponse
	7,  // 14: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.GetCronSqlQuery:output_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.GetCronSqlQueryResponse
	5,  // 15: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.UpdateCronSqlQuery:output_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.UpdateCronSqlQueryResponse
	9,  // 16: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.DeleteCronSqlQuery:output_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.DeleteCronSqlQueryResponse
	11, // 17: github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService.RunCronSqlQuery:output_type -> github.com.metaprov.modelaapi.services.cronsqlquery.v1.RunCronSqlQueryResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_init() }
func file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_init() {
	if File_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronSqlQuerysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronSqlQuerysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronSqlQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronSqlQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronSqlQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronSqlQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronSqlQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronSqlQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronSqlQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronSqlQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronSqlQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronSqlQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_depIdxs,
		MessageInfos:      file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto = out.File
	file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_rawDesc = nil
	file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_goTypes = nil
	file_github_com_metaprov_modelaapi_services_cronsqlquery_v1_cronsqlquery_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CronSqlQueryServiceClient is the client API for CronSqlQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronSqlQueryServiceClient interface {
	ListCronSqlQuerys(ctx context.Context, in *ListCronSqlQuerysRequest, opts ...grpc.CallOption) (*ListCronSqlQuerysResponse, error)
	CreateCronSqlQuery(ctx context.Context, in *CreateCronSqlQueryRequest, opts ...grpc.CallOption) (*CreateCronSqlQueryResponse, error)
	GetCronSqlQuery(ctx context.Context, in *GetCronSqlQueryRequest, opts ...grpc.CallOption) (*GetCronSqlQueryResponse, error)
	UpdateCronSqlQuery(ctx context.Context, in *UpdateCronSqlQueryRequest, opts ...grpc.CallOption) (*UpdateCronSqlQueryResponse, error)
	DeleteCronSqlQuery(ctx context.Context, in *DeleteCronSqlQueryRequest, opts ...grpc.CallOption) (*DeleteCronSqlQueryResponse, error)
	RunCronSqlQuery(ctx context.Context, in *RunCronSqlQueryRequest, opts ...grpc.CallOption) (*RunCronSqlQueryResponse, error)
}

type cronSqlQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCronSqlQueryServiceClient(cc grpc.ClientConnInterface) CronSqlQueryServiceClient {
	return &cronSqlQueryServiceClient{cc}
}

func (c *cronSqlQueryServiceClient) ListCronSqlQuerys(ctx context.Context, in *ListCronSqlQuerysRequest, opts ...grpc.CallOption) (*ListCronSqlQuerysResponse, error) {
	out := new(ListCronSqlQuerysResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/ListCronSqlQuerys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronSqlQueryServiceClient) CreateCronSqlQuery(ctx context.Context, in *CreateCronSqlQueryRequest, opts ...grpc.CallOption) (*CreateCronSqlQueryResponse, error) {
	out := new(CreateCronSqlQueryResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/CreateCronSqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronSqlQueryServiceClient) GetCronSqlQuery(ctx context.Context, in *GetCronSqlQueryRequest, opts ...grpc.CallOption) (*GetCronSqlQueryResponse, error) {
	out := new(GetCronSqlQueryResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/GetCronSqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronSqlQueryServiceClient) UpdateCronSqlQuery(ctx context.Context, in *UpdateCronSqlQueryRequest, opts ...grpc.CallOption) (*UpdateCronSqlQueryResponse, error) {
	out := new(UpdateCronSqlQueryResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/UpdateCronSqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronSqlQueryServiceClient) DeleteCronSqlQuery(ctx context.Context, in *DeleteCronSqlQueryRequest, opts ...grpc.CallOption) (*DeleteCronSqlQueryResponse, error) {
	out := new(DeleteCronSqlQueryResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/DeleteCronSqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronSqlQueryServiceClient) RunCronSqlQuery(ctx context.Context, in *RunCronSqlQueryRequest, opts ...grpc.CallOption) (*RunCronSqlQueryResponse, error) {
	out := new(RunCronSqlQueryResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/RunCronSqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronSqlQueryServiceServer is the server API for CronSqlQueryService service.
type CronSqlQueryServiceServer interface {
	ListCronSqlQuerys(context.Context, *ListCronSqlQuerysRequest) (*ListCronSqlQuerysResponse, error)
	CreateCronSqlQuery(context.Context, *CreateCronSqlQueryRequest) (*CreateCronSqlQueryResponse, error)
	GetCronSqlQuery(context.Context, *GetCronSqlQueryRequest) (*GetCronSqlQueryResponse, error)
	UpdateCronSqlQuery(context.Context, *UpdateCronSqlQueryRequest) (*UpdateCronSqlQueryResponse, error)
	DeleteCronSqlQuery(context.Context, *DeleteCronSqlQueryRequest) (*DeleteCronSqlQueryResponse, error)
	RunCronSqlQuery(context.Context, *RunCronSqlQueryRequest) (*RunCronSqlQueryResponse, error)
}

// UnimplementedCronSqlQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCronSqlQueryServiceServer struct {
}

func (*UnimplementedCronSqlQueryServiceServer) ListCronSqlQuerys(context.Context, *ListCronSqlQuerysRequest) (*ListCronSqlQuerysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronSqlQuerys not implemented")
}
func (*UnimplementedCronSqlQueryServiceServer) CreateCronSqlQuery(context.Context, *CreateCronSqlQueryRequest) (*CreateCronSqlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronSqlQuery not implemented")
}
func (*UnimplementedCronSqlQueryServiceServer) GetCronSqlQuery(context.Context, *GetCronSqlQueryRequest) (*GetCronSqlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronSqlQuery not implemented")
}
func (*UnimplementedCronSqlQueryServiceServer) UpdateCronSqlQuery(context.Context, *UpdateCronSqlQueryRequest) (*UpdateCronSqlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronSqlQuery not implemented")
}
func (*UnimplementedCronSqlQueryServiceServer) DeleteCronSqlQuery(context.Context, *DeleteCronSqlQueryRequest) (*DeleteCronSqlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronSqlQuery not implemented")
}
func (*UnimplementedCronSqlQueryServiceServer) RunCronSqlQuery(context.Context, *RunCronSqlQueryRequest) (*RunCronSqlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCronSqlQuery not implemented")
}

func RegisterCronSqlQueryServiceServer(s *grpc.Server, srv CronSqlQueryServiceServer) {
	s.RegisterService(&_CronSqlQueryService_serviceDesc, srv)
}

func _CronSqlQueryService_ListCronSqlQuerys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronSqlQuerysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronSqlQueryServiceServer).ListCronSqlQuerys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/ListCronSqlQuerys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronSqlQueryServiceServer).ListCronSqlQuerys(ctx, req.(*ListCronSqlQuerysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronSqlQueryService_CreateCronSqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronSqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronSqlQueryServiceServer).CreateCronSqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/CreateCronSqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronSqlQueryServiceServer).CreateCronSqlQuery(ctx, req.(*CreateCronSqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronSqlQueryService_GetCronSqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronSqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronSqlQueryServiceServer).GetCronSqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/GetCronSqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronSqlQueryServiceServer).GetCronSqlQuery(ctx, req.(*GetCronSqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronSqlQueryService_UpdateCronSqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCronSqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronSqlQueryServiceServer).UpdateCronSqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/UpdateCronSqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronSqlQueryServiceServer).UpdateCronSqlQuery(ctx, req.(*UpdateCronSqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronSqlQueryService_DeleteCronSqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronSqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronSqlQueryServiceServer).DeleteCronSqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/DeleteCronSqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronSqlQueryServiceServer).DeleteCronSqlQuery(ctx, req.(*DeleteCronSqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronSqlQueryService_RunCronSqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCronSqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronSqlQueryServiceServer).RunCronSqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService/RunCronSqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronSqlQueryServiceServer).RunCronSqlQuery(ctx, req.(*RunCronSqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronSqlQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.cronsqlquery.v1.CronSqlQueryService",
	HandlerType: (*CronSqlQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCronSqlQuerys",
			Handler:    _CronSqlQueryService_ListCronSqlQuerys_Handler,
		},
		{
			MethodName: "CreateCronSqlQuery",
			Handler:    _CronSqlQueryService_CreateCronSqlQuery_Handler,
		},
		{
			MethodName: "GetCronSqlQuery",
			Handler:    _CronSqlQueryService_GetCronSqlQuery_Handler,
		},
		{
			MethodName: "UpdateCronSqlQuery",
			Handler:    _CronSqlQueryService_UpdateCronSqlQuery_Handler,
		},
		{
			MethodName: "DeleteCronSqlQuery",
			Handler:    _CronSqlQueryService_DeleteCronSqlQuery_Handler,
		},
		{
			MethodName: "RunCronSqlQuery",
			Handler:    _CronSqlQueryService_RunCronSqlQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/cronsqlquery/v1/cronsqlquery.proto",
}
