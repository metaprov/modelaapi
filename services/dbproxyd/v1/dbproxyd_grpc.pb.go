// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/dbproxyd/v1/dbproxyd.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1alpha12 "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1"
	v1alpha14 "github.com/metaprov/modelaapi/pkg/apis/inference/v1alpha1"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1"
	v1alpha11 "github.com/metaprov/modelaapi/pkg/apis/team/v1alpha1"
	v1alpha13 "github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseProxyServiceClient is the client API for DatabaseProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseProxyServiceClient interface {
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*v1alpha1.Account, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*v1alpha1.Account, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*v1alpha1.Account, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// alerts
	ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error)
	GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*v1alpha1.Alert, error)
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*v1alpha1.Alert, error)
	UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*v1alpha1.Alert, error)
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListTodos(ctx context.Context, in *ListTodosRequest, opts ...grpc.CallOption) (*ListTodosResponse, error)
	GetTodo(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*v1alpha11.Todo, error)
	CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*v1alpha11.Todo, error)
	UpdateTodo(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*v1alpha11.Todo, error)
	DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListMeetings(ctx context.Context, in *ListMeetingsRequest, opts ...grpc.CallOption) (*ListMeetingsResponse, error)
	GetMeeting(ctx context.Context, in *GetMeetingRequest, opts ...grpc.CallOption) (*v1alpha11.Meeting, error)
	CreateMeeting(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*v1alpha11.Meeting, error)
	UpdateMeeting(ctx context.Context, in *UpdateMeetingRequest, opts ...grpc.CallOption) (*v1alpha11.Meeting, error)
	DeleteMeeting(ctx context.Context, in *DeleteMeetingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListAttachments(ctx context.Context, in *ListAttachmentsRequest, opts ...grpc.CallOption) (*ListAttachmentsResponse, error)
	GetAttachment(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*v1alpha1.Attachment, error)
	CreateAttachment(ctx context.Context, in *CreateAttachmentRequest, opts ...grpc.CallOption) (*v1alpha1.Attachment, error)
	UpdateAttachment(ctx context.Context, in *UpdateAttachmentRequest, opts ...grpc.CallOption) (*v1alpha1.Attachment, error)
	DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// api token
	ListApiTokens(ctx context.Context, in *ListApiTokensRequest, opts ...grpc.CallOption) (*ListApiTokensResponse, error)
	GetApiToken(ctx context.Context, in *GetApiTokenRequest, opts ...grpc.CallOption) (*v1alpha1.ApiToken, error)
	CreateApiToken(ctx context.Context, in *CreateApiTokenRequest, opts ...grpc.CallOption) (*v1alpha1.ApiToken, error)
	UpdateApiToken(ctx context.Context, in *UpdateApiTokenRequest, opts ...grpc.CallOption) (*v1alpha1.ApiToken, error)
	DeleteApiToken(ctx context.Context, in *DeleteApiTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// connection
	ListConnections(ctx context.Context, in *ListConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error)
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*v1alpha1.Connection, error)
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*v1alpha1.Connection, error)
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*v1alpha1.Connection, error)
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// lab
	ListLabs(ctx context.Context, in *ListLabsRequest, opts ...grpc.CallOption) (*ListLabsResponse, error)
	GetLab(ctx context.Context, in *GetLabRequest, opts ...grpc.CallOption) (*v1alpha1.Lab, error)
	CreateLab(ctx context.Context, in *CreateLabRequest, opts ...grpc.CallOption) (*v1alpha1.Lab, error)
	UpdateLab(ctx context.Context, in *UpdateLabRequest, opts ...grpc.CallOption) (*v1alpha1.Lab, error)
	DeleteLab(ctx context.Context, in *DeleteLabRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// license
	ListLicenses(ctx context.Context, in *ListLicensesRequest, opts ...grpc.CallOption) (*ListLicensesResponse, error)
	GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*v1alpha1.License, error)
	CreateLicense(ctx context.Context, in *CreateLicenseRequest, opts ...grpc.CallOption) (*v1alpha1.License, error)
	UpdateLicense(ctx context.Context, in *UpdateLicenseRequest, opts ...grpc.CallOption) (*v1alpha1.License, error)
	DeleteLicense(ctx context.Context, in *DeleteLicenseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// notifer
	ListNotifiers(ctx context.Context, in *ListNotifiersRequest, opts ...grpc.CallOption) (*ListNotifiersResponse, error)
	GetNotifier(ctx context.Context, in *GetNotifierRequest, opts ...grpc.CallOption) (*v1alpha1.Notifier, error)
	CreateNotifier(ctx context.Context, in *CreateNotifierRequest, opts ...grpc.CallOption) (*v1alpha1.Notifier, error)
	UpdateNotifier(ctx context.Context, in *UpdateNotifierRequest, opts ...grpc.CallOption) (*v1alpha1.Notifier, error)
	DeleteNotifier(ctx context.Context, in *DeleteNotifierRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// servingsite
	ListServingSites(ctx context.Context, in *ListServingsitesRequest, opts ...grpc.CallOption) (*ListServingsitesResponse, error)
	GetServingSite(ctx context.Context, in *GetServingsiteRequest, opts ...grpc.CallOption) (*v1alpha1.ServingSite, error)
	CreateServingSite(ctx context.Context, in *CreateServingsiteRequest, opts ...grpc.CallOption) (*v1alpha1.ServingSite, error)
	UpdateServingSite(ctx context.Context, in *UpdateServingsiteRequest, opts ...grpc.CallOption) (*v1alpha1.ServingSite, error)
	DeleteServingSite(ctx context.Context, in *DeleteServingsiteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// servingsite
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error)
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error)
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error)
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// virtual bucket
	ListVirtualBuckets(ctx context.Context, in *ListVirtualBucketsRequest, opts ...grpc.CallOption) (*ListVirtualBucketsResponse, error)
	GetVirtualBucket(ctx context.Context, in *GetVirtualBucketRequest, opts ...grpc.CallOption) (*v1alpha1.VirtualBucket, error)
	CreateVirtualBucket(ctx context.Context, in *CreateVirtualBucketRequest, opts ...grpc.CallOption) (*v1alpha1.VirtualBucket, error)
	UpdateVirtualBucket(ctx context.Context, in *UpdateVirtualBucketRequest, opts ...grpc.CallOption) (*v1alpha1.VirtualBucket, error)
	DeleteVirtualBucket(ctx context.Context, in *DeleteVirtualBucketRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// data pipeline
	ListDataPipelines(ctx context.Context, in *ListDataPipelinesRequest, opts ...grpc.CallOption) (*ListDataPipelinesResponse, error)
	GetDataPipeline(ctx context.Context, in *GetDataPipelineRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipeline, error)
	CreateDataPipeline(ctx context.Context, in *CreateDataPipelineRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipeline, error)
	UpdateDataPipeline(ctx context.Context, in *UpdateDataPipelineRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipeline, error)
	DeleteDataPipeline(ctx context.Context, in *DeleteDataPipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// data pipeline run
	ListDataPipelineRuns(ctx context.Context, in *ListDataPipelineRunsRequest, opts ...grpc.CallOption) (*ListDataPipelineRunsResponse, error)
	GetDataPipelineRun(ctx context.Context, in *GetDataPipelineRunRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipelineRun, error)
	CreateDataPipelineRun(ctx context.Context, in *CreateDataPipelineRunRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipelineRun, error)
	UpdateDataPipelineRun(ctx context.Context, in *UpdateDataPipelineRunRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipelineRun, error)
	DeleteDataPipelineRun(ctx context.Context, in *DeleteDataPipelineRunRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// data pipeline run
	ListDataProducts(ctx context.Context, in *ListDataProductsRequest, opts ...grpc.CallOption) (*ListDataProductsResponse, error)
	GetDataProduct(ctx context.Context, in *GetDataProductRequest, opts ...grpc.CallOption) (*v1alpha12.DataProduct, error)
	CreateDataProduct(ctx context.Context, in *CreateDataProductRequest, opts ...grpc.CallOption) (*v1alpha12.DataProduct, error)
	UpdateDataProduct(ctx context.Context, in *UpdateDataProductRequest, opts ...grpc.CallOption) (*v1alpha12.DataProduct, error)
	DeleteDataProduct(ctx context.Context, in *DeleteDataProductRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListDataProductVersions(ctx context.Context, in *ListDataProductVersionsRequest, opts ...grpc.CallOption) (*ListDataProductVersionsResponse, error)
	GetDataProductVersion(ctx context.Context, in *GetDataProductVersionRequest, opts ...grpc.CallOption) (*v1alpha12.DataProductVersion, error)
	CreateDataProductVersion(ctx context.Context, in *CreateDataProductVersionRequest, opts ...grpc.CallOption) (*v1alpha12.DataProductVersion, error)
	UpdateDataProductVersion(ctx context.Context, in *UpdateDataProductVersionRequest, opts ...grpc.CallOption) (*v1alpha12.DataProductVersion, error)
	DeleteDataProductVersion(ctx context.Context, in *DeleteDataProductVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error)
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*v1alpha12.Dataset, error)
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*v1alpha12.Dataset, error)
	UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*v1alpha12.Dataset, error)
	DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListDataSources(ctx context.Context, in *ListDatasourcesRequest, opts ...grpc.CallOption) (*ListDatasourcesResponse, error)
	GetDataSource(ctx context.Context, in *GetDatasourceRequest, opts ...grpc.CallOption) (*v1alpha12.DataSource, error)
	CreateDataSource(ctx context.Context, in *CreateDatasourceRequest, opts ...grpc.CallOption) (*v1alpha12.DataSource, error)
	UpdateDataSource(ctx context.Context, in *UpdateDatasourceRequest, opts ...grpc.CallOption) (*v1alpha12.DataSource, error)
	DeleteDataSource(ctx context.Context, in *DeleteDatasourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*v1alpha12.Entity, error)
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*v1alpha12.Entity, error)
	UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*v1alpha12.Entity, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListModelClass(ctx context.Context, in *ListModelClassesRequest, opts ...grpc.CallOption) (*ListModelClassesResponse, error)
	GetModelClass(ctx context.Context, in *GetModelClassRequest, opts ...grpc.CallOption) (*v1alpha13.ModelClass, error)
	CreateModelClass(ctx context.Context, in *CreateModelClassRequest, opts ...grpc.CallOption) (*v1alpha13.ModelClass, error)
	UpdateModelClas(ctx context.Context, in *UpdateModelClassRequest, opts ...grpc.CallOption) (*v1alpha13.ModelClass, error)
	DeleteModelClass(ctx context.Context, in *DeleteModelClassRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListFeatureHistograms(ctx context.Context, in *ListFeatureHistogramsRequest, opts ...grpc.CallOption) (*ListFeatureHistogramsResponse, error)
	GetFeatureHistogram(ctx context.Context, in *GetFeatureHistogramRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureHistogram, error)
	CreateFeatureHistogram(ctx context.Context, in *CreateFeatureHistogramRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureHistogram, error)
	UpdateFeatureHistogram(ctx context.Context, in *UpdateFeatureHistogramRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureHistogram, error)
	DeleteFeatureHistogram(ctx context.Context, in *DeleteFeatureHistogramRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListFeatureGroups(ctx context.Context, in *ListFeatureGroupRequest, opts ...grpc.CallOption) (*ListFeatureGroupResponse, error)
	GetFeatureGroup(ctx context.Context, in *GetFeatureGroupRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureGroup, error)
	CreateFeatureGroup(ctx context.Context, in *CreateFeatureGroupRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureGroup, error)
	UpdateFeatureGroup(ctx context.Context, in *UpdateFeatureGroupRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureGroup, error)
	DeleteFeatureGroup(ctx context.Context, in *DeleteFeatureGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListRecipes(ctx context.Context, in *ListRecipesRequest, opts ...grpc.CallOption) (*ListRecipesResponse, error)
	GetRecipe(ctx context.Context, in *GetRecipeRequest, opts ...grpc.CallOption) (*v1alpha12.Recipe, error)
	CreateRecipe(ctx context.Context, in *CreateRecipeRequest, opts ...grpc.CallOption) (*v1alpha12.Recipe, error)
	UpdateRecipe(ctx context.Context, in *UpdateRecipeRequest, opts ...grpc.CallOption) (*v1alpha12.Recipe, error)
	DeleteRecipe(ctx context.Context, in *DeleteRecipeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListRecipeRuns(ctx context.Context, in *ListRecipeRunsRequest, opts ...grpc.CallOption) (*ListRecipeRunsResponse, error)
	GetRecipeRun(ctx context.Context, in *GetRecipeRunRequest, opts ...grpc.CallOption) (*v1alpha12.RecipeRun, error)
	CreateRecipeRun(ctx context.Context, in *CreateRecipeRunRequest, opts ...grpc.CallOption) (*v1alpha12.RecipeRun, error)
	UpdateRecipeRun(ctx context.Context, in *UpdateRecipeRunRequest, opts ...grpc.CallOption) (*v1alpha12.RecipeRun, error)
	DeleteRecipeRun(ctx context.Context, in *DeleteRecipeRunRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error)
	GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*v1alpha13.Report, error)
	CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*v1alpha13.Report, error)
	UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*v1alpha13.Report, error)
	DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListStudies(ctx context.Context, in *ListStudiesRequest, opts ...grpc.CallOption) (*ListStudiesResponse, error)
	GetStudy(ctx context.Context, in *GetStudyRequest, opts ...grpc.CallOption) (*v1alpha13.Study, error)
	CreateStudy(ctx context.Context, in *CreateStudyRequest, opts ...grpc.CallOption) (*v1alpha13.Study, error)
	UpdateStudy(ctx context.Context, in *UpdateStudyRequest, opts ...grpc.CallOption) (*v1alpha13.Study, error)
	DeleteStudy(ctx context.Context, in *DeleteStudyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*v1alpha13.Model, error)
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*v1alpha13.Model, error)
	UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*v1alpha13.Model, error)
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListPredictions(ctx context.Context, in *ListPredictionsRequest, opts ...grpc.CallOption) (*ListPredictionsResponse, error)
	GetPrediction(ctx context.Context, in *GetPredictionRequest, opts ...grpc.CallOption) (*v1alpha14.Prediction, error)
	CreatePrediction(ctx context.Context, in *CreatePredictionRequest, opts ...grpc.CallOption) (*v1alpha14.Prediction, error)
	UpdatePrediction(ctx context.Context, in *UpdatePredictionRequest, opts ...grpc.CallOption) (*v1alpha14.Prediction, error)
	DeletePrediction(ctx context.Context, in *DeletePredictionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListPredictors(ctx context.Context, in *ListPredictorsRequest, opts ...grpc.CallOption) (*ListPredictorsResponse, error)
	GetPredictor(ctx context.Context, in *GetPredictorRequest, opts ...grpc.CallOption) (*v1alpha14.Predictor, error)
	CreatePredictor(ctx context.Context, in *CreatePredictorRequest, opts ...grpc.CallOption) (*v1alpha14.Predictor, error)
	UpdatePredictor(ctx context.Context, in *UpdatePredictorRequest, opts ...grpc.CallOption) (*v1alpha14.Predictor, error)
	DeletePredictor(ctx context.Context, in *DeletePredictorRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListReviews(ctx context.Context, in *ListReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error)
	GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*v1alpha11.Review, error)
	CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*v1alpha11.Review, error)
	UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*v1alpha11.Review, error)
	DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListPostMortems(ctx context.Context, in *ListPostMortemsRequest, opts ...grpc.CallOption) (*ListPostMortemsResponse, error)
	GetPostMortem(ctx context.Context, in *GetPostMortemRequest, opts ...grpc.CallOption) (*v1alpha11.PostMortem, error)
	CreatePostMortem(ctx context.Context, in *CreatePostMortemRequest, opts ...grpc.CallOption) (*v1alpha11.PostMortem, error)
	UpdatePostMortem(ctx context.Context, in *UpdatePostMortemRequest, opts ...grpc.CallOption) (*v1alpha11.PostMortem, error)
	DeletePostMortem(ctx context.Context, in *DeletePostMortemRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListRunBooks(ctx context.Context, in *ListRunbooksRequest, opts ...grpc.CallOption) (*ListRunbooksResponse, error)
	GetRunBook(ctx context.Context, in *GetRunbookRequest, opts ...grpc.CallOption) (*v1alpha11.RunBook, error)
	CreateRunBook(ctx context.Context, in *CreateRunbookRequest, opts ...grpc.CallOption) (*v1alpha11.RunBook, error)
	UpdateRunBook(ctx context.Context, in *UpdateRunbookRequest, opts ...grpc.CallOption) (*v1alpha11.RunBook, error)
	DeleteRunBook(ctx context.Context, in *DeleteRunbookRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListDataApp(ctx context.Context, in *ListDataAppRequest, opts ...grpc.CallOption) (*ListDataAppResponse, error)
	GetDataApp(ctx context.Context, in *GetDataAppRequest, opts ...grpc.CallOption) (*v1alpha14.DataApp, error)
	CreateDataApp(ctx context.Context, in *CreateDataAppRequest, opts ...grpc.CallOption) (*v1alpha14.DataApp, error)
	UpdateDataApp(ctx context.Context, in *UpdateDataAppRequest, opts ...grpc.CallOption) (*v1alpha14.DataApp, error)
	DeleteDataApp(ctx context.Context, in *DeleteDataAppRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type databaseProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseProxyServiceClient(cc grpc.ClientConnInterface) DatabaseProxyServiceClient {
	return &databaseProxyServiceClient{cc}
}

func (c *databaseProxyServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*v1alpha1.Account, error) {
	out := new(v1alpha1.Account)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*v1alpha1.Account, error) {
	out := new(v1alpha1.Account)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*v1alpha1.Account, error) {
	out := new(v1alpha1.Account)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error) {
	out := new(ListAlertsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*v1alpha1.Alert, error) {
	out := new(v1alpha1.Alert)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*v1alpha1.Alert, error) {
	out := new(v1alpha1.Alert)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*v1alpha1.Alert, error) {
	out := new(v1alpha1.Alert)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListTodos(ctx context.Context, in *ListTodosRequest, opts ...grpc.CallOption) (*ListTodosResponse, error) {
	out := new(ListTodosResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetTodo(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*v1alpha11.Todo, error) {
	out := new(v1alpha11.Todo)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*v1alpha11.Todo, error) {
	out := new(v1alpha11.Todo)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateTodo(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*v1alpha11.Todo, error) {
	out := new(v1alpha11.Todo)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListMeetings(ctx context.Context, in *ListMeetingsRequest, opts ...grpc.CallOption) (*ListMeetingsResponse, error) {
	out := new(ListMeetingsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListMeetings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetMeeting(ctx context.Context, in *GetMeetingRequest, opts ...grpc.CallOption) (*v1alpha11.Meeting, error) {
	out := new(v1alpha11.Meeting)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateMeeting(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*v1alpha11.Meeting, error) {
	out := new(v1alpha11.Meeting)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateMeeting(ctx context.Context, in *UpdateMeetingRequest, opts ...grpc.CallOption) (*v1alpha11.Meeting, error) {
	out := new(v1alpha11.Meeting)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteMeeting(ctx context.Context, in *DeleteMeetingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListAttachments(ctx context.Context, in *ListAttachmentsRequest, opts ...grpc.CallOption) (*ListAttachmentsResponse, error) {
	out := new(ListAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetAttachment(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*v1alpha1.Attachment, error) {
	out := new(v1alpha1.Attachment)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateAttachment(ctx context.Context, in *CreateAttachmentRequest, opts ...grpc.CallOption) (*v1alpha1.Attachment, error) {
	out := new(v1alpha1.Attachment)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateAttachment(ctx context.Context, in *UpdateAttachmentRequest, opts ...grpc.CallOption) (*v1alpha1.Attachment, error) {
	out := new(v1alpha1.Attachment)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListApiTokens(ctx context.Context, in *ListApiTokensRequest, opts ...grpc.CallOption) (*ListApiTokensResponse, error) {
	out := new(ListApiTokensResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListApiTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetApiToken(ctx context.Context, in *GetApiTokenRequest, opts ...grpc.CallOption) (*v1alpha1.ApiToken, error) {
	out := new(v1alpha1.ApiToken)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetApiToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateApiToken(ctx context.Context, in *CreateApiTokenRequest, opts ...grpc.CallOption) (*v1alpha1.ApiToken, error) {
	out := new(v1alpha1.ApiToken)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateApiToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateApiToken(ctx context.Context, in *UpdateApiTokenRequest, opts ...grpc.CallOption) (*v1alpha1.ApiToken, error) {
	out := new(v1alpha1.ApiToken)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateApiToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteApiToken(ctx context.Context, in *DeleteApiTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteApiToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListConnections(ctx context.Context, in *ListConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error) {
	out := new(ListConnectionsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*v1alpha1.Connection, error) {
	out := new(v1alpha1.Connection)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*v1alpha1.Connection, error) {
	out := new(v1alpha1.Connection)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*v1alpha1.Connection, error) {
	out := new(v1alpha1.Connection)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListLabs(ctx context.Context, in *ListLabsRequest, opts ...grpc.CallOption) (*ListLabsResponse, error) {
	out := new(ListLabsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListLabs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetLab(ctx context.Context, in *GetLabRequest, opts ...grpc.CallOption) (*v1alpha1.Lab, error) {
	out := new(v1alpha1.Lab)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetLab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateLab(ctx context.Context, in *CreateLabRequest, opts ...grpc.CallOption) (*v1alpha1.Lab, error) {
	out := new(v1alpha1.Lab)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateLab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateLab(ctx context.Context, in *UpdateLabRequest, opts ...grpc.CallOption) (*v1alpha1.Lab, error) {
	out := new(v1alpha1.Lab)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateLab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteLab(ctx context.Context, in *DeleteLabRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteLab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListLicenses(ctx context.Context, in *ListLicensesRequest, opts ...grpc.CallOption) (*ListLicensesResponse, error) {
	out := new(ListLicensesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListLicenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*v1alpha1.License, error) {
	out := new(v1alpha1.License)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateLicense(ctx context.Context, in *CreateLicenseRequest, opts ...grpc.CallOption) (*v1alpha1.License, error) {
	out := new(v1alpha1.License)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateLicense(ctx context.Context, in *UpdateLicenseRequest, opts ...grpc.CallOption) (*v1alpha1.License, error) {
	out := new(v1alpha1.License)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteLicense(ctx context.Context, in *DeleteLicenseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListNotifiers(ctx context.Context, in *ListNotifiersRequest, opts ...grpc.CallOption) (*ListNotifiersResponse, error) {
	out := new(ListNotifiersResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListNotifiers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetNotifier(ctx context.Context, in *GetNotifierRequest, opts ...grpc.CallOption) (*v1alpha1.Notifier, error) {
	out := new(v1alpha1.Notifier)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetNotifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateNotifier(ctx context.Context, in *CreateNotifierRequest, opts ...grpc.CallOption) (*v1alpha1.Notifier, error) {
	out := new(v1alpha1.Notifier)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateNotifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateNotifier(ctx context.Context, in *UpdateNotifierRequest, opts ...grpc.CallOption) (*v1alpha1.Notifier, error) {
	out := new(v1alpha1.Notifier)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateNotifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteNotifier(ctx context.Context, in *DeleteNotifierRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteNotifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListServingSites(ctx context.Context, in *ListServingsitesRequest, opts ...grpc.CallOption) (*ListServingsitesResponse, error) {
	out := new(ListServingsitesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListServingSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetServingSite(ctx context.Context, in *GetServingsiteRequest, opts ...grpc.CallOption) (*v1alpha1.ServingSite, error) {
	out := new(v1alpha1.ServingSite)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetServingSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateServingSite(ctx context.Context, in *CreateServingsiteRequest, opts ...grpc.CallOption) (*v1alpha1.ServingSite, error) {
	out := new(v1alpha1.ServingSite)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateServingSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateServingSite(ctx context.Context, in *UpdateServingsiteRequest, opts ...grpc.CallOption) (*v1alpha1.ServingSite, error) {
	out := new(v1alpha1.ServingSite)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateServingSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteServingSite(ctx context.Context, in *DeleteServingsiteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteServingSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error) {
	out := new(v1alpha1.Tenant)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error) {
	out := new(v1alpha1.Tenant)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error) {
	out := new(v1alpha1.Tenant)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListVirtualBuckets(ctx context.Context, in *ListVirtualBucketsRequest, opts ...grpc.CallOption) (*ListVirtualBucketsResponse, error) {
	out := new(ListVirtualBucketsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListVirtualBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetVirtualBucket(ctx context.Context, in *GetVirtualBucketRequest, opts ...grpc.CallOption) (*v1alpha1.VirtualBucket, error) {
	out := new(v1alpha1.VirtualBucket)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateVirtualBucket(ctx context.Context, in *CreateVirtualBucketRequest, opts ...grpc.CallOption) (*v1alpha1.VirtualBucket, error) {
	out := new(v1alpha1.VirtualBucket)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateVirtualBucket(ctx context.Context, in *UpdateVirtualBucketRequest, opts ...grpc.CallOption) (*v1alpha1.VirtualBucket, error) {
	out := new(v1alpha1.VirtualBucket)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteVirtualBucket(ctx context.Context, in *DeleteVirtualBucketRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListDataPipelines(ctx context.Context, in *ListDataPipelinesRequest, opts ...grpc.CallOption) (*ListDataPipelinesResponse, error) {
	out := new(ListDataPipelinesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetDataPipeline(ctx context.Context, in *GetDataPipelineRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipeline, error) {
	out := new(v1alpha12.DataPipeline)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateDataPipeline(ctx context.Context, in *CreateDataPipelineRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipeline, error) {
	out := new(v1alpha12.DataPipeline)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateDataPipeline(ctx context.Context, in *UpdateDataPipelineRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipeline, error) {
	out := new(v1alpha12.DataPipeline)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteDataPipeline(ctx context.Context, in *DeleteDataPipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListDataPipelineRuns(ctx context.Context, in *ListDataPipelineRunsRequest, opts ...grpc.CallOption) (*ListDataPipelineRunsResponse, error) {
	out := new(ListDataPipelineRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataPipelineRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetDataPipelineRun(ctx context.Context, in *GetDataPipelineRunRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipelineRun, error) {
	out := new(v1alpha12.DataPipelineRun)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateDataPipelineRun(ctx context.Context, in *CreateDataPipelineRunRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipelineRun, error) {
	out := new(v1alpha12.DataPipelineRun)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateDataPipelineRun(ctx context.Context, in *UpdateDataPipelineRunRequest, opts ...grpc.CallOption) (*v1alpha12.DataPipelineRun, error) {
	out := new(v1alpha12.DataPipelineRun)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteDataPipelineRun(ctx context.Context, in *DeleteDataPipelineRunRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListDataProducts(ctx context.Context, in *ListDataProductsRequest, opts ...grpc.CallOption) (*ListDataProductsResponse, error) {
	out := new(ListDataProductsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetDataProduct(ctx context.Context, in *GetDataProductRequest, opts ...grpc.CallOption) (*v1alpha12.DataProduct, error) {
	out := new(v1alpha12.DataProduct)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateDataProduct(ctx context.Context, in *CreateDataProductRequest, opts ...grpc.CallOption) (*v1alpha12.DataProduct, error) {
	out := new(v1alpha12.DataProduct)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateDataProduct(ctx context.Context, in *UpdateDataProductRequest, opts ...grpc.CallOption) (*v1alpha12.DataProduct, error) {
	out := new(v1alpha12.DataProduct)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteDataProduct(ctx context.Context, in *DeleteDataProductRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListDataProductVersions(ctx context.Context, in *ListDataProductVersionsRequest, opts ...grpc.CallOption) (*ListDataProductVersionsResponse, error) {
	out := new(ListDataProductVersionsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataProductVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetDataProductVersion(ctx context.Context, in *GetDataProductVersionRequest, opts ...grpc.CallOption) (*v1alpha12.DataProductVersion, error) {
	out := new(v1alpha12.DataProductVersion)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataProductVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateDataProductVersion(ctx context.Context, in *CreateDataProductVersionRequest, opts ...grpc.CallOption) (*v1alpha12.DataProductVersion, error) {
	out := new(v1alpha12.DataProductVersion)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataProductVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateDataProductVersion(ctx context.Context, in *UpdateDataProductVersionRequest, opts ...grpc.CallOption) (*v1alpha12.DataProductVersion, error) {
	out := new(v1alpha12.DataProductVersion)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataProductVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteDataProductVersion(ctx context.Context, in *DeleteDataProductVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataProductVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error) {
	out := new(ListDatasetsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*v1alpha12.Dataset, error) {
	out := new(v1alpha12.Dataset)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*v1alpha12.Dataset, error) {
	out := new(v1alpha12.Dataset)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*v1alpha12.Dataset, error) {
	out := new(v1alpha12.Dataset)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListDataSources(ctx context.Context, in *ListDatasourcesRequest, opts ...grpc.CallOption) (*ListDatasourcesResponse, error) {
	out := new(ListDatasourcesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetDataSource(ctx context.Context, in *GetDatasourceRequest, opts ...grpc.CallOption) (*v1alpha12.DataSource, error) {
	out := new(v1alpha12.DataSource)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateDataSource(ctx context.Context, in *CreateDatasourceRequest, opts ...grpc.CallOption) (*v1alpha12.DataSource, error) {
	out := new(v1alpha12.DataSource)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateDataSource(ctx context.Context, in *UpdateDatasourceRequest, opts ...grpc.CallOption) (*v1alpha12.DataSource, error) {
	out := new(v1alpha12.DataSource)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteDataSource(ctx context.Context, in *DeleteDatasourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*v1alpha12.Entity, error) {
	out := new(v1alpha12.Entity)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*v1alpha12.Entity, error) {
	out := new(v1alpha12.Entity)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*v1alpha12.Entity, error) {
	out := new(v1alpha12.Entity)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListModelClass(ctx context.Context, in *ListModelClassesRequest, opts ...grpc.CallOption) (*ListModelClassesResponse, error) {
	out := new(ListModelClassesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListModelClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetModelClass(ctx context.Context, in *GetModelClassRequest, opts ...grpc.CallOption) (*v1alpha13.ModelClass, error) {
	out := new(v1alpha13.ModelClass)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetModelClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateModelClass(ctx context.Context, in *CreateModelClassRequest, opts ...grpc.CallOption) (*v1alpha13.ModelClass, error) {
	out := new(v1alpha13.ModelClass)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateModelClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateModelClas(ctx context.Context, in *UpdateModelClassRequest, opts ...grpc.CallOption) (*v1alpha13.ModelClass, error) {
	out := new(v1alpha13.ModelClass)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateModelClas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteModelClass(ctx context.Context, in *DeleteModelClassRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteModelClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListFeatureHistograms(ctx context.Context, in *ListFeatureHistogramsRequest, opts ...grpc.CallOption) (*ListFeatureHistogramsResponse, error) {
	out := new(ListFeatureHistogramsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListFeatureHistograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetFeatureHistogram(ctx context.Context, in *GetFeatureHistogramRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureHistogram, error) {
	out := new(v1alpha12.FeatureHistogram)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetFeatureHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateFeatureHistogram(ctx context.Context, in *CreateFeatureHistogramRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureHistogram, error) {
	out := new(v1alpha12.FeatureHistogram)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateFeatureHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateFeatureHistogram(ctx context.Context, in *UpdateFeatureHistogramRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureHistogram, error) {
	out := new(v1alpha12.FeatureHistogram)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateFeatureHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteFeatureHistogram(ctx context.Context, in *DeleteFeatureHistogramRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteFeatureHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListFeatureGroups(ctx context.Context, in *ListFeatureGroupRequest, opts ...grpc.CallOption) (*ListFeatureGroupResponse, error) {
	out := new(ListFeatureGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListFeatureGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetFeatureGroup(ctx context.Context, in *GetFeatureGroupRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureGroup, error) {
	out := new(v1alpha12.FeatureGroup)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetFeatureGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateFeatureGroup(ctx context.Context, in *CreateFeatureGroupRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureGroup, error) {
	out := new(v1alpha12.FeatureGroup)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateFeatureGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateFeatureGroup(ctx context.Context, in *UpdateFeatureGroupRequest, opts ...grpc.CallOption) (*v1alpha12.FeatureGroup, error) {
	out := new(v1alpha12.FeatureGroup)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateFeatureGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteFeatureGroup(ctx context.Context, in *DeleteFeatureGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteFeatureGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListRecipes(ctx context.Context, in *ListRecipesRequest, opts ...grpc.CallOption) (*ListRecipesResponse, error) {
	out := new(ListRecipesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListRecipes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetRecipe(ctx context.Context, in *GetRecipeRequest, opts ...grpc.CallOption) (*v1alpha12.Recipe, error) {
	out := new(v1alpha12.Recipe)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateRecipe(ctx context.Context, in *CreateRecipeRequest, opts ...grpc.CallOption) (*v1alpha12.Recipe, error) {
	out := new(v1alpha12.Recipe)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateRecipe(ctx context.Context, in *UpdateRecipeRequest, opts ...grpc.CallOption) (*v1alpha12.Recipe, error) {
	out := new(v1alpha12.Recipe)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteRecipe(ctx context.Context, in *DeleteRecipeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListRecipeRuns(ctx context.Context, in *ListRecipeRunsRequest, opts ...grpc.CallOption) (*ListRecipeRunsResponse, error) {
	out := new(ListRecipeRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListRecipeRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetRecipeRun(ctx context.Context, in *GetRecipeRunRequest, opts ...grpc.CallOption) (*v1alpha12.RecipeRun, error) {
	out := new(v1alpha12.RecipeRun)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetRecipeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateRecipeRun(ctx context.Context, in *CreateRecipeRunRequest, opts ...grpc.CallOption) (*v1alpha12.RecipeRun, error) {
	out := new(v1alpha12.RecipeRun)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateRecipeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateRecipeRun(ctx context.Context, in *UpdateRecipeRunRequest, opts ...grpc.CallOption) (*v1alpha12.RecipeRun, error) {
	out := new(v1alpha12.RecipeRun)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateRecipeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteRecipeRun(ctx context.Context, in *DeleteRecipeRunRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteRecipeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error) {
	out := new(ListReportsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*v1alpha13.Report, error) {
	out := new(v1alpha13.Report)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*v1alpha13.Report, error) {
	out := new(v1alpha13.Report)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*v1alpha13.Report, error) {
	out := new(v1alpha13.Report)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListStudies(ctx context.Context, in *ListStudiesRequest, opts ...grpc.CallOption) (*ListStudiesResponse, error) {
	out := new(ListStudiesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListStudies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetStudy(ctx context.Context, in *GetStudyRequest, opts ...grpc.CallOption) (*v1alpha13.Study, error) {
	out := new(v1alpha13.Study)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateStudy(ctx context.Context, in *CreateStudyRequest, opts ...grpc.CallOption) (*v1alpha13.Study, error) {
	out := new(v1alpha13.Study)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateStudy(ctx context.Context, in *UpdateStudyRequest, opts ...grpc.CallOption) (*v1alpha13.Study, error) {
	out := new(v1alpha13.Study)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteStudy(ctx context.Context, in *DeleteStudyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*v1alpha13.Model, error) {
	out := new(v1alpha13.Model)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*v1alpha13.Model, error) {
	out := new(v1alpha13.Model)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*v1alpha13.Model, error) {
	out := new(v1alpha13.Model)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListPredictions(ctx context.Context, in *ListPredictionsRequest, opts ...grpc.CallOption) (*ListPredictionsResponse, error) {
	out := new(ListPredictionsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetPrediction(ctx context.Context, in *GetPredictionRequest, opts ...grpc.CallOption) (*v1alpha14.Prediction, error) {
	out := new(v1alpha14.Prediction)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreatePrediction(ctx context.Context, in *CreatePredictionRequest, opts ...grpc.CallOption) (*v1alpha14.Prediction, error) {
	out := new(v1alpha14.Prediction)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreatePrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdatePrediction(ctx context.Context, in *UpdatePredictionRequest, opts ...grpc.CallOption) (*v1alpha14.Prediction, error) {
	out := new(v1alpha14.Prediction)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdatePrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeletePrediction(ctx context.Context, in *DeletePredictionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeletePrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListPredictors(ctx context.Context, in *ListPredictorsRequest, opts ...grpc.CallOption) (*ListPredictorsResponse, error) {
	out := new(ListPredictorsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListPredictors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetPredictor(ctx context.Context, in *GetPredictorRequest, opts ...grpc.CallOption) (*v1alpha14.Predictor, error) {
	out := new(v1alpha14.Predictor)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetPredictor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreatePredictor(ctx context.Context, in *CreatePredictorRequest, opts ...grpc.CallOption) (*v1alpha14.Predictor, error) {
	out := new(v1alpha14.Predictor)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreatePredictor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdatePredictor(ctx context.Context, in *UpdatePredictorRequest, opts ...grpc.CallOption) (*v1alpha14.Predictor, error) {
	out := new(v1alpha14.Predictor)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdatePredictor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeletePredictor(ctx context.Context, in *DeletePredictorRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeletePredictor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListReviews(ctx context.Context, in *ListReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error) {
	out := new(ListReviewsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*v1alpha11.Review, error) {
	out := new(v1alpha11.Review)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*v1alpha11.Review, error) {
	out := new(v1alpha11.Review)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*v1alpha11.Review, error) {
	out := new(v1alpha11.Review)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListPostMortems(ctx context.Context, in *ListPostMortemsRequest, opts ...grpc.CallOption) (*ListPostMortemsResponse, error) {
	out := new(ListPostMortemsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListPostMortems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetPostMortem(ctx context.Context, in *GetPostMortemRequest, opts ...grpc.CallOption) (*v1alpha11.PostMortem, error) {
	out := new(v1alpha11.PostMortem)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetPostMortem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreatePostMortem(ctx context.Context, in *CreatePostMortemRequest, opts ...grpc.CallOption) (*v1alpha11.PostMortem, error) {
	out := new(v1alpha11.PostMortem)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreatePostMortem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdatePostMortem(ctx context.Context, in *UpdatePostMortemRequest, opts ...grpc.CallOption) (*v1alpha11.PostMortem, error) {
	out := new(v1alpha11.PostMortem)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdatePostMortem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeletePostMortem(ctx context.Context, in *DeletePostMortemRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeletePostMortem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListRunBooks(ctx context.Context, in *ListRunbooksRequest, opts ...grpc.CallOption) (*ListRunbooksResponse, error) {
	out := new(ListRunbooksResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListRunBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetRunBook(ctx context.Context, in *GetRunbookRequest, opts ...grpc.CallOption) (*v1alpha11.RunBook, error) {
	out := new(v1alpha11.RunBook)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetRunBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateRunBook(ctx context.Context, in *CreateRunbookRequest, opts ...grpc.CallOption) (*v1alpha11.RunBook, error) {
	out := new(v1alpha11.RunBook)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateRunBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateRunBook(ctx context.Context, in *UpdateRunbookRequest, opts ...grpc.CallOption) (*v1alpha11.RunBook, error) {
	out := new(v1alpha11.RunBook)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateRunBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteRunBook(ctx context.Context, in *DeleteRunbookRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteRunBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) ListDataApp(ctx context.Context, in *ListDataAppRequest, opts ...grpc.CallOption) (*ListDataAppResponse, error) {
	out := new(ListDataAppResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) GetDataApp(ctx context.Context, in *GetDataAppRequest, opts ...grpc.CallOption) (*v1alpha14.DataApp, error) {
	out := new(v1alpha14.DataApp)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) CreateDataApp(ctx context.Context, in *CreateDataAppRequest, opts ...grpc.CallOption) (*v1alpha14.DataApp, error) {
	out := new(v1alpha14.DataApp)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) UpdateDataApp(ctx context.Context, in *UpdateDataAppRequest, opts ...grpc.CallOption) (*v1alpha14.DataApp, error) {
	out := new(v1alpha14.DataApp)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyServiceClient) DeleteDataApp(ctx context.Context, in *DeleteDataAppRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseProxyServiceServer is the server API for DatabaseProxyService service.
// All implementations must embed UnimplementedDatabaseProxyServiceServer
// for forward compatibility
type DatabaseProxyServiceServer interface {
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*v1alpha1.Account, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*v1alpha1.Account, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*v1alpha1.Account, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*empty.Empty, error)
	// alerts
	ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error)
	GetAlert(context.Context, *GetAlertRequest) (*v1alpha1.Alert, error)
	CreateAlert(context.Context, *CreateAlertRequest) (*v1alpha1.Alert, error)
	UpdateAlert(context.Context, *UpdateAlertRequest) (*v1alpha1.Alert, error)
	DeleteAlert(context.Context, *DeleteAlertRequest) (*empty.Empty, error)
	ListTodos(context.Context, *ListTodosRequest) (*ListTodosResponse, error)
	GetTodo(context.Context, *GetTodoRequest) (*v1alpha11.Todo, error)
	CreateTodo(context.Context, *CreateTodoRequest) (*v1alpha11.Todo, error)
	UpdateTodo(context.Context, *UpdateTodoRequest) (*v1alpha11.Todo, error)
	DeleteTodo(context.Context, *DeleteTodoRequest) (*empty.Empty, error)
	ListMeetings(context.Context, *ListMeetingsRequest) (*ListMeetingsResponse, error)
	GetMeeting(context.Context, *GetMeetingRequest) (*v1alpha11.Meeting, error)
	CreateMeeting(context.Context, *CreateMeetingRequest) (*v1alpha11.Meeting, error)
	UpdateMeeting(context.Context, *UpdateMeetingRequest) (*v1alpha11.Meeting, error)
	DeleteMeeting(context.Context, *DeleteMeetingRequest) (*empty.Empty, error)
	ListAttachments(context.Context, *ListAttachmentsRequest) (*ListAttachmentsResponse, error)
	GetAttachment(context.Context, *GetAttachmentRequest) (*v1alpha1.Attachment, error)
	CreateAttachment(context.Context, *CreateAttachmentRequest) (*v1alpha1.Attachment, error)
	UpdateAttachment(context.Context, *UpdateAttachmentRequest) (*v1alpha1.Attachment, error)
	DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*empty.Empty, error)
	// api token
	ListApiTokens(context.Context, *ListApiTokensRequest) (*ListApiTokensResponse, error)
	GetApiToken(context.Context, *GetApiTokenRequest) (*v1alpha1.ApiToken, error)
	CreateApiToken(context.Context, *CreateApiTokenRequest) (*v1alpha1.ApiToken, error)
	UpdateApiToken(context.Context, *UpdateApiTokenRequest) (*v1alpha1.ApiToken, error)
	DeleteApiToken(context.Context, *DeleteApiTokenRequest) (*empty.Empty, error)
	// connection
	ListConnections(context.Context, *ListConnectionsRequest) (*ListConnectionsResponse, error)
	GetConnection(context.Context, *GetConnectionRequest) (*v1alpha1.Connection, error)
	CreateConnection(context.Context, *CreateConnectionRequest) (*v1alpha1.Connection, error)
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*v1alpha1.Connection, error)
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*empty.Empty, error)
	// lab
	ListLabs(context.Context, *ListLabsRequest) (*ListLabsResponse, error)
	GetLab(context.Context, *GetLabRequest) (*v1alpha1.Lab, error)
	CreateLab(context.Context, *CreateLabRequest) (*v1alpha1.Lab, error)
	UpdateLab(context.Context, *UpdateLabRequest) (*v1alpha1.Lab, error)
	DeleteLab(context.Context, *DeleteLabRequest) (*empty.Empty, error)
	// license
	ListLicenses(context.Context, *ListLicensesRequest) (*ListLicensesResponse, error)
	GetLicense(context.Context, *GetLicenseRequest) (*v1alpha1.License, error)
	CreateLicense(context.Context, *CreateLicenseRequest) (*v1alpha1.License, error)
	UpdateLicense(context.Context, *UpdateLicenseRequest) (*v1alpha1.License, error)
	DeleteLicense(context.Context, *DeleteLicenseRequest) (*empty.Empty, error)
	// notifer
	ListNotifiers(context.Context, *ListNotifiersRequest) (*ListNotifiersResponse, error)
	GetNotifier(context.Context, *GetNotifierRequest) (*v1alpha1.Notifier, error)
	CreateNotifier(context.Context, *CreateNotifierRequest) (*v1alpha1.Notifier, error)
	UpdateNotifier(context.Context, *UpdateNotifierRequest) (*v1alpha1.Notifier, error)
	DeleteNotifier(context.Context, *DeleteNotifierRequest) (*empty.Empty, error)
	// servingsite
	ListServingSites(context.Context, *ListServingsitesRequest) (*ListServingsitesResponse, error)
	GetServingSite(context.Context, *GetServingsiteRequest) (*v1alpha1.ServingSite, error)
	CreateServingSite(context.Context, *CreateServingsiteRequest) (*v1alpha1.ServingSite, error)
	UpdateServingSite(context.Context, *UpdateServingsiteRequest) (*v1alpha1.ServingSite, error)
	DeleteServingSite(context.Context, *DeleteServingsiteRequest) (*empty.Empty, error)
	// servingsite
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	GetTenant(context.Context, *GetTenantRequest) (*v1alpha1.Tenant, error)
	CreateTenant(context.Context, *CreateTenantRequest) (*v1alpha1.Tenant, error)
	UpdateTenant(context.Context, *UpdateTenantRequest) (*v1alpha1.Tenant, error)
	DeleteTenant(context.Context, *DeleteTenantRequest) (*empty.Empty, error)
	// virtual bucket
	ListVirtualBuckets(context.Context, *ListVirtualBucketsRequest) (*ListVirtualBucketsResponse, error)
	GetVirtualBucket(context.Context, *GetVirtualBucketRequest) (*v1alpha1.VirtualBucket, error)
	CreateVirtualBucket(context.Context, *CreateVirtualBucketRequest) (*v1alpha1.VirtualBucket, error)
	UpdateVirtualBucket(context.Context, *UpdateVirtualBucketRequest) (*v1alpha1.VirtualBucket, error)
	DeleteVirtualBucket(context.Context, *DeleteVirtualBucketRequest) (*empty.Empty, error)
	// data pipeline
	ListDataPipelines(context.Context, *ListDataPipelinesRequest) (*ListDataPipelinesResponse, error)
	GetDataPipeline(context.Context, *GetDataPipelineRequest) (*v1alpha12.DataPipeline, error)
	CreateDataPipeline(context.Context, *CreateDataPipelineRequest) (*v1alpha12.DataPipeline, error)
	UpdateDataPipeline(context.Context, *UpdateDataPipelineRequest) (*v1alpha12.DataPipeline, error)
	DeleteDataPipeline(context.Context, *DeleteDataPipelineRequest) (*empty.Empty, error)
	// data pipeline run
	ListDataPipelineRuns(context.Context, *ListDataPipelineRunsRequest) (*ListDataPipelineRunsResponse, error)
	GetDataPipelineRun(context.Context, *GetDataPipelineRunRequest) (*v1alpha12.DataPipelineRun, error)
	CreateDataPipelineRun(context.Context, *CreateDataPipelineRunRequest) (*v1alpha12.DataPipelineRun, error)
	UpdateDataPipelineRun(context.Context, *UpdateDataPipelineRunRequest) (*v1alpha12.DataPipelineRun, error)
	DeleteDataPipelineRun(context.Context, *DeleteDataPipelineRunRequest) (*empty.Empty, error)
	// data pipeline run
	ListDataProducts(context.Context, *ListDataProductsRequest) (*ListDataProductsResponse, error)
	GetDataProduct(context.Context, *GetDataProductRequest) (*v1alpha12.DataProduct, error)
	CreateDataProduct(context.Context, *CreateDataProductRequest) (*v1alpha12.DataProduct, error)
	UpdateDataProduct(context.Context, *UpdateDataProductRequest) (*v1alpha12.DataProduct, error)
	DeleteDataProduct(context.Context, *DeleteDataProductRequest) (*empty.Empty, error)
	ListDataProductVersions(context.Context, *ListDataProductVersionsRequest) (*ListDataProductVersionsResponse, error)
	GetDataProductVersion(context.Context, *GetDataProductVersionRequest) (*v1alpha12.DataProductVersion, error)
	CreateDataProductVersion(context.Context, *CreateDataProductVersionRequest) (*v1alpha12.DataProductVersion, error)
	UpdateDataProductVersion(context.Context, *UpdateDataProductVersionRequest) (*v1alpha12.DataProductVersion, error)
	DeleteDataProductVersion(context.Context, *DeleteDataProductVersionRequest) (*empty.Empty, error)
	ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error)
	GetDataset(context.Context, *GetDatasetRequest) (*v1alpha12.Dataset, error)
	CreateDataset(context.Context, *CreateDatasetRequest) (*v1alpha12.Dataset, error)
	UpdateDataset(context.Context, *UpdateDatasetRequest) (*v1alpha12.Dataset, error)
	DeleteDataset(context.Context, *DeleteDatasetRequest) (*empty.Empty, error)
	ListDataSources(context.Context, *ListDatasourcesRequest) (*ListDatasourcesResponse, error)
	GetDataSource(context.Context, *GetDatasourceRequest) (*v1alpha12.DataSource, error)
	CreateDataSource(context.Context, *CreateDatasourceRequest) (*v1alpha12.DataSource, error)
	UpdateDataSource(context.Context, *UpdateDatasourceRequest) (*v1alpha12.DataSource, error)
	DeleteDataSource(context.Context, *DeleteDatasourceRequest) (*empty.Empty, error)
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	GetEntity(context.Context, *GetEntityRequest) (*v1alpha12.Entity, error)
	CreateEntity(context.Context, *CreateEntityRequest) (*v1alpha12.Entity, error)
	UpdateEntity(context.Context, *UpdateEntityRequest) (*v1alpha12.Entity, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*empty.Empty, error)
	ListModelClass(context.Context, *ListModelClassesRequest) (*ListModelClassesResponse, error)
	GetModelClass(context.Context, *GetModelClassRequest) (*v1alpha13.ModelClass, error)
	CreateModelClass(context.Context, *CreateModelClassRequest) (*v1alpha13.ModelClass, error)
	UpdateModelClas(context.Context, *UpdateModelClassRequest) (*v1alpha13.ModelClass, error)
	DeleteModelClass(context.Context, *DeleteModelClassRequest) (*empty.Empty, error)
	ListFeatureHistograms(context.Context, *ListFeatureHistogramsRequest) (*ListFeatureHistogramsResponse, error)
	GetFeatureHistogram(context.Context, *GetFeatureHistogramRequest) (*v1alpha12.FeatureHistogram, error)
	CreateFeatureHistogram(context.Context, *CreateFeatureHistogramRequest) (*v1alpha12.FeatureHistogram, error)
	UpdateFeatureHistogram(context.Context, *UpdateFeatureHistogramRequest) (*v1alpha12.FeatureHistogram, error)
	DeleteFeatureHistogram(context.Context, *DeleteFeatureHistogramRequest) (*empty.Empty, error)
	ListFeatureGroups(context.Context, *ListFeatureGroupRequest) (*ListFeatureGroupResponse, error)
	GetFeatureGroup(context.Context, *GetFeatureGroupRequest) (*v1alpha12.FeatureGroup, error)
	CreateFeatureGroup(context.Context, *CreateFeatureGroupRequest) (*v1alpha12.FeatureGroup, error)
	UpdateFeatureGroup(context.Context, *UpdateFeatureGroupRequest) (*v1alpha12.FeatureGroup, error)
	DeleteFeatureGroup(context.Context, *DeleteFeatureGroupRequest) (*empty.Empty, error)
	ListRecipes(context.Context, *ListRecipesRequest) (*ListRecipesResponse, error)
	GetRecipe(context.Context, *GetRecipeRequest) (*v1alpha12.Recipe, error)
	CreateRecipe(context.Context, *CreateRecipeRequest) (*v1alpha12.Recipe, error)
	UpdateRecipe(context.Context, *UpdateRecipeRequest) (*v1alpha12.Recipe, error)
	DeleteRecipe(context.Context, *DeleteRecipeRequest) (*empty.Empty, error)
	ListRecipeRuns(context.Context, *ListRecipeRunsRequest) (*ListRecipeRunsResponse, error)
	GetRecipeRun(context.Context, *GetRecipeRunRequest) (*v1alpha12.RecipeRun, error)
	CreateRecipeRun(context.Context, *CreateRecipeRunRequest) (*v1alpha12.RecipeRun, error)
	UpdateRecipeRun(context.Context, *UpdateRecipeRunRequest) (*v1alpha12.RecipeRun, error)
	DeleteRecipeRun(context.Context, *DeleteRecipeRunRequest) (*empty.Empty, error)
	ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error)
	GetReport(context.Context, *GetReportRequest) (*v1alpha13.Report, error)
	CreateReport(context.Context, *CreateReportRequest) (*v1alpha13.Report, error)
	UpdateReport(context.Context, *UpdateReportRequest) (*v1alpha13.Report, error)
	DeleteReport(context.Context, *DeleteReportRequest) (*empty.Empty, error)
	ListStudies(context.Context, *ListStudiesRequest) (*ListStudiesResponse, error)
	GetStudy(context.Context, *GetStudyRequest) (*v1alpha13.Study, error)
	CreateStudy(context.Context, *CreateStudyRequest) (*v1alpha13.Study, error)
	UpdateStudy(context.Context, *UpdateStudyRequest) (*v1alpha13.Study, error)
	DeleteStudy(context.Context, *DeleteStudyRequest) (*empty.Empty, error)
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	GetModel(context.Context, *GetModelRequest) (*v1alpha13.Model, error)
	CreateModel(context.Context, *CreateModelRequest) (*v1alpha13.Model, error)
	UpdateModel(context.Context, *UpdateModelRequest) (*v1alpha13.Model, error)
	DeleteModel(context.Context, *DeleteModelRequest) (*empty.Empty, error)
	ListPredictions(context.Context, *ListPredictionsRequest) (*ListPredictionsResponse, error)
	GetPrediction(context.Context, *GetPredictionRequest) (*v1alpha14.Prediction, error)
	CreatePrediction(context.Context, *CreatePredictionRequest) (*v1alpha14.Prediction, error)
	UpdatePrediction(context.Context, *UpdatePredictionRequest) (*v1alpha14.Prediction, error)
	DeletePrediction(context.Context, *DeletePredictionRequest) (*empty.Empty, error)
	ListPredictors(context.Context, *ListPredictorsRequest) (*ListPredictorsResponse, error)
	GetPredictor(context.Context, *GetPredictorRequest) (*v1alpha14.Predictor, error)
	CreatePredictor(context.Context, *CreatePredictorRequest) (*v1alpha14.Predictor, error)
	UpdatePredictor(context.Context, *UpdatePredictorRequest) (*v1alpha14.Predictor, error)
	DeletePredictor(context.Context, *DeletePredictorRequest) (*empty.Empty, error)
	ListReviews(context.Context, *ListReviewsRequest) (*ListReviewsResponse, error)
	GetReview(context.Context, *GetReviewRequest) (*v1alpha11.Review, error)
	CreateReview(context.Context, *CreateReviewRequest) (*v1alpha11.Review, error)
	UpdateReview(context.Context, *UpdateReviewRequest) (*v1alpha11.Review, error)
	DeleteReview(context.Context, *DeleteReviewRequest) (*empty.Empty, error)
	ListPostMortems(context.Context, *ListPostMortemsRequest) (*ListPostMortemsResponse, error)
	GetPostMortem(context.Context, *GetPostMortemRequest) (*v1alpha11.PostMortem, error)
	CreatePostMortem(context.Context, *CreatePostMortemRequest) (*v1alpha11.PostMortem, error)
	UpdatePostMortem(context.Context, *UpdatePostMortemRequest) (*v1alpha11.PostMortem, error)
	DeletePostMortem(context.Context, *DeletePostMortemRequest) (*empty.Empty, error)
	ListRunBooks(context.Context, *ListRunbooksRequest) (*ListRunbooksResponse, error)
	GetRunBook(context.Context, *GetRunbookRequest) (*v1alpha11.RunBook, error)
	CreateRunBook(context.Context, *CreateRunbookRequest) (*v1alpha11.RunBook, error)
	UpdateRunBook(context.Context, *UpdateRunbookRequest) (*v1alpha11.RunBook, error)
	DeleteRunBook(context.Context, *DeleteRunbookRequest) (*empty.Empty, error)
	ListDataApp(context.Context, *ListDataAppRequest) (*ListDataAppResponse, error)
	GetDataApp(context.Context, *GetDataAppRequest) (*v1alpha14.DataApp, error)
	CreateDataApp(context.Context, *CreateDataAppRequest) (*v1alpha14.DataApp, error)
	UpdateDataApp(context.Context, *UpdateDataAppRequest) (*v1alpha14.DataApp, error)
	DeleteDataApp(context.Context, *DeleteDataAppRequest) (*empty.Empty, error)
	mustEmbedUnimplementedDatabaseProxyServiceServer()
}

// UnimplementedDatabaseProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseProxyServiceServer struct {
}

func (UnimplementedDatabaseProxyServiceServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetAccount(context.Context, *GetAccountRequest) (*v1alpha1.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*v1alpha1.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*v1alpha1.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlerts not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetAlert(context.Context, *GetAlertRequest) (*v1alpha1.Alert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlert not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateAlert(context.Context, *CreateAlertRequest) (*v1alpha1.Alert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateAlert(context.Context, *UpdateAlertRequest) (*v1alpha1.Alert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlert not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteAlert(context.Context, *DeleteAlertRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListTodos(context.Context, *ListTodosRequest) (*ListTodosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodos not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetTodo(context.Context, *GetTodoRequest) (*v1alpha11.Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodo not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateTodo(context.Context, *CreateTodoRequest) (*v1alpha11.Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateTodo(context.Context, *UpdateTodoRequest) (*v1alpha11.Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteTodo(context.Context, *DeleteTodoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListMeetings(context.Context, *ListMeetingsRequest) (*ListMeetingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeetings not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetMeeting(context.Context, *GetMeetingRequest) (*v1alpha11.Meeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeeting not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateMeeting(context.Context, *CreateMeetingRequest) (*v1alpha11.Meeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeeting not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateMeeting(context.Context, *UpdateMeetingRequest) (*v1alpha11.Meeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeeting not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteMeeting(context.Context, *DeleteMeetingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeeting not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListAttachments(context.Context, *ListAttachmentsRequest) (*ListAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttachments not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetAttachment(context.Context, *GetAttachmentRequest) (*v1alpha1.Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachment not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateAttachment(context.Context, *CreateAttachmentRequest) (*v1alpha1.Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttachment not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateAttachment(context.Context, *UpdateAttachmentRequest) (*v1alpha1.Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttachment not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachment not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListApiTokens(context.Context, *ListApiTokensRequest) (*ListApiTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiTokens not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetApiToken(context.Context, *GetApiTokenRequest) (*v1alpha1.ApiToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiToken not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateApiToken(context.Context, *CreateApiTokenRequest) (*v1alpha1.ApiToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiToken not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateApiToken(context.Context, *UpdateApiTokenRequest) (*v1alpha1.ApiToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiToken not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteApiToken(context.Context, *DeleteApiTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiToken not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListConnections(context.Context, *ListConnectionsRequest) (*ListConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnections not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetConnection(context.Context, *GetConnectionRequest) (*v1alpha1.Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateConnection(context.Context, *CreateConnectionRequest) (*v1alpha1.Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateConnection(context.Context, *UpdateConnectionRequest) (*v1alpha1.Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteConnection(context.Context, *DeleteConnectionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListLabs(context.Context, *ListLabsRequest) (*ListLabsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabs not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetLab(context.Context, *GetLabRequest) (*v1alpha1.Lab, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLab not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateLab(context.Context, *CreateLabRequest) (*v1alpha1.Lab, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLab not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateLab(context.Context, *UpdateLabRequest) (*v1alpha1.Lab, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLab not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteLab(context.Context, *DeleteLabRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLab not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListLicenses(context.Context, *ListLicensesRequest) (*ListLicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLicenses not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetLicense(context.Context, *GetLicenseRequest) (*v1alpha1.License, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateLicense(context.Context, *CreateLicenseRequest) (*v1alpha1.License, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLicense not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateLicense(context.Context, *UpdateLicenseRequest) (*v1alpha1.License, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLicense not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteLicense(context.Context, *DeleteLicenseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLicense not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListNotifiers(context.Context, *ListNotifiersRequest) (*ListNotifiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifiers not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetNotifier(context.Context, *GetNotifierRequest) (*v1alpha1.Notifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifier not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateNotifier(context.Context, *CreateNotifierRequest) (*v1alpha1.Notifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifier not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateNotifier(context.Context, *UpdateNotifierRequest) (*v1alpha1.Notifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifier not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteNotifier(context.Context, *DeleteNotifierRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotifier not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListServingSites(context.Context, *ListServingsitesRequest) (*ListServingsitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServingSites not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetServingSite(context.Context, *GetServingsiteRequest) (*v1alpha1.ServingSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServingSite not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateServingSite(context.Context, *CreateServingsiteRequest) (*v1alpha1.ServingSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServingSite not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateServingSite(context.Context, *UpdateServingsiteRequest) (*v1alpha1.ServingSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServingSite not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteServingSite(context.Context, *DeleteServingsiteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServingSite not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetTenant(context.Context, *GetTenantRequest) (*v1alpha1.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateTenant(context.Context, *CreateTenantRequest) (*v1alpha1.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateTenant(context.Context, *UpdateTenantRequest) (*v1alpha1.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteTenant(context.Context, *DeleteTenantRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListVirtualBuckets(context.Context, *ListVirtualBucketsRequest) (*ListVirtualBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualBuckets not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetVirtualBucket(context.Context, *GetVirtualBucketRequest) (*v1alpha1.VirtualBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualBucket not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateVirtualBucket(context.Context, *CreateVirtualBucketRequest) (*v1alpha1.VirtualBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualBucket not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateVirtualBucket(context.Context, *UpdateVirtualBucketRequest) (*v1alpha1.VirtualBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualBucket not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteVirtualBucket(context.Context, *DeleteVirtualBucketRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualBucket not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListDataPipelines(context.Context, *ListDataPipelinesRequest) (*ListDataPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataPipelines not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetDataPipeline(context.Context, *GetDataPipelineRequest) (*v1alpha12.DataPipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataPipeline not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateDataPipeline(context.Context, *CreateDataPipelineRequest) (*v1alpha12.DataPipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataPipeline not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateDataPipeline(context.Context, *UpdateDataPipelineRequest) (*v1alpha12.DataPipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataPipeline not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteDataPipeline(context.Context, *DeleteDataPipelineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataPipeline not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListDataPipelineRuns(context.Context, *ListDataPipelineRunsRequest) (*ListDataPipelineRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataPipelineRuns not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetDataPipelineRun(context.Context, *GetDataPipelineRunRequest) (*v1alpha12.DataPipelineRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataPipelineRun not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateDataPipelineRun(context.Context, *CreateDataPipelineRunRequest) (*v1alpha12.DataPipelineRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataPipelineRun not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateDataPipelineRun(context.Context, *UpdateDataPipelineRunRequest) (*v1alpha12.DataPipelineRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataPipelineRun not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteDataPipelineRun(context.Context, *DeleteDataPipelineRunRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataPipelineRun not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListDataProducts(context.Context, *ListDataProductsRequest) (*ListDataProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataProducts not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetDataProduct(context.Context, *GetDataProductRequest) (*v1alpha12.DataProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataProduct not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateDataProduct(context.Context, *CreateDataProductRequest) (*v1alpha12.DataProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataProduct not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateDataProduct(context.Context, *UpdateDataProductRequest) (*v1alpha12.DataProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataProduct not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteDataProduct(context.Context, *DeleteDataProductRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataProduct not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListDataProductVersions(context.Context, *ListDataProductVersionsRequest) (*ListDataProductVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataProductVersions not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetDataProductVersion(context.Context, *GetDataProductVersionRequest) (*v1alpha12.DataProductVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataProductVersion not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateDataProductVersion(context.Context, *CreateDataProductVersionRequest) (*v1alpha12.DataProductVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataProductVersion not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateDataProductVersion(context.Context, *UpdateDataProductVersionRequest) (*v1alpha12.DataProductVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataProductVersion not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteDataProductVersion(context.Context, *DeleteDataProductVersionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataProductVersion not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetDataset(context.Context, *GetDatasetRequest) (*v1alpha12.Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateDataset(context.Context, *CreateDatasetRequest) (*v1alpha12.Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateDataset(context.Context, *UpdateDatasetRequest) (*v1alpha12.Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataset not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteDataset(context.Context, *DeleteDatasetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListDataSources(context.Context, *ListDatasourcesRequest) (*ListDatasourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSources not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetDataSource(context.Context, *GetDatasourceRequest) (*v1alpha12.DataSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSource not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateDataSource(context.Context, *CreateDatasourceRequest) (*v1alpha12.DataSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataSource not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateDataSource(context.Context, *UpdateDatasourceRequest) (*v1alpha12.DataSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataSource not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteDataSource(context.Context, *DeleteDatasourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataSource not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetEntity(context.Context, *GetEntityRequest) (*v1alpha12.Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateEntity(context.Context, *CreateEntityRequest) (*v1alpha12.Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateEntity(context.Context, *UpdateEntityRequest) (*v1alpha12.Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteEntity(context.Context, *DeleteEntityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListModelClass(context.Context, *ListModelClassesRequest) (*ListModelClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelClass not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetModelClass(context.Context, *GetModelClassRequest) (*v1alpha13.ModelClass, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelClass not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateModelClass(context.Context, *CreateModelClassRequest) (*v1alpha13.ModelClass, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelClass not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateModelClas(context.Context, *UpdateModelClassRequest) (*v1alpha13.ModelClass, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelClas not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteModelClass(context.Context, *DeleteModelClassRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelClass not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListFeatureHistograms(context.Context, *ListFeatureHistogramsRequest) (*ListFeatureHistogramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureHistograms not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetFeatureHistogram(context.Context, *GetFeatureHistogramRequest) (*v1alpha12.FeatureHistogram, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureHistogram not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateFeatureHistogram(context.Context, *CreateFeatureHistogramRequest) (*v1alpha12.FeatureHistogram, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatureHistogram not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateFeatureHistogram(context.Context, *UpdateFeatureHistogramRequest) (*v1alpha12.FeatureHistogram, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureHistogram not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteFeatureHistogram(context.Context, *DeleteFeatureHistogramRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatureHistogram not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListFeatureGroups(context.Context, *ListFeatureGroupRequest) (*ListFeatureGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureGroups not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetFeatureGroup(context.Context, *GetFeatureGroupRequest) (*v1alpha12.FeatureGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureGroup not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateFeatureGroup(context.Context, *CreateFeatureGroupRequest) (*v1alpha12.FeatureGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatureGroup not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateFeatureGroup(context.Context, *UpdateFeatureGroupRequest) (*v1alpha12.FeatureGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureGroup not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteFeatureGroup(context.Context, *DeleteFeatureGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatureGroup not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListRecipes(context.Context, *ListRecipesRequest) (*ListRecipesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipes not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetRecipe(context.Context, *GetRecipeRequest) (*v1alpha12.Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipe not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateRecipe(context.Context, *CreateRecipeRequest) (*v1alpha12.Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipe not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateRecipe(context.Context, *UpdateRecipeRequest) (*v1alpha12.Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipe not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteRecipe(context.Context, *DeleteRecipeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecipe not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListRecipeRuns(context.Context, *ListRecipeRunsRequest) (*ListRecipeRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipeRuns not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetRecipeRun(context.Context, *GetRecipeRunRequest) (*v1alpha12.RecipeRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeRun not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateRecipeRun(context.Context, *CreateRecipeRunRequest) (*v1alpha12.RecipeRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipeRun not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateRecipeRun(context.Context, *UpdateRecipeRunRequest) (*v1alpha12.RecipeRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipeRun not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteRecipeRun(context.Context, *DeleteRecipeRunRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecipeRun not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReports not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetReport(context.Context, *GetReportRequest) (*v1alpha13.Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateReport(context.Context, *CreateReportRequest) (*v1alpha13.Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReport not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateReport(context.Context, *UpdateReportRequest) (*v1alpha13.Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReport not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteReport(context.Context, *DeleteReportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReport not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListStudies(context.Context, *ListStudiesRequest) (*ListStudiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudies not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetStudy(context.Context, *GetStudyRequest) (*v1alpha13.Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudy not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateStudy(context.Context, *CreateStudyRequest) (*v1alpha13.Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudy not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateStudy(context.Context, *UpdateStudyRequest) (*v1alpha13.Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudy not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteStudy(context.Context, *DeleteStudyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudy not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetModel(context.Context, *GetModelRequest) (*v1alpha13.Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateModel(context.Context, *CreateModelRequest) (*v1alpha13.Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateModel(context.Context, *UpdateModelRequest) (*v1alpha13.Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteModel(context.Context, *DeleteModelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListPredictions(context.Context, *ListPredictionsRequest) (*ListPredictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPredictions not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetPrediction(context.Context, *GetPredictionRequest) (*v1alpha14.Prediction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrediction not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreatePrediction(context.Context, *CreatePredictionRequest) (*v1alpha14.Prediction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrediction not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdatePrediction(context.Context, *UpdatePredictionRequest) (*v1alpha14.Prediction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrediction not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeletePrediction(context.Context, *DeletePredictionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrediction not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListPredictors(context.Context, *ListPredictorsRequest) (*ListPredictorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPredictors not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetPredictor(context.Context, *GetPredictorRequest) (*v1alpha14.Predictor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictor not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreatePredictor(context.Context, *CreatePredictorRequest) (*v1alpha14.Predictor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePredictor not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdatePredictor(context.Context, *UpdatePredictorRequest) (*v1alpha14.Predictor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePredictor not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeletePredictor(context.Context, *DeletePredictorRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePredictor not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListReviews(context.Context, *ListReviewsRequest) (*ListReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReviews not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetReview(context.Context, *GetReviewRequest) (*v1alpha11.Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReview not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateReview(context.Context, *CreateReviewRequest) (*v1alpha11.Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateReview(context.Context, *UpdateReviewRequest) (*v1alpha11.Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteReview(context.Context, *DeleteReviewRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListPostMortems(context.Context, *ListPostMortemsRequest) (*ListPostMortemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostMortems not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetPostMortem(context.Context, *GetPostMortemRequest) (*v1alpha11.PostMortem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostMortem not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreatePostMortem(context.Context, *CreatePostMortemRequest) (*v1alpha11.PostMortem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostMortem not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdatePostMortem(context.Context, *UpdatePostMortemRequest) (*v1alpha11.PostMortem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostMortem not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeletePostMortem(context.Context, *DeletePostMortemRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostMortem not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListRunBooks(context.Context, *ListRunbooksRequest) (*ListRunbooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunBooks not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetRunBook(context.Context, *GetRunbookRequest) (*v1alpha11.RunBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunBook not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateRunBook(context.Context, *CreateRunbookRequest) (*v1alpha11.RunBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunBook not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateRunBook(context.Context, *UpdateRunbookRequest) (*v1alpha11.RunBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunBook not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteRunBook(context.Context, *DeleteRunbookRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRunBook not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) ListDataApp(context.Context, *ListDataAppRequest) (*ListDataAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataApp not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) GetDataApp(context.Context, *GetDataAppRequest) (*v1alpha14.DataApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataApp not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) CreateDataApp(context.Context, *CreateDataAppRequest) (*v1alpha14.DataApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataApp not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) UpdateDataApp(context.Context, *UpdateDataAppRequest) (*v1alpha14.DataApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataApp not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) DeleteDataApp(context.Context, *DeleteDataAppRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataApp not implemented")
}
func (UnimplementedDatabaseProxyServiceServer) mustEmbedUnimplementedDatabaseProxyServiceServer() {}

// UnsafeDatabaseProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseProxyServiceServer will
// result in compilation errors.
type UnsafeDatabaseProxyServiceServer interface {
	mustEmbedUnimplementedDatabaseProxyServiceServer()
}

func RegisterDatabaseProxyServiceServer(s grpc.ServiceRegistrar, srv DatabaseProxyServiceServer) {
	s.RegisterService(&DatabaseProxyService_ServiceDesc, srv)
}

func _DatabaseProxyService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListAlerts(ctx, req.(*ListAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetAlert(ctx, req.(*GetAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateAlert(ctx, req.(*UpdateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteAlert(ctx, req.(*DeleteAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTodosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListTodos(ctx, req.(*ListTodosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetTodo(ctx, req.(*GetTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateTodo(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateTodo(ctx, req.(*UpdateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteTodo(ctx, req.(*DeleteTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListMeetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeetingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListMeetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListMeetings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListMeetings(ctx, req.(*ListMeetingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetMeeting(ctx, req.(*GetMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateMeeting(ctx, req.(*CreateMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateMeeting(ctx, req.(*UpdateMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteMeeting(ctx, req.(*DeleteMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListAttachments(ctx, req.(*ListAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetAttachment(ctx, req.(*GetAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateAttachment(ctx, req.(*CreateAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateAttachment(ctx, req.(*UpdateAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteAttachment(ctx, req.(*DeleteAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListApiTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApiTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListApiTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListApiTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListApiTokens(ctx, req.(*ListApiTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetApiToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetApiToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetApiToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetApiToken(ctx, req.(*GetApiTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateApiToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateApiToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateApiToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateApiToken(ctx, req.(*CreateApiTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateApiToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateApiToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateApiToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateApiToken(ctx, req.(*UpdateApiTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteApiToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteApiToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteApiToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteApiToken(ctx, req.(*DeleteApiTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListConnections(ctx, req.(*ListConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListLabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListLabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListLabs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListLabs(ctx, req.(*ListLabsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetLab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetLab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetLab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetLab(ctx, req.(*GetLabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateLab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateLab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateLab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateLab(ctx, req.(*CreateLabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateLab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateLab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateLab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateLab(ctx, req.(*UpdateLabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteLab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteLab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteLab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteLab(ctx, req.(*DeleteLabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListLicenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListLicenses(ctx, req.(*ListLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetLicense(ctx, req.(*GetLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateLicense(ctx, req.(*CreateLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateLicense(ctx, req.(*UpdateLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteLicense(ctx, req.(*DeleteLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListNotifiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotifiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListNotifiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListNotifiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListNotifiers(ctx, req.(*ListNotifiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetNotifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetNotifier(ctx, req.(*GetNotifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateNotifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateNotifier(ctx, req.(*CreateNotifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateNotifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateNotifier(ctx, req.(*UpdateNotifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteNotifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteNotifier(ctx, req.(*DeleteNotifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListServingSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServingsitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListServingSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListServingSites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListServingSites(ctx, req.(*ListServingsitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetServingSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServingsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetServingSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetServingSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetServingSite(ctx, req.(*GetServingsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateServingSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServingsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateServingSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateServingSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateServingSite(ctx, req.(*CreateServingsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateServingSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServingsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateServingSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateServingSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateServingSite(ctx, req.(*UpdateServingsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteServingSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServingsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteServingSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteServingSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteServingSite(ctx, req.(*DeleteServingsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListVirtualBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVirtualBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListVirtualBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListVirtualBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListVirtualBuckets(ctx, req.(*ListVirtualBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetVirtualBucket(ctx, req.(*GetVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateVirtualBucket(ctx, req.(*CreateVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateVirtualBucket(ctx, req.(*UpdateVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteVirtualBucket(ctx, req.(*DeleteVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListDataPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListDataPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListDataPipelines(ctx, req.(*ListDataPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetDataPipeline(ctx, req.(*GetDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateDataPipeline(ctx, req.(*CreateDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateDataPipeline(ctx, req.(*UpdateDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteDataPipeline(ctx, req.(*DeleteDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListDataPipelineRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataPipelineRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListDataPipelineRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataPipelineRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListDataPipelineRuns(ctx, req.(*ListDataPipelineRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetDataPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetDataPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetDataPipelineRun(ctx, req.(*GetDataPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateDataPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateDataPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateDataPipelineRun(ctx, req.(*CreateDataPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateDataPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateDataPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateDataPipelineRun(ctx, req.(*UpdateDataPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteDataPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteDataPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteDataPipelineRun(ctx, req.(*DeleteDataPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListDataProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListDataProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListDataProducts(ctx, req.(*ListDataProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetDataProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetDataProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetDataProduct(ctx, req.(*GetDataProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateDataProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateDataProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateDataProduct(ctx, req.(*CreateDataProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateDataProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateDataProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateDataProduct(ctx, req.(*UpdateDataProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteDataProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteDataProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteDataProduct(ctx, req.(*DeleteDataProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListDataProductVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataProductVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListDataProductVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataProductVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListDataProductVersions(ctx, req.(*ListDataProductVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetDataProductVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataProductVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetDataProductVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataProductVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetDataProductVersion(ctx, req.(*GetDataProductVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateDataProductVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataProductVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateDataProductVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataProductVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateDataProductVersion(ctx, req.(*CreateDataProductVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateDataProductVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataProductVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateDataProductVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataProductVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateDataProductVersion(ctx, req.(*UpdateDataProductVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteDataProductVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataProductVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteDataProductVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataProductVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteDataProductVersion(ctx, req.(*DeleteDataProductVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateDataset(ctx, req.(*UpdateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteDataset(ctx, req.(*DeleteDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListDataSources(ctx, req.(*ListDatasourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetDataSource(ctx, req.(*GetDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateDataSource(ctx, req.(*CreateDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateDataSource(ctx, req.(*UpdateDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteDataSource(ctx, req.(*DeleteDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateEntity(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListModelClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListModelClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListModelClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListModelClass(ctx, req.(*ListModelClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetModelClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetModelClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetModelClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetModelClass(ctx, req.(*GetModelClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateModelClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateModelClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateModelClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateModelClass(ctx, req.(*CreateModelClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateModelClas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateModelClas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateModelClas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateModelClas(ctx, req.(*UpdateModelClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteModelClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteModelClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteModelClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteModelClass(ctx, req.(*DeleteModelClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListFeatureHistograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureHistogramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListFeatureHistograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListFeatureHistograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListFeatureHistograms(ctx, req.(*ListFeatureHistogramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetFeatureHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetFeatureHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetFeatureHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetFeatureHistogram(ctx, req.(*GetFeatureHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateFeatureHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateFeatureHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateFeatureHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateFeatureHistogram(ctx, req.(*CreateFeatureHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateFeatureHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateFeatureHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateFeatureHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateFeatureHistogram(ctx, req.(*UpdateFeatureHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteFeatureHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteFeatureHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteFeatureHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteFeatureHistogram(ctx, req.(*DeleteFeatureHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListFeatureGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListFeatureGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListFeatureGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListFeatureGroups(ctx, req.(*ListFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetFeatureGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetFeatureGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetFeatureGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetFeatureGroup(ctx, req.(*GetFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateFeatureGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateFeatureGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateFeatureGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateFeatureGroup(ctx, req.(*CreateFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateFeatureGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateFeatureGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateFeatureGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateFeatureGroup(ctx, req.(*UpdateFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteFeatureGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteFeatureGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteFeatureGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteFeatureGroup(ctx, req.(*DeleteFeatureGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListRecipes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListRecipes(ctx, req.(*ListRecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetRecipe(ctx, req.(*GetRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateRecipe(ctx, req.(*CreateRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateRecipe(ctx, req.(*UpdateRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteRecipe(ctx, req.(*DeleteRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListRecipeRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipeRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListRecipeRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListRecipeRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListRecipeRuns(ctx, req.(*ListRecipeRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetRecipeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetRecipeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetRecipeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetRecipeRun(ctx, req.(*GetRecipeRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateRecipeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipeRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateRecipeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateRecipeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateRecipeRun(ctx, req.(*CreateRecipeRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateRecipeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecipeRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateRecipeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateRecipeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateRecipeRun(ctx, req.(*UpdateRecipeRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteRecipeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecipeRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteRecipeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteRecipeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteRecipeRun(ctx, req.(*DeleteRecipeRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListReports(ctx, req.(*ListReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetReport(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateReport(ctx, req.(*CreateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateReport(ctx, req.(*UpdateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteReport(ctx, req.(*DeleteReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListStudies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListStudies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListStudies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListStudies(ctx, req.(*ListStudiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetStudy(ctx, req.(*GetStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateStudy(ctx, req.(*CreateStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateStudy(ctx, req.(*UpdateStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteStudy(ctx, req.(*DeleteStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateModel(ctx, req.(*UpdateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListPredictions(ctx, req.(*ListPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetPrediction(ctx, req.(*GetPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreatePrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreatePrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreatePrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreatePrediction(ctx, req.(*CreatePredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdatePrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdatePrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdatePrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdatePrediction(ctx, req.(*UpdatePredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeletePrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeletePrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeletePrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeletePrediction(ctx, req.(*DeletePredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListPredictors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPredictorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListPredictors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListPredictors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListPredictors(ctx, req.(*ListPredictorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetPredictor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetPredictor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetPredictor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetPredictor(ctx, req.(*GetPredictorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreatePredictor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePredictorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreatePredictor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreatePredictor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreatePredictor(ctx, req.(*CreatePredictorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdatePredictor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePredictorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdatePredictor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdatePredictor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdatePredictor(ctx, req.(*UpdatePredictorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeletePredictor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePredictorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeletePredictor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeletePredictor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeletePredictor(ctx, req.(*DeletePredictorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListReviews(ctx, req.(*ListReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetReview(ctx, req.(*GetReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateReview(ctx, req.(*CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateReview(ctx, req.(*UpdateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteReview(ctx, req.(*DeleteReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListPostMortems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostMortemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListPostMortems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListPostMortems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListPostMortems(ctx, req.(*ListPostMortemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetPostMortem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostMortemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetPostMortem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetPostMortem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetPostMortem(ctx, req.(*GetPostMortemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreatePostMortem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostMortemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreatePostMortem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreatePostMortem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreatePostMortem(ctx, req.(*CreatePostMortemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdatePostMortem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostMortemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdatePostMortem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdatePostMortem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdatePostMortem(ctx, req.(*UpdatePostMortemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeletePostMortem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostMortemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeletePostMortem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeletePostMortem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeletePostMortem(ctx, req.(*DeletePostMortemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListRunBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunbooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListRunBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListRunBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListRunBooks(ctx, req.(*ListRunbooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetRunBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetRunBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetRunBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetRunBook(ctx, req.(*GetRunbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateRunBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateRunBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateRunBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateRunBook(ctx, req.(*CreateRunbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateRunBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateRunBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateRunBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateRunBook(ctx, req.(*UpdateRunbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteRunBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteRunBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteRunBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteRunBook(ctx, req.(*DeleteRunbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_ListDataApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).ListDataApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/ListDataApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).ListDataApp(ctx, req.(*ListDataAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_GetDataApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).GetDataApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/GetDataApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).GetDataApp(ctx, req.(*GetDataAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_CreateDataApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).CreateDataApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/CreateDataApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).CreateDataApp(ctx, req.(*CreateDataAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_UpdateDataApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).UpdateDataApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/UpdateDataApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).UpdateDataApp(ctx, req.(*UpdateDataAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxyService_DeleteDataApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServiceServer).DeleteDataApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService/DeleteDataApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServiceServer).DeleteDataApp(ctx, req.(*DeleteDataAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseProxyService_ServiceDesc is the grpc.ServiceDesc for DatabaseProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.dbproxyd.v1.DatabaseProxyService",
	HandlerType: (*DatabaseProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccounts",
			Handler:    _DatabaseProxyService_ListAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _DatabaseProxyService_GetAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _DatabaseProxyService_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _DatabaseProxyService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _DatabaseProxyService_DeleteAccount_Handler,
		},
		{
			MethodName: "ListAlerts",
			Handler:    _DatabaseProxyService_ListAlerts_Handler,
		},
		{
			MethodName: "GetAlert",
			Handler:    _DatabaseProxyService_GetAlert_Handler,
		},
		{
			MethodName: "CreateAlert",
			Handler:    _DatabaseProxyService_CreateAlert_Handler,
		},
		{
			MethodName: "UpdateAlert",
			Handler:    _DatabaseProxyService_UpdateAlert_Handler,
		},
		{
			MethodName: "DeleteAlert",
			Handler:    _DatabaseProxyService_DeleteAlert_Handler,
		},
		{
			MethodName: "ListTodos",
			Handler:    _DatabaseProxyService_ListTodos_Handler,
		},
		{
			MethodName: "GetTodo",
			Handler:    _DatabaseProxyService_GetTodo_Handler,
		},
		{
			MethodName: "CreateTodo",
			Handler:    _DatabaseProxyService_CreateTodo_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _DatabaseProxyService_UpdateTodo_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _DatabaseProxyService_DeleteTodo_Handler,
		},
		{
			MethodName: "ListMeetings",
			Handler:    _DatabaseProxyService_ListMeetings_Handler,
		},
		{
			MethodName: "GetMeeting",
			Handler:    _DatabaseProxyService_GetMeeting_Handler,
		},
		{
			MethodName: "CreateMeeting",
			Handler:    _DatabaseProxyService_CreateMeeting_Handler,
		},
		{
			MethodName: "UpdateMeeting",
			Handler:    _DatabaseProxyService_UpdateMeeting_Handler,
		},
		{
			MethodName: "DeleteMeeting",
			Handler:    _DatabaseProxyService_DeleteMeeting_Handler,
		},
		{
			MethodName: "ListAttachments",
			Handler:    _DatabaseProxyService_ListAttachments_Handler,
		},
		{
			MethodName: "GetAttachment",
			Handler:    _DatabaseProxyService_GetAttachment_Handler,
		},
		{
			MethodName: "CreateAttachment",
			Handler:    _DatabaseProxyService_CreateAttachment_Handler,
		},
		{
			MethodName: "UpdateAttachment",
			Handler:    _DatabaseProxyService_UpdateAttachment_Handler,
		},
		{
			MethodName: "DeleteAttachment",
			Handler:    _DatabaseProxyService_DeleteAttachment_Handler,
		},
		{
			MethodName: "ListApiTokens",
			Handler:    _DatabaseProxyService_ListApiTokens_Handler,
		},
		{
			MethodName: "GetApiToken",
			Handler:    _DatabaseProxyService_GetApiToken_Handler,
		},
		{
			MethodName: "CreateApiToken",
			Handler:    _DatabaseProxyService_CreateApiToken_Handler,
		},
		{
			MethodName: "UpdateApiToken",
			Handler:    _DatabaseProxyService_UpdateApiToken_Handler,
		},
		{
			MethodName: "DeleteApiToken",
			Handler:    _DatabaseProxyService_DeleteApiToken_Handler,
		},
		{
			MethodName: "ListConnections",
			Handler:    _DatabaseProxyService_ListConnections_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _DatabaseProxyService_GetConnection_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _DatabaseProxyService_CreateConnection_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _DatabaseProxyService_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _DatabaseProxyService_DeleteConnection_Handler,
		},
		{
			MethodName: "ListLabs",
			Handler:    _DatabaseProxyService_ListLabs_Handler,
		},
		{
			MethodName: "GetLab",
			Handler:    _DatabaseProxyService_GetLab_Handler,
		},
		{
			MethodName: "CreateLab",
			Handler:    _DatabaseProxyService_CreateLab_Handler,
		},
		{
			MethodName: "UpdateLab",
			Handler:    _DatabaseProxyService_UpdateLab_Handler,
		},
		{
			MethodName: "DeleteLab",
			Handler:    _DatabaseProxyService_DeleteLab_Handler,
		},
		{
			MethodName: "ListLicenses",
			Handler:    _DatabaseProxyService_ListLicenses_Handler,
		},
		{
			MethodName: "GetLicense",
			Handler:    _DatabaseProxyService_GetLicense_Handler,
		},
		{
			MethodName: "CreateLicense",
			Handler:    _DatabaseProxyService_CreateLicense_Handler,
		},
		{
			MethodName: "UpdateLicense",
			Handler:    _DatabaseProxyService_UpdateLicense_Handler,
		},
		{
			MethodName: "DeleteLicense",
			Handler:    _DatabaseProxyService_DeleteLicense_Handler,
		},
		{
			MethodName: "ListNotifiers",
			Handler:    _DatabaseProxyService_ListNotifiers_Handler,
		},
		{
			MethodName: "GetNotifier",
			Handler:    _DatabaseProxyService_GetNotifier_Handler,
		},
		{
			MethodName: "CreateNotifier",
			Handler:    _DatabaseProxyService_CreateNotifier_Handler,
		},
		{
			MethodName: "UpdateNotifier",
			Handler:    _DatabaseProxyService_UpdateNotifier_Handler,
		},
		{
			MethodName: "DeleteNotifier",
			Handler:    _DatabaseProxyService_DeleteNotifier_Handler,
		},
		{
			MethodName: "ListServingSites",
			Handler:    _DatabaseProxyService_ListServingSites_Handler,
		},
		{
			MethodName: "GetServingSite",
			Handler:    _DatabaseProxyService_GetServingSite_Handler,
		},
		{
			MethodName: "CreateServingSite",
			Handler:    _DatabaseProxyService_CreateServingSite_Handler,
		},
		{
			MethodName: "UpdateServingSite",
			Handler:    _DatabaseProxyService_UpdateServingSite_Handler,
		},
		{
			MethodName: "DeleteServingSite",
			Handler:    _DatabaseProxyService_DeleteServingSite_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _DatabaseProxyService_ListTenants_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _DatabaseProxyService_GetTenant_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _DatabaseProxyService_CreateTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _DatabaseProxyService_UpdateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _DatabaseProxyService_DeleteTenant_Handler,
		},
		{
			MethodName: "ListVirtualBuckets",
			Handler:    _DatabaseProxyService_ListVirtualBuckets_Handler,
		},
		{
			MethodName: "GetVirtualBucket",
			Handler:    _DatabaseProxyService_GetVirtualBucket_Handler,
		},
		{
			MethodName: "CreateVirtualBucket",
			Handler:    _DatabaseProxyService_CreateVirtualBucket_Handler,
		},
		{
			MethodName: "UpdateVirtualBucket",
			Handler:    _DatabaseProxyService_UpdateVirtualBucket_Handler,
		},
		{
			MethodName: "DeleteVirtualBucket",
			Handler:    _DatabaseProxyService_DeleteVirtualBucket_Handler,
		},
		{
			MethodName: "ListDataPipelines",
			Handler:    _DatabaseProxyService_ListDataPipelines_Handler,
		},
		{
			MethodName: "GetDataPipeline",
			Handler:    _DatabaseProxyService_GetDataPipeline_Handler,
		},
		{
			MethodName: "CreateDataPipeline",
			Handler:    _DatabaseProxyService_CreateDataPipeline_Handler,
		},
		{
			MethodName: "UpdateDataPipeline",
			Handler:    _DatabaseProxyService_UpdateDataPipeline_Handler,
		},
		{
			MethodName: "DeleteDataPipeline",
			Handler:    _DatabaseProxyService_DeleteDataPipeline_Handler,
		},
		{
			MethodName: "ListDataPipelineRuns",
			Handler:    _DatabaseProxyService_ListDataPipelineRuns_Handler,
		},
		{
			MethodName: "GetDataPipelineRun",
			Handler:    _DatabaseProxyService_GetDataPipelineRun_Handler,
		},
		{
			MethodName: "CreateDataPipelineRun",
			Handler:    _DatabaseProxyService_CreateDataPipelineRun_Handler,
		},
		{
			MethodName: "UpdateDataPipelineRun",
			Handler:    _DatabaseProxyService_UpdateDataPipelineRun_Handler,
		},
		{
			MethodName: "DeleteDataPipelineRun",
			Handler:    _DatabaseProxyService_DeleteDataPipelineRun_Handler,
		},
		{
			MethodName: "ListDataProducts",
			Handler:    _DatabaseProxyService_ListDataProducts_Handler,
		},
		{
			MethodName: "GetDataProduct",
			Handler:    _DatabaseProxyService_GetDataProduct_Handler,
		},
		{
			MethodName: "CreateDataProduct",
			Handler:    _DatabaseProxyService_CreateDataProduct_Handler,
		},
		{
			MethodName: "UpdateDataProduct",
			Handler:    _DatabaseProxyService_UpdateDataProduct_Handler,
		},
		{
			MethodName: "DeleteDataProduct",
			Handler:    _DatabaseProxyService_DeleteDataProduct_Handler,
		},
		{
			MethodName: "ListDataProductVersions",
			Handler:    _DatabaseProxyService_ListDataProductVersions_Handler,
		},
		{
			MethodName: "GetDataProductVersion",
			Handler:    _DatabaseProxyService_GetDataProductVersion_Handler,
		},
		{
			MethodName: "CreateDataProductVersion",
			Handler:    _DatabaseProxyService_CreateDataProductVersion_Handler,
		},
		{
			MethodName: "UpdateDataProductVersion",
			Handler:    _DatabaseProxyService_UpdateDataProductVersion_Handler,
		},
		{
			MethodName: "DeleteDataProductVersion",
			Handler:    _DatabaseProxyService_DeleteDataProductVersion_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _DatabaseProxyService_ListDatasets_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _DatabaseProxyService_GetDataset_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _DatabaseProxyService_CreateDataset_Handler,
		},
		{
			MethodName: "UpdateDataset",
			Handler:    _DatabaseProxyService_UpdateDataset_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _DatabaseProxyService_DeleteDataset_Handler,
		},
		{
			MethodName: "ListDataSources",
			Handler:    _DatabaseProxyService_ListDataSources_Handler,
		},
		{
			MethodName: "GetDataSource",
			Handler:    _DatabaseProxyService_GetDataSource_Handler,
		},
		{
			MethodName: "CreateDataSource",
			Handler:    _DatabaseProxyService_CreateDataSource_Handler,
		},
		{
			MethodName: "UpdateDataSource",
			Handler:    _DatabaseProxyService_UpdateDataSource_Handler,
		},
		{
			MethodName: "DeleteDataSource",
			Handler:    _DatabaseProxyService_DeleteDataSource_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _DatabaseProxyService_ListEntities_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _DatabaseProxyService_GetEntity_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _DatabaseProxyService_CreateEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _DatabaseProxyService_UpdateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _DatabaseProxyService_DeleteEntity_Handler,
		},
		{
			MethodName: "ListModelClass",
			Handler:    _DatabaseProxyService_ListModelClass_Handler,
		},
		{
			MethodName: "GetModelClass",
			Handler:    _DatabaseProxyService_GetModelClass_Handler,
		},
		{
			MethodName: "CreateModelClass",
			Handler:    _DatabaseProxyService_CreateModelClass_Handler,
		},
		{
			MethodName: "UpdateModelClas",
			Handler:    _DatabaseProxyService_UpdateModelClas_Handler,
		},
		{
			MethodName: "DeleteModelClass",
			Handler:    _DatabaseProxyService_DeleteModelClass_Handler,
		},
		{
			MethodName: "ListFeatureHistograms",
			Handler:    _DatabaseProxyService_ListFeatureHistograms_Handler,
		},
		{
			MethodName: "GetFeatureHistogram",
			Handler:    _DatabaseProxyService_GetFeatureHistogram_Handler,
		},
		{
			MethodName: "CreateFeatureHistogram",
			Handler:    _DatabaseProxyService_CreateFeatureHistogram_Handler,
		},
		{
			MethodName: "UpdateFeatureHistogram",
			Handler:    _DatabaseProxyService_UpdateFeatureHistogram_Handler,
		},
		{
			MethodName: "DeleteFeatureHistogram",
			Handler:    _DatabaseProxyService_DeleteFeatureHistogram_Handler,
		},
		{
			MethodName: "ListFeatureGroups",
			Handler:    _DatabaseProxyService_ListFeatureGroups_Handler,
		},
		{
			MethodName: "GetFeatureGroup",
			Handler:    _DatabaseProxyService_GetFeatureGroup_Handler,
		},
		{
			MethodName: "CreateFeatureGroup",
			Handler:    _DatabaseProxyService_CreateFeatureGroup_Handler,
		},
		{
			MethodName: "UpdateFeatureGroup",
			Handler:    _DatabaseProxyService_UpdateFeatureGroup_Handler,
		},
		{
			MethodName: "DeleteFeatureGroup",
			Handler:    _DatabaseProxyService_DeleteFeatureGroup_Handler,
		},
		{
			MethodName: "ListRecipes",
			Handler:    _DatabaseProxyService_ListRecipes_Handler,
		},
		{
			MethodName: "GetRecipe",
			Handler:    _DatabaseProxyService_GetRecipe_Handler,
		},
		{
			MethodName: "CreateRecipe",
			Handler:    _DatabaseProxyService_CreateRecipe_Handler,
		},
		{
			MethodName: "UpdateRecipe",
			Handler:    _DatabaseProxyService_UpdateRecipe_Handler,
		},
		{
			MethodName: "DeleteRecipe",
			Handler:    _DatabaseProxyService_DeleteRecipe_Handler,
		},
		{
			MethodName: "ListRecipeRuns",
			Handler:    _DatabaseProxyService_ListRecipeRuns_Handler,
		},
		{
			MethodName: "GetRecipeRun",
			Handler:    _DatabaseProxyService_GetRecipeRun_Handler,
		},
		{
			MethodName: "CreateRecipeRun",
			Handler:    _DatabaseProxyService_CreateRecipeRun_Handler,
		},
		{
			MethodName: "UpdateRecipeRun",
			Handler:    _DatabaseProxyService_UpdateRecipeRun_Handler,
		},
		{
			MethodName: "DeleteRecipeRun",
			Handler:    _DatabaseProxyService_DeleteRecipeRun_Handler,
		},
		{
			MethodName: "ListReports",
			Handler:    _DatabaseProxyService_ListReports_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _DatabaseProxyService_GetReport_Handler,
		},
		{
			MethodName: "CreateReport",
			Handler:    _DatabaseProxyService_CreateReport_Handler,
		},
		{
			MethodName: "UpdateReport",
			Handler:    _DatabaseProxyService_UpdateReport_Handler,
		},
		{
			MethodName: "DeleteReport",
			Handler:    _DatabaseProxyService_DeleteReport_Handler,
		},
		{
			MethodName: "ListStudies",
			Handler:    _DatabaseProxyService_ListStudies_Handler,
		},
		{
			MethodName: "GetStudy",
			Handler:    _DatabaseProxyService_GetStudy_Handler,
		},
		{
			MethodName: "CreateStudy",
			Handler:    _DatabaseProxyService_CreateStudy_Handler,
		},
		{
			MethodName: "UpdateStudy",
			Handler:    _DatabaseProxyService_UpdateStudy_Handler,
		},
		{
			MethodName: "DeleteStudy",
			Handler:    _DatabaseProxyService_DeleteStudy_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _DatabaseProxyService_ListModels_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _DatabaseProxyService_GetModel_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _DatabaseProxyService_CreateModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _DatabaseProxyService_UpdateModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _DatabaseProxyService_DeleteModel_Handler,
		},
		{
			MethodName: "ListPredictions",
			Handler:    _DatabaseProxyService_ListPredictions_Handler,
		},
		{
			MethodName: "GetPrediction",
			Handler:    _DatabaseProxyService_GetPrediction_Handler,
		},
		{
			MethodName: "CreatePrediction",
			Handler:    _DatabaseProxyService_CreatePrediction_Handler,
		},
		{
			MethodName: "UpdatePrediction",
			Handler:    _DatabaseProxyService_UpdatePrediction_Handler,
		},
		{
			MethodName: "DeletePrediction",
			Handler:    _DatabaseProxyService_DeletePrediction_Handler,
		},
		{
			MethodName: "ListPredictors",
			Handler:    _DatabaseProxyService_ListPredictors_Handler,
		},
		{
			MethodName: "GetPredictor",
			Handler:    _DatabaseProxyService_GetPredictor_Handler,
		},
		{
			MethodName: "CreatePredictor",
			Handler:    _DatabaseProxyService_CreatePredictor_Handler,
		},
		{
			MethodName: "UpdatePredictor",
			Handler:    _DatabaseProxyService_UpdatePredictor_Handler,
		},
		{
			MethodName: "DeletePredictor",
			Handler:    _DatabaseProxyService_DeletePredictor_Handler,
		},
		{
			MethodName: "ListReviews",
			Handler:    _DatabaseProxyService_ListReviews_Handler,
		},
		{
			MethodName: "GetReview",
			Handler:    _DatabaseProxyService_GetReview_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _DatabaseProxyService_CreateReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _DatabaseProxyService_UpdateReview_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _DatabaseProxyService_DeleteReview_Handler,
		},
		{
			MethodName: "ListPostMortems",
			Handler:    _DatabaseProxyService_ListPostMortems_Handler,
		},
		{
			MethodName: "GetPostMortem",
			Handler:    _DatabaseProxyService_GetPostMortem_Handler,
		},
		{
			MethodName: "CreatePostMortem",
			Handler:    _DatabaseProxyService_CreatePostMortem_Handler,
		},
		{
			MethodName: "UpdatePostMortem",
			Handler:    _DatabaseProxyService_UpdatePostMortem_Handler,
		},
		{
			MethodName: "DeletePostMortem",
			Handler:    _DatabaseProxyService_DeletePostMortem_Handler,
		},
		{
			MethodName: "ListRunBooks",
			Handler:    _DatabaseProxyService_ListRunBooks_Handler,
		},
		{
			MethodName: "GetRunBook",
			Handler:    _DatabaseProxyService_GetRunBook_Handler,
		},
		{
			MethodName: "CreateRunBook",
			Handler:    _DatabaseProxyService_CreateRunBook_Handler,
		},
		{
			MethodName: "UpdateRunBook",
			Handler:    _DatabaseProxyService_UpdateRunBook_Handler,
		},
		{
			MethodName: "DeleteRunBook",
			Handler:    _DatabaseProxyService_DeleteRunBook_Handler,
		},
		{
			MethodName: "ListDataApp",
			Handler:    _DatabaseProxyService_ListDataApp_Handler,
		},
		{
			MethodName: "GetDataApp",
			Handler:    _DatabaseProxyService_GetDataApp_Handler,
		},
		{
			MethodName: "CreateDataApp",
			Handler:    _DatabaseProxyService_CreateDataApp_Handler,
		},
		{
			MethodName: "UpdateDataApp",
			Handler:    _DatabaseProxyService_UpdateDataApp_Handler,
		},
		{
			MethodName: "DeleteDataApp",
			Handler:    _DatabaseProxyService_DeleteDataApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/dbproxyd/v1/dbproxyd.proto",
}
