// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: github.com/metaprov/modelaapi/services/virtualbucket/v1/virtualbucket.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VirtualBucketServiceClient is the client API for VirtualBucketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualBucketServiceClient interface {
	ListVirtualBuckets(ctx context.Context, in *ListVirtualBucketsRequest, opts ...grpc.CallOption) (*ListVirtualBucketsResponse, error)
	CreateVirtualBucket(ctx context.Context, in *CreateVirtualBucketRequest, opts ...grpc.CallOption) (*CreateVirtualBucketResponse, error)
	GetVirtualBucket(ctx context.Context, in *GetVirtualBucketRequest, opts ...grpc.CallOption) (*GetVirtualBucketResponse, error)
	UpdateVirtualBucket(ctx context.Context, in *UpdateVirtualBucketRequest, opts ...grpc.CallOption) (*UpdateVirtualBucketResponse, error)
	DeleteVirtualBucket(ctx context.Context, in *DeleteVirtualBucketRequest, opts ...grpc.CallOption) (*DeleteVirtualBucketResponse, error)
}

type virtualBucketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualBucketServiceClient(cc grpc.ClientConnInterface) VirtualBucketServiceClient {
	return &virtualBucketServiceClient{cc}
}

func (c *virtualBucketServiceClient) ListVirtualBuckets(ctx context.Context, in *ListVirtualBucketsRequest, opts ...grpc.CallOption) (*ListVirtualBucketsResponse, error) {
	out := new(ListVirtualBucketsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualbucket.v1.VirtualBucketService/ListVirtualBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualBucketServiceClient) CreateVirtualBucket(ctx context.Context, in *CreateVirtualBucketRequest, opts ...grpc.CallOption) (*CreateVirtualBucketResponse, error) {
	out := new(CreateVirtualBucketResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualbucket.v1.VirtualBucketService/CreateVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualBucketServiceClient) GetVirtualBucket(ctx context.Context, in *GetVirtualBucketRequest, opts ...grpc.CallOption) (*GetVirtualBucketResponse, error) {
	out := new(GetVirtualBucketResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualbucket.v1.VirtualBucketService/GetVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualBucketServiceClient) UpdateVirtualBucket(ctx context.Context, in *UpdateVirtualBucketRequest, opts ...grpc.CallOption) (*UpdateVirtualBucketResponse, error) {
	out := new(UpdateVirtualBucketResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualbucket.v1.VirtualBucketService/UpdateVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualBucketServiceClient) DeleteVirtualBucket(ctx context.Context, in *DeleteVirtualBucketRequest, opts ...grpc.CallOption) (*DeleteVirtualBucketResponse, error) {
	out := new(DeleteVirtualBucketResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualbucket.v1.VirtualBucketService/DeleteVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualBucketServiceServer is the server API for VirtualBucketService service.
// All implementations must embed UnimplementedVirtualBucketServiceServer
// for forward compatibility
type VirtualBucketServiceServer interface {
	ListVirtualBuckets(context.Context, *ListVirtualBucketsRequest) (*ListVirtualBucketsResponse, error)
	CreateVirtualBucket(context.Context, *CreateVirtualBucketRequest) (*CreateVirtualBucketResponse, error)
	GetVirtualBucket(context.Context, *GetVirtualBucketRequest) (*GetVirtualBucketResponse, error)
	UpdateVirtualBucket(context.Context, *UpdateVirtualBucketRequest) (*UpdateVirtualBucketResponse, error)
	DeleteVirtualBucket(context.Context, *DeleteVirtualBucketRequest) (*DeleteVirtualBucketResponse, error)
	mustEmbedUnimplementedVirtualBucketServiceServer()
}

// UnimplementedVirtualBucketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVirtualBucketServiceServer struct {
}

func (UnimplementedVirtualBucketServiceServer) ListVirtualBuckets(context.Context, *ListVirtualBucketsRequest) (*ListVirtualBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualBuckets not implemented")
}
func (UnimplementedVirtualBucketServiceServer) CreateVirtualBucket(context.Context, *CreateVirtualBucketRequest) (*CreateVirtualBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualBucket not implemented")
}
func (UnimplementedVirtualBucketServiceServer) GetVirtualBucket(context.Context, *GetVirtualBucketRequest) (*GetVirtualBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualBucket not implemented")
}
func (UnimplementedVirtualBucketServiceServer) UpdateVirtualBucket(context.Context, *UpdateVirtualBucketRequest) (*UpdateVirtualBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualBucket not implemented")
}
func (UnimplementedVirtualBucketServiceServer) DeleteVirtualBucket(context.Context, *DeleteVirtualBucketRequest) (*DeleteVirtualBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualBucket not implemented")
}
func (UnimplementedVirtualBucketServiceServer) mustEmbedUnimplementedVirtualBucketServiceServer() {}

// UnsafeVirtualBucketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualBucketServiceServer will
// result in compilation errors.
type UnsafeVirtualBucketServiceServer interface {
	mustEmbedUnimplementedVirtualBucketServiceServer()
}

func RegisterVirtualBucketServiceServer(s grpc.ServiceRegistrar, srv VirtualBucketServiceServer) {
	s.RegisterService(&VirtualBucketService_ServiceDesc, srv)
}

func _VirtualBucketService_ListVirtualBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVirtualBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualBucketServiceServer).ListVirtualBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualbucket.v1.VirtualBucketService/ListVirtualBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualBucketServiceServer).ListVirtualBuckets(ctx, req.(*ListVirtualBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualBucketService_CreateVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualBucketServiceServer).CreateVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualbucket.v1.VirtualBucketService/CreateVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualBucketServiceServer).CreateVirtualBucket(ctx, req.(*CreateVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualBucketService_GetVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualBucketServiceServer).GetVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualbucket.v1.VirtualBucketService/GetVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualBucketServiceServer).GetVirtualBucket(ctx, req.(*GetVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualBucketService_UpdateVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualBucketServiceServer).UpdateVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualbucket.v1.VirtualBucketService/UpdateVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualBucketServiceServer).UpdateVirtualBucket(ctx, req.(*UpdateVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualBucketService_DeleteVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualBucketServiceServer).DeleteVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualbucket.v1.VirtualBucketService/DeleteVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualBucketServiceServer).DeleteVirtualBucket(ctx, req.(*DeleteVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualBucketService_ServiceDesc is the grpc.ServiceDesc for VirtualBucketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualBucketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.virtualbucket.v1.VirtualBucketService",
	HandlerType: (*VirtualBucketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVirtualBuckets",
			Handler:    _VirtualBucketService_ListVirtualBuckets_Handler,
		},
		{
			MethodName: "CreateVirtualBucket",
			Handler:    _VirtualBucketService_CreateVirtualBucket_Handler,
		},
		{
			MethodName: "GetVirtualBucket",
			Handler:    _VirtualBucketService_GetVirtualBucket_Handler,
		},
		{
			MethodName: "UpdateVirtualBucket",
			Handler:    _VirtualBucketService_UpdateVirtualBucket_Handler,
		},
		{
			MethodName: "DeleteVirtualBucket",
			Handler:    _VirtualBucketService_DeleteVirtualBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/virtualbucket/v1/virtualbucket.proto",
}
