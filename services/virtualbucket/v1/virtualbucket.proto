syntax = "proto3";
option go_package = "github.com/metaprov/modeldapi/services/virtualbucket/v1";
package github.com.metaprov.modeld.services.virtualbucket.v1;

import "google/api/annotations.proto";
import "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1/generated.proto";

message ListVirtualBucketsRequest {
    string namespace = 1;
    map<string,string> labels =2;
}

message ListVirtualBucketsResponse {
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucketList items = 1;
}


message CreateVirtualBucketRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucketSpec spec = 4;
}

message CreateVirtualBucketResponse {

}

message UpdateVirtualBucketRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucketSpec spec = 4;
}

message UpdateVirtualBucketResponse {

}

message GetVirtualBucketRequest {
    string namespace = 1;
    string name      = 2;
}


message GetVirtualBucketResponse {
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucket item = 1;
    string yaml = 2;
}




message DeleteVirtualBucketRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteVirtualBucketResponse {

}




service VirtualBucketService {
    rpc ListVirtualBuckets(ListVirtualBucketsRequest) returns (ListVirtualBucketsResponse) {
        option (google.api.http).get = "/v1/virtualbuckets";
    }
    rpc CreateVirtualBucket(CreateVirtualBucketRequest) returns (CreateVirtualBucketResponse) {
        option (google.api.http) = {
			post: "/v1/virtualbuckets"
			body: "virtualbucket"
		};
    }
    rpc GetVirtualBucket(GetVirtualBucketRequest) returns (GetVirtualBucketResponse) {
        option (google.api.http).get = "/v1/virtualbuckets/{name}";
    }
    rpc UpdateVirtualBucket(UpdateVirtualBucketRequest) returns (UpdateVirtualBucketResponse) {
        option (google.api.http) = {
			put: "/v1/virtualbuckets/{virtualbucket.metadata.name}"
			body: "virtualbucket"
		};
    }

    rpc DeleteVirtualBucket(DeleteVirtualBucketRequest) returns (DeleteVirtualBucketResponse) {
        option (google.api.http) = {
			delete: "/v1/virtualbuckets/{virtualbucket.metadata.name}"
		};
    }


}