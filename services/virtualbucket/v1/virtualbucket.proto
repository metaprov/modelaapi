syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/virtualbucket/v1";
package github.com.metaprov.modelaapi.services.virtualbucket.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1/generated.proto";

message ListVirtualBucketsRequest {
    string namespace = 1;
    map<string,string> labels =2;
}

message ListVirtualBucketsResponse {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucketList virtualbuckets = 1;
    string next_page_token = 2;
}


message CreateVirtualBucketRequest {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket virtualbucket = 1;
}

message CreateVirtualBucketResponse {}

message UpdateVirtualBucketRequest {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket virtualbucket = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateVirtualBucketResponse {}

message GetVirtualBucketRequest {
    string namespace = 1;
    string name      = 2;
}

message GetVirtualBucketResponse {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.VirtualBucket virtualbucket = 1;
    string yaml = 2;
}

message DeleteVirtualBucketRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteVirtualBucketResponse {}


service VirtualBucketService {
    rpc ListVirtualBuckets(ListVirtualBucketsRequest) returns (ListVirtualBucketsResponse) {
        option (google.api.http).get = "/v1/virtualbuckets/{namespace}";
    }
    rpc CreateVirtualBucket(CreateVirtualBucketRequest) returns (CreateVirtualBucketResponse) {
        option (google.api.http) = {
			post: "/v1/virtualbuckets"
			body: "*"
		};
    }
    rpc GetVirtualBucket(GetVirtualBucketRequest) returns (GetVirtualBucketResponse) {
        option (google.api.http).get = "/v1/virtualbuckets/{namespace}/{name}";
    }
    rpc UpdateVirtualBucket(UpdateVirtualBucketRequest) returns (UpdateVirtualBucketResponse) {
        option (google.api.http) = {
			put: "/v1/virtualbuckets/{virtualbucket.metadata.namespace}/{virtualbucket.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteVirtualBucket(DeleteVirtualBucketRequest) returns (DeleteVirtualBucketResponse) {
        option (google.api.http) = {
			delete: "/v1/virtualbuckets/{namespace}/{name}"
		};
    }


}