syntax = "proto3";

option go_package = "github.com/metaprov/modelaapi/services/model/v1";
package github.com.metaprov.modelaapi.services.model.v1;

import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/services/common/v1/common.proto";


message CreateModelProfileResponse {
    string uri       = 3;
}

message CreateModelProfileRequest {
    string namespace = 1;
    string name      = 2;
}

message ListModelProfileRequest {
    string namespace = 1;
    string name      = 2;
}


message GetModelProfileRequest {
    string namespace = 1;
    string name      = 2;
    string uri       = 3;
}

message GetModelProfileResponse {
    github.com.metaprov.modelaapi.services.common.v1.ModelProfile profile = 1;
}

message GetModelLogsResponse {
    map<string,string> logs = 1;
}

message GetModelLogsRequest {
    string namespace = 1;
    string name      = 2;
}


message CreateModelRequest {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model item = 1;
}

message CreateModelResponse {}

message UpdateModelRequest {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model item = 5;
}

message UpdateModelResponse {}

message GetModelResponse {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model item = 1;
    string yaml = 2;

}

message AbortModelRequest {
    string namespace = 1;
    string name      = 2;
}

message AbortModelResponse {

}

message PauseModelRequest {
    string namespace = 1;
    string name      = 2;
}

message PauseModelResponse {

}

message ResumeModelRequest {
    string namespace = 1;
    string name      = 2;
}

message ResumeModelResponse {

}

message CompareModelsRequest {
    string namespace       = 1;
    repeated string names  = 2;
}

message CompareModelsResponse {
    string namespace       = 1;
    repeated string names  = 2;
    repeated github.com.metaprov.modelaapi.services.common.v1.ModelProfile profiles = 3;
}

message CompileModelRequest {
    string namespace       = 1;
    string name            = 2;
    string target          = 3;
    string compiler        = 4;
}

message CompileModelResponse {
    string namespace       = 1;
    string names  = 2;    
}




message DeployModelRequest {
    string namespace = 1;
    string name      = 2;
    string predictor = 3;
    int32  replicas  = 4;
    int32  traffic   = 5; // canary traffic
    string role      = 6;
}

message PublishModelRequest {
    string namespace = 1;
    string name      = 2;
}


message DeployModelResponse {}

message ListModelsRequest {
    string namespace = 1;
    map<string,string> labels =2;
}

message ListModelsResponse {
    github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelList items = 1;
}


message GetModelRequest {
    string namespace = 1;
    string name      = 2;
}

message UpdateModelResult {

}

message DeleteModelRequest{
    string namespace = 1;
    string name      = 2;
}

message DeleteModelResponse {

}

message PublishModelResponse {
    string modelTarHash      = 1; // the sig for the moder tar file.
}

message GetMisclassRequest {
    string namespace = 1;
    string name      = 2;
}

message GetMisclassResponse {
    github.com.metaprov.modelaapi.services.common.v1.TableView   table   =1;
}

message DownloadModelRequest {
    string namespace = 1;
    string name      = 2;
}

// Answer the report in base 64
message DownloadModelResponse {
    bytes raw = 1;
}

// Flag model
message FlagModelRequest {
    string namespace = 1;
    string name      = 2;
}

// Answer the report in base 64
message FlagModelResponse {
    
}

// Flag model
message TestModelRequest {
    string namespace = 1;
    string name      = 2;
}

// Answer the report in base 64
message TestModelResponse {
    
}




service ModelService {
    rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {
        option (google.api.http).get = "/v1/model/{namespace}";
    }

    rpc CreateModel(CreateModelRequest) returns (CreateModelResponse) {
        option (google.api.http) = {
			post: "/v1/models"
			body: "*"
		};
    }

    rpc GetModel(GetModelRequest) returns (GetModelResponse) {
        option (google.api.http).get = "/v1/models/{namespace}/{name}";
    }

    rpc UpdateModel(UpdateModelRequest) returns (UpdateModelResponse) {
        option (google.api.http) = {
			put: "/v1/models/{item.metadata.namespace}/{item.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteModel(DeleteModelRequest) returns (DeleteModelResponse) {
        option (google.api.http).delete = "/v1/models/{namespace}/{name}";
    }

    rpc DeployModel(DeployModelRequest) returns (DeployModelResponse) {
        option (google.api.http) = {
			post: "/v1/models/{namespace}/{name}:deploy"
			body: "*"
		};
    }

    rpc PublishModel(PublishModelRequest) returns (PublishModelResponse) {
        option (google.api.http) = {
			post: "/v1/models/{namespace}/{name}:publish"
			body: "*"
		};
    }

    rpc CreateModelProfile(CreateModelProfileRequest) returns (CreateModelProfileResponse) {
        option (google.api.http).post = "/v1/models/{namespace}/{name}:profile";
    }

    rpc GetModelProfile(GetModelProfileRequest) returns (GetModelProfileResponse) {
        option (google.api.http).post = "/v1/models/{namespace}/{name}:profile";
    }

    rpc GetModelMisclass(GetMisclassRequest) returns (GetMisclassResponse) {
        option (google.api.http).get = "/v1/models/{namespace}/{name}:misclass";
    }

    rpc GetModelLogs(GetModelLogsRequest) returns (GetModelLogsResponse) {
        option (google.api.http).get = "/v1/models/{namespace}/{name}:logs";
    }

    rpc AbortModel(AbortModelRequest) returns (AbortModelResponse) {
        option (google.api.http).post = "/v1/models/{namespace}/{name}:abort";
    }

    rpc PauseModel(PauseModelRequest) returns (PauseModelResponse) {
        option (google.api.http).post = "/v1/models/{namespace}/{name}:pause";
    }

    rpc ResumeModel(ResumeModelRequest) returns (ResumeModelResponse) {
        option (google.api.http).post = "/v1/models/{namespace}/{name}:resume";
    }

    rpc CompareModels(CompareModelsRequest) returns (CompareModelsResponse) {
        option (google.api.http).post = "/v1/models/{namespace}/{names}:compare";
    }

    rpc CompileModel(CompileModelRequest) returns (CompileModelResponse) {
        option (google.api.http).post = "/v1/models/{namespace}/{name}:compile";
    }

    rpc DownloadModel(DownloadModelRequest) returns (DownloadModelResponse) {
        option (google.api.http).post = "/v1/models/{namespace}/{name}:download";
    }
    
    // Flag model 
    rpc FlagModel(FlagModelRequest) returns (FlagModelResponse) {
        option (google.api.http).post = "/v1/models/{namespace}/{name}:flag";
    }

    // Mark the model to test
    rpc TestModel(TestModelRequest) returns (TestModelResponse) {
        option (google.api.http).post = "/v1/models/{namespace}/{name}:test";
    }
}