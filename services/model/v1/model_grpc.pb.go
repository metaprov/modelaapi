// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/model/v1/model.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelServiceClient interface {
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error)
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error)
	UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*UpdateModelResponse, error)
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error)
	DeployModel(ctx context.Context, in *DeployModelRequest, opts ...grpc.CallOption) (*DeployModelResponse, error)
	PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error)
	CreateModelProfile(ctx context.Context, in *CreateModelProfileRequest, opts ...grpc.CallOption) (*CreateModelProfileResponse, error)
	GetModelProfile(ctx context.Context, in *GetModelProfileRequest, opts ...grpc.CallOption) (*GetModelProfileResponse, error)
	GetModelMisclass(ctx context.Context, in *GetMisclassRequest, opts ...grpc.CallOption) (*GetMisclassResponse, error)
	GetModelLogs(ctx context.Context, in *GetModelLogsRequest, opts ...grpc.CallOption) (*GetModelLogsResponse, error)
	AbortModel(ctx context.Context, in *AbortModelRequest, opts ...grpc.CallOption) (*AbortModelResponse, error)
	PauseModel(ctx context.Context, in *PauseModelRequest, opts ...grpc.CallOption) (*PauseModelResponse, error)
	ResumeModel(ctx context.Context, in *ResumeModelRequest, opts ...grpc.CallOption) (*ResumeModelResponse, error)
	CompareModels(ctx context.Context, in *CompareModelsRequest, opts ...grpc.CallOption) (*CompareModelsResponse, error)
	CompileModel(ctx context.Context, in *CompileModelRequest, opts ...grpc.CallOption) (*CompileModelResponse, error)
	DownloadModel(ctx context.Context, in *DownloadModelRequest, opts ...grpc.CallOption) (*DownloadModelResponse, error)
	// Flag model
	FlagModel(ctx context.Context, in *FlagModelRequest, opts ...grpc.CallOption) (*FlagModelResponse, error)
	// promote model to live in model class
	PromoteModel(ctx context.Context, in *PromoteModelRequest, opts ...grpc.CallOption) (*PromoteModelResponse, error)
	// Mark the model to test
	TestModel(ctx context.Context, in *TestModelRequest, opts ...grpc.CallOption) (*TestModelResponse, error)
}

type modelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelServiceClient(cc grpc.ClientConnInterface) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error) {
	out := new(CreateModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/CreateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error) {
	out := new(GetModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*UpdateModelResponse, error) {
	out := new(UpdateModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/UpdateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error) {
	out := new(DeleteModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/DeleteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeployModel(ctx context.Context, in *DeployModelRequest, opts ...grpc.CallOption) (*DeployModelResponse, error) {
	out := new(DeployModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/DeployModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error) {
	out := new(PublishModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/PublishModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) CreateModelProfile(ctx context.Context, in *CreateModelProfileRequest, opts ...grpc.CallOption) (*CreateModelProfileResponse, error) {
	out := new(CreateModelProfileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/CreateModelProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModelProfile(ctx context.Context, in *GetModelProfileRequest, opts ...grpc.CallOption) (*GetModelProfileResponse, error) {
	out := new(GetModelProfileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/GetModelProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModelMisclass(ctx context.Context, in *GetMisclassRequest, opts ...grpc.CallOption) (*GetMisclassResponse, error) {
	out := new(GetMisclassResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/GetModelMisclass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModelLogs(ctx context.Context, in *GetModelLogsRequest, opts ...grpc.CallOption) (*GetModelLogsResponse, error) {
	out := new(GetModelLogsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/GetModelLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AbortModel(ctx context.Context, in *AbortModelRequest, opts ...grpc.CallOption) (*AbortModelResponse, error) {
	out := new(AbortModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/AbortModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) PauseModel(ctx context.Context, in *PauseModelRequest, opts ...grpc.CallOption) (*PauseModelResponse, error) {
	out := new(PauseModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/PauseModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) ResumeModel(ctx context.Context, in *ResumeModelRequest, opts ...grpc.CallOption) (*ResumeModelResponse, error) {
	out := new(ResumeModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/ResumeModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) CompareModels(ctx context.Context, in *CompareModelsRequest, opts ...grpc.CallOption) (*CompareModelsResponse, error) {
	out := new(CompareModelsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/CompareModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) CompileModel(ctx context.Context, in *CompileModelRequest, opts ...grpc.CallOption) (*CompileModelResponse, error) {
	out := new(CompileModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/CompileModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DownloadModel(ctx context.Context, in *DownloadModelRequest, opts ...grpc.CallOption) (*DownloadModelResponse, error) {
	out := new(DownloadModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/DownloadModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) FlagModel(ctx context.Context, in *FlagModelRequest, opts ...grpc.CallOption) (*FlagModelResponse, error) {
	out := new(FlagModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/FlagModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) PromoteModel(ctx context.Context, in *PromoteModelRequest, opts ...grpc.CallOption) (*PromoteModelResponse, error) {
	out := new(PromoteModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/PromoteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) TestModel(ctx context.Context, in *TestModelRequest, opts ...grpc.CallOption) (*TestModelResponse, error) {
	out := new(TestModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.model.v1.ModelService/TestModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServiceServer is the server API for ModelService service.
// All implementations must embed UnimplementedModelServiceServer
// for forward compatibility
type ModelServiceServer interface {
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error)
	GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error)
	UpdateModel(context.Context, *UpdateModelRequest) (*UpdateModelResponse, error)
	DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error)
	DeployModel(context.Context, *DeployModelRequest) (*DeployModelResponse, error)
	PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error)
	CreateModelProfile(context.Context, *CreateModelProfileRequest) (*CreateModelProfileResponse, error)
	GetModelProfile(context.Context, *GetModelProfileRequest) (*GetModelProfileResponse, error)
	GetModelMisclass(context.Context, *GetMisclassRequest) (*GetMisclassResponse, error)
	GetModelLogs(context.Context, *GetModelLogsRequest) (*GetModelLogsResponse, error)
	AbortModel(context.Context, *AbortModelRequest) (*AbortModelResponse, error)
	PauseModel(context.Context, *PauseModelRequest) (*PauseModelResponse, error)
	ResumeModel(context.Context, *ResumeModelRequest) (*ResumeModelResponse, error)
	CompareModels(context.Context, *CompareModelsRequest) (*CompareModelsResponse, error)
	CompileModel(context.Context, *CompileModelRequest) (*CompileModelResponse, error)
	DownloadModel(context.Context, *DownloadModelRequest) (*DownloadModelResponse, error)
	// Flag model
	FlagModel(context.Context, *FlagModelRequest) (*FlagModelResponse, error)
	// promote model to live in model class
	PromoteModel(context.Context, *PromoteModelRequest) (*PromoteModelResponse, error)
	// Mark the model to test
	TestModel(context.Context, *TestModelRequest) (*TestModelResponse, error)
	mustEmbedUnimplementedModelServiceServer()
}

// UnimplementedModelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (UnimplementedModelServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedModelServiceServer) CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedModelServiceServer) GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedModelServiceServer) UpdateModel(context.Context, *UpdateModelRequest) (*UpdateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedModelServiceServer) DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedModelServiceServer) DeployModel(context.Context, *DeployModelRequest) (*DeployModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployModel not implemented")
}
func (UnimplementedModelServiceServer) PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishModel not implemented")
}
func (UnimplementedModelServiceServer) CreateModelProfile(context.Context, *CreateModelProfileRequest) (*CreateModelProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelProfile not implemented")
}
func (UnimplementedModelServiceServer) GetModelProfile(context.Context, *GetModelProfileRequest) (*GetModelProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelProfile not implemented")
}
func (UnimplementedModelServiceServer) GetModelMisclass(context.Context, *GetMisclassRequest) (*GetMisclassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelMisclass not implemented")
}
func (UnimplementedModelServiceServer) GetModelLogs(context.Context, *GetModelLogsRequest) (*GetModelLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelLogs not implemented")
}
func (UnimplementedModelServiceServer) AbortModel(context.Context, *AbortModelRequest) (*AbortModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortModel not implemented")
}
func (UnimplementedModelServiceServer) PauseModel(context.Context, *PauseModelRequest) (*PauseModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseModel not implemented")
}
func (UnimplementedModelServiceServer) ResumeModel(context.Context, *ResumeModelRequest) (*ResumeModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeModel not implemented")
}
func (UnimplementedModelServiceServer) CompareModels(context.Context, *CompareModelsRequest) (*CompareModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareModels not implemented")
}
func (UnimplementedModelServiceServer) CompileModel(context.Context, *CompileModelRequest) (*CompileModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileModel not implemented")
}
func (UnimplementedModelServiceServer) DownloadModel(context.Context, *DownloadModelRequest) (*DownloadModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadModel not implemented")
}
func (UnimplementedModelServiceServer) FlagModel(context.Context, *FlagModelRequest) (*FlagModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlagModel not implemented")
}
func (UnimplementedModelServiceServer) PromoteModel(context.Context, *PromoteModelRequest) (*PromoteModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteModel not implemented")
}
func (UnimplementedModelServiceServer) TestModel(context.Context, *TestModelRequest) (*TestModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestModel not implemented")
}
func (UnimplementedModelServiceServer) mustEmbedUnimplementedModelServiceServer() {}

// UnsafeModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServiceServer will
// result in compilation errors.
type UnsafeModelServiceServer interface {
	mustEmbedUnimplementedModelServiceServer()
}

func RegisterModelServiceServer(s grpc.ServiceRegistrar, srv ModelServiceServer) {
	s.RegisterService(&ModelService_ServiceDesc, srv)
}

func _ModelService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/CreateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/UpdateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateModel(ctx, req.(*UpdateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeployModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeployModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/DeployModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeployModel(ctx, req.(*DeployModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_PublishModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).PublishModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/PublishModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).PublishModel(ctx, req.(*PublishModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_CreateModelProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).CreateModelProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/CreateModelProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).CreateModelProfile(ctx, req.(*CreateModelProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModelProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/GetModelProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelProfile(ctx, req.(*GetModelProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModelMisclass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMisclassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelMisclass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/GetModelMisclass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelMisclass(ctx, req.(*GetMisclassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModelLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/GetModelLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelLogs(ctx, req.(*GetModelLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AbortModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AbortModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/AbortModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AbortModel(ctx, req.(*AbortModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_PauseModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).PauseModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/PauseModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).PauseModel(ctx, req.(*PauseModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_ResumeModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ResumeModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/ResumeModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ResumeModel(ctx, req.(*ResumeModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_CompareModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).CompareModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/CompareModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).CompareModels(ctx, req.(*CompareModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_CompileModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).CompileModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/CompileModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).CompileModel(ctx, req.(*CompileModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DownloadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DownloadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/DownloadModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DownloadModel(ctx, req.(*DownloadModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_FlagModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).FlagModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/FlagModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).FlagModel(ctx, req.(*FlagModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_PromoteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).PromoteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/PromoteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).PromoteModel(ctx, req.(*PromoteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_TestModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).TestModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.model.v1.ModelService/TestModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).TestModel(ctx, req.(*TestModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelService_ServiceDesc is the grpc.ServiceDesc for ModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.model.v1.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListModels",
			Handler:    _ModelService_ListModels_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _ModelService_CreateModel_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _ModelService_GetModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _ModelService_UpdateModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _ModelService_DeleteModel_Handler,
		},
		{
			MethodName: "DeployModel",
			Handler:    _ModelService_DeployModel_Handler,
		},
		{
			MethodName: "PublishModel",
			Handler:    _ModelService_PublishModel_Handler,
		},
		{
			MethodName: "CreateModelProfile",
			Handler:    _ModelService_CreateModelProfile_Handler,
		},
		{
			MethodName: "GetModelProfile",
			Handler:    _ModelService_GetModelProfile_Handler,
		},
		{
			MethodName: "GetModelMisclass",
			Handler:    _ModelService_GetModelMisclass_Handler,
		},
		{
			MethodName: "GetModelLogs",
			Handler:    _ModelService_GetModelLogs_Handler,
		},
		{
			MethodName: "AbortModel",
			Handler:    _ModelService_AbortModel_Handler,
		},
		{
			MethodName: "PauseModel",
			Handler:    _ModelService_PauseModel_Handler,
		},
		{
			MethodName: "ResumeModel",
			Handler:    _ModelService_ResumeModel_Handler,
		},
		{
			MethodName: "CompareModels",
			Handler:    _ModelService_CompareModels_Handler,
		},
		{
			MethodName: "CompileModel",
			Handler:    _ModelService_CompileModel_Handler,
		},
		{
			MethodName: "DownloadModel",
			Handler:    _ModelService_DownloadModel_Handler,
		},
		{
			MethodName: "FlagModel",
			Handler:    _ModelService_FlagModel_Handler,
		},
		{
			MethodName: "PromoteModel",
			Handler:    _ModelService_PromoteModel_Handler,
		},
		{
			MethodName: "TestModel",
			Handler:    _ModelService_TestModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/model/v1/model.proto",
}
