syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/review/v1";
package github.com.metaprov.modelaapi.services.review.v1;

import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "github.com/metaprov/modelaapi/pkg/apis/team/v1alpha1/generated.proto";
import "google/api/annotations.proto";

message GetReviewRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message GetReviewResponse {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.Review review = 1;
    string yaml = 2;
}

message CreateReviewRequest {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.Review review = 1;
}

message CreateReviewResponse {
}

message UpdateReviewRequest {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.Review review = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateReviewResponse {
}


message DeleteReviewRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message DeleteReviewResponse {
}

message ListReviewRequest {
    string             namespace  = 1;
    map<string,string> labels     = 2;
    int32              page_size  = 3;
    string             page_token = 4;
}

message ListReviewResponse {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.ReviewList reviewes = 1;
    string next_page_token = 2;
}



service ReviewService {
    rpc ListReviews(ListReviewRequest) returns (ListReviewResponse) {
        option (google.api.http).get = "/v1/reviews/{namespace}";
    }
    rpc CreateReview(CreateReviewRequest) returns (CreateReviewResponse) {
        option (google.api.http) = {
			post: "/v1/reviews"
			body: "*"
		};
    }
    rpc GetReview(GetReviewRequest) returns (GetReviewResponse) {
        option (google.api.http).get = "/v1/reviews/{namespace}/{name}";
    }
    rpc UpdateReview(UpdateReviewRequest) returns (UpdateReviewResponse) {
        option (google.api.http) = {
			put: "/v1/reviews/{review.metadata.namespace}/{review.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteReview(DeleteReviewRequest) returns (DeleteReviewResponse) {
        option (google.api.http).delete = "/v1/reviews/{namespace}/{name}";
    }
}