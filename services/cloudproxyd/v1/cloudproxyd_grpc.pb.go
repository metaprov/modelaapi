// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/cloudproxyd/v1/cloudproxyd.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudProxyServiceClient is the client API for CloudProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudProxyServiceClient interface {
	Download(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (*FileDownloadResponse, error)
	Upload(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error)
	KeyExistInVirtualBucket(ctx context.Context, in *KeyExistInVirtualBucketRequest, opts ...grpc.CallOption) (*KeyExistInVirtualBucketResponse, error)
	VirtualBucketExist(ctx context.Context, in *VirtualBucketExistRequest, opts ...grpc.CallOption) (*VirtualBucketExistResponse, error)
	CreateVirtualBucketIfNotExist(ctx context.Context, in *CreateVirtualBucketRequest, opts ...grpc.CallOption) (*CreateVirtualBucketResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type cloudProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudProxyServiceClient(cc grpc.ClientConnInterface) CloudProxyServiceClient {
	return &cloudProxyServiceClient{cc}
}

func (c *cloudProxyServiceClient) Download(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (*FileDownloadResponse, error) {
	out := new(FileDownloadResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProxyServiceClient) Upload(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error) {
	out := new(FileUploadResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProxyServiceClient) KeyExistInVirtualBucket(ctx context.Context, in *KeyExistInVirtualBucketRequest, opts ...grpc.CallOption) (*KeyExistInVirtualBucketResponse, error) {
	out := new(KeyExistInVirtualBucketResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/KeyExistInVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProxyServiceClient) VirtualBucketExist(ctx context.Context, in *VirtualBucketExistRequest, opts ...grpc.CallOption) (*VirtualBucketExistResponse, error) {
	out := new(VirtualBucketExistResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/VirtualBucketExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProxyServiceClient) CreateVirtualBucketIfNotExist(ctx context.Context, in *CreateVirtualBucketRequest, opts ...grpc.CallOption) (*CreateVirtualBucketResponse, error) {
	out := new(CreateVirtualBucketResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/CreateVirtualBucketIfNotExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProxyServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudProxyServiceServer is the server API for CloudProxyService service.
// All implementations must embed UnimplementedCloudProxyServiceServer
// for forward compatibility
type CloudProxyServiceServer interface {
	Download(context.Context, *FileDownloadRequest) (*FileDownloadResponse, error)
	Upload(context.Context, *FileUploadRequest) (*FileUploadResponse, error)
	KeyExistInVirtualBucket(context.Context, *KeyExistInVirtualBucketRequest) (*KeyExistInVirtualBucketResponse, error)
	VirtualBucketExist(context.Context, *VirtualBucketExistRequest) (*VirtualBucketExistResponse, error)
	CreateVirtualBucketIfNotExist(context.Context, *CreateVirtualBucketRequest) (*CreateVirtualBucketResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedCloudProxyServiceServer()
}

// UnimplementedCloudProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudProxyServiceServer struct {
}

func (UnimplementedCloudProxyServiceServer) Download(context.Context, *FileDownloadRequest) (*FileDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedCloudProxyServiceServer) Upload(context.Context, *FileUploadRequest) (*FileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedCloudProxyServiceServer) KeyExistInVirtualBucket(context.Context, *KeyExistInVirtualBucketRequest) (*KeyExistInVirtualBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyExistInVirtualBucket not implemented")
}
func (UnimplementedCloudProxyServiceServer) VirtualBucketExist(context.Context, *VirtualBucketExistRequest) (*VirtualBucketExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualBucketExist not implemented")
}
func (UnimplementedCloudProxyServiceServer) CreateVirtualBucketIfNotExist(context.Context, *CreateVirtualBucketRequest) (*CreateVirtualBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualBucketIfNotExist not implemented")
}
func (UnimplementedCloudProxyServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedCloudProxyServiceServer) mustEmbedUnimplementedCloudProxyServiceServer() {}

// UnsafeCloudProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudProxyServiceServer will
// result in compilation errors.
type UnsafeCloudProxyServiceServer interface {
	mustEmbedUnimplementedCloudProxyServiceServer()
}

func RegisterCloudProxyServiceServer(s grpc.ServiceRegistrar, srv CloudProxyServiceServer) {
	s.RegisterService(&CloudProxyService_ServiceDesc, srv)
}

func _CloudProxyService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProxyServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProxyServiceServer).Download(ctx, req.(*FileDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProxyService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProxyServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProxyServiceServer).Upload(ctx, req.(*FileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProxyService_KeyExistInVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyExistInVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProxyServiceServer).KeyExistInVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/KeyExistInVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProxyServiceServer).KeyExistInVirtualBucket(ctx, req.(*KeyExistInVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProxyService_VirtualBucketExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualBucketExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProxyServiceServer).VirtualBucketExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/VirtualBucketExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProxyServiceServer).VirtualBucketExist(ctx, req.(*VirtualBucketExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProxyService_CreateVirtualBucketIfNotExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProxyServiceServer).CreateVirtualBucketIfNotExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/CreateVirtualBucketIfNotExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProxyServiceServer).CreateVirtualBucketIfNotExist(ctx, req.(*CreateVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProxyService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProxyServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProxyServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudProxyService_ServiceDesc is the grpc.ServiceDesc for CloudProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.cloudproxyd.v1.CloudProxyService",
	HandlerType: (*CloudProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _CloudProxyService_Download_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _CloudProxyService_Upload_Handler,
		},
		{
			MethodName: "KeyExistInVirtualBucket",
			Handler:    _CloudProxyService_KeyExistInVirtualBucket_Handler,
		},
		{
			MethodName: "VirtualBucketExist",
			Handler:    _CloudProxyService_VirtualBucketExist_Handler,
		},
		{
			MethodName: "CreateVirtualBucketIfNotExist",
			Handler:    _CloudProxyService_CreateVirtualBucketIfNotExist_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _CloudProxyService_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/cloudproxyd/v1/cloudproxyd.proto",
}
