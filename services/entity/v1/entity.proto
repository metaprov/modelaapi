syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/entity/v1";
package github.com.metaprov.modelaapi.services.entity.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";

message ListEntitiesRequest {
    string namespace = 1;
    map<string,string> labels =2;
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;
}

message ListEntitiesResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.EntityList entities = 1;
    string next_page_token = 2;
}

message CreateEntityRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Entity entity = 1;
}

message CreateEntityResponse {

}

message UpdateEntityRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Entity entity = 1;
    google.protobuf.FieldMask field_mask = 2;

}

message UpdateEntityResponse {

}

message GetEntityRequest {
    string namespace = 1;
    string name      = 2;
    google.protobuf.FieldMask field_mask = 3;
}


message GetEntityResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Entity entity = 1;
    string yaml = 2;
}


message DeleteEntityRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteEntityResponse {

}


service EntityService {
    rpc ListEntities(ListEntitiesRequest) returns (ListEntitiesResponse) {
        option (google.api.http).get = "/v1/entities/{namespace}";
    }
    rpc CreateEntity(CreateEntityRequest) returns (CreateEntityResponse) {
        option (google.api.http) = {
			post: "/v1/entities"
			body: "*"
		};
    }
    rpc GetEntity(GetEntityRequest) returns (GetEntityResponse) {
        option (google.api.http).get = "/v1/entities/{name}";
    }
    rpc UpdateEntity(UpdateEntityRequest) returns (UpdateEntityResponse) {
        option (google.api.http) = {
			put: "/v1/entities/{item.metadata.namespace}/{item.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteEntity(DeleteEntityRequest) returns (DeleteEntityResponse) {
        option (google.api.http).delete = "/v1/entities/{namespace}/{name}";
    }




}
