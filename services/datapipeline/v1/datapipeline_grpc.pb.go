// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: github.com/metaprov/modelaapi/services/datapipeline/v1/datapipeline.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataPipelineServiceClient is the client API for DataPipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataPipelineServiceClient interface {
	ListDataPipelines(ctx context.Context, in *ListDataPipelinesRequest, opts ...grpc.CallOption) (*ListDataPipelinesResponse, error)
	CreateDataPipeline(ctx context.Context, in *CreateDataPipelineRequest, opts ...grpc.CallOption) (*CreateDataPipelineResponse, error)
	GetDataPipeline(ctx context.Context, in *GetDataPipelineRequest, opts ...grpc.CallOption) (*GetDataPipelineResponse, error)
	UpdateDataPipeline(ctx context.Context, in *UpdateDataPipelineRequest, opts ...grpc.CallOption) (*UpdateDataPipelineResponse, error)
	DeleteDataPipeline(ctx context.Context, in *DeleteDataPipelineRequest, opts ...grpc.CallOption) (*DeleteDataPipelineResponse, error)
	RunDataPipeline(ctx context.Context, in *RunDataPipelineRequest, opts ...grpc.CallOption) (*RunDataPipelineResponse, error)
}

type dataPipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataPipelineServiceClient(cc grpc.ClientConnInterface) DataPipelineServiceClient {
	return &dataPipelineServiceClient{cc}
}

func (c *dataPipelineServiceClient) ListDataPipelines(ctx context.Context, in *ListDataPipelinesRequest, opts ...grpc.CallOption) (*ListDataPipelinesResponse, error) {
	out := new(ListDataPipelinesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/ListDataPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelineServiceClient) CreateDataPipeline(ctx context.Context, in *CreateDataPipelineRequest, opts ...grpc.CallOption) (*CreateDataPipelineResponse, error) {
	out := new(CreateDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/CreateDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelineServiceClient) GetDataPipeline(ctx context.Context, in *GetDataPipelineRequest, opts ...grpc.CallOption) (*GetDataPipelineResponse, error) {
	out := new(GetDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/GetDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelineServiceClient) UpdateDataPipeline(ctx context.Context, in *UpdateDataPipelineRequest, opts ...grpc.CallOption) (*UpdateDataPipelineResponse, error) {
	out := new(UpdateDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/UpdateDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelineServiceClient) DeleteDataPipeline(ctx context.Context, in *DeleteDataPipelineRequest, opts ...grpc.CallOption) (*DeleteDataPipelineResponse, error) {
	out := new(DeleteDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/DeleteDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelineServiceClient) RunDataPipeline(ctx context.Context, in *RunDataPipelineRequest, opts ...grpc.CallOption) (*RunDataPipelineResponse, error) {
	out := new(RunDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/RunDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataPipelineServiceServer is the server API for DataPipelineService service.
// All implementations must embed UnimplementedDataPipelineServiceServer
// for forward compatibility
type DataPipelineServiceServer interface {
	ListDataPipelines(context.Context, *ListDataPipelinesRequest) (*ListDataPipelinesResponse, error)
	CreateDataPipeline(context.Context, *CreateDataPipelineRequest) (*CreateDataPipelineResponse, error)
	GetDataPipeline(context.Context, *GetDataPipelineRequest) (*GetDataPipelineResponse, error)
	UpdateDataPipeline(context.Context, *UpdateDataPipelineRequest) (*UpdateDataPipelineResponse, error)
	DeleteDataPipeline(context.Context, *DeleteDataPipelineRequest) (*DeleteDataPipelineResponse, error)
	RunDataPipeline(context.Context, *RunDataPipelineRequest) (*RunDataPipelineResponse, error)
	mustEmbedUnimplementedDataPipelineServiceServer()
}

// UnimplementedDataPipelineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataPipelineServiceServer struct {
}

func (UnimplementedDataPipelineServiceServer) ListDataPipelines(context.Context, *ListDataPipelinesRequest) (*ListDataPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataPipelines not implemented")
}
func (UnimplementedDataPipelineServiceServer) CreateDataPipeline(context.Context, *CreateDataPipelineRequest) (*CreateDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataPipeline not implemented")
}
func (UnimplementedDataPipelineServiceServer) GetDataPipeline(context.Context, *GetDataPipelineRequest) (*GetDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataPipeline not implemented")
}
func (UnimplementedDataPipelineServiceServer) UpdateDataPipeline(context.Context, *UpdateDataPipelineRequest) (*UpdateDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataPipeline not implemented")
}
func (UnimplementedDataPipelineServiceServer) DeleteDataPipeline(context.Context, *DeleteDataPipelineRequest) (*DeleteDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataPipeline not implemented")
}
func (UnimplementedDataPipelineServiceServer) RunDataPipeline(context.Context, *RunDataPipelineRequest) (*RunDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunDataPipeline not implemented")
}
func (UnimplementedDataPipelineServiceServer) mustEmbedUnimplementedDataPipelineServiceServer() {}

// UnsafeDataPipelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataPipelineServiceServer will
// result in compilation errors.
type UnsafeDataPipelineServiceServer interface {
	mustEmbedUnimplementedDataPipelineServiceServer()
}

func RegisterDataPipelineServiceServer(s grpc.ServiceRegistrar, srv DataPipelineServiceServer) {
	s.RegisterService(&DataPipelineService_ServiceDesc, srv)
}

func _DataPipelineService_ListDataPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelineServiceServer).ListDataPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/ListDataPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelineServiceServer).ListDataPipelines(ctx, req.(*ListDataPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelineService_CreateDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelineServiceServer).CreateDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/CreateDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelineServiceServer).CreateDataPipeline(ctx, req.(*CreateDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelineService_GetDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelineServiceServer).GetDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/GetDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelineServiceServer).GetDataPipeline(ctx, req.(*GetDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelineService_UpdateDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelineServiceServer).UpdateDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/UpdateDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelineServiceServer).UpdateDataPipeline(ctx, req.(*UpdateDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelineService_DeleteDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelineServiceServer).DeleteDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/DeleteDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelineServiceServer).DeleteDataPipeline(ctx, req.(*DeleteDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelineService_RunDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelineServiceServer).RunDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService/RunDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelineServiceServer).RunDataPipeline(ctx, req.(*RunDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataPipelineService_ServiceDesc is the grpc.ServiceDesc for DataPipelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataPipelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.datapipeline.v1.DataPipelineService",
	HandlerType: (*DataPipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataPipelines",
			Handler:    _DataPipelineService_ListDataPipelines_Handler,
		},
		{
			MethodName: "CreateDataPipeline",
			Handler:    _DataPipelineService_CreateDataPipeline_Handler,
		},
		{
			MethodName: "GetDataPipeline",
			Handler:    _DataPipelineService_GetDataPipeline_Handler,
		},
		{
			MethodName: "UpdateDataPipeline",
			Handler:    _DataPipelineService_UpdateDataPipeline_Handler,
		},
		{
			MethodName: "DeleteDataPipeline",
			Handler:    _DataPipelineService_DeleteDataPipeline_Handler,
		},
		{
			MethodName: "RunDataPipeline",
			Handler:    _DataPipelineService_RunDataPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/datapipeline/v1/datapipeline.proto",
}
