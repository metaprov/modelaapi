syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/datapipeline/v1";
package github.com.metaprov.modelaapi.services.datapipeline.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";

message ListDataPipelinesRequest {
    string namespace              = 1;
    map<string,string> labels     = 2;
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;
}

message ListDataPipelinesResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataPipelineList datapipelines = 1;
    string next_page_token = 2;
}

message CreateDataPipelineRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataPipeline datapipeline = 1;    
}

message CreateDataPipelineResponse {
}

message UpdateDataPipelineRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataPipeline datapipeline = 1;  
    google.protobuf.FieldMask field_mask = 2;  
}

message UpdateDataPipelineResponse {
}

message GetDataPipelineRequest {
    string namespace = 1;
    string name      = 2;
    
}


message GetDataPipelineResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataPipeline datapipeline = 1;
    string yaml = 2;
}

message RunDataPipelineRequest {
    string namespace = 1;
    string name      = 2;
}


message RunDataPipelineResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataPipeline pipeline = 1;
    string yaml = 2;
}


message DeleteDataPipelineRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteDataPipelineResponse {
}

service DataPipelineService {
    rpc ListDataPipelines(ListDataPipelinesRequest) returns (ListDataPipelinesResponse) {
        option (google.api.http).get = "/v1/datapipelines/{namespace}";
    }

    rpc CreateDataPipeline(CreateDataPipelineRequest) returns (CreateDataPipelineResponse) {
        option (google.api.http) = {
			post: "/v1/datapipelines"
			body: "*"
		};
    }

    rpc GetDataPipeline(GetDataPipelineRequest) returns (GetDataPipelineResponse) {
        option (google.api.http).get = "/v1/datapipelines/{namespace}/{name}";
    }

    rpc UpdateDataPipeline(UpdateDataPipelineRequest) returns (UpdateDataPipelineResponse) {
        option (google.api.http) = {
			put: "/v1/datapipelines/{datapipeline.metadata.namespace}/{datapipeline.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteDataPipeline(DeleteDataPipelineRequest) returns (DeleteDataPipelineResponse) {
        option (google.api.http).delete = "/v1/datapipelines/{namespace}/{name}";
    }

    rpc RunDataPipeline(RunDataPipelineRequest) returns (RunDataPipelineResponse) {
        option (google.api.http).post = "/v1/datapipelines/{namespace}/{name}:run";
    }
}