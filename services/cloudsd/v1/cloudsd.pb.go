// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: services/cloudsd/v1/cloudsd.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{0}
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{1}
}

type VirtualBucketExistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CredNamespace  string                   `protobuf:"bytes,2,opt,name=credNamespace,proto3" json:"credNamespace,omitempty"`
	CredName       string                   `protobuf:"bytes,3,opt,name=credName,proto3" json:"credName,omitempty"`
	ConnectionSpec *v1alpha1.ConnectionSpec `protobuf:"bytes,4,opt,name=connectionSpec,proto3" json:"connectionSpec,omitempty"`
	Secret         map[string][]byte        `protobuf:"bytes,5,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VirtualBucketExistRequest) Reset() {
	*x = VirtualBucketExistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualBucketExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualBucketExistRequest) ProtoMessage() {}

func (x *VirtualBucketExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualBucketExistRequest.ProtoReflect.Descriptor instead.
func (*VirtualBucketExistRequest) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{2}
}

func (x *VirtualBucketExistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualBucketExistRequest) GetCredNamespace() string {
	if x != nil {
		return x.CredNamespace
	}
	return ""
}

func (x *VirtualBucketExistRequest) GetCredName() string {
	if x != nil {
		return x.CredName
	}
	return ""
}

func (x *VirtualBucketExistRequest) GetConnectionSpec() *v1alpha1.ConnectionSpec {
	if x != nil {
		return x.ConnectionSpec
	}
	return nil
}

func (x *VirtualBucketExistRequest) GetSecret() map[string][]byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

type VirtualBucketExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (x *VirtualBucketExistResponse) Reset() {
	*x = VirtualBucketExistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualBucketExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualBucketExistResponse) ProtoMessage() {}

func (x *VirtualBucketExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualBucketExistResponse.ProtoReflect.Descriptor instead.
func (*VirtualBucketExistResponse) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{3}
}

func (x *VirtualBucketExistResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type KeyExistInVirtualBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region         string                   `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Name           string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Key            string                   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	CredNamespace  string                   `protobuf:"bytes,4,opt,name=credNamespace,proto3" json:"credNamespace,omitempty"`
	CredName       string                   `protobuf:"bytes,5,opt,name=credName,proto3" json:"credName,omitempty"`
	ConnectionSpec *v1alpha1.ConnectionSpec `protobuf:"bytes,6,opt,name=connectionSpec,proto3" json:"connectionSpec,omitempty"`
	Secret         map[string][]byte        `protobuf:"bytes,7,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KeyExistInVirtualBucketRequest) Reset() {
	*x = KeyExistInVirtualBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyExistInVirtualBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyExistInVirtualBucketRequest) ProtoMessage() {}

func (x *KeyExistInVirtualBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyExistInVirtualBucketRequest.ProtoReflect.Descriptor instead.
func (*KeyExistInVirtualBucketRequest) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{4}
}

func (x *KeyExistInVirtualBucketRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *KeyExistInVirtualBucketRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyExistInVirtualBucketRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyExistInVirtualBucketRequest) GetCredNamespace() string {
	if x != nil {
		return x.CredNamespace
	}
	return ""
}

func (x *KeyExistInVirtualBucketRequest) GetCredName() string {
	if x != nil {
		return x.CredName
	}
	return ""
}

func (x *KeyExistInVirtualBucketRequest) GetConnectionSpec() *v1alpha1.ConnectionSpec {
	if x != nil {
		return x.ConnectionSpec
	}
	return nil
}

func (x *KeyExistInVirtualBucketRequest) GetSecret() map[string][]byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

type KeyExistInVirtualBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (x *KeyExistInVirtualBucketResponse) Reset() {
	*x = KeyExistInVirtualBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyExistInVirtualBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyExistInVirtualBucketResponse) ProtoMessage() {}

func (x *KeyExistInVirtualBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyExistInVirtualBucketResponse.ProtoReflect.Descriptor instead.
func (*KeyExistInVirtualBucketResponse) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{5}
}

func (x *KeyExistInVirtualBucketResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type CloudVirtualBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloudVirtualBucketResponse) Reset() {
	*x = CloudVirtualBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudVirtualBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudVirtualBucketResponse) ProtoMessage() {}

func (x *CloudVirtualBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudVirtualBucketResponse.ProtoReflect.Descriptor instead.
func (*CloudVirtualBucketResponse) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{6}
}

// Ask the bucket to download a file
type FileDownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket         string                   `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"` // the storage bucket
	Key            string                   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`       // key on the cloud storage
	Path           string                   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`     // local path
	CredNamespace  string                   `protobuf:"bytes,4,opt,name=credNamespace,proto3" json:"credNamespace,omitempty"`
	CredName       string                   `protobuf:"bytes,5,opt,name=credName,proto3" json:"credName,omitempty"`
	ConnectionSpec *v1alpha1.ConnectionSpec `protobuf:"bytes,6,opt,name=connectionSpec,proto3" json:"connectionSpec,omitempty"`
	Secret         map[string][]byte        `protobuf:"bytes,7,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileDownloadRequest) Reset() {
	*x = FileDownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDownloadRequest) ProtoMessage() {}

func (x *FileDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDownloadRequest.ProtoReflect.Descriptor instead.
func (*FileDownloadRequest) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{7}
}

func (x *FileDownloadRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *FileDownloadRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FileDownloadRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileDownloadRequest) GetCredNamespace() string {
	if x != nil {
		return x.CredNamespace
	}
	return ""
}

func (x *FileDownloadRequest) GetCredName() string {
	if x != nil {
		return x.CredName
	}
	return ""
}

func (x *FileDownloadRequest) GetConnectionSpec() *v1alpha1.ConnectionSpec {
	if x != nil {
		return x.ConnectionSpec
	}
	return nil
}

func (x *FileDownloadRequest) GetSecret() map[string][]byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

type FileDownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FileDownloadResponse) Reset() {
	*x = FileDownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDownloadResponse) ProtoMessage() {}

func (x *FileDownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDownloadResponse.ProtoReflect.Descriptor instead.
func (*FileDownloadResponse) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{8}
}

type FileUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket         string                   `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"` // the storage bucket
	Key            string                   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`       // key on the cloud storage
	Path           string                   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`     // local path
	CredNamespace  string                   `protobuf:"bytes,4,opt,name=credNamespace,proto3" json:"credNamespace,omitempty"`
	CredName       string                   `protobuf:"bytes,5,opt,name=credName,proto3" json:"credName,omitempty"`
	ConnectionSpec *v1alpha1.ConnectionSpec `protobuf:"bytes,6,opt,name=connectionSpec,proto3" json:"connectionSpec,omitempty"`
	Secret         map[string][]byte        `protobuf:"bytes,7,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileUploadRequest) Reset() {
	*x = FileUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadRequest) ProtoMessage() {}

func (x *FileUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadRequest.ProtoReflect.Descriptor instead.
func (*FileUploadRequest) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{9}
}

func (x *FileUploadRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *FileUploadRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FileUploadRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileUploadRequest) GetCredNamespace() string {
	if x != nil {
		return x.CredNamespace
	}
	return ""
}

func (x *FileUploadRequest) GetCredName() string {
	if x != nil {
		return x.CredName
	}
	return ""
}

func (x *FileUploadRequest) GetConnectionSpec() *v1alpha1.ConnectionSpec {
	if x != nil {
		return x.ConnectionSpec
	}
	return nil
}

func (x *FileUploadRequest) GetSecret() map[string][]byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

type FileUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FileUploadResponse) Reset() {
	*x = FileUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadResponse) ProtoMessage() {}

func (x *FileUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadResponse.ProtoReflect.Descriptor instead.
func (*FileUploadResponse) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{10}
}

type CreateVirtualBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName     string                      `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	BucketSpec     *v1alpha1.VirtualBucketSpec `protobuf:"bytes,2,opt,name=bucketSpec,proto3" json:"bucketSpec,omitempty"`
	CredNamespace  string                      `protobuf:"bytes,3,opt,name=credNamespace,proto3" json:"credNamespace,omitempty"`
	CredName       string                      `protobuf:"bytes,4,opt,name=credName,proto3" json:"credName,omitempty"`
	ConnectionSpec *v1alpha1.ConnectionSpec    `protobuf:"bytes,5,opt,name=connectionSpec,proto3" json:"connectionSpec,omitempty"`
	Secret         map[string][]byte           `protobuf:"bytes,7,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateVirtualBucketRequest) Reset() {
	*x = CreateVirtualBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtualBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtualBucketRequest) ProtoMessage() {}

func (x *CreateVirtualBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtualBucketRequest.ProtoReflect.Descriptor instead.
func (*CreateVirtualBucketRequest) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{11}
}

func (x *CreateVirtualBucketRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *CreateVirtualBucketRequest) GetBucketSpec() *v1alpha1.VirtualBucketSpec {
	if x != nil {
		return x.BucketSpec
	}
	return nil
}

func (x *CreateVirtualBucketRequest) GetCredNamespace() string {
	if x != nil {
		return x.CredNamespace
	}
	return ""
}

func (x *CreateVirtualBucketRequest) GetCredName() string {
	if x != nil {
		return x.CredName
	}
	return ""
}

func (x *CreateVirtualBucketRequest) GetConnectionSpec() *v1alpha1.ConnectionSpec {
	if x != nil {
		return x.ConnectionSpec
	}
	return nil
}

func (x *CreateVirtualBucketRequest) GetSecret() map[string][]byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

type CreateVirtualBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateVirtualBucketResponse) Reset() {
	*x = CreateVirtualBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtualBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtualBucketResponse) ProtoMessage() {}

func (x *CreateVirtualBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cloudsd_v1_cloudsd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtualBucketResponse.ProtoReflect.Descriptor instead.
func (*CreateVirtualBucketResponse) Descriptor() ([]byte, []int) {
	return file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP(), []int{12}
}

var File_services_cloudsd_v1_cloudsd_proto protoreflect.FileDescriptor

var file_services_cloudsd_v1_cloudsd_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64,
	0x2e, 0x76, 0x31, 0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a,
	0x10, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8a, 0x03, 0x0a, 0x19, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x6d, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32,
	0x0a, 0x1a, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x22, 0xbe, 0x03, 0x0a, 0x1e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x72, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x1f, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x03, 0x0a, 0x13, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x67, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x03,
	0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x65, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x14, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x04, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x0a, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x6e, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfb,
	0x07, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x97, 0x01, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x43, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x06, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xbc,
	0x01, 0x0a, 0x17, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x4e, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xad, 0x01,
	0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x12, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xba, 0x01,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12,
	0x4a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x08, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x64, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_cloudsd_v1_cloudsd_proto_rawDescOnce sync.Once
	file_services_cloudsd_v1_cloudsd_proto_rawDescData = file_services_cloudsd_v1_cloudsd_proto_rawDesc
)

func file_services_cloudsd_v1_cloudsd_proto_rawDescGZIP() []byte {
	file_services_cloudsd_v1_cloudsd_proto_rawDescOnce.Do(func() {
		file_services_cloudsd_v1_cloudsd_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_cloudsd_v1_cloudsd_proto_rawDescData)
	})
	return file_services_cloudsd_v1_cloudsd_proto_rawDescData
}

var file_services_cloudsd_v1_cloudsd_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_services_cloudsd_v1_cloudsd_proto_goTypes = []interface{}{
	(*ShutdownRequest)(nil),                 // 0: github.com.metaprov.modeld.services.cloudsd.v1.ShutdownRequest
	(*ShutdownResponse)(nil),                // 1: github.com.metaprov.modeld.services.cloudsd.v1.ShutdownResponse
	(*VirtualBucketExistRequest)(nil),       // 2: github.com.metaprov.modeld.services.cloudsd.v1.VirtualBucketExistRequest
	(*VirtualBucketExistResponse)(nil),      // 3: github.com.metaprov.modeld.services.cloudsd.v1.VirtualBucketExistResponse
	(*KeyExistInVirtualBucketRequest)(nil),  // 4: github.com.metaprov.modeld.services.cloudsd.v1.KeyExistInVirtualBucketRequest
	(*KeyExistInVirtualBucketResponse)(nil), // 5: github.com.metaprov.modeld.services.cloudsd.v1.KeyExistInVirtualBucketResponse
	(*CloudVirtualBucketResponse)(nil),      // 6: github.com.metaprov.modeld.services.cloudsd.v1.CloudVirtualBucketResponse
	(*FileDownloadRequest)(nil),             // 7: github.com.metaprov.modeld.services.cloudsd.v1.FileDownloadRequest
	(*FileDownloadResponse)(nil),            // 8: github.com.metaprov.modeld.services.cloudsd.v1.FileDownloadResponse
	(*FileUploadRequest)(nil),               // 9: github.com.metaprov.modeld.services.cloudsd.v1.FileUploadRequest
	(*FileUploadResponse)(nil),              // 10: github.com.metaprov.modeld.services.cloudsd.v1.FileUploadResponse
	(*CreateVirtualBucketRequest)(nil),      // 11: github.com.metaprov.modeld.services.cloudsd.v1.CreateVirtualBucketRequest
	(*CreateVirtualBucketResponse)(nil),     // 12: github.com.metaprov.modeld.services.cloudsd.v1.CreateVirtualBucketResponse
	nil,                                     // 13: github.com.metaprov.modeld.services.cloudsd.v1.VirtualBucketExistRequest.SecretEntry
	nil,                                     // 14: github.com.metaprov.modeld.services.cloudsd.v1.KeyExistInVirtualBucketRequest.SecretEntry
	nil,                                     // 15: github.com.metaprov.modeld.services.cloudsd.v1.FileDownloadRequest.SecretEntry
	nil,                                     // 16: github.com.metaprov.modeld.services.cloudsd.v1.FileUploadRequest.SecretEntry
	nil,                                     // 17: github.com.metaprov.modeld.services.cloudsd.v1.CreateVirtualBucketRequest.SecretEntry
	(*v1alpha1.ConnectionSpec)(nil),         // 18: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.ConnectionSpec
	(*v1alpha1.VirtualBucketSpec)(nil),      // 19: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucketSpec
}
var file_services_cloudsd_v1_cloudsd_proto_depIdxs = []int32{
	18, // 0: github.com.metaprov.modeld.services.cloudsd.v1.VirtualBucketExistRequest.connectionSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.ConnectionSpec
	13, // 1: github.com.metaprov.modeld.services.cloudsd.v1.VirtualBucketExistRequest.secret:type_name -> github.com.metaprov.modeld.services.cloudsd.v1.VirtualBucketExistRequest.SecretEntry
	18, // 2: github.com.metaprov.modeld.services.cloudsd.v1.KeyExistInVirtualBucketRequest.connectionSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.ConnectionSpec
	14, // 3: github.com.metaprov.modeld.services.cloudsd.v1.KeyExistInVirtualBucketRequest.secret:type_name -> github.com.metaprov.modeld.services.cloudsd.v1.KeyExistInVirtualBucketRequest.SecretEntry
	18, // 4: github.com.metaprov.modeld.services.cloudsd.v1.FileDownloadRequest.connectionSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.ConnectionSpec
	15, // 5: github.com.metaprov.modeld.services.cloudsd.v1.FileDownloadRequest.secret:type_name -> github.com.metaprov.modeld.services.cloudsd.v1.FileDownloadRequest.SecretEntry
	18, // 6: github.com.metaprov.modeld.services.cloudsd.v1.FileUploadRequest.connectionSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.ConnectionSpec
	16, // 7: github.com.metaprov.modeld.services.cloudsd.v1.FileUploadRequest.secret:type_name -> github.com.metaprov.modeld.services.cloudsd.v1.FileUploadRequest.SecretEntry
	19, // 8: github.com.metaprov.modeld.services.cloudsd.v1.CreateVirtualBucketRequest.bucketSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucketSpec
	18, // 9: github.com.metaprov.modeld.services.cloudsd.v1.CreateVirtualBucketRequest.connectionSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.ConnectionSpec
	17, // 10: github.com.metaprov.modeld.services.cloudsd.v1.CreateVirtualBucketRequest.secret:type_name -> github.com.metaprov.modeld.services.cloudsd.v1.CreateVirtualBucketRequest.SecretEntry
	7,  // 11: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.Download:input_type -> github.com.metaprov.modeld.services.cloudsd.v1.FileDownloadRequest
	9,  // 12: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.Upload:input_type -> github.com.metaprov.modeld.services.cloudsd.v1.FileUploadRequest
	4,  // 13: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.KeyExistInVirtualBucket:input_type -> github.com.metaprov.modeld.services.cloudsd.v1.KeyExistInVirtualBucketRequest
	2,  // 14: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.VirtualBucketExist:input_type -> github.com.metaprov.modeld.services.cloudsd.v1.VirtualBucketExistRequest
	11, // 15: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.CreateVirtualBucketIfNotExist:input_type -> github.com.metaprov.modeld.services.cloudsd.v1.CreateVirtualBucketRequest
	0,  // 16: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.Shutdown:input_type -> github.com.metaprov.modeld.services.cloudsd.v1.ShutdownRequest
	8,  // 17: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.Download:output_type -> github.com.metaprov.modeld.services.cloudsd.v1.FileDownloadResponse
	10, // 18: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.Upload:output_type -> github.com.metaprov.modeld.services.cloudsd.v1.FileUploadResponse
	5,  // 19: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.KeyExistInVirtualBucket:output_type -> github.com.metaprov.modeld.services.cloudsd.v1.KeyExistInVirtualBucketResponse
	3,  // 20: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.VirtualBucketExist:output_type -> github.com.metaprov.modeld.services.cloudsd.v1.VirtualBucketExistResponse
	12, // 21: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.CreateVirtualBucketIfNotExist:output_type -> github.com.metaprov.modeld.services.cloudsd.v1.CreateVirtualBucketResponse
	1,  // 22: github.com.metaprov.modeld.services.cloudsd.v1.CloudsService.Shutdown:output_type -> github.com.metaprov.modeld.services.cloudsd.v1.ShutdownResponse
	17, // [17:23] is the sub-list for method output_type
	11, // [11:17] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_services_cloudsd_v1_cloudsd_proto_init() }
func file_services_cloudsd_v1_cloudsd_proto_init() {
	if File_services_cloudsd_v1_cloudsd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualBucketExistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualBucketExistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyExistInVirtualBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyExistInVirtualBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudVirtualBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtualBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cloudsd_v1_cloudsd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtualBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_cloudsd_v1_cloudsd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_cloudsd_v1_cloudsd_proto_goTypes,
		DependencyIndexes: file_services_cloudsd_v1_cloudsd_proto_depIdxs,
		MessageInfos:      file_services_cloudsd_v1_cloudsd_proto_msgTypes,
	}.Build()
	File_services_cloudsd_v1_cloudsd_proto = out.File
	file_services_cloudsd_v1_cloudsd_proto_rawDesc = nil
	file_services_cloudsd_v1_cloudsd_proto_goTypes = nil
	file_services_cloudsd_v1_cloudsd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CloudsServiceClient is the client API for CloudsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudsServiceClient interface {
	Download(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (*FileDownloadResponse, error)
	Upload(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error)
	KeyExistInVirtualBucket(ctx context.Context, in *KeyExistInVirtualBucketRequest, opts ...grpc.CallOption) (*KeyExistInVirtualBucketResponse, error)
	VirtualBucketExist(ctx context.Context, in *VirtualBucketExistRequest, opts ...grpc.CallOption) (*VirtualBucketExistResponse, error)
	CreateVirtualBucketIfNotExist(ctx context.Context, in *CreateVirtualBucketRequest, opts ...grpc.CallOption) (*CreateVirtualBucketResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type cloudsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudsServiceClient(cc grpc.ClientConnInterface) CloudsServiceClient {
	return &cloudsServiceClient{cc}
}

func (c *cloudsServiceClient) Download(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (*FileDownloadResponse, error) {
	out := new(FileDownloadResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsServiceClient) Upload(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error) {
	out := new(FileUploadResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsServiceClient) KeyExistInVirtualBucket(ctx context.Context, in *KeyExistInVirtualBucketRequest, opts ...grpc.CallOption) (*KeyExistInVirtualBucketResponse, error) {
	out := new(KeyExistInVirtualBucketResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/KeyExistInVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsServiceClient) VirtualBucketExist(ctx context.Context, in *VirtualBucketExistRequest, opts ...grpc.CallOption) (*VirtualBucketExistResponse, error) {
	out := new(VirtualBucketExistResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/VirtualBucketExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsServiceClient) CreateVirtualBucketIfNotExist(ctx context.Context, in *CreateVirtualBucketRequest, opts ...grpc.CallOption) (*CreateVirtualBucketResponse, error) {
	out := new(CreateVirtualBucketResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/CreateVirtualBucketIfNotExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudsServiceServer is the server API for CloudsService service.
type CloudsServiceServer interface {
	Download(context.Context, *FileDownloadRequest) (*FileDownloadResponse, error)
	Upload(context.Context, *FileUploadRequest) (*FileUploadResponse, error)
	KeyExistInVirtualBucket(context.Context, *KeyExistInVirtualBucketRequest) (*KeyExistInVirtualBucketResponse, error)
	VirtualBucketExist(context.Context, *VirtualBucketExistRequest) (*VirtualBucketExistResponse, error)
	CreateVirtualBucketIfNotExist(context.Context, *CreateVirtualBucketRequest) (*CreateVirtualBucketResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
}

// UnimplementedCloudsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudsServiceServer struct {
}

func (*UnimplementedCloudsServiceServer) Download(context.Context, *FileDownloadRequest) (*FileDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (*UnimplementedCloudsServiceServer) Upload(context.Context, *FileUploadRequest) (*FileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedCloudsServiceServer) KeyExistInVirtualBucket(context.Context, *KeyExistInVirtualBucketRequest) (*KeyExistInVirtualBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyExistInVirtualBucket not implemented")
}
func (*UnimplementedCloudsServiceServer) VirtualBucketExist(context.Context, *VirtualBucketExistRequest) (*VirtualBucketExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualBucketExist not implemented")
}
func (*UnimplementedCloudsServiceServer) CreateVirtualBucketIfNotExist(context.Context, *CreateVirtualBucketRequest) (*CreateVirtualBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualBucketIfNotExist not implemented")
}
func (*UnimplementedCloudsServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}

func RegisterCloudsServiceServer(s *grpc.Server, srv CloudsServiceServer) {
	s.RegisterService(&_CloudsService_serviceDesc, srv)
}

func _CloudsService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsServiceServer).Download(ctx, req.(*FileDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsServiceServer).Upload(ctx, req.(*FileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsService_KeyExistInVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyExistInVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsServiceServer).KeyExistInVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/KeyExistInVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsServiceServer).KeyExistInVirtualBucket(ctx, req.(*KeyExistInVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsService_VirtualBucketExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualBucketExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsServiceServer).VirtualBucketExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/VirtualBucketExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsServiceServer).VirtualBucketExist(ctx, req.(*VirtualBucketExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsService_CreateVirtualBucketIfNotExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsServiceServer).CreateVirtualBucketIfNotExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/CreateVirtualBucketIfNotExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsServiceServer).CreateVirtualBucketIfNotExist(ctx, req.(*CreateVirtualBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.cloudsd.v1.CloudsService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeld.services.cloudsd.v1.CloudsService",
	HandlerType: (*CloudsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _CloudsService_Download_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _CloudsService_Upload_Handler,
		},
		{
			MethodName: "KeyExistInVirtualBucket",
			Handler:    _CloudsService_KeyExistInVirtualBucket_Handler,
		},
		{
			MethodName: "VirtualBucketExist",
			Handler:    _CloudsService_VirtualBucketExist_Handler,
		},
		{
			MethodName: "CreateVirtualBucketIfNotExist",
			Handler:    _CloudsService_CreateVirtualBucketIfNotExist_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _CloudsService_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/cloudsd/v1/cloudsd.proto",
}
