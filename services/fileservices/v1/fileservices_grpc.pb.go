// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: github.com/metaprov/modelaapi/services/fileservices/v1/fileservices.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServicesServiceClient is the client API for FileServicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServicesServiceClient interface {
	UploadChunk(ctx context.Context, opts ...grpc.CallOption) (FileServicesService_UploadChunkClient, error)
}

type fileServicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServicesServiceClient(cc grpc.ClientConnInterface) FileServicesServiceClient {
	return &fileServicesServiceClient{cc}
}

func (c *fileServicesServiceClient) UploadChunk(ctx context.Context, opts ...grpc.CallOption) (FileServicesService_UploadChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServicesService_ServiceDesc.Streams[0], "/github.com.metaprov.modelaapi.services.fileservices.v1.FileServicesService/UploadChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServicesServiceUploadChunkClient{stream}
	return x, nil
}

type FileServicesService_UploadChunkClient interface {
	Send(*DataBlock) error
	CloseAndRecv() (*UploadResult, error)
	grpc.ClientStream
}

type fileServicesServiceUploadChunkClient struct {
	grpc.ClientStream
}

func (x *fileServicesServiceUploadChunkClient) Send(m *DataBlock) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServicesServiceUploadChunkClient) CloseAndRecv() (*UploadResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServicesServiceServer is the server API for FileServicesService service.
// All implementations must embed UnimplementedFileServicesServiceServer
// for forward compatibility
type FileServicesServiceServer interface {
	UploadChunk(FileServicesService_UploadChunkServer) error
	mustEmbedUnimplementedFileServicesServiceServer()
}

// UnimplementedFileServicesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServicesServiceServer struct {
}

func (UnimplementedFileServicesServiceServer) UploadChunk(FileServicesService_UploadChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadChunk not implemented")
}
func (UnimplementedFileServicesServiceServer) mustEmbedUnimplementedFileServicesServiceServer() {}

// UnsafeFileServicesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServicesServiceServer will
// result in compilation errors.
type UnsafeFileServicesServiceServer interface {
	mustEmbedUnimplementedFileServicesServiceServer()
}

func RegisterFileServicesServiceServer(s grpc.ServiceRegistrar, srv FileServicesServiceServer) {
	s.RegisterService(&FileServicesService_ServiceDesc, srv)
}

func _FileServicesService_UploadChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServicesServiceServer).UploadChunk(&fileServicesServiceUploadChunkServer{stream})
}

type FileServicesService_UploadChunkServer interface {
	SendAndClose(*UploadResult) error
	Recv() (*DataBlock, error)
	grpc.ServerStream
}

type fileServicesServiceUploadChunkServer struct {
	grpc.ServerStream
}

func (x *fileServicesServiceUploadChunkServer) SendAndClose(m *UploadResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServicesServiceUploadChunkServer) Recv() (*DataBlock, error) {
	m := new(DataBlock)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServicesService_ServiceDesc is the grpc.ServiceDesc for FileServicesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServicesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.fileservices.v1.FileServicesService",
	HandlerType: (*FileServicesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadChunk",
			Handler:       _FileServicesService_UploadChunk_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/metaprov/modelaapi/services/fileservices/v1/fileservices.proto",
}
