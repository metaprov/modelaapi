// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/sqlqueryrun/v1/sqlqueryrun.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqlQueryRunServiceClient is the client API for SqlQueryRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlQueryRunServiceClient interface {
	ListSqlQuerieRuns(ctx context.Context, in *ListSqlQueryRunsRequest, opts ...grpc.CallOption) (*ListSqlQueryRunsResponse, error)
	CreateSqlQueryRun(ctx context.Context, in *CreateSqlQueryRunRequest, opts ...grpc.CallOption) (*CreateSqlQueryRunResponse, error)
	GetSqlQueryRun(ctx context.Context, in *GetSqlQueryRunRequest, opts ...grpc.CallOption) (*GetSqlQueryRunResponse, error)
	UpdateSqlQueryRun(ctx context.Context, in *UpdateSqlQueryRunRequest, opts ...grpc.CallOption) (*UpdateSqlQueryRunResponse, error)
	DeleteSqlQueryRun(ctx context.Context, in *DeleteSqlQueryRunRequest, opts ...grpc.CallOption) (*DeleteSqlQueryRunResponse, error)
	RunSqlQueryRun(ctx context.Context, in *RunSqlQueryRunRequest, opts ...grpc.CallOption) (*RunSqlQueryRunResponse, error)
}

type sqlQueryRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlQueryRunServiceClient(cc grpc.ClientConnInterface) SqlQueryRunServiceClient {
	return &sqlQueryRunServiceClient{cc}
}

func (c *sqlQueryRunServiceClient) ListSqlQuerieRuns(ctx context.Context, in *ListSqlQueryRunsRequest, opts ...grpc.CallOption) (*ListSqlQueryRunsResponse, error) {
	out := new(ListSqlQueryRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/ListSqlQuerieRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryRunServiceClient) CreateSqlQueryRun(ctx context.Context, in *CreateSqlQueryRunRequest, opts ...grpc.CallOption) (*CreateSqlQueryRunResponse, error) {
	out := new(CreateSqlQueryRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/CreateSqlQueryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryRunServiceClient) GetSqlQueryRun(ctx context.Context, in *GetSqlQueryRunRequest, opts ...grpc.CallOption) (*GetSqlQueryRunResponse, error) {
	out := new(GetSqlQueryRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/GetSqlQueryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryRunServiceClient) UpdateSqlQueryRun(ctx context.Context, in *UpdateSqlQueryRunRequest, opts ...grpc.CallOption) (*UpdateSqlQueryRunResponse, error) {
	out := new(UpdateSqlQueryRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/UpdateSqlQueryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryRunServiceClient) DeleteSqlQueryRun(ctx context.Context, in *DeleteSqlQueryRunRequest, opts ...grpc.CallOption) (*DeleteSqlQueryRunResponse, error) {
	out := new(DeleteSqlQueryRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/DeleteSqlQueryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryRunServiceClient) RunSqlQueryRun(ctx context.Context, in *RunSqlQueryRunRequest, opts ...grpc.CallOption) (*RunSqlQueryRunResponse, error) {
	out := new(RunSqlQueryRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/RunSqlQueryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlQueryRunServiceServer is the server API for SqlQueryRunService service.
// All implementations must embed UnimplementedSqlQueryRunServiceServer
// for forward compatibility
type SqlQueryRunServiceServer interface {
	ListSqlQuerieRuns(context.Context, *ListSqlQueryRunsRequest) (*ListSqlQueryRunsResponse, error)
	CreateSqlQueryRun(context.Context, *CreateSqlQueryRunRequest) (*CreateSqlQueryRunResponse, error)
	GetSqlQueryRun(context.Context, *GetSqlQueryRunRequest) (*GetSqlQueryRunResponse, error)
	UpdateSqlQueryRun(context.Context, *UpdateSqlQueryRunRequest) (*UpdateSqlQueryRunResponse, error)
	DeleteSqlQueryRun(context.Context, *DeleteSqlQueryRunRequest) (*DeleteSqlQueryRunResponse, error)
	RunSqlQueryRun(context.Context, *RunSqlQueryRunRequest) (*RunSqlQueryRunResponse, error)
	mustEmbedUnimplementedSqlQueryRunServiceServer()
}

// UnimplementedSqlQueryRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlQueryRunServiceServer struct {
}

func (UnimplementedSqlQueryRunServiceServer) ListSqlQuerieRuns(context.Context, *ListSqlQueryRunsRequest) (*ListSqlQueryRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSqlQuerieRuns not implemented")
}
func (UnimplementedSqlQueryRunServiceServer) CreateSqlQueryRun(context.Context, *CreateSqlQueryRunRequest) (*CreateSqlQueryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSqlQueryRun not implemented")
}
func (UnimplementedSqlQueryRunServiceServer) GetSqlQueryRun(context.Context, *GetSqlQueryRunRequest) (*GetSqlQueryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSqlQueryRun not implemented")
}
func (UnimplementedSqlQueryRunServiceServer) UpdateSqlQueryRun(context.Context, *UpdateSqlQueryRunRequest) (*UpdateSqlQueryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSqlQueryRun not implemented")
}
func (UnimplementedSqlQueryRunServiceServer) DeleteSqlQueryRun(context.Context, *DeleteSqlQueryRunRequest) (*DeleteSqlQueryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSqlQueryRun not implemented")
}
func (UnimplementedSqlQueryRunServiceServer) RunSqlQueryRun(context.Context, *RunSqlQueryRunRequest) (*RunSqlQueryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSqlQueryRun not implemented")
}
func (UnimplementedSqlQueryRunServiceServer) mustEmbedUnimplementedSqlQueryRunServiceServer() {}

// UnsafeSqlQueryRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlQueryRunServiceServer will
// result in compilation errors.
type UnsafeSqlQueryRunServiceServer interface {
	mustEmbedUnimplementedSqlQueryRunServiceServer()
}

func RegisterSqlQueryRunServiceServer(s grpc.ServiceRegistrar, srv SqlQueryRunServiceServer) {
	s.RegisterService(&SqlQueryRunService_ServiceDesc, srv)
}

func _SqlQueryRunService_ListSqlQuerieRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSqlQueryRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).ListSqlQuerieRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/ListSqlQuerieRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).ListSqlQuerieRuns(ctx, req.(*ListSqlQueryRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryRunService_CreateSqlQueryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSqlQueryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).CreateSqlQueryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/CreateSqlQueryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).CreateSqlQueryRun(ctx, req.(*CreateSqlQueryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryRunService_GetSqlQueryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSqlQueryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).GetSqlQueryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/GetSqlQueryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).GetSqlQueryRun(ctx, req.(*GetSqlQueryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryRunService_UpdateSqlQueryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSqlQueryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).UpdateSqlQueryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/UpdateSqlQueryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).UpdateSqlQueryRun(ctx, req.(*UpdateSqlQueryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryRunService_DeleteSqlQueryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSqlQueryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).DeleteSqlQueryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/DeleteSqlQueryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).DeleteSqlQueryRun(ctx, req.(*DeleteSqlQueryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryRunService_RunSqlQueryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSqlQueryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).RunSqlQueryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/RunSqlQueryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).RunSqlQueryRun(ctx, req.(*RunSqlQueryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlQueryRunService_ServiceDesc is the grpc.ServiceDesc for SqlQueryRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlQueryRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService",
	HandlerType: (*SqlQueryRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSqlQuerieRuns",
			Handler:    _SqlQueryRunService_ListSqlQuerieRuns_Handler,
		},
		{
			MethodName: "CreateSqlQueryRun",
			Handler:    _SqlQueryRunService_CreateSqlQueryRun_Handler,
		},
		{
			MethodName: "GetSqlQueryRun",
			Handler:    _SqlQueryRunService_GetSqlQueryRun_Handler,
		},
		{
			MethodName: "UpdateSqlQueryRun",
			Handler:    _SqlQueryRunService_UpdateSqlQueryRun_Handler,
		},
		{
			MethodName: "DeleteSqlQueryRun",
			Handler:    _SqlQueryRunService_DeleteSqlQueryRun_Handler,
		},
		{
			MethodName: "RunSqlQueryRun",
			Handler:    _SqlQueryRunService_RunSqlQueryRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/sqlqueryrun/v1/sqlqueryrun.proto",
}
