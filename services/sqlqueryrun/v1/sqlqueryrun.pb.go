// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: github.com/metaprov/modelaapi/services/sqlqueryrun/v1/sqlqueryrun.proto

package v1

import (
	context "context"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListSqlQueryRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListSqlQueryRunsRequest) Reset() {
	*x = ListSqlQueryRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSqlQueryRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSqlQueryRunsRequest) ProtoMessage() {}

func (x *ListSqlQueryRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSqlQueryRunsRequest.ProtoReflect.Descriptor instead.
func (*ListSqlQueryRunsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{0}
}

func (x *ListSqlQueryRunsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListSqlQueryRunsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSqlQueryRunsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListSqlQueryRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sqlqueryruns  *v1alpha1.SqlQueryRunList `protobuf:"bytes,1,opt,name=sqlqueryruns,proto3" json:"sqlqueryruns,omitempty"`
	NextPageToken string                    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSqlQueryRunsResponse) Reset() {
	*x = ListSqlQueryRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSqlQueryRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSqlQueryRunsResponse) ProtoMessage() {}

func (x *ListSqlQueryRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSqlQueryRunsResponse.ProtoReflect.Descriptor instead.
func (*ListSqlQueryRunsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{1}
}

func (x *ListSqlQueryRunsResponse) GetSqlqueryruns() *v1alpha1.SqlQueryRunList {
	if x != nil {
		return x.Sqlqueryruns
	}
	return nil
}

func (x *ListSqlQueryRunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateSqlQueryRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSqlQueryRunResponse) Reset() {
	*x = CreateSqlQueryRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSqlQueryRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSqlQueryRunResponse) ProtoMessage() {}

func (x *CreateSqlQueryRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSqlQueryRunResponse.ProtoReflect.Descriptor instead.
func (*CreateSqlQueryRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{2}
}

type CreateSqlQueryRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sqlqueryrun *v1alpha1.SqlQueryRun `protobuf:"bytes,1,opt,name=sqlqueryrun,proto3" json:"sqlqueryrun,omitempty"`
}

func (x *CreateSqlQueryRunRequest) Reset() {
	*x = CreateSqlQueryRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSqlQueryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSqlQueryRunRequest) ProtoMessage() {}

func (x *CreateSqlQueryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSqlQueryRunRequest.ProtoReflect.Descriptor instead.
func (*CreateSqlQueryRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSqlQueryRunRequest) GetSqlqueryrun() *v1alpha1.SqlQueryRun {
	if x != nil {
		return x.Sqlqueryrun
	}
	return nil
}

type UpdateSqlQueryRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sqlqueryrun *v1alpha1.SqlQueryRun `protobuf:"bytes,1,opt,name=sqlqueryrun,proto3" json:"sqlqueryrun,omitempty"`
	FieldMask   *field_mask.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *UpdateSqlQueryRunRequest) Reset() {
	*x = UpdateSqlQueryRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSqlQueryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSqlQueryRunRequest) ProtoMessage() {}

func (x *UpdateSqlQueryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSqlQueryRunRequest.ProtoReflect.Descriptor instead.
func (*UpdateSqlQueryRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSqlQueryRunRequest) GetSqlqueryrun() *v1alpha1.SqlQueryRun {
	if x != nil {
		return x.Sqlqueryrun
	}
	return nil
}

func (x *UpdateSqlQueryRunRequest) GetFieldMask() *field_mask.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type UpdateSqlQueryRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSqlQueryRunResponse) Reset() {
	*x = UpdateSqlQueryRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSqlQueryRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSqlQueryRunResponse) ProtoMessage() {}

func (x *UpdateSqlQueryRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSqlQueryRunResponse.ProtoReflect.Descriptor instead.
func (*UpdateSqlQueryRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{5}
}

type GetSqlQueryRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSqlQueryRunRequest) Reset() {
	*x = GetSqlQueryRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSqlQueryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSqlQueryRunRequest) ProtoMessage() {}

func (x *GetSqlQueryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSqlQueryRunRequest.ProtoReflect.Descriptor instead.
func (*GetSqlQueryRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{6}
}

func (x *GetSqlQueryRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetSqlQueryRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSqlQueryRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sqlqueryrun *v1alpha1.SqlQueryRun `protobuf:"bytes,1,opt,name=sqlqueryrun,proto3" json:"sqlqueryrun,omitempty"`
	Yaml        string                `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetSqlQueryRunResponse) Reset() {
	*x = GetSqlQueryRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSqlQueryRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSqlQueryRunResponse) ProtoMessage() {}

func (x *GetSqlQueryRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSqlQueryRunResponse.ProtoReflect.Descriptor instead.
func (*GetSqlQueryRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{7}
}

func (x *GetSqlQueryRunResponse) GetSqlqueryrun() *v1alpha1.SqlQueryRun {
	if x != nil {
		return x.Sqlqueryrun
	}
	return nil
}

func (x *GetSqlQueryRunResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeleteSqlQueryRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteSqlQueryRunRequest) Reset() {
	*x = DeleteSqlQueryRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSqlQueryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSqlQueryRunRequest) ProtoMessage() {}

func (x *DeleteSqlQueryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSqlQueryRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteSqlQueryRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteSqlQueryRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteSqlQueryRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteSqlQueryRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSqlQueryRunResponse) Reset() {
	*x = DeleteSqlQueryRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSqlQueryRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSqlQueryRunResponse) ProtoMessage() {}

func (x *DeleteSqlQueryRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSqlQueryRunResponse.ProtoReflect.Descriptor instead.
func (*DeleteSqlQueryRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{9}
}

type RunSqlQueryRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sqlqueryrun *v1alpha1.SqlQueryRun `protobuf:"bytes,1,opt,name=sqlqueryrun,proto3" json:"sqlqueryrun,omitempty"`
}

func (x *RunSqlQueryRunRequest) Reset() {
	*x = RunSqlQueryRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunSqlQueryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSqlQueryRunRequest) ProtoMessage() {}

func (x *RunSqlQueryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSqlQueryRunRequest.ProtoReflect.Descriptor instead.
func (*RunSqlQueryRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{10}
}

func (x *RunSqlQueryRunRequest) GetSqlqueryrun() *v1alpha1.SqlQueryRun {
	if x != nil {
		return x.Sqlqueryrun
	}
	return nil
}

type RunSqlQueryRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunSqlQueryRunResponse) Reset() {
	*x = RunSqlQueryRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunSqlQueryRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSqlQueryRunResponse) ProtoMessage() {}

func (x *RunSqlQueryRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSqlQueryRunResponse.ProtoReflect.Descriptor instead.
func (*RunSqlQueryRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP(), []int{11}
}

var File_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDesc = []byte{
	0x0a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x72, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x71,
	0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73,
	0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x7f, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x0b,
	0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x75, 0x6e, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75,
	0x6e, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63,
	0x0a, 0x0b, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x72, 0x75, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x1b,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x71,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x63, 0x0a, 0x0b, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x4c, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x53, 0x71, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63,
	0x0a, 0x0b, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x72, 0x75, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa8, 0x0b,
	0x0a, 0x12, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xda, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x4e, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x7d, 0x12, 0xd3, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x72, 0x75, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xda, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12,
	0x23, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x12, 0x90, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x4f, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x52, 0x1a, 0x4d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x72, 0x75, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xe3, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x4f, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71,
	0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x88, 0x02,
	0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x71, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x53, 0x22, 0x51, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x72, 0x75, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x72, 0x75, 0x6e, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescData = file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDesc
)

func file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescData)
	})
	return file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDescData
}

var file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_goTypes = []interface{}{
	(*ListSqlQueryRunsRequest)(nil),   // 0: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.ListSqlQueryRunsRequest
	(*ListSqlQueryRunsResponse)(nil),  // 1: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.ListSqlQueryRunsResponse
	(*CreateSqlQueryRunResponse)(nil), // 2: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.CreateSqlQueryRunResponse
	(*CreateSqlQueryRunRequest)(nil),  // 3: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.CreateSqlQueryRunRequest
	(*UpdateSqlQueryRunRequest)(nil),  // 4: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.UpdateSqlQueryRunRequest
	(*UpdateSqlQueryRunResponse)(nil), // 5: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.UpdateSqlQueryRunResponse
	(*GetSqlQueryRunRequest)(nil),     // 6: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.GetSqlQueryRunRequest
	(*GetSqlQueryRunResponse)(nil),    // 7: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.GetSqlQueryRunResponse
	(*DeleteSqlQueryRunRequest)(nil),  // 8: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.DeleteSqlQueryRunRequest
	(*DeleteSqlQueryRunResponse)(nil), // 9: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.DeleteSqlQueryRunResponse
	(*RunSqlQueryRunRequest)(nil),     // 10: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.RunSqlQueryRunRequest
	(*RunSqlQueryRunResponse)(nil),    // 11: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.RunSqlQueryRunResponse
	nil,                               // 12: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.ListSqlQueryRunsRequest.LabelsEntry
	(*v1alpha1.SqlQueryRunList)(nil),  // 13: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQueryRunList
	(*v1alpha1.SqlQueryRun)(nil),      // 14: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQueryRun
	(*field_mask.FieldMask)(nil),      // 15: google.protobuf.FieldMask
}
var file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_depIdxs = []int32{
	12, // 0: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.ListSqlQueryRunsRequest.labels:type_name -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.ListSqlQueryRunsRequest.LabelsEntry
	13, // 1: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.ListSqlQueryRunsResponse.sqlqueryruns:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQueryRunList
	14, // 2: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.CreateSqlQueryRunRequest.sqlqueryrun:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQueryRun
	14, // 3: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.UpdateSqlQueryRunRequest.sqlqueryrun:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQueryRun
	15, // 4: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.UpdateSqlQueryRunRequest.field_mask:type_name -> google.protobuf.FieldMask
	14, // 5: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.GetSqlQueryRunResponse.sqlqueryrun:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQueryRun
	14, // 6: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.RunSqlQueryRunRequest.sqlqueryrun:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SqlQueryRun
	0,  // 7: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.ListSqlQuerieRuns:input_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.ListSqlQueryRunsRequest
	3,  // 8: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.CreateSqlQueryRun:input_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.CreateSqlQueryRunRequest
	6,  // 9: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.GetSqlQueryRun:input_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.GetSqlQueryRunRequest
	4,  // 10: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.UpdateSqlQueryRun:input_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.UpdateSqlQueryRunRequest
	8,  // 11: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.DeleteSqlQueryRun:input_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.DeleteSqlQueryRunRequest
	10, // 12: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.RunSqlQueryRun:input_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.RunSqlQueryRunRequest
	1,  // 13: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.ListSqlQuerieRuns:output_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.ListSqlQueryRunsResponse
	2,  // 14: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.CreateSqlQueryRun:output_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.CreateSqlQueryRunResponse
	7,  // 15: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.GetSqlQueryRun:output_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.GetSqlQueryRunResponse
	5,  // 16: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.UpdateSqlQueryRun:output_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.UpdateSqlQueryRunResponse
	9,  // 17: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.DeleteSqlQueryRun:output_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.DeleteSqlQueryRunResponse
	11, // 18: github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService.RunSqlQueryRun:output_type -> github.com.metaprov.modelaapi.services.sqlqueryrun.v1.RunSqlQueryRunResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_init() }
func file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_init() {
	if File_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSqlQueryRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSqlQueryRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSqlQueryRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSqlQueryRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSqlQueryRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSqlQueryRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSqlQueryRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSqlQueryRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSqlQueryRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSqlQueryRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSqlQueryRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSqlQueryRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_depIdxs,
		MessageInfos:      file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto = out.File
	file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_rawDesc = nil
	file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_goTypes = nil
	file_github_com_metaprov_modelaapi_services_sqlqueryrun_v1_sqlqueryrun_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SqlQueryRunServiceClient is the client API for SqlQueryRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SqlQueryRunServiceClient interface {
	ListSqlQuerieRuns(ctx context.Context, in *ListSqlQueryRunsRequest, opts ...grpc.CallOption) (*ListSqlQueryRunsResponse, error)
	CreateSqlQueryRun(ctx context.Context, in *CreateSqlQueryRunRequest, opts ...grpc.CallOption) (*CreateSqlQueryRunResponse, error)
	GetSqlQueryRun(ctx context.Context, in *GetSqlQueryRunRequest, opts ...grpc.CallOption) (*GetSqlQueryRunResponse, error)
	UpdateSqlQueryRun(ctx context.Context, in *UpdateSqlQueryRunRequest, opts ...grpc.CallOption) (*UpdateSqlQueryRunResponse, error)
	DeleteSqlQueryRun(ctx context.Context, in *DeleteSqlQueryRunRequest, opts ...grpc.CallOption) (*DeleteSqlQueryRunResponse, error)
	RunSqlQueryRun(ctx context.Context, in *RunSqlQueryRunRequest, opts ...grpc.CallOption) (*RunSqlQueryRunResponse, error)
}

type sqlQueryRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlQueryRunServiceClient(cc grpc.ClientConnInterface) SqlQueryRunServiceClient {
	return &sqlQueryRunServiceClient{cc}
}

func (c *sqlQueryRunServiceClient) ListSqlQuerieRuns(ctx context.Context, in *ListSqlQueryRunsRequest, opts ...grpc.CallOption) (*ListSqlQueryRunsResponse, error) {
	out := new(ListSqlQueryRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/ListSqlQuerieRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryRunServiceClient) CreateSqlQueryRun(ctx context.Context, in *CreateSqlQueryRunRequest, opts ...grpc.CallOption) (*CreateSqlQueryRunResponse, error) {
	out := new(CreateSqlQueryRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/CreateSqlQueryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryRunServiceClient) GetSqlQueryRun(ctx context.Context, in *GetSqlQueryRunRequest, opts ...grpc.CallOption) (*GetSqlQueryRunResponse, error) {
	out := new(GetSqlQueryRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/GetSqlQueryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryRunServiceClient) UpdateSqlQueryRun(ctx context.Context, in *UpdateSqlQueryRunRequest, opts ...grpc.CallOption) (*UpdateSqlQueryRunResponse, error) {
	out := new(UpdateSqlQueryRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/UpdateSqlQueryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryRunServiceClient) DeleteSqlQueryRun(ctx context.Context, in *DeleteSqlQueryRunRequest, opts ...grpc.CallOption) (*DeleteSqlQueryRunResponse, error) {
	out := new(DeleteSqlQueryRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/DeleteSqlQueryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlQueryRunServiceClient) RunSqlQueryRun(ctx context.Context, in *RunSqlQueryRunRequest, opts ...grpc.CallOption) (*RunSqlQueryRunResponse, error) {
	out := new(RunSqlQueryRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/RunSqlQueryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlQueryRunServiceServer is the server API for SqlQueryRunService service.
type SqlQueryRunServiceServer interface {
	ListSqlQuerieRuns(context.Context, *ListSqlQueryRunsRequest) (*ListSqlQueryRunsResponse, error)
	CreateSqlQueryRun(context.Context, *CreateSqlQueryRunRequest) (*CreateSqlQueryRunResponse, error)
	GetSqlQueryRun(context.Context, *GetSqlQueryRunRequest) (*GetSqlQueryRunResponse, error)
	UpdateSqlQueryRun(context.Context, *UpdateSqlQueryRunRequest) (*UpdateSqlQueryRunResponse, error)
	DeleteSqlQueryRun(context.Context, *DeleteSqlQueryRunRequest) (*DeleteSqlQueryRunResponse, error)
	RunSqlQueryRun(context.Context, *RunSqlQueryRunRequest) (*RunSqlQueryRunResponse, error)
}

// UnimplementedSqlQueryRunServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSqlQueryRunServiceServer struct {
}

func (*UnimplementedSqlQueryRunServiceServer) ListSqlQuerieRuns(context.Context, *ListSqlQueryRunsRequest) (*ListSqlQueryRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSqlQuerieRuns not implemented")
}
func (*UnimplementedSqlQueryRunServiceServer) CreateSqlQueryRun(context.Context, *CreateSqlQueryRunRequest) (*CreateSqlQueryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSqlQueryRun not implemented")
}
func (*UnimplementedSqlQueryRunServiceServer) GetSqlQueryRun(context.Context, *GetSqlQueryRunRequest) (*GetSqlQueryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSqlQueryRun not implemented")
}
func (*UnimplementedSqlQueryRunServiceServer) UpdateSqlQueryRun(context.Context, *UpdateSqlQueryRunRequest) (*UpdateSqlQueryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSqlQueryRun not implemented")
}
func (*UnimplementedSqlQueryRunServiceServer) DeleteSqlQueryRun(context.Context, *DeleteSqlQueryRunRequest) (*DeleteSqlQueryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSqlQueryRun not implemented")
}
func (*UnimplementedSqlQueryRunServiceServer) RunSqlQueryRun(context.Context, *RunSqlQueryRunRequest) (*RunSqlQueryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSqlQueryRun not implemented")
}

func RegisterSqlQueryRunServiceServer(s *grpc.Server, srv SqlQueryRunServiceServer) {
	s.RegisterService(&_SqlQueryRunService_serviceDesc, srv)
}

func _SqlQueryRunService_ListSqlQuerieRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSqlQueryRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).ListSqlQuerieRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/ListSqlQuerieRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).ListSqlQuerieRuns(ctx, req.(*ListSqlQueryRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryRunService_CreateSqlQueryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSqlQueryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).CreateSqlQueryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/CreateSqlQueryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).CreateSqlQueryRun(ctx, req.(*CreateSqlQueryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryRunService_GetSqlQueryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSqlQueryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).GetSqlQueryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/GetSqlQueryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).GetSqlQueryRun(ctx, req.(*GetSqlQueryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryRunService_UpdateSqlQueryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSqlQueryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).UpdateSqlQueryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/UpdateSqlQueryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).UpdateSqlQueryRun(ctx, req.(*UpdateSqlQueryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryRunService_DeleteSqlQueryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSqlQueryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).DeleteSqlQueryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/DeleteSqlQueryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).DeleteSqlQueryRun(ctx, req.(*DeleteSqlQueryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlQueryRunService_RunSqlQueryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSqlQueryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlQueryRunServiceServer).RunSqlQueryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService/RunSqlQueryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlQueryRunServiceServer).RunSqlQueryRun(ctx, req.(*RunSqlQueryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SqlQueryRunService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.sqlqueryrun.v1.SqlQueryRunService",
	HandlerType: (*SqlQueryRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSqlQuerieRuns",
			Handler:    _SqlQueryRunService_ListSqlQuerieRuns_Handler,
		},
		{
			MethodName: "CreateSqlQueryRun",
			Handler:    _SqlQueryRunService_CreateSqlQueryRun_Handler,
		},
		{
			MethodName: "GetSqlQueryRun",
			Handler:    _SqlQueryRunService_GetSqlQueryRun_Handler,
		},
		{
			MethodName: "UpdateSqlQueryRun",
			Handler:    _SqlQueryRunService_UpdateSqlQueryRun_Handler,
		},
		{
			MethodName: "DeleteSqlQueryRun",
			Handler:    _SqlQueryRunService_DeleteSqlQueryRun_Handler,
		},
		{
			MethodName: "RunSqlQueryRun",
			Handler:    _SqlQueryRunService_RunSqlQueryRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/sqlqueryrun/v1/sqlqueryrun.proto",
}
