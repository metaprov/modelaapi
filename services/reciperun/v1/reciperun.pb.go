// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: github.com/metaprov/modelaapi/services/reciperun/v1/reciperun.proto

package v1

import (
	context "context"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListRecipeRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels    map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PageSize  int32             `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string            `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	OrderBy   string            `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListRecipeRunsRequest) Reset() {
	*x = ListRecipeRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecipeRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecipeRunsRequest) ProtoMessage() {}

func (x *ListRecipeRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecipeRunsRequest.ProtoReflect.Descriptor instead.
func (*ListRecipeRunsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescGZIP(), []int{0}
}

func (x *ListRecipeRunsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListRecipeRunsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListRecipeRunsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRecipeRunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRecipeRunsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListRecipeRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeRuns    *v1alpha1.RecipeRunList `protobuf:"bytes,1,opt,name=recipeRuns,proto3" json:"recipeRuns,omitempty"`
	NextPageToken string                  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRecipeRunsResponse) Reset() {
	*x = ListRecipeRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecipeRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecipeRunsResponse) ProtoMessage() {}

func (x *ListRecipeRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecipeRunsResponse.ProtoReflect.Descriptor instead.
func (*ListRecipeRunsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescGZIP(), []int{1}
}

func (x *ListRecipeRunsResponse) GetRecipeRuns() *v1alpha1.RecipeRunList {
	if x != nil {
		return x.RecipeRuns
	}
	return nil
}

func (x *ListRecipeRunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateRecipeRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeRun *v1alpha1.RecipeRun `protobuf:"bytes,1,opt,name=recipeRun,proto3" json:"recipeRun,omitempty"`
}

func (x *CreateRecipeRunRequest) Reset() {
	*x = CreateRecipeRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecipeRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeRunRequest) ProtoMessage() {}

func (x *CreateRecipeRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeRunRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRecipeRunRequest) GetRecipeRun() *v1alpha1.RecipeRun {
	if x != nil {
		return x.RecipeRun
	}
	return nil
}

type CreateRecipeRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateRecipeRunResponse) Reset() {
	*x = CreateRecipeRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecipeRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeRunResponse) ProtoMessage() {}

func (x *CreateRecipeRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeRunResponse.ProtoReflect.Descriptor instead.
func (*CreateRecipeRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescGZIP(), []int{3}
}

type UpdateRecipeRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeRun *v1alpha1.RecipeRun   `protobuf:"bytes,1,opt,name=recipeRun,proto3" json:"recipeRun,omitempty"`
	FieldMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *UpdateRecipeRunRequest) Reset() {
	*x = UpdateRecipeRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecipeRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeRunRequest) ProtoMessage() {}

func (x *UpdateRecipeRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeRunRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRecipeRunRequest) GetRecipeRun() *v1alpha1.RecipeRun {
	if x != nil {
		return x.RecipeRun
	}
	return nil
}

func (x *UpdateRecipeRunRequest) GetFieldMask() *field_mask.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type UpdateRecipeRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRecipeRunResponse) Reset() {
	*x = UpdateRecipeRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecipeRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeRunResponse) ProtoMessage() {}

func (x *UpdateRecipeRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeRunResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecipeRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescGZIP(), []int{5}
}

type GetRecipeRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRecipeRunRequest) Reset() {
	*x = GetRecipeRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecipeRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRunRequest) ProtoMessage() {}

func (x *GetRecipeRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRunRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescGZIP(), []int{6}
}

func (x *GetRecipeRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetRecipeRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetRecipeRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeRun *v1alpha1.RecipeRun `protobuf:"bytes,1,opt,name=recipeRun,proto3" json:"recipeRun,omitempty"`
	Yaml      string              `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetRecipeRunResponse) Reset() {
	*x = GetRecipeRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecipeRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRunResponse) ProtoMessage() {}

func (x *GetRecipeRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRunResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescGZIP(), []int{7}
}

func (x *GetRecipeRunResponse) GetRecipeRun() *v1alpha1.RecipeRun {
	if x != nil {
		return x.RecipeRun
	}
	return nil
}

func (x *GetRecipeRunResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeleteRecipeRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRecipeRunRequest) Reset() {
	*x = DeleteRecipeRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecipeRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecipeRunRequest) ProtoMessage() {}

func (x *DeleteRecipeRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecipeRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecipeRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRecipeRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteRecipeRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteRecipeRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRecipeRunResponse) Reset() {
	*x = DeleteRecipeRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecipeRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecipeRunResponse) ProtoMessage() {}

func (x *DeleteRecipeRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecipeRunResponse.ProtoReflect.Descriptor instead.
func (*DeleteRecipeRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescGZIP(), []int{9}
}

var File_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDesc = []byte{
	0x0a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72,
	0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb7, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52,
	0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x77, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x22, 0x19, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5d, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e,
	0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x19, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x89, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x4a, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xd0, 0x08, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x4a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x12, 0xc7, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x4b, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0xce, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52,
	0x75, 0x6e, 0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0xf6, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x1a, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xd7, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x75, 0x6e, 0x12,
	0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75,
	0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescData = file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDesc
)

func file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescData)
	})
	return file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDescData
}

var file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_goTypes = []interface{}{
	(*ListRecipeRunsRequest)(nil),   // 0: github.com.metaprov.modelaapi.services.reciperun.v1.ListRecipeRunsRequest
	(*ListRecipeRunsResponse)(nil),  // 1: github.com.metaprov.modelaapi.services.reciperun.v1.ListRecipeRunsResponse
	(*CreateRecipeRunRequest)(nil),  // 2: github.com.metaprov.modelaapi.services.reciperun.v1.CreateRecipeRunRequest
	(*CreateRecipeRunResponse)(nil), // 3: github.com.metaprov.modelaapi.services.reciperun.v1.CreateRecipeRunResponse
	(*UpdateRecipeRunRequest)(nil),  // 4: github.com.metaprov.modelaapi.services.reciperun.v1.UpdateRecipeRunRequest
	(*UpdateRecipeRunResponse)(nil), // 5: github.com.metaprov.modelaapi.services.reciperun.v1.UpdateRecipeRunResponse
	(*GetRecipeRunRequest)(nil),     // 6: github.com.metaprov.modelaapi.services.reciperun.v1.GetRecipeRunRequest
	(*GetRecipeRunResponse)(nil),    // 7: github.com.metaprov.modelaapi.services.reciperun.v1.GetRecipeRunResponse
	(*DeleteRecipeRunRequest)(nil),  // 8: github.com.metaprov.modelaapi.services.reciperun.v1.DeleteRecipeRunRequest
	(*DeleteRecipeRunResponse)(nil), // 9: github.com.metaprov.modelaapi.services.reciperun.v1.DeleteRecipeRunResponse
	nil,                             // 10: github.com.metaprov.modelaapi.services.reciperun.v1.ListRecipeRunsRequest.LabelsEntry
	(*v1alpha1.RecipeRunList)(nil),  // 11: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.RecipeRunList
	(*v1alpha1.RecipeRun)(nil),      // 12: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.RecipeRun
	(*field_mask.FieldMask)(nil),    // 13: google.protobuf.FieldMask
}
var file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_depIdxs = []int32{
	10, // 0: github.com.metaprov.modelaapi.services.reciperun.v1.ListRecipeRunsRequest.labels:type_name -> github.com.metaprov.modelaapi.services.reciperun.v1.ListRecipeRunsRequest.LabelsEntry
	11, // 1: github.com.metaprov.modelaapi.services.reciperun.v1.ListRecipeRunsResponse.recipeRuns:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.RecipeRunList
	12, // 2: github.com.metaprov.modelaapi.services.reciperun.v1.CreateRecipeRunRequest.recipeRun:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.RecipeRun
	12, // 3: github.com.metaprov.modelaapi.services.reciperun.v1.UpdateRecipeRunRequest.recipeRun:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.RecipeRun
	13, // 4: github.com.metaprov.modelaapi.services.reciperun.v1.UpdateRecipeRunRequest.field_mask:type_name -> google.protobuf.FieldMask
	12, // 5: github.com.metaprov.modelaapi.services.reciperun.v1.GetRecipeRunResponse.recipeRun:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.RecipeRun
	0,  // 6: github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService.ListRecipeRuns:input_type -> github.com.metaprov.modelaapi.services.reciperun.v1.ListRecipeRunsRequest
	2,  // 7: github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService.CreateRecipeRun:input_type -> github.com.metaprov.modelaapi.services.reciperun.v1.CreateRecipeRunRequest
	6,  // 8: github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService.GetRecipeRun:input_type -> github.com.metaprov.modelaapi.services.reciperun.v1.GetRecipeRunRequest
	4,  // 9: github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService.UpdateRecipeRun:input_type -> github.com.metaprov.modelaapi.services.reciperun.v1.UpdateRecipeRunRequest
	8,  // 10: github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService.DeleteRecipeRun:input_type -> github.com.metaprov.modelaapi.services.reciperun.v1.DeleteRecipeRunRequest
	1,  // 11: github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService.ListRecipeRuns:output_type -> github.com.metaprov.modelaapi.services.reciperun.v1.ListRecipeRunsResponse
	3,  // 12: github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService.CreateRecipeRun:output_type -> github.com.metaprov.modelaapi.services.reciperun.v1.CreateRecipeRunResponse
	7,  // 13: github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService.GetRecipeRun:output_type -> github.com.metaprov.modelaapi.services.reciperun.v1.GetRecipeRunResponse
	5,  // 14: github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService.UpdateRecipeRun:output_type -> github.com.metaprov.modelaapi.services.reciperun.v1.UpdateRecipeRunResponse
	9,  // 15: github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService.DeleteRecipeRun:output_type -> github.com.metaprov.modelaapi.services.reciperun.v1.DeleteRecipeRunResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_init() }
func file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_init() {
	if File_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRecipeRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRecipeRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecipeRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecipeRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecipeRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecipeRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecipeRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecipeRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecipeRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecipeRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_depIdxs,
		MessageInfos:      file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto = out.File
	file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_rawDesc = nil
	file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_goTypes = nil
	file_github_com_metaprov_modelaapi_services_reciperun_v1_reciperun_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecipeRunServiceClient is the client API for RecipeRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecipeRunServiceClient interface {
	ListRecipeRuns(ctx context.Context, in *ListRecipeRunsRequest, opts ...grpc.CallOption) (*ListRecipeRunsResponse, error)
	CreateRecipeRun(ctx context.Context, in *CreateRecipeRunRequest, opts ...grpc.CallOption) (*CreateRecipeRunResponse, error)
	GetRecipeRun(ctx context.Context, in *GetRecipeRunRequest, opts ...grpc.CallOption) (*GetRecipeRunResponse, error)
	UpdateRecipeRun(ctx context.Context, in *UpdateRecipeRunRequest, opts ...grpc.CallOption) (*UpdateRecipeRunResponse, error)
	DeleteRecipeRun(ctx context.Context, in *DeleteRecipeRunRequest, opts ...grpc.CallOption) (*DeleteRecipeRunResponse, error)
}

type recipeRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipeRunServiceClient(cc grpc.ClientConnInterface) RecipeRunServiceClient {
	return &recipeRunServiceClient{cc}
}

func (c *recipeRunServiceClient) ListRecipeRuns(ctx context.Context, in *ListRecipeRunsRequest, opts ...grpc.CallOption) (*ListRecipeRunsResponse, error) {
	out := new(ListRecipeRunsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService/ListRecipeRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeRunServiceClient) CreateRecipeRun(ctx context.Context, in *CreateRecipeRunRequest, opts ...grpc.CallOption) (*CreateRecipeRunResponse, error) {
	out := new(CreateRecipeRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService/CreateRecipeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeRunServiceClient) GetRecipeRun(ctx context.Context, in *GetRecipeRunRequest, opts ...grpc.CallOption) (*GetRecipeRunResponse, error) {
	out := new(GetRecipeRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService/GetRecipeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeRunServiceClient) UpdateRecipeRun(ctx context.Context, in *UpdateRecipeRunRequest, opts ...grpc.CallOption) (*UpdateRecipeRunResponse, error) {
	out := new(UpdateRecipeRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService/UpdateRecipeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeRunServiceClient) DeleteRecipeRun(ctx context.Context, in *DeleteRecipeRunRequest, opts ...grpc.CallOption) (*DeleteRecipeRunResponse, error) {
	out := new(DeleteRecipeRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService/DeleteRecipeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipeRunServiceServer is the server API for RecipeRunService service.
type RecipeRunServiceServer interface {
	ListRecipeRuns(context.Context, *ListRecipeRunsRequest) (*ListRecipeRunsResponse, error)
	CreateRecipeRun(context.Context, *CreateRecipeRunRequest) (*CreateRecipeRunResponse, error)
	GetRecipeRun(context.Context, *GetRecipeRunRequest) (*GetRecipeRunResponse, error)
	UpdateRecipeRun(context.Context, *UpdateRecipeRunRequest) (*UpdateRecipeRunResponse, error)
	DeleteRecipeRun(context.Context, *DeleteRecipeRunRequest) (*DeleteRecipeRunResponse, error)
}

// UnimplementedRecipeRunServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRecipeRunServiceServer struct {
}

func (*UnimplementedRecipeRunServiceServer) ListRecipeRuns(context.Context, *ListRecipeRunsRequest) (*ListRecipeRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipeRuns not implemented")
}
func (*UnimplementedRecipeRunServiceServer) CreateRecipeRun(context.Context, *CreateRecipeRunRequest) (*CreateRecipeRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipeRun not implemented")
}
func (*UnimplementedRecipeRunServiceServer) GetRecipeRun(context.Context, *GetRecipeRunRequest) (*GetRecipeRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeRun not implemented")
}
func (*UnimplementedRecipeRunServiceServer) UpdateRecipeRun(context.Context, *UpdateRecipeRunRequest) (*UpdateRecipeRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipeRun not implemented")
}
func (*UnimplementedRecipeRunServiceServer) DeleteRecipeRun(context.Context, *DeleteRecipeRunRequest) (*DeleteRecipeRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecipeRun not implemented")
}

func RegisterRecipeRunServiceServer(s *grpc.Server, srv RecipeRunServiceServer) {
	s.RegisterService(&_RecipeRunService_serviceDesc, srv)
}

func _RecipeRunService_ListRecipeRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipeRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeRunServiceServer).ListRecipeRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService/ListRecipeRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeRunServiceServer).ListRecipeRuns(ctx, req.(*ListRecipeRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeRunService_CreateRecipeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipeRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeRunServiceServer).CreateRecipeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService/CreateRecipeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeRunServiceServer).CreateRecipeRun(ctx, req.(*CreateRecipeRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeRunService_GetRecipeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeRunServiceServer).GetRecipeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService/GetRecipeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeRunServiceServer).GetRecipeRun(ctx, req.(*GetRecipeRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeRunService_UpdateRecipeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecipeRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeRunServiceServer).UpdateRecipeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService/UpdateRecipeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeRunServiceServer).UpdateRecipeRun(ctx, req.(*UpdateRecipeRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeRunService_DeleteRecipeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecipeRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeRunServiceServer).DeleteRecipeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService/DeleteRecipeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeRunServiceServer).DeleteRecipeRun(ctx, req.(*DeleteRecipeRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecipeRunService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.reciperun.v1.RecipeRunService",
	HandlerType: (*RecipeRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRecipeRuns",
			Handler:    _RecipeRunService_ListRecipeRuns_Handler,
		},
		{
			MethodName: "CreateRecipeRun",
			Handler:    _RecipeRunService_CreateRecipeRun_Handler,
		},
		{
			MethodName: "GetRecipeRun",
			Handler:    _RecipeRunService_GetRecipeRun_Handler,
		},
		{
			MethodName: "UpdateRecipeRun",
			Handler:    _RecipeRunService_UpdateRecipeRun_Handler,
		},
		{
			MethodName: "DeleteRecipeRun",
			Handler:    _RecipeRunService_DeleteRecipeRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/reciperun/v1/reciperun.proto",
}
