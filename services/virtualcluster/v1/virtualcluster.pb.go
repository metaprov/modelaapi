// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: services/virtualcluster/v1/virtualcluster.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1"
	_ "github.com/metaprov/modeldapi/services/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListVirtualClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Virtualclusterels map[string]string `protobuf:"bytes,3,rep,name=virtualclusterels,proto3" json:"virtualclusterels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListVirtualClustersRequest) Reset() {
	*x = ListVirtualClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtualClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtualClustersRequest) ProtoMessage() {}

func (x *ListVirtualClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtualClustersRequest.ProtoReflect.Descriptor instead.
func (*ListVirtualClustersRequest) Descriptor() ([]byte, []int) {
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP(), []int{0}
}

func (x *ListVirtualClustersRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListVirtualClustersRequest) GetVirtualclusterels() map[string]string {
	if x != nil {
		return x.Virtualclusterels
	}
	return nil
}

type ListVirtualClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *v1alpha1.VirtualClusterList `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *ListVirtualClustersResponse) Reset() {
	*x = ListVirtualClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtualClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtualClustersResponse) ProtoMessage() {}

func (x *ListVirtualClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtualClustersResponse.ProtoReflect.Descriptor instead.
func (*ListVirtualClustersResponse) Descriptor() ([]byte, []int) {
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP(), []int{1}
}

func (x *ListVirtualClustersResponse) GetItems() *v1alpha1.VirtualClusterList {
	if x != nil {
		return x.Items
	}
	return nil
}

type VirtualClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtualClusterResponse) Reset() {
	*x = VirtualClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualClusterResponse) ProtoMessage() {}

func (x *VirtualClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualClusterResponse.ProtoReflect.Descriptor instead.
func (*VirtualClusterResponse) Descriptor() ([]byte, []int) {
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP(), []int{2}
}

type CreateVirtualClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.VirtualCluster `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateVirtualClusterRequest) Reset() {
	*x = CreateVirtualClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtualClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtualClusterRequest) ProtoMessage() {}

func (x *CreateVirtualClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtualClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateVirtualClusterRequest) Descriptor() ([]byte, []int) {
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP(), []int{3}
}

func (x *CreateVirtualClusterRequest) GetItem() *v1alpha1.VirtualCluster {
	if x != nil {
		return x.Item
	}
	return nil
}

type CreateVirtualClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateVirtualClusterResponse) Reset() {
	*x = CreateVirtualClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtualClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtualClusterResponse) ProtoMessage() {}

func (x *CreateVirtualClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtualClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateVirtualClusterResponse) Descriptor() ([]byte, []int) {
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP(), []int{4}
}

type UpdateVirtualClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.VirtualCluster `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateVirtualClusterRequest) Reset() {
	*x = UpdateVirtualClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVirtualClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVirtualClusterRequest) ProtoMessage() {}

func (x *UpdateVirtualClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVirtualClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateVirtualClusterRequest) Descriptor() ([]byte, []int) {
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateVirtualClusterRequest) GetItem() *v1alpha1.VirtualCluster {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateVirtualClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateVirtualClusterResponse) Reset() {
	*x = UpdateVirtualClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVirtualClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVirtualClusterResponse) ProtoMessage() {}

func (x *UpdateVirtualClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVirtualClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateVirtualClusterResponse) Descriptor() ([]byte, []int) {
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP(), []int{6}
}

type GetVirtualClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVirtualClusterRequest) Reset() {
	*x = GetVirtualClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVirtualClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtualClusterRequest) ProtoMessage() {}

func (x *GetVirtualClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtualClusterRequest.ProtoReflect.Descriptor instead.
func (*GetVirtualClusterRequest) Descriptor() ([]byte, []int) {
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP(), []int{7}
}

func (x *GetVirtualClusterRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetVirtualClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetVirtualClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.VirtualCluster `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Yaml string                   `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetVirtualClusterResponse) Reset() {
	*x = GetVirtualClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVirtualClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtualClusterResponse) ProtoMessage() {}

func (x *GetVirtualClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtualClusterResponse.ProtoReflect.Descriptor instead.
func (*GetVirtualClusterResponse) Descriptor() ([]byte, []int) {
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP(), []int{8}
}

func (x *GetVirtualClusterResponse) GetItem() *v1alpha1.VirtualCluster {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetVirtualClusterResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeleteVirtualClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteVirtualClusterRequest) Reset() {
	*x = DeleteVirtualClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVirtualClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVirtualClusterRequest) ProtoMessage() {}

func (x *DeleteVirtualClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVirtualClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteVirtualClusterRequest) Descriptor() ([]byte, []int) {
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteVirtualClusterRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteVirtualClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteVirtualClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVirtualClusterResponse) Reset() {
	*x = DeleteVirtualClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVirtualClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVirtualClusterResponse) ProtoMessage() {}

func (x *DeleteVirtualClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVirtualClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteVirtualClusterResponse) Descriptor() ([]byte, []int) {
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP(), []int{10}
}

var File_services_virtualcluster_v1_virtualcluster_proto protoreflect.FileDescriptor

var file_services_virtualcluster_v1_virtualcluster_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9c, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x99, 0x01, 0x0a,
	0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6c, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x18,
	0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x78, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x59, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x1e, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x4f, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa7, 0x09, 0x0a, 0x15, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xe3, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x54, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xe5, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0xe4, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x52, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xec, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x1a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xe9, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_virtualcluster_v1_virtualcluster_proto_rawDescOnce sync.Once
	file_services_virtualcluster_v1_virtualcluster_proto_rawDescData = file_services_virtualcluster_v1_virtualcluster_proto_rawDesc
)

func file_services_virtualcluster_v1_virtualcluster_proto_rawDescGZIP() []byte {
	file_services_virtualcluster_v1_virtualcluster_proto_rawDescOnce.Do(func() {
		file_services_virtualcluster_v1_virtualcluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_virtualcluster_v1_virtualcluster_proto_rawDescData)
	})
	return file_services_virtualcluster_v1_virtualcluster_proto_rawDescData
}

var file_services_virtualcluster_v1_virtualcluster_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_services_virtualcluster_v1_virtualcluster_proto_goTypes = []interface{}{
	(*ListVirtualClustersRequest)(nil),   // 0: github.com.metaprov.modeldapi.services.virtualcluster.v1.ListVirtualClustersRequest
	(*ListVirtualClustersResponse)(nil),  // 1: github.com.metaprov.modeldapi.services.virtualcluster.v1.ListVirtualClustersResponse
	(*VirtualClusterResponse)(nil),       // 2: github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterResponse
	(*CreateVirtualClusterRequest)(nil),  // 3: github.com.metaprov.modeldapi.services.virtualcluster.v1.CreateVirtualClusterRequest
	(*CreateVirtualClusterResponse)(nil), // 4: github.com.metaprov.modeldapi.services.virtualcluster.v1.CreateVirtualClusterResponse
	(*UpdateVirtualClusterRequest)(nil),  // 5: github.com.metaprov.modeldapi.services.virtualcluster.v1.UpdateVirtualClusterRequest
	(*UpdateVirtualClusterResponse)(nil), // 6: github.com.metaprov.modeldapi.services.virtualcluster.v1.UpdateVirtualClusterResponse
	(*GetVirtualClusterRequest)(nil),     // 7: github.com.metaprov.modeldapi.services.virtualcluster.v1.GetVirtualClusterRequest
	(*GetVirtualClusterResponse)(nil),    // 8: github.com.metaprov.modeldapi.services.virtualcluster.v1.GetVirtualClusterResponse
	(*DeleteVirtualClusterRequest)(nil),  // 9: github.com.metaprov.modeldapi.services.virtualcluster.v1.DeleteVirtualClusterRequest
	(*DeleteVirtualClusterResponse)(nil), // 10: github.com.metaprov.modeldapi.services.virtualcluster.v1.DeleteVirtualClusterResponse
	nil,                                  // 11: github.com.metaprov.modeldapi.services.virtualcluster.v1.ListVirtualClustersRequest.VirtualclusterelsEntry
	(*v1alpha1.VirtualClusterList)(nil),  // 12: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualClusterList
	(*v1alpha1.VirtualCluster)(nil),      // 13: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualCluster
}
var file_services_virtualcluster_v1_virtualcluster_proto_depIdxs = []int32{
	11, // 0: github.com.metaprov.modeldapi.services.virtualcluster.v1.ListVirtualClustersRequest.virtualclusterels:type_name -> github.com.metaprov.modeldapi.services.virtualcluster.v1.ListVirtualClustersRequest.VirtualclusterelsEntry
	12, // 1: github.com.metaprov.modeldapi.services.virtualcluster.v1.ListVirtualClustersResponse.items:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualClusterList
	13, // 2: github.com.metaprov.modeldapi.services.virtualcluster.v1.CreateVirtualClusterRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualCluster
	13, // 3: github.com.metaprov.modeldapi.services.virtualcluster.v1.UpdateVirtualClusterRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualCluster
	13, // 4: github.com.metaprov.modeldapi.services.virtualcluster.v1.GetVirtualClusterResponse.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualCluster
	0,  // 5: github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService.ListVirtualClusters:input_type -> github.com.metaprov.modeldapi.services.virtualcluster.v1.ListVirtualClustersRequest
	3,  // 6: github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService.CreateVirtualCluster:input_type -> github.com.metaprov.modeldapi.services.virtualcluster.v1.CreateVirtualClusterRequest
	7,  // 7: github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService.GetVirtualCluster:input_type -> github.com.metaprov.modeldapi.services.virtualcluster.v1.GetVirtualClusterRequest
	5,  // 8: github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService.UpdateVirtualCluster:input_type -> github.com.metaprov.modeldapi.services.virtualcluster.v1.UpdateVirtualClusterRequest
	9,  // 9: github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService.DeleteVirtualCluster:input_type -> github.com.metaprov.modeldapi.services.virtualcluster.v1.DeleteVirtualClusterRequest
	1,  // 10: github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService.ListVirtualClusters:output_type -> github.com.metaprov.modeldapi.services.virtualcluster.v1.ListVirtualClustersResponse
	4,  // 11: github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService.CreateVirtualCluster:output_type -> github.com.metaprov.modeldapi.services.virtualcluster.v1.CreateVirtualClusterResponse
	8,  // 12: github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService.GetVirtualCluster:output_type -> github.com.metaprov.modeldapi.services.virtualcluster.v1.GetVirtualClusterResponse
	6,  // 13: github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService.UpdateVirtualCluster:output_type -> github.com.metaprov.modeldapi.services.virtualcluster.v1.UpdateVirtualClusterResponse
	10, // 14: github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService.DeleteVirtualCluster:output_type -> github.com.metaprov.modeldapi.services.virtualcluster.v1.DeleteVirtualClusterResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_services_virtualcluster_v1_virtualcluster_proto_init() }
func file_services_virtualcluster_v1_virtualcluster_proto_init() {
	if File_services_virtualcluster_v1_virtualcluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtualClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtualClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtualClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtualClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVirtualClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVirtualClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVirtualClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVirtualClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVirtualClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_virtualcluster_v1_virtualcluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVirtualClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_virtualcluster_v1_virtualcluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_virtualcluster_v1_virtualcluster_proto_goTypes,
		DependencyIndexes: file_services_virtualcluster_v1_virtualcluster_proto_depIdxs,
		MessageInfos:      file_services_virtualcluster_v1_virtualcluster_proto_msgTypes,
	}.Build()
	File_services_virtualcluster_v1_virtualcluster_proto = out.File
	file_services_virtualcluster_v1_virtualcluster_proto_rawDesc = nil
	file_services_virtualcluster_v1_virtualcluster_proto_goTypes = nil
	file_services_virtualcluster_v1_virtualcluster_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VirtualClusterServiceClient is the client API for VirtualClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VirtualClusterServiceClient interface {
	ListVirtualClusters(ctx context.Context, in *ListVirtualClustersRequest, opts ...grpc.CallOption) (*ListVirtualClustersResponse, error)
	CreateVirtualCluster(ctx context.Context, in *CreateVirtualClusterRequest, opts ...grpc.CallOption) (*CreateVirtualClusterResponse, error)
	GetVirtualCluster(ctx context.Context, in *GetVirtualClusterRequest, opts ...grpc.CallOption) (*GetVirtualClusterResponse, error)
	UpdateVirtualCluster(ctx context.Context, in *UpdateVirtualClusterRequest, opts ...grpc.CallOption) (*UpdateVirtualClusterResponse, error)
	DeleteVirtualCluster(ctx context.Context, in *DeleteVirtualClusterRequest, opts ...grpc.CallOption) (*DeleteVirtualClusterResponse, error)
}

type virtualClusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualClusterServiceClient(cc grpc.ClientConnInterface) VirtualClusterServiceClient {
	return &virtualClusterServiceClient{cc}
}

func (c *virtualClusterServiceClient) ListVirtualClusters(ctx context.Context, in *ListVirtualClustersRequest, opts ...grpc.CallOption) (*ListVirtualClustersResponse, error) {
	out := new(ListVirtualClustersResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService/ListVirtualClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualClusterServiceClient) CreateVirtualCluster(ctx context.Context, in *CreateVirtualClusterRequest, opts ...grpc.CallOption) (*CreateVirtualClusterResponse, error) {
	out := new(CreateVirtualClusterResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService/CreateVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualClusterServiceClient) GetVirtualCluster(ctx context.Context, in *GetVirtualClusterRequest, opts ...grpc.CallOption) (*GetVirtualClusterResponse, error) {
	out := new(GetVirtualClusterResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService/GetVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualClusterServiceClient) UpdateVirtualCluster(ctx context.Context, in *UpdateVirtualClusterRequest, opts ...grpc.CallOption) (*UpdateVirtualClusterResponse, error) {
	out := new(UpdateVirtualClusterResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService/UpdateVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualClusterServiceClient) DeleteVirtualCluster(ctx context.Context, in *DeleteVirtualClusterRequest, opts ...grpc.CallOption) (*DeleteVirtualClusterResponse, error) {
	out := new(DeleteVirtualClusterResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService/DeleteVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualClusterServiceServer is the server API for VirtualClusterService service.
type VirtualClusterServiceServer interface {
	ListVirtualClusters(context.Context, *ListVirtualClustersRequest) (*ListVirtualClustersResponse, error)
	CreateVirtualCluster(context.Context, *CreateVirtualClusterRequest) (*CreateVirtualClusterResponse, error)
	GetVirtualCluster(context.Context, *GetVirtualClusterRequest) (*GetVirtualClusterResponse, error)
	UpdateVirtualCluster(context.Context, *UpdateVirtualClusterRequest) (*UpdateVirtualClusterResponse, error)
	DeleteVirtualCluster(context.Context, *DeleteVirtualClusterRequest) (*DeleteVirtualClusterResponse, error)
}

// UnimplementedVirtualClusterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVirtualClusterServiceServer struct {
}

func (*UnimplementedVirtualClusterServiceServer) ListVirtualClusters(context.Context, *ListVirtualClustersRequest) (*ListVirtualClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualClusters not implemented")
}
func (*UnimplementedVirtualClusterServiceServer) CreateVirtualCluster(context.Context, *CreateVirtualClusterRequest) (*CreateVirtualClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualCluster not implemented")
}
func (*UnimplementedVirtualClusterServiceServer) GetVirtualCluster(context.Context, *GetVirtualClusterRequest) (*GetVirtualClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualCluster not implemented")
}
func (*UnimplementedVirtualClusterServiceServer) UpdateVirtualCluster(context.Context, *UpdateVirtualClusterRequest) (*UpdateVirtualClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualCluster not implemented")
}
func (*UnimplementedVirtualClusterServiceServer) DeleteVirtualCluster(context.Context, *DeleteVirtualClusterRequest) (*DeleteVirtualClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualCluster not implemented")
}

func RegisterVirtualClusterServiceServer(s *grpc.Server, srv VirtualClusterServiceServer) {
	s.RegisterService(&_VirtualClusterService_serviceDesc, srv)
}

func _VirtualClusterService_ListVirtualClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVirtualClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualClusterServiceServer).ListVirtualClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService/ListVirtualClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualClusterServiceServer).ListVirtualClusters(ctx, req.(*ListVirtualClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualClusterService_CreateVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualClusterServiceServer).CreateVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService/CreateVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualClusterServiceServer).CreateVirtualCluster(ctx, req.(*CreateVirtualClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualClusterService_GetVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualClusterServiceServer).GetVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService/GetVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualClusterServiceServer).GetVirtualCluster(ctx, req.(*GetVirtualClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualClusterService_UpdateVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVirtualClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualClusterServiceServer).UpdateVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService/UpdateVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualClusterServiceServer).UpdateVirtualCluster(ctx, req.(*UpdateVirtualClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualClusterService_DeleteVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVirtualClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualClusterServiceServer).DeleteVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService/DeleteVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualClusterServiceServer).DeleteVirtualCluster(ctx, req.(*DeleteVirtualClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VirtualClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeldapi.services.virtualcluster.v1.VirtualClusterService",
	HandlerType: (*VirtualClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVirtualClusters",
			Handler:    _VirtualClusterService_ListVirtualClusters_Handler,
		},
		{
			MethodName: "CreateVirtualCluster",
			Handler:    _VirtualClusterService_CreateVirtualCluster_Handler,
		},
		{
			MethodName: "GetVirtualCluster",
			Handler:    _VirtualClusterService_GetVirtualCluster_Handler,
		},
		{
			MethodName: "UpdateVirtualCluster",
			Handler:    _VirtualClusterService_UpdateVirtualCluster_Handler,
		},
		{
			MethodName: "DeleteVirtualCluster",
			Handler:    _VirtualClusterService_DeleteVirtualCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/virtualcluster/v1/virtualcluster.proto",
}
