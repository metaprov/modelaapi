// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/virtualcluster/v1/virtualcluster.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VirtualClusterServiceClient is the client API for VirtualClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualClusterServiceClient interface {
	ListVirtualClusters(ctx context.Context, in *ListVirtualClustersRequest, opts ...grpc.CallOption) (*ListVirtualClustersResponse, error)
	CreateVirtualCluster(ctx context.Context, in *CreateVirtualClusterRequest, opts ...grpc.CallOption) (*CreateVirtualClusterResponse, error)
	GetVirtualCluster(ctx context.Context, in *GetVirtualClusterRequest, opts ...grpc.CallOption) (*GetVirtualClusterResponse, error)
	UpdateVirtualCluster(ctx context.Context, in *UpdateVirtualClusterRequest, opts ...grpc.CallOption) (*UpdateVirtualClusterResponse, error)
	DeleteVirtualCluster(ctx context.Context, in *DeleteVirtualClusterRequest, opts ...grpc.CallOption) (*DeleteVirtualClusterResponse, error)
}

type virtualClusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualClusterServiceClient(cc grpc.ClientConnInterface) VirtualClusterServiceClient {
	return &virtualClusterServiceClient{cc}
}

func (c *virtualClusterServiceClient) ListVirtualClusters(ctx context.Context, in *ListVirtualClustersRequest, opts ...grpc.CallOption) (*ListVirtualClustersResponse, error) {
	out := new(ListVirtualClustersResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualcluster.v1.VirtualClusterService/ListVirtualClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualClusterServiceClient) CreateVirtualCluster(ctx context.Context, in *CreateVirtualClusterRequest, opts ...grpc.CallOption) (*CreateVirtualClusterResponse, error) {
	out := new(CreateVirtualClusterResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualcluster.v1.VirtualClusterService/CreateVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualClusterServiceClient) GetVirtualCluster(ctx context.Context, in *GetVirtualClusterRequest, opts ...grpc.CallOption) (*GetVirtualClusterResponse, error) {
	out := new(GetVirtualClusterResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualcluster.v1.VirtualClusterService/GetVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualClusterServiceClient) UpdateVirtualCluster(ctx context.Context, in *UpdateVirtualClusterRequest, opts ...grpc.CallOption) (*UpdateVirtualClusterResponse, error) {
	out := new(UpdateVirtualClusterResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualcluster.v1.VirtualClusterService/UpdateVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualClusterServiceClient) DeleteVirtualCluster(ctx context.Context, in *DeleteVirtualClusterRequest, opts ...grpc.CallOption) (*DeleteVirtualClusterResponse, error) {
	out := new(DeleteVirtualClusterResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualcluster.v1.VirtualClusterService/DeleteVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualClusterServiceServer is the server API for VirtualClusterService service.
// All implementations must embed UnimplementedVirtualClusterServiceServer
// for forward compatibility
type VirtualClusterServiceServer interface {
	ListVirtualClusters(context.Context, *ListVirtualClustersRequest) (*ListVirtualClustersResponse, error)
	CreateVirtualCluster(context.Context, *CreateVirtualClusterRequest) (*CreateVirtualClusterResponse, error)
	GetVirtualCluster(context.Context, *GetVirtualClusterRequest) (*GetVirtualClusterResponse, error)
	UpdateVirtualCluster(context.Context, *UpdateVirtualClusterRequest) (*UpdateVirtualClusterResponse, error)
	DeleteVirtualCluster(context.Context, *DeleteVirtualClusterRequest) (*DeleteVirtualClusterResponse, error)
	mustEmbedUnimplementedVirtualClusterServiceServer()
}

// UnimplementedVirtualClusterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVirtualClusterServiceServer struct {
}

func (UnimplementedVirtualClusterServiceServer) ListVirtualClusters(context.Context, *ListVirtualClustersRequest) (*ListVirtualClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualClusters not implemented")
}
func (UnimplementedVirtualClusterServiceServer) CreateVirtualCluster(context.Context, *CreateVirtualClusterRequest) (*CreateVirtualClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualCluster not implemented")
}
func (UnimplementedVirtualClusterServiceServer) GetVirtualCluster(context.Context, *GetVirtualClusterRequest) (*GetVirtualClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualCluster not implemented")
}
func (UnimplementedVirtualClusterServiceServer) UpdateVirtualCluster(context.Context, *UpdateVirtualClusterRequest) (*UpdateVirtualClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualCluster not implemented")
}
func (UnimplementedVirtualClusterServiceServer) DeleteVirtualCluster(context.Context, *DeleteVirtualClusterRequest) (*DeleteVirtualClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualCluster not implemented")
}
func (UnimplementedVirtualClusterServiceServer) mustEmbedUnimplementedVirtualClusterServiceServer() {}

// UnsafeVirtualClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualClusterServiceServer will
// result in compilation errors.
type UnsafeVirtualClusterServiceServer interface {
	mustEmbedUnimplementedVirtualClusterServiceServer()
}

func RegisterVirtualClusterServiceServer(s grpc.ServiceRegistrar, srv VirtualClusterServiceServer) {
	s.RegisterService(&VirtualClusterService_ServiceDesc, srv)
}

func _VirtualClusterService_ListVirtualClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVirtualClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualClusterServiceServer).ListVirtualClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualcluster.v1.VirtualClusterService/ListVirtualClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualClusterServiceServer).ListVirtualClusters(ctx, req.(*ListVirtualClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualClusterService_CreateVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualClusterServiceServer).CreateVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualcluster.v1.VirtualClusterService/CreateVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualClusterServiceServer).CreateVirtualCluster(ctx, req.(*CreateVirtualClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualClusterService_GetVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualClusterServiceServer).GetVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualcluster.v1.VirtualClusterService/GetVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualClusterServiceServer).GetVirtualCluster(ctx, req.(*GetVirtualClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualClusterService_UpdateVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVirtualClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualClusterServiceServer).UpdateVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualcluster.v1.VirtualClusterService/UpdateVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualClusterServiceServer).UpdateVirtualCluster(ctx, req.(*UpdateVirtualClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualClusterService_DeleteVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVirtualClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualClusterServiceServer).DeleteVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualcluster.v1.VirtualClusterService/DeleteVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualClusterServiceServer).DeleteVirtualCluster(ctx, req.(*DeleteVirtualClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualClusterService_ServiceDesc is the grpc.ServiceDesc for VirtualClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.virtualcluster.v1.VirtualClusterService",
	HandlerType: (*VirtualClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVirtualClusters",
			Handler:    _VirtualClusterService_ListVirtualClusters_Handler,
		},
		{
			MethodName: "CreateVirtualCluster",
			Handler:    _VirtualClusterService_CreateVirtualCluster_Handler,
		},
		{
			MethodName: "GetVirtualCluster",
			Handler:    _VirtualClusterService_GetVirtualCluster_Handler,
		},
		{
			MethodName: "UpdateVirtualCluster",
			Handler:    _VirtualClusterService_UpdateVirtualCluster_Handler,
		},
		{
			MethodName: "DeleteVirtualCluster",
			Handler:    _VirtualClusterService_DeleteVirtualCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/virtualcluster/v1/virtualcluster.proto",
}
