syntax = "proto3";
option go_package = "github.com/metaprov/modeld/services/virtualvolume";

package github.com.metaprov.modeld.services.virtualvolume;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modeld-api/pkg/apis/infra/v1alpha1/generated.proto";

message VirtualVolumeQuery {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message VirtualVolumeResponse {}

message VirtualVolumeCreateRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeld-api.pkg.apis.infra.v1alpha1.VirtualVolumeSpec spec = 5;
}

message VirtualVolumeUpdateRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeld-api.pkg.apis.infra.v1alpha1.VirtualVolumeSpec spec = 5;
}


message VirtualVolumeGetResponse {
    github.com.metaprov.modeld-api.pkg.apis.infra.v1alpha1.VirtualVolume item = 1;
    string yaml = 2;

}



service VirtualVolumeService {
    rpc List(VirtualVolumeQuery) returns (github.com.metaprov.modeld-api.pkg.apis.infra.v1alpha1.VirtualVolumeList) {
        option (google.api.http).get = "/api/v1alpha1/virtualvolumes";
    }
    rpc Create(VirtualVolumeCreateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
			post: "/api/v1alpha1/virtualvolumes"
			body: "virtualvolume"
		};
    }

    rpc Get(VirtualVolumeQuery) returns (VirtualVolumeGetResponse) {
        option (google.api.http).get = "/api/v1alpha1/virtualvolumes/{name}";
    }

    rpc Update(VirtualVolumeUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
			put: "/api/v1alpha1/virtualvolumes/{virtualvolumes.metadata.name}"
			body: "virtualvolume"
		};
    }
    rpc Delete(VirtualVolumeQuery) returns (google.protobuf.Empty) {
        option (google.api.http).delete = "/api/v1alpha1/virtualvolumes/{name}";
    }
}