// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/virtualvolume/v1/virtualvolume.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VirtualVolumeServiceClient is the client API for VirtualVolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualVolumeServiceClient interface {
	ListVirtualVolumes(ctx context.Context, in *ListVirtualVolumesRequest, opts ...grpc.CallOption) (*ListVirtualVolumesResponse, error)
	CreateVirtualVolume(ctx context.Context, in *CreateVirtualVolumeRequest, opts ...grpc.CallOption) (*CreateVirtualVolumeResponse, error)
	GetVirtualVolume(ctx context.Context, in *GetVirtualVolumeRequest, opts ...grpc.CallOption) (*GetVirtualVolumeResponse, error)
	UpdateVirtualVolume(ctx context.Context, in *UpdateVirtualVolumeRequest, opts ...grpc.CallOption) (*UpdateVirtualVolumeResponse, error)
	DeleteVirtualVolume(ctx context.Context, in *DeleteVirtualVolumeRequest, opts ...grpc.CallOption) (*DeleteVirtualVolumeResponse, error)
}

type virtualVolumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualVolumeServiceClient(cc grpc.ClientConnInterface) VirtualVolumeServiceClient {
	return &virtualVolumeServiceClient{cc}
}

func (c *virtualVolumeServiceClient) ListVirtualVolumes(ctx context.Context, in *ListVirtualVolumesRequest, opts ...grpc.CallOption) (*ListVirtualVolumesResponse, error) {
	out := new(ListVirtualVolumesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualvolume.v1.VirtualVolumeService/ListVirtualVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualVolumeServiceClient) CreateVirtualVolume(ctx context.Context, in *CreateVirtualVolumeRequest, opts ...grpc.CallOption) (*CreateVirtualVolumeResponse, error) {
	out := new(CreateVirtualVolumeResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualvolume.v1.VirtualVolumeService/CreateVirtualVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualVolumeServiceClient) GetVirtualVolume(ctx context.Context, in *GetVirtualVolumeRequest, opts ...grpc.CallOption) (*GetVirtualVolumeResponse, error) {
	out := new(GetVirtualVolumeResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualvolume.v1.VirtualVolumeService/GetVirtualVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualVolumeServiceClient) UpdateVirtualVolume(ctx context.Context, in *UpdateVirtualVolumeRequest, opts ...grpc.CallOption) (*UpdateVirtualVolumeResponse, error) {
	out := new(UpdateVirtualVolumeResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualvolume.v1.VirtualVolumeService/UpdateVirtualVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualVolumeServiceClient) DeleteVirtualVolume(ctx context.Context, in *DeleteVirtualVolumeRequest, opts ...grpc.CallOption) (*DeleteVirtualVolumeResponse, error) {
	out := new(DeleteVirtualVolumeResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.virtualvolume.v1.VirtualVolumeService/DeleteVirtualVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualVolumeServiceServer is the server API for VirtualVolumeService service.
// All implementations must embed UnimplementedVirtualVolumeServiceServer
// for forward compatibility
type VirtualVolumeServiceServer interface {
	ListVirtualVolumes(context.Context, *ListVirtualVolumesRequest) (*ListVirtualVolumesResponse, error)
	CreateVirtualVolume(context.Context, *CreateVirtualVolumeRequest) (*CreateVirtualVolumeResponse, error)
	GetVirtualVolume(context.Context, *GetVirtualVolumeRequest) (*GetVirtualVolumeResponse, error)
	UpdateVirtualVolume(context.Context, *UpdateVirtualVolumeRequest) (*UpdateVirtualVolumeResponse, error)
	DeleteVirtualVolume(context.Context, *DeleteVirtualVolumeRequest) (*DeleteVirtualVolumeResponse, error)
	mustEmbedUnimplementedVirtualVolumeServiceServer()
}

// UnimplementedVirtualVolumeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVirtualVolumeServiceServer struct {
}

func (UnimplementedVirtualVolumeServiceServer) ListVirtualVolumes(context.Context, *ListVirtualVolumesRequest) (*ListVirtualVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualVolumes not implemented")
}
func (UnimplementedVirtualVolumeServiceServer) CreateVirtualVolume(context.Context, *CreateVirtualVolumeRequest) (*CreateVirtualVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualVolume not implemented")
}
func (UnimplementedVirtualVolumeServiceServer) GetVirtualVolume(context.Context, *GetVirtualVolumeRequest) (*GetVirtualVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualVolume not implemented")
}
func (UnimplementedVirtualVolumeServiceServer) UpdateVirtualVolume(context.Context, *UpdateVirtualVolumeRequest) (*UpdateVirtualVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualVolume not implemented")
}
func (UnimplementedVirtualVolumeServiceServer) DeleteVirtualVolume(context.Context, *DeleteVirtualVolumeRequest) (*DeleteVirtualVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualVolume not implemented")
}
func (UnimplementedVirtualVolumeServiceServer) mustEmbedUnimplementedVirtualVolumeServiceServer() {}

// UnsafeVirtualVolumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualVolumeServiceServer will
// result in compilation errors.
type UnsafeVirtualVolumeServiceServer interface {
	mustEmbedUnimplementedVirtualVolumeServiceServer()
}

func RegisterVirtualVolumeServiceServer(s grpc.ServiceRegistrar, srv VirtualVolumeServiceServer) {
	s.RegisterService(&VirtualVolumeService_ServiceDesc, srv)
}

func _VirtualVolumeService_ListVirtualVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVirtualVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualVolumeServiceServer).ListVirtualVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualvolume.v1.VirtualVolumeService/ListVirtualVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualVolumeServiceServer).ListVirtualVolumes(ctx, req.(*ListVirtualVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualVolumeService_CreateVirtualVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualVolumeServiceServer).CreateVirtualVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualvolume.v1.VirtualVolumeService/CreateVirtualVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualVolumeServiceServer).CreateVirtualVolume(ctx, req.(*CreateVirtualVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualVolumeService_GetVirtualVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualVolumeServiceServer).GetVirtualVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualvolume.v1.VirtualVolumeService/GetVirtualVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualVolumeServiceServer).GetVirtualVolume(ctx, req.(*GetVirtualVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualVolumeService_UpdateVirtualVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVirtualVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualVolumeServiceServer).UpdateVirtualVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualvolume.v1.VirtualVolumeService/UpdateVirtualVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualVolumeServiceServer).UpdateVirtualVolume(ctx, req.(*UpdateVirtualVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualVolumeService_DeleteVirtualVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVirtualVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualVolumeServiceServer).DeleteVirtualVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.virtualvolume.v1.VirtualVolumeService/DeleteVirtualVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualVolumeServiceServer).DeleteVirtualVolume(ctx, req.(*DeleteVirtualVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualVolumeService_ServiceDesc is the grpc.ServiceDesc for VirtualVolumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualVolumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.virtualvolume.v1.VirtualVolumeService",
	HandlerType: (*VirtualVolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVirtualVolumes",
			Handler:    _VirtualVolumeService_ListVirtualVolumes_Handler,
		},
		{
			MethodName: "CreateVirtualVolume",
			Handler:    _VirtualVolumeService_CreateVirtualVolume_Handler,
		},
		{
			MethodName: "GetVirtualVolume",
			Handler:    _VirtualVolumeService_GetVirtualVolume_Handler,
		},
		{
			MethodName: "UpdateVirtualVolume",
			Handler:    _VirtualVolumeService_UpdateVirtualVolume_Handler,
		},
		{
			MethodName: "DeleteVirtualVolume",
			Handler:    _VirtualVolumeService_DeleteVirtualVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/virtualvolume/v1/virtualvolume.proto",
}
