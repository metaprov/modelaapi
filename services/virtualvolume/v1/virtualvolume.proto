syntax = "proto3";
option go_package = "github.com/metaprov/modeldapi/services/virtualvolume/v1";
package github.com.metaprov.modeldapi.services.virtualvolume.v1;

import "google/api/annotations.proto";
import "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1/generated.proto";
import "github.com/metaprov/modeldapi/services/common/v1/common.proto";

message ListVirtualVolumesRequest {
    string namespace = 1;
    map<string,string> labels =3;
}

message ListVirtualVolumesResponse {
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualVolumeList items = 1;
}

message VirtualVolumeResponse {}

message CreateVirtualVolumeRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualVolumeSpec spec = 4;
}

message CreateVirtualVolumeResponse {

}

message UpdateVirtualVolumeRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualVolumeSpec spec = 4;
}

message UpdateVirtualVolumeResponse {

}

message GetVirtualVolumeRequest {
    string namespace = 1;
    string name      = 2;
}


message GetVirtualVolumeResponse {
    github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualVolume item = 1;
    string yaml = 2;
}



message DeleteVirtualVolumeRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteVirtualVolumeResponse {

}




service VirtualVolumeService {
    rpc ListVirtualVolumes(ListVirtualVolumesRequest) returns (ListVirtualVolumesResponse) {
        option (google.api.http).get = "/api/v1/virtualvolumes";
    }

    rpc CreateVirtualVolume(CreateVirtualVolumeRequest) returns (CreateVirtualVolumeResponse) {
        option (google.api.http) = {
			post: "/v1/virtualvolumes"
			body: "virtualvolume"
		};
    }

    rpc GetVirtualVolume(GetVirtualVolumeRequest) returns (GetVirtualVolumeResponse) {
        option (google.api.http).get = "/api/v1/virtualvolumes/{virtualvolume.metadata.name}";
    }

    rpc UpdateVirtualVolume(UpdateVirtualVolumeRequest) returns (UpdateVirtualVolumeResponse) {
        option (google.api.http) = {
			put: "/v1/virtualvolumes/{virtualvolume_name}"
			body: "virtualvolume"
		};
    }

    rpc DeleteVirtualVolume(DeleteVirtualVolumeRequest) returns (DeleteVirtualVolumeResponse) {
        option (google.api.http) = {
			delete: "/v1/virtualvolumes/{virtualvolume_name}"
		};
    }


}