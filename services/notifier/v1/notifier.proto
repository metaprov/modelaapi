syntax = "proto3";

option go_package = "github.com/metaprov/modelaapi/services/notifier/v1";
package github.com.metaprov.modelaapi.services.notifier.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/services/common/v1/common.proto";

message ListNotifiersRequest {
    string namespace = 1;
    map<string,string> labels = 2;
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;
}

message ListNotifiersResponse {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.NotifierList notifiers = 1;
    string next_page_token = 2;
}

message NotifierResponse {}

message CreateNotifierRequest {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Notifier notifier = 1;
}

message CreateNotifierResponse {

}

message UpdateNotifierRequest {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Notifier notifier = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateNotifierResponse {

}

message GetNotifierRequest {
    string namespace = 1;
    string name      = 2;
}


message GetNotifierResponse {
    github.com.metaprov.modelaapi.pkg.apis.infra.v1alpha1.Notifier notifier = 1;
    string yaml = 2;
}

message DeleteNotifierRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteNotifierResponse {

}

service NotifierService {
    rpc ListNotifiers(ListNotifiersRequest) returns (ListNotifiersResponse) {
        option (google.api.http).get = "/v1/notifiers/{namespace}";
    }
    rpc CreateNotifier(CreateNotifierRequest) returns (CreateNotifierResponse) {
        option (google.api.http) = {
			post: "/v1/notifiers"
			body: "*"
		};
    }
    rpc GetNotifier(GetNotifierRequest) returns (GetNotifierResponse) {
        option (google.api.http).get = "/v1/notifiers/{namespace}/{name}";
    }
    rpc UpdateNotifier(UpdateNotifierRequest) returns (UpdateNotifierResponse) {
        option (google.api.http) = {
			put: "/v1/notifiers/{notifier.metadata.namespace}/{notifier.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteNotifier(DeleteNotifierRequest) returns (DeleteNotifierResponse) {
        option (google.api.http) = {
			delete: "/v1/notifiers/{namespace}/{name}"
		};
    }


}