// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: github.com/metaprov/modelaapi/services/common/v1/common.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NamespaceInfo_NamespaceType int32

const (
	NamespaceInfo_TENANT        NamespaceInfo_NamespaceType = 0
	NamespaceInfo_DATAPRODUCT   NamespaceInfo_NamespaceType = 1
	NamespaceInfo_LAB           NamespaceInfo_NamespaceType = 2
	NamespaceInfo_SERVINGSITE   NamespaceInfo_NamespaceType = 3
	NamespaceInfo_MODELASYSTEM  NamespaceInfo_NamespaceType = 4
	NamespaceInfo_MODELACATALOG NamespaceInfo_NamespaceType = 5
)

// Enum value maps for NamespaceInfo_NamespaceType.
var (
	NamespaceInfo_NamespaceType_name = map[int32]string{
		0: "TENANT",
		1: "DATAPRODUCT",
		2: "LAB",
		3: "SERVINGSITE",
		4: "MODELASYSTEM",
		5: "MODELACATALOG",
	}
	NamespaceInfo_NamespaceType_value = map[string]int32{
		"TENANT":        0,
		"DATAPRODUCT":   1,
		"LAB":           2,
		"SERVINGSITE":   3,
		"MODELASYSTEM":  4,
		"MODELACATALOG": 5,
	}
)

func (x NamespaceInfo_NamespaceType) Enum() *NamespaceInfo_NamespaceType {
	p := new(NamespaceInfo_NamespaceType)
	*p = x
	return p
}

func (x NamespaceInfo_NamespaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamespaceInfo_NamespaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_enumTypes[0].Descriptor()
}

func (NamespaceInfo_NamespaceType) Type() protoreflect.EnumType {
	return &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_enumTypes[0]
}

func (x NamespaceInfo_NamespaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamespaceInfo_NamespaceType.Descriptor instead.
func (NamespaceInfo_NamespaceType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{9, 0}
}

type DatasetProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cols     int32 `protobuf:"varint,1,opt,name=cols,proto3" json:"cols,omitempty"`
	Rows     int32 `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
	Filesize int32 `protobuf:"varint,3,opt,name=filesize,proto3" json:"filesize,omitempty"`
	// return true if this dataset is imbalance.
	Imbalance      bool               `protobuf:"varint,4,opt,name=imbalance,proto3" json:"imbalance,omitempty"`
	Plots          []*Plot            `protobuf:"bytes,5,rep,name=plots,proto3" json:"plots,omitempty"`
	Columns        []*ColumnProfile   `protobuf:"bytes,6,rep,name=columns,proto3" json:"columns,omitempty"`
	Table          *TableView         `protobuf:"bytes,7,opt,name=table,proto3" json:"table,omitempty"`
	Hash           string             `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`                                                                                                               // signature of the dataset profile.
	CorrWithTarget map[string]float32 `protobuf:"bytes,9,rep,name=corrWithTarget,proto3" json:"corrWithTarget,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"` // pearson corr with target
}

func (x *DatasetProfile) Reset() {
	*x = DatasetProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetProfile) ProtoMessage() {}

func (x *DatasetProfile) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetProfile.ProtoReflect.Descriptor instead.
func (*DatasetProfile) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *DatasetProfile) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *DatasetProfile) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *DatasetProfile) GetFilesize() int32 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *DatasetProfile) GetImbalance() bool {
	if x != nil {
		return x.Imbalance
	}
	return false
}

func (x *DatasetProfile) GetPlots() []*Plot {
	if x != nil {
		return x.Plots
	}
	return nil
}

func (x *DatasetProfile) GetColumns() []*ColumnProfile {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DatasetProfile) GetTable() *TableView {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *DatasetProfile) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DatasetProfile) GetCorrWithTarget() map[string]float32 {
	if x != nil {
		return x.CorrWithTarget
	}
	return nil
}

/////////////////////////////////////////////////////////////////////////
///// Model profile
////////////////////////////////////////////////////////////////////////
type ModelProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Plots      []*Plot               `protobuf:"bytes,2,rep,name=plots,proto3" json:"plots,omitempty"`
	Importance map[string]float32    `protobuf:"bytes,3,rep,name=importance,proto3" json:"importance,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"` // hold the feature importance
	Rocauc     *ROCCurve             `protobuf:"bytes,4,opt,name=rocauc,proto3" json:"rocauc,omitempty"`                                                                                                   // roc auc curve
	Pr         *PrecisionRecallCurve `protobuf:"bytes,5,opt,name=pr,proto3" json:"pr,omitempty"`                                                                                                           // precision recall cureve
}

func (x *ModelProfile) Reset() {
	*x = ModelProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelProfile) ProtoMessage() {}

func (x *ModelProfile) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelProfile.ProtoReflect.Descriptor instead.
func (*ModelProfile) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *ModelProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelProfile) GetPlots() []*Plot {
	if x != nil {
		return x.Plots
	}
	return nil
}

func (x *ModelProfile) GetImportance() map[string]float32 {
	if x != nil {
		return x.Importance
	}
	return nil
}

func (x *ModelProfile) GetRocauc() *ROCCurve {
	if x != nil {
		return x.Rocauc
	}
	return nil
}

func (x *ModelProfile) GetPr() *PrecisionRecallCurve {
	if x != nil {
		return x.Pr
	}
	return nil
}

type ROCCurve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fpr       []float64 `protobuf:"fixed64,1,rep,packed,name=fpr,proto3" json:"fpr,omitempty"`
	Tpr       []float64 `protobuf:"fixed64,2,rep,packed,name=tpr,proto3" json:"tpr,omitempty"`
	Tresholds []float64 `protobuf:"fixed64,3,rep,packed,name=tresholds,proto3" json:"tresholds,omitempty"`
}

func (x *ROCCurve) Reset() {
	*x = ROCCurve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ROCCurve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROCCurve) ProtoMessage() {}

func (x *ROCCurve) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROCCurve.ProtoReflect.Descriptor instead.
func (*ROCCurve) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *ROCCurve) GetFpr() []float64 {
	if x != nil {
		return x.Fpr
	}
	return nil
}

func (x *ROCCurve) GetTpr() []float64 {
	if x != nil {
		return x.Tpr
	}
	return nil
}

func (x *ROCCurve) GetTresholds() []float64 {
	if x != nil {
		return x.Tresholds
	}
	return nil
}

type PrecisionRecallCurve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision []float64 `protobuf:"fixed64,1,rep,packed,name=precision,proto3" json:"precision,omitempty"`
	Recall    []float64 `protobuf:"fixed64,2,rep,packed,name=recall,proto3" json:"recall,omitempty"`
	Tresholds []float64 `protobuf:"fixed64,3,rep,packed,name=tresholds,proto3" json:"tresholds,omitempty"`
}

func (x *PrecisionRecallCurve) Reset() {
	*x = PrecisionRecallCurve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrecisionRecallCurve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrecisionRecallCurve) ProtoMessage() {}

func (x *PrecisionRecallCurve) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrecisionRecallCurve.ProtoReflect.Descriptor instead.
func (*PrecisionRecallCurve) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *PrecisionRecallCurve) GetPrecision() []float64 {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *PrecisionRecallCurve) GetRecall() []float64 {
	if x != nil {
		return x.Recall
	}
	return nil
}

func (x *PrecisionRecallCurve) GetTresholds() []float64 {
	if x != nil {
		return x.Tresholds
	}
	return nil
}

/////////////////////////////////////////////////////////////////////////
///// Forecast profile
////////////////////////////////////////////////////////////////////////
type ForecastProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Plots []*Plot `protobuf:"bytes,2,rep,name=plots,proto3" json:"plots,omitempty"`
}

func (x *ForecastProfile) Reset() {
	*x = ForecastProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastProfile) ProtoMessage() {}

func (x *ForecastProfile) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastProfile.ProtoReflect.Descriptor instead.
func (*ForecastProfile) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *ForecastProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ForecastProfile) GetPlots() []*Plot {
	if x != nil {
		return x.Plots
	}
	return nil
}

/////////////////////////////////////////////////////////////////////////
///// Study profile
////////////////////////////////////////////////////////////////////////
type StudyProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plots          []*Plot         `protobuf:"bytes,1,rep,name=plots,proto3" json:"plots,omitempty"`
	Models         []*ModelProfile `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
	TrainingHash   string          `protobuf:"bytes,3,opt,name=trainingHash,proto3" json:"trainingHash,omitempty"`
	TestingHash    string          `protobuf:"bytes,4,opt,name=testingHash,proto3" json:"testingHash,omitempty"`
	ValidationHash string          `protobuf:"bytes,5,opt,name=validationHash,proto3" json:"validationHash,omitempty"`
}

func (x *StudyProfile) Reset() {
	*x = StudyProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyProfile) ProtoMessage() {}

func (x *StudyProfile) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyProfile.ProtoReflect.Descriptor instead.
func (*StudyProfile) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *StudyProfile) GetPlots() []*Plot {
	if x != nil {
		return x.Plots
	}
	return nil
}

func (x *StudyProfile) GetModels() []*ModelProfile {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *StudyProfile) GetTrainingHash() string {
	if x != nil {
		return x.TrainingHash
	}
	return ""
}

func (x *StudyProfile) GetTestingHash() string {
	if x != nil {
		return x.TestingHash
	}
	return ""
}

func (x *StudyProfile) GetValidationHash() string {
	if x != nil {
		return x.ValidationHash
	}
	return ""
}

type Plot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The visualization title
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// image as bin
	Img []byte `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`
	// image file name
	Fname string `protobuf:"bytes,4,opt,name=fname,proto3" json:"fname,omitempty"`
	// The url in the bucket
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Plot) Reset() {
	*x = Plot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plot) ProtoMessage() {}

func (x *Plot) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plot.ProtoReflect.Descriptor instead.
func (*Plot) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *Plot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plot) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Plot) GetImg() []byte {
	if x != nil {
		return x.Img
	}
	return nil
}

func (x *Plot) GetFname() string {
	if x != nil {
		return x.Fname
	}
	return ""
}

func (x *Plot) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ColumnProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                      string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Count                     int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Type                      string     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Missing                   int32      `protobuf:"varint,4,opt,name=missing,proto3" json:"missing,omitempty"`
	PercentMissing            float32    `protobuf:"fixed32,5,opt,name=percentMissing,proto3" json:"percentMissing,omitempty"`
	Distinct                  int32      `protobuf:"varint,6,opt,name=distinct,proto3" json:"distinct,omitempty"`
	Mean                      float64    `protobuf:"fixed64,7,opt,name=mean,proto3" json:"mean,omitempty"`
	Mode                      string     `protobuf:"bytes,8,opt,name=mode,proto3" json:"mode,omitempty"`
	Stddev                    float64    `protobuf:"fixed64,9,opt,name=stddev,proto3" json:"stddev,omitempty"`
	Variance                  float64    `protobuf:"fixed64,10,opt,name=variance,proto3" json:"variance,omitempty"`
	Min                       float64    `protobuf:"fixed64,11,opt,name=min,proto3" json:"min,omitempty"`
	Max                       float64    `protobuf:"fixed64,12,opt,name=max,proto3" json:"max,omitempty"`
	Kurtosis                  float64    `protobuf:"fixed64,13,opt,name=kurtosis,proto3" json:"kurtosis,omitempty"`
	Skewness                  float64    `protobuf:"fixed64,14,opt,name=skewness,proto3" json:"skewness,omitempty"`
	Sum                       float64    `protobuf:"fixed64,15,opt,name=sum,proto3" json:"sum,omitempty"`
	Mad                       float64    `protobuf:"fixed64,16,opt,name=mad,proto3" json:"mad,omitempty"`
	Zeros                     float64    `protobuf:"fixed64,17,opt,name=zeros,proto3" json:"zeros,omitempty"`
	P25                       float64    `protobuf:"fixed64,18,opt,name=p25,proto3" json:"p25,omitempty"`
	P50                       float64    `protobuf:"fixed64,19,opt,name=p50,proto3" json:"p50,omitempty"`
	P75                       float64    `protobuf:"fixed64,20,opt,name=p75,proto3" json:"p75,omitempty"`
	P100                      float64    `protobuf:"fixed64,21,opt,name=p100,proto3" json:"p100,omitempty"`
	Iqr                       float64    `protobuf:"fixed64,22,opt,name=iqr,proto3" json:"iqr,omitempty"`
	Cv                        float64    `protobuf:"fixed64,23,opt,name=cv,proto3" json:"cv,omitempty"`
	Top                       int32      `protobuf:"varint,24,opt,name=top,proto3" json:"top,omitempty"`
	Freq                      int32      `protobuf:"varint,25,opt,name=freq,proto3" json:"freq,omitempty"`
	Ignore                    bool       `protobuf:"varint,26,opt,name=ignore,proto3" json:"ignore,omitempty"`
	Target                    bool       `protobuf:"varint,27,opt,name=target,proto3" json:"target,omitempty"`
	Histogram                 *Histogram `protobuf:"bytes,28,opt,name=histogram,proto3" json:"histogram,omitempty"`
	Invalid                   int32      `protobuf:"varint,29,opt,name=invalid,proto3" json:"invalid,omitempty"`
	Importance                float64    `protobuf:"fixed64,30,opt,name=importance,proto3" json:"importance,omitempty"`
	Nullable                  bool       `protobuf:"varint,31,opt,name=nullable,proto3" json:"nullable,omitempty"`
	HighCardinality           bool       `protobuf:"varint,32,opt,name=highCardinality,proto3" json:"highCardinality,omitempty"`
	HighCorrWithOtherFeatures bool       `protobuf:"varint,33,opt,name=highCorrWithOtherFeatures,proto3" json:"highCorrWithOtherFeatures,omitempty"`
	LowCorrWithTarget         bool       `protobuf:"varint,34,opt,name=lowCorrWithTarget,proto3" json:"lowCorrWithTarget,omitempty"`
	HighMissingPct            bool       `protobuf:"varint,35,opt,name=highMissingPct,proto3" json:"highMissingPct,omitempty"`
	Skewed                    bool       `protobuf:"varint,36,opt,name=skewed,proto3" json:"skewed,omitempty"`
	Id                        bool       `protobuf:"varint,37,opt,name=id,proto3" json:"id,omitempty"`
	Constant                  bool       `protobuf:"varint,38,opt,name=constant,proto3" json:"constant,omitempty"`
	Duplicate                 bool       `protobuf:"varint,39,opt,name=duplicate,proto3" json:"duplicate,omitempty"`
	Reserved                  bool       `protobuf:"varint,40,opt,name=reserved,proto3" json:"reserved,omitempty"`
	Outliers                  int32      `protobuf:"varint,41,opt,name=outliers,proto3" json:"outliers,omitempty"`
	Completeness              float64    `protobuf:"fixed64,42,opt,name=completeness,proto3" json:"completeness,omitempty"`
	DistinctValueCount        float64    `protobuf:"fixed64,43,opt,name=distinctValueCount,proto3" json:"distinctValueCount,omitempty"`
	MostFreqValuesRatio       float64    `protobuf:"fixed64,44,opt,name=mostFreqValuesRatio,proto3" json:"mostFreqValuesRatio,omitempty"`
	IndexOfPeculiarity        float64    `protobuf:"fixed64,45,opt,name=indexOfPeculiarity,proto3" json:"indexOfPeculiarity,omitempty"`
	Values                    []string   `protobuf:"bytes,46,rep,name=values,proto3" json:"values,omitempty"` // Enum set of values
	CorrToTarget              float64    `protobuf:"fixed64,47,opt,name=corrToTarget,proto3" json:"corrToTarget,omitempty"`
}

func (x *ColumnProfile) Reset() {
	*x = ColumnProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnProfile) ProtoMessage() {}

func (x *ColumnProfile) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnProfile.ProtoReflect.Descriptor instead.
func (*ColumnProfile) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{7}
}

func (x *ColumnProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnProfile) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ColumnProfile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ColumnProfile) GetMissing() int32 {
	if x != nil {
		return x.Missing
	}
	return 0
}

func (x *ColumnProfile) GetPercentMissing() float32 {
	if x != nil {
		return x.PercentMissing
	}
	return 0
}

func (x *ColumnProfile) GetDistinct() int32 {
	if x != nil {
		return x.Distinct
	}
	return 0
}

func (x *ColumnProfile) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *ColumnProfile) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ColumnProfile) GetStddev() float64 {
	if x != nil {
		return x.Stddev
	}
	return 0
}

func (x *ColumnProfile) GetVariance() float64 {
	if x != nil {
		return x.Variance
	}
	return 0
}

func (x *ColumnProfile) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ColumnProfile) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *ColumnProfile) GetKurtosis() float64 {
	if x != nil {
		return x.Kurtosis
	}
	return 0
}

func (x *ColumnProfile) GetSkewness() float64 {
	if x != nil {
		return x.Skewness
	}
	return 0
}

func (x *ColumnProfile) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *ColumnProfile) GetMad() float64 {
	if x != nil {
		return x.Mad
	}
	return 0
}

func (x *ColumnProfile) GetZeros() float64 {
	if x != nil {
		return x.Zeros
	}
	return 0
}

func (x *ColumnProfile) GetP25() float64 {
	if x != nil {
		return x.P25
	}
	return 0
}

func (x *ColumnProfile) GetP50() float64 {
	if x != nil {
		return x.P50
	}
	return 0
}

func (x *ColumnProfile) GetP75() float64 {
	if x != nil {
		return x.P75
	}
	return 0
}

func (x *ColumnProfile) GetP100() float64 {
	if x != nil {
		return x.P100
	}
	return 0
}

func (x *ColumnProfile) GetIqr() float64 {
	if x != nil {
		return x.Iqr
	}
	return 0
}

func (x *ColumnProfile) GetCv() float64 {
	if x != nil {
		return x.Cv
	}
	return 0
}

func (x *ColumnProfile) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *ColumnProfile) GetFreq() int32 {
	if x != nil {
		return x.Freq
	}
	return 0
}

func (x *ColumnProfile) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

func (x *ColumnProfile) GetTarget() bool {
	if x != nil {
		return x.Target
	}
	return false
}

func (x *ColumnProfile) GetHistogram() *Histogram {
	if x != nil {
		return x.Histogram
	}
	return nil
}

func (x *ColumnProfile) GetInvalid() int32 {
	if x != nil {
		return x.Invalid
	}
	return 0
}

func (x *ColumnProfile) GetImportance() float64 {
	if x != nil {
		return x.Importance
	}
	return 0
}

func (x *ColumnProfile) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *ColumnProfile) GetHighCardinality() bool {
	if x != nil {
		return x.HighCardinality
	}
	return false
}

func (x *ColumnProfile) GetHighCorrWithOtherFeatures() bool {
	if x != nil {
		return x.HighCorrWithOtherFeatures
	}
	return false
}

func (x *ColumnProfile) GetLowCorrWithTarget() bool {
	if x != nil {
		return x.LowCorrWithTarget
	}
	return false
}

func (x *ColumnProfile) GetHighMissingPct() bool {
	if x != nil {
		return x.HighMissingPct
	}
	return false
}

func (x *ColumnProfile) GetSkewed() bool {
	if x != nil {
		return x.Skewed
	}
	return false
}

func (x *ColumnProfile) GetId() bool {
	if x != nil {
		return x.Id
	}
	return false
}

func (x *ColumnProfile) GetConstant() bool {
	if x != nil {
		return x.Constant
	}
	return false
}

func (x *ColumnProfile) GetDuplicate() bool {
	if x != nil {
		return x.Duplicate
	}
	return false
}

func (x *ColumnProfile) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

func (x *ColumnProfile) GetOutliers() int32 {
	if x != nil {
		return x.Outliers
	}
	return 0
}

func (x *ColumnProfile) GetCompleteness() float64 {
	if x != nil {
		return x.Completeness
	}
	return 0
}

func (x *ColumnProfile) GetDistinctValueCount() float64 {
	if x != nil {
		return x.DistinctValueCount
	}
	return 0
}

func (x *ColumnProfile) GetMostFreqValuesRatio() float64 {
	if x != nil {
		return x.MostFreqValuesRatio
	}
	return 0
}

func (x *ColumnProfile) GetIndexOfPeculiarity() float64 {
	if x != nil {
		return x.IndexOfPeculiarity
	}
	return 0
}

func (x *ColumnProfile) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ColumnProfile) GetCorrToTarget() float64 {
	if x != nil {
		return x.CorrToTarget
	}
	return 0
}

type Histogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values     []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	Bins       []float64 `protobuf:"fixed64,2,rep,packed,name=bins,proto3" json:"bins,omitempty"`
	Categories []string  `protobuf:"bytes,3,rep,name=categories,proto3" json:"categories,omitempty"` // for categorical variables those are the cateogries.
}

func (x *Histogram) Reset() {
	*x = Histogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Histogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Histogram) ProtoMessage() {}

func (x *Histogram) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Histogram.ProtoReflect.Descriptor instead.
func (*Histogram) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{8}
}

func (x *Histogram) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Histogram) GetBins() []float64 {
	if x != nil {
		return x.Bins
	}
	return nil
}

func (x *Histogram) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

type NamespaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         NamespaceInfo_NamespaceType `protobuf:"varint,1,opt,name=type,proto3,enum=github.com.metaprov.modelaapi.services.common.v1.NamespaceInfo_NamespaceType" json:"type,omitempty"`
	Name         string                      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Accounts     int32                       `protobuf:"varint,3,opt,name=accounts,proto3" json:"accounts,omitempty"`
	Buckets      int32                       `protobuf:"varint,4,opt,name=buckets,proto3" json:"buckets,omitempty"`
	Labs         int32                       `protobuf:"varint,5,opt,name=labs,proto3" json:"labs,omitempty"`
	Servingsites int32                       `protobuf:"varint,6,opt,name=servingsites,proto3" json:"servingsites,omitempty"`
	Datasets     int32                       `protobuf:"varint,7,opt,name=datasets,proto3" json:"datasets,omitempty"`
	Datasources  int32                       `protobuf:"varint,8,opt,name=datasources,proto3" json:"datasources,omitempty"`
	Studies      int32                       `protobuf:"varint,9,opt,name=studies,proto3" json:"studies,omitempty"`
	Models       int32                       `protobuf:"varint,10,opt,name=models,proto3" json:"models,omitempty"`
}

func (x *NamespaceInfo) Reset() {
	*x = NamespaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceInfo) ProtoMessage() {}

func (x *NamespaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceInfo.ProtoReflect.Descriptor instead.
func (*NamespaceInfo) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{9}
}

func (x *NamespaceInfo) GetType() NamespaceInfo_NamespaceType {
	if x != nil {
		return x.Type
	}
	return NamespaceInfo_TENANT
}

func (x *NamespaceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceInfo) GetAccounts() int32 {
	if x != nil {
		return x.Accounts
	}
	return 0
}

func (x *NamespaceInfo) GetBuckets() int32 {
	if x != nil {
		return x.Buckets
	}
	return 0
}

func (x *NamespaceInfo) GetLabs() int32 {
	if x != nil {
		return x.Labs
	}
	return 0
}

func (x *NamespaceInfo) GetServingsites() int32 {
	if x != nil {
		return x.Servingsites
	}
	return 0
}

func (x *NamespaceInfo) GetDatasets() int32 {
	if x != nil {
		return x.Datasets
	}
	return 0
}

func (x *NamespaceInfo) GetDatasources() int32 {
	if x != nil {
		return x.Datasources
	}
	return 0
}

func (x *NamespaceInfo) GetStudies() int32 {
	if x != nil {
		return x.Studies
	}
	return 0
}

func (x *NamespaceInfo) GetModels() int32 {
	if x != nil {
		return x.Models
	}
	return 0
}

type TableView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cols     []string         `protobuf:"bytes,1,rep,name=cols,proto3" json:"cols,omitempty"`
	Rows     []*TableViewRow  `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	Profiles []*ColumnProfile `protobuf:"bytes,3,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *TableView) Reset() {
	*x = TableView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableView) ProtoMessage() {}

func (x *TableView) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableView.ProtoReflect.Descriptor instead.
func (*TableView) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{10}
}

func (x *TableView) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *TableView) GetRows() []*TableViewRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *TableView) GetProfiles() []*ColumnProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type TableViewRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TableViewRow) Reset() {
	*x = TableViewRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableViewRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableViewRow) ProtoMessage() {}

func (x *TableViewRow) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableViewRow.ProtoReflect.Descriptor instead.
func (*TableViewRow) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP(), []int{11}
}

func (x *TableViewRow) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_github_com_metaprov_modelaapi_services_common_v1_common_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x22, 0xc3, 0x04, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x70,
	0x6c, 0x6f, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x51, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x7c, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x72, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x72, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x03, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x05,
	0x70, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x6f, 0x74, 0x52, 0x05, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x0a, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x72, 0x6f,
	0x63, 0x61, 0x75, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x4f,
	0x43, 0x43, 0x75, 0x72, 0x76, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x63, 0x61, 0x75, 0x63, 0x12, 0x56,
	0x0a, 0x02, 0x70, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72,
	0x76, 0x65, 0x52, 0x02, 0x70, 0x72, 0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x08, 0x52, 0x4f, 0x43, 0x43, 0x75, 0x72, 0x76,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x03,
	0x66, 0x70, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x70, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x03, 0x74, 0x70, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x74, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x22, 0x6a, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x74, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x22,
	0x73, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x70,
	0x6c, 0x6f, 0x74, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x70, 0x6c,
	0x6f, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x6a, 0x0a, 0x04, 0x50, 0x6c, 0x6f,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xda, 0x0a, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x64, 0x64, 0x65, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x74, 0x64,
	0x64, 0x65, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6b, 0x65, 0x77, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x73, 0x6b, 0x65, 0x77, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x7a, 0x65, 0x72, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x32, 0x35, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x70, 0x32, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x35, 0x30, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x35, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x37, 0x35,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x37, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x31, 0x30, 0x30, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x31, 0x30, 0x30, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x71, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x69, 0x71,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x76, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x63,
	0x76, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68,
	0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x68, 0x69, 0x67, 0x68, 0x43, 0x6f, 0x72, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x69, 0x67, 0x68, 0x43, 0x6f, 0x72, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x72, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x72, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x63, 0x74,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x65, 0x77, 0x65, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x6b, 0x65, 0x77, 0x65, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x73, 0x74, 0x46, 0x72, 0x65, 0x71,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x6d, 0x6f, 0x73, 0x74, 0x46, 0x72, 0x65, 0x71, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f,
	0x66, 0x50, 0x65, 0x63, 0x75, 0x6c, 0x69, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66, 0x50, 0x65, 0x63, 0x75, 0x6c,
	0x69, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x57, 0x0a, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x04, 0x62, 0x69, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd1, 0x03, 0x0a, 0x0d,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x62, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x22, 0x6b, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x41, 0x42, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x4e, 0x47, 0x53, 0x49, 0x54, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x41, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x41, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x05, 0x22,
	0xd0, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6c,
	0x73, 0x12, 0x52, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x77, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x5b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0x26, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescData = file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDesc
)

func file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescData)
	})
	return file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDescData
}

var file_github_com_metaprov_modelaapi_services_common_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_github_com_metaprov_modelaapi_services_common_v1_common_proto_goTypes = []interface{}{
	(NamespaceInfo_NamespaceType)(0), // 0: github.com.metaprov.modelaapi.services.common.v1.NamespaceInfo.NamespaceType
	(*DatasetProfile)(nil),           // 1: github.com.metaprov.modelaapi.services.common.v1.DatasetProfile
	(*ModelProfile)(nil),             // 2: github.com.metaprov.modelaapi.services.common.v1.ModelProfile
	(*ROCCurve)(nil),                 // 3: github.com.metaprov.modelaapi.services.common.v1.ROCCurve
	(*PrecisionRecallCurve)(nil),     // 4: github.com.metaprov.modelaapi.services.common.v1.PrecisionRecallCurve
	(*ForecastProfile)(nil),          // 5: github.com.metaprov.modelaapi.services.common.v1.ForecastProfile
	(*StudyProfile)(nil),             // 6: github.com.metaprov.modelaapi.services.common.v1.StudyProfile
	(*Plot)(nil),                     // 7: github.com.metaprov.modelaapi.services.common.v1.Plot
	(*ColumnProfile)(nil),            // 8: github.com.metaprov.modelaapi.services.common.v1.ColumnProfile
	(*Histogram)(nil),                // 9: github.com.metaprov.modelaapi.services.common.v1.Histogram
	(*NamespaceInfo)(nil),            // 10: github.com.metaprov.modelaapi.services.common.v1.NamespaceInfo
	(*TableView)(nil),                // 11: github.com.metaprov.modelaapi.services.common.v1.TableView
	(*TableViewRow)(nil),             // 12: github.com.metaprov.modelaapi.services.common.v1.TableViewRow
	nil,                              // 13: github.com.metaprov.modelaapi.services.common.v1.DatasetProfile.CorrWithTargetEntry
	nil,                              // 14: github.com.metaprov.modelaapi.services.common.v1.ModelProfile.ImportanceEntry
}
var file_github_com_metaprov_modelaapi_services_common_v1_common_proto_depIdxs = []int32{
	7,  // 0: github.com.metaprov.modelaapi.services.common.v1.DatasetProfile.plots:type_name -> github.com.metaprov.modelaapi.services.common.v1.Plot
	8,  // 1: github.com.metaprov.modelaapi.services.common.v1.DatasetProfile.columns:type_name -> github.com.metaprov.modelaapi.services.common.v1.ColumnProfile
	11, // 2: github.com.metaprov.modelaapi.services.common.v1.DatasetProfile.table:type_name -> github.com.metaprov.modelaapi.services.common.v1.TableView
	13, // 3: github.com.metaprov.modelaapi.services.common.v1.DatasetProfile.corrWithTarget:type_name -> github.com.metaprov.modelaapi.services.common.v1.DatasetProfile.CorrWithTargetEntry
	7,  // 4: github.com.metaprov.modelaapi.services.common.v1.ModelProfile.plots:type_name -> github.com.metaprov.modelaapi.services.common.v1.Plot
	14, // 5: github.com.metaprov.modelaapi.services.common.v1.ModelProfile.importance:type_name -> github.com.metaprov.modelaapi.services.common.v1.ModelProfile.ImportanceEntry
	3,  // 6: github.com.metaprov.modelaapi.services.common.v1.ModelProfile.rocauc:type_name -> github.com.metaprov.modelaapi.services.common.v1.ROCCurve
	4,  // 7: github.com.metaprov.modelaapi.services.common.v1.ModelProfile.pr:type_name -> github.com.metaprov.modelaapi.services.common.v1.PrecisionRecallCurve
	7,  // 8: github.com.metaprov.modelaapi.services.common.v1.ForecastProfile.plots:type_name -> github.com.metaprov.modelaapi.services.common.v1.Plot
	7,  // 9: github.com.metaprov.modelaapi.services.common.v1.StudyProfile.plots:type_name -> github.com.metaprov.modelaapi.services.common.v1.Plot
	2,  // 10: github.com.metaprov.modelaapi.services.common.v1.StudyProfile.models:type_name -> github.com.metaprov.modelaapi.services.common.v1.ModelProfile
	9,  // 11: github.com.metaprov.modelaapi.services.common.v1.ColumnProfile.histogram:type_name -> github.com.metaprov.modelaapi.services.common.v1.Histogram
	0,  // 12: github.com.metaprov.modelaapi.services.common.v1.NamespaceInfo.type:type_name -> github.com.metaprov.modelaapi.services.common.v1.NamespaceInfo.NamespaceType
	12, // 13: github.com.metaprov.modelaapi.services.common.v1.TableView.rows:type_name -> github.com.metaprov.modelaapi.services.common.v1.TableViewRow
	8,  // 14: github.com.metaprov.modelaapi.services.common.v1.TableView.profiles:type_name -> github.com.metaprov.modelaapi.services.common.v1.ColumnProfile
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_github_com_metaprov_modelaapi_services_common_v1_common_proto_init() }
func file_github_com_metaprov_modelaapi_services_common_v1_common_proto_init() {
	if File_github_com_metaprov_modelaapi_services_common_v1_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ROCCurve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrecisionRecallCurve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Histogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableViewRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_metaprov_modelaapi_services_common_v1_common_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modelaapi_services_common_v1_common_proto_depIdxs,
		EnumInfos:         file_github_com_metaprov_modelaapi_services_common_v1_common_proto_enumTypes,
		MessageInfos:      file_github_com_metaprov_modelaapi_services_common_v1_common_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modelaapi_services_common_v1_common_proto = out.File
	file_github_com_metaprov_modelaapi_services_common_v1_common_proto_rawDesc = nil
	file_github_com_metaprov_modelaapi_services_common_v1_common_proto_goTypes = nil
	file_github_com_metaprov_modelaapi_services_common_v1_common_proto_depIdxs = nil
}
