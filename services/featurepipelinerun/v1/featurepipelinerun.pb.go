// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: services/featurepipelinerun/v1/featurepipelinerun.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListFeaturePipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels    map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListFeaturePipelineRunRequest) Reset() {
	*x = ListFeaturePipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeaturePipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeaturePipelineRunRequest) ProtoMessage() {}

func (x *ListFeaturePipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeaturePipelineRunRequest.ProtoReflect.Descriptor instead.
func (*ListFeaturePipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescGZIP(), []int{0}
}

func (x *ListFeaturePipelineRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListFeaturePipelineRunRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListFeaturePipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *v1alpha1.FeaturePipelineRunList `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *ListFeaturePipelineRunResponse) Reset() {
	*x = ListFeaturePipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeaturePipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeaturePipelineRunResponse) ProtoMessage() {}

func (x *ListFeaturePipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeaturePipelineRunResponse.ProtoReflect.Descriptor instead.
func (*ListFeaturePipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescGZIP(), []int{1}
}

func (x *ListFeaturePipelineRunResponse) GetItems() *v1alpha1.FeaturePipelineRunList {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateFeaturePipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.FeaturePipelineRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateFeaturePipelineRunRequest) Reset() {
	*x = CreateFeaturePipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFeaturePipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFeaturePipelineRunRequest) ProtoMessage() {}

func (x *CreateFeaturePipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFeaturePipelineRunRequest.ProtoReflect.Descriptor instead.
func (*CreateFeaturePipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescGZIP(), []int{2}
}

func (x *CreateFeaturePipelineRunRequest) GetItem() *v1alpha1.FeaturePipelineRun {
	if x != nil {
		return x.Item
	}
	return nil
}

type CreateFeaturePipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateFeaturePipelineRunResponse) Reset() {
	*x = CreateFeaturePipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFeaturePipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFeaturePipelineRunResponse) ProtoMessage() {}

func (x *CreateFeaturePipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFeaturePipelineRunResponse.ProtoReflect.Descriptor instead.
func (*CreateFeaturePipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescGZIP(), []int{3}
}

type UpdateFeaturePipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.FeaturePipelineRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateFeaturePipelineRunRequest) Reset() {
	*x = UpdateFeaturePipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeaturePipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeaturePipelineRunRequest) ProtoMessage() {}

func (x *UpdateFeaturePipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeaturePipelineRunRequest.ProtoReflect.Descriptor instead.
func (*UpdateFeaturePipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateFeaturePipelineRunRequest) GetItem() *v1alpha1.FeaturePipelineRun {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateFeaturePipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateFeaturePipelineRunResponse) Reset() {
	*x = UpdateFeaturePipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeaturePipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeaturePipelineRunResponse) ProtoMessage() {}

func (x *UpdateFeaturePipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeaturePipelineRunResponse.ProtoReflect.Descriptor instead.
func (*UpdateFeaturePipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescGZIP(), []int{5}
}

type GetFeaturePipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetFeaturePipelineRunRequest) Reset() {
	*x = GetFeaturePipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeaturePipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeaturePipelineRunRequest) ProtoMessage() {}

func (x *GetFeaturePipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeaturePipelineRunRequest.ProtoReflect.Descriptor instead.
func (*GetFeaturePipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescGZIP(), []int{6}
}

func (x *GetFeaturePipelineRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetFeaturePipelineRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetFeaturePipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.FeaturePipelineRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Yaml string                       `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetFeaturePipelineRunResponse) Reset() {
	*x = GetFeaturePipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeaturePipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeaturePipelineRunResponse) ProtoMessage() {}

func (x *GetFeaturePipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeaturePipelineRunResponse.ProtoReflect.Descriptor instead.
func (*GetFeaturePipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescGZIP(), []int{7}
}

func (x *GetFeaturePipelineRunResponse) GetItem() *v1alpha1.FeaturePipelineRun {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetFeaturePipelineRunResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeleteFeaturePipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteFeaturePipelineRunRequest) Reset() {
	*x = DeleteFeaturePipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeaturePipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeaturePipelineRunRequest) ProtoMessage() {}

func (x *DeleteFeaturePipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeaturePipelineRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteFeaturePipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFeaturePipelineRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteFeaturePipelineRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteFeaturePipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFeaturePipelineRunResponse) Reset() {
	*x = DeleteFeaturePipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeaturePipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeaturePipelineRunResponse) ProtoMessage() {}

func (x *DeleteFeaturePipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeaturePipelineRunResponse.ProtoReflect.Descriptor instead.
func (*DeleteFeaturePipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescGZIP(), []int{9}
}

var File_services_featurepipelinerun_v1_featurepipelinerun_proto protoreflect.FileDescriptor

var file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDesc = []byte{
	0x0a, 0x37, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7f,
	0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x22, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0x22, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61,
	0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x53,
	0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa3, 0x0a, 0x0a, 0x19, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf5, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e,
	0x73, 0x12, 0x5b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5c,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x8e, 0x02,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x5d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5e, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x3a, 0x12, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x12, 0xf8,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x5b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75,
	0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa3, 0x02, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x5d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x1a, 0x2c, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x12, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x12,
	0xdb, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x5d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5e, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescOnce sync.Once
	file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescData = file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDesc
)

func file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescGZIP() []byte {
	file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescOnce.Do(func() {
		file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescData)
	})
	return file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDescData
}

var file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_services_featurepipelinerun_v1_featurepipelinerun_proto_goTypes = []interface{}{
	(*ListFeaturePipelineRunRequest)(nil),    // 0: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.ListFeaturePipelineRunRequest
	(*ListFeaturePipelineRunResponse)(nil),   // 1: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.ListFeaturePipelineRunResponse
	(*CreateFeaturePipelineRunRequest)(nil),  // 2: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.CreateFeaturePipelineRunRequest
	(*CreateFeaturePipelineRunResponse)(nil), // 3: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.CreateFeaturePipelineRunResponse
	(*UpdateFeaturePipelineRunRequest)(nil),  // 4: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.UpdateFeaturePipelineRunRequest
	(*UpdateFeaturePipelineRunResponse)(nil), // 5: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.UpdateFeaturePipelineRunResponse
	(*GetFeaturePipelineRunRequest)(nil),     // 6: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.GetFeaturePipelineRunRequest
	(*GetFeaturePipelineRunResponse)(nil),    // 7: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.GetFeaturePipelineRunResponse
	(*DeleteFeaturePipelineRunRequest)(nil),  // 8: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.DeleteFeaturePipelineRunRequest
	(*DeleteFeaturePipelineRunResponse)(nil), // 9: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.DeleteFeaturePipelineRunResponse
	nil,                                      // 10: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.ListFeaturePipelineRunRequest.LabelsEntry
	(*v1alpha1.FeaturePipelineRunList)(nil),  // 11: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.FeaturePipelineRunList
	(*v1alpha1.FeaturePipelineRun)(nil),      // 12: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.FeaturePipelineRun
}
var file_services_featurepipelinerun_v1_featurepipelinerun_proto_depIdxs = []int32{
	10, // 0: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.ListFeaturePipelineRunRequest.labels:type_name -> github.com.metaprov.modeldapi.services.featurepipelinerun.v1.ListFeaturePipelineRunRequest.LabelsEntry
	11, // 1: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.ListFeaturePipelineRunResponse.items:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.FeaturePipelineRunList
	12, // 2: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.CreateFeaturePipelineRunRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.FeaturePipelineRun
	12, // 3: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.UpdateFeaturePipelineRunRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.FeaturePipelineRun
	12, // 4: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.GetFeaturePipelineRunResponse.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.FeaturePipelineRun
	0,  // 5: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService.ListFeaturePipelineRuns:input_type -> github.com.metaprov.modeldapi.services.featurepipelinerun.v1.ListFeaturePipelineRunRequest
	2,  // 6: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService.CreateFeaturePipelineRun:input_type -> github.com.metaprov.modeldapi.services.featurepipelinerun.v1.CreateFeaturePipelineRunRequest
	6,  // 7: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService.GetFeaturePipelineRun:input_type -> github.com.metaprov.modeldapi.services.featurepipelinerun.v1.GetFeaturePipelineRunRequest
	4,  // 8: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService.UpdateFeaturePipelineRun:input_type -> github.com.metaprov.modeldapi.services.featurepipelinerun.v1.UpdateFeaturePipelineRunRequest
	8,  // 9: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService.DeleteFeaturePipelineRun:input_type -> github.com.metaprov.modeldapi.services.featurepipelinerun.v1.DeleteFeaturePipelineRunRequest
	1,  // 10: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService.ListFeaturePipelineRuns:output_type -> github.com.metaprov.modeldapi.services.featurepipelinerun.v1.ListFeaturePipelineRunResponse
	3,  // 11: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService.CreateFeaturePipelineRun:output_type -> github.com.metaprov.modeldapi.services.featurepipelinerun.v1.CreateFeaturePipelineRunResponse
	7,  // 12: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService.GetFeaturePipelineRun:output_type -> github.com.metaprov.modeldapi.services.featurepipelinerun.v1.GetFeaturePipelineRunResponse
	5,  // 13: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService.UpdateFeaturePipelineRun:output_type -> github.com.metaprov.modeldapi.services.featurepipelinerun.v1.UpdateFeaturePipelineRunResponse
	9,  // 14: github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService.DeleteFeaturePipelineRun:output_type -> github.com.metaprov.modeldapi.services.featurepipelinerun.v1.DeleteFeaturePipelineRunResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_services_featurepipelinerun_v1_featurepipelinerun_proto_init() }
func file_services_featurepipelinerun_v1_featurepipelinerun_proto_init() {
	if File_services_featurepipelinerun_v1_featurepipelinerun_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeaturePipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeaturePipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFeaturePipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFeaturePipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeaturePipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeaturePipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeaturePipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeaturePipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeaturePipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeaturePipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_featurepipelinerun_v1_featurepipelinerun_proto_goTypes,
		DependencyIndexes: file_services_featurepipelinerun_v1_featurepipelinerun_proto_depIdxs,
		MessageInfos:      file_services_featurepipelinerun_v1_featurepipelinerun_proto_msgTypes,
	}.Build()
	File_services_featurepipelinerun_v1_featurepipelinerun_proto = out.File
	file_services_featurepipelinerun_v1_featurepipelinerun_proto_rawDesc = nil
	file_services_featurepipelinerun_v1_featurepipelinerun_proto_goTypes = nil
	file_services_featurepipelinerun_v1_featurepipelinerun_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FeaturePipelineRunServiceClient is the client API for FeaturePipelineRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeaturePipelineRunServiceClient interface {
	ListFeaturePipelineRuns(ctx context.Context, in *ListFeaturePipelineRunRequest, opts ...grpc.CallOption) (*ListFeaturePipelineRunResponse, error)
	CreateFeaturePipelineRun(ctx context.Context, in *CreateFeaturePipelineRunRequest, opts ...grpc.CallOption) (*CreateFeaturePipelineRunResponse, error)
	GetFeaturePipelineRun(ctx context.Context, in *GetFeaturePipelineRunRequest, opts ...grpc.CallOption) (*GetFeaturePipelineRunResponse, error)
	UpdateFeaturePipelineRun(ctx context.Context, in *UpdateFeaturePipelineRunRequest, opts ...grpc.CallOption) (*UpdateFeaturePipelineRunResponse, error)
	DeleteFeaturePipelineRun(ctx context.Context, in *DeleteFeaturePipelineRunRequest, opts ...grpc.CallOption) (*DeleteFeaturePipelineRunResponse, error)
}

type featurePipelineRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeaturePipelineRunServiceClient(cc grpc.ClientConnInterface) FeaturePipelineRunServiceClient {
	return &featurePipelineRunServiceClient{cc}
}

func (c *featurePipelineRunServiceClient) ListFeaturePipelineRuns(ctx context.Context, in *ListFeaturePipelineRunRequest, opts ...grpc.CallOption) (*ListFeaturePipelineRunResponse, error) {
	out := new(ListFeaturePipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService/ListFeaturePipelineRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineRunServiceClient) CreateFeaturePipelineRun(ctx context.Context, in *CreateFeaturePipelineRunRequest, opts ...grpc.CallOption) (*CreateFeaturePipelineRunResponse, error) {
	out := new(CreateFeaturePipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService/CreateFeaturePipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineRunServiceClient) GetFeaturePipelineRun(ctx context.Context, in *GetFeaturePipelineRunRequest, opts ...grpc.CallOption) (*GetFeaturePipelineRunResponse, error) {
	out := new(GetFeaturePipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService/GetFeaturePipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineRunServiceClient) UpdateFeaturePipelineRun(ctx context.Context, in *UpdateFeaturePipelineRunRequest, opts ...grpc.CallOption) (*UpdateFeaturePipelineRunResponse, error) {
	out := new(UpdateFeaturePipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService/UpdateFeaturePipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineRunServiceClient) DeleteFeaturePipelineRun(ctx context.Context, in *DeleteFeaturePipelineRunRequest, opts ...grpc.CallOption) (*DeleteFeaturePipelineRunResponse, error) {
	out := new(DeleteFeaturePipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService/DeleteFeaturePipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeaturePipelineRunServiceServer is the server API for FeaturePipelineRunService service.
type FeaturePipelineRunServiceServer interface {
	ListFeaturePipelineRuns(context.Context, *ListFeaturePipelineRunRequest) (*ListFeaturePipelineRunResponse, error)
	CreateFeaturePipelineRun(context.Context, *CreateFeaturePipelineRunRequest) (*CreateFeaturePipelineRunResponse, error)
	GetFeaturePipelineRun(context.Context, *GetFeaturePipelineRunRequest) (*GetFeaturePipelineRunResponse, error)
	UpdateFeaturePipelineRun(context.Context, *UpdateFeaturePipelineRunRequest) (*UpdateFeaturePipelineRunResponse, error)
	DeleteFeaturePipelineRun(context.Context, *DeleteFeaturePipelineRunRequest) (*DeleteFeaturePipelineRunResponse, error)
}

// UnimplementedFeaturePipelineRunServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFeaturePipelineRunServiceServer struct {
}

func (*UnimplementedFeaturePipelineRunServiceServer) ListFeaturePipelineRuns(context.Context, *ListFeaturePipelineRunRequest) (*ListFeaturePipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeaturePipelineRuns not implemented")
}
func (*UnimplementedFeaturePipelineRunServiceServer) CreateFeaturePipelineRun(context.Context, *CreateFeaturePipelineRunRequest) (*CreateFeaturePipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeaturePipelineRun not implemented")
}
func (*UnimplementedFeaturePipelineRunServiceServer) GetFeaturePipelineRun(context.Context, *GetFeaturePipelineRunRequest) (*GetFeaturePipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeaturePipelineRun not implemented")
}
func (*UnimplementedFeaturePipelineRunServiceServer) UpdateFeaturePipelineRun(context.Context, *UpdateFeaturePipelineRunRequest) (*UpdateFeaturePipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeaturePipelineRun not implemented")
}
func (*UnimplementedFeaturePipelineRunServiceServer) DeleteFeaturePipelineRun(context.Context, *DeleteFeaturePipelineRunRequest) (*DeleteFeaturePipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeaturePipelineRun not implemented")
}

func RegisterFeaturePipelineRunServiceServer(s *grpc.Server, srv FeaturePipelineRunServiceServer) {
	s.RegisterService(&_FeaturePipelineRunService_serviceDesc, srv)
}

func _FeaturePipelineRunService_ListFeaturePipelineRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeaturePipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineRunServiceServer).ListFeaturePipelineRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService/ListFeaturePipelineRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineRunServiceServer).ListFeaturePipelineRuns(ctx, req.(*ListFeaturePipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineRunService_CreateFeaturePipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeaturePipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineRunServiceServer).CreateFeaturePipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService/CreateFeaturePipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineRunServiceServer).CreateFeaturePipelineRun(ctx, req.(*CreateFeaturePipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineRunService_GetFeaturePipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeaturePipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineRunServiceServer).GetFeaturePipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService/GetFeaturePipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineRunServiceServer).GetFeaturePipelineRun(ctx, req.(*GetFeaturePipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineRunService_UpdateFeaturePipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeaturePipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineRunServiceServer).UpdateFeaturePipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService/UpdateFeaturePipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineRunServiceServer).UpdateFeaturePipelineRun(ctx, req.(*UpdateFeaturePipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineRunService_DeleteFeaturePipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeaturePipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineRunServiceServer).DeleteFeaturePipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService/DeleteFeaturePipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineRunServiceServer).DeleteFeaturePipelineRun(ctx, req.(*DeleteFeaturePipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeaturePipelineRunService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeldapi.services.featurepipelinerun.v1.FeaturePipelineRunService",
	HandlerType: (*FeaturePipelineRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFeaturePipelineRuns",
			Handler:    _FeaturePipelineRunService_ListFeaturePipelineRuns_Handler,
		},
		{
			MethodName: "CreateFeaturePipelineRun",
			Handler:    _FeaturePipelineRunService_CreateFeaturePipelineRun_Handler,
		},
		{
			MethodName: "GetFeaturePipelineRun",
			Handler:    _FeaturePipelineRunService_GetFeaturePipelineRun_Handler,
		},
		{
			MethodName: "UpdateFeaturePipelineRun",
			Handler:    _FeaturePipelineRunService_UpdateFeaturePipelineRun_Handler,
		},
		{
			MethodName: "DeleteFeaturePipelineRun",
			Handler:    _FeaturePipelineRunService_DeleteFeaturePipelineRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/featurepipelinerun/v1/featurepipelinerun.proto",
}
