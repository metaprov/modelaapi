syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/featurepipelinerun/v1";
package github.com.metaprov.modelaapi.services.featurepipelinerun.v1;

import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";

message ListFeaturePipelineRunRequest {
    string namespace = 1;
    map<string,string> labels =2;
}

message ListFeaturePipelineRunResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeaturePipelineRunList items = 1;
}

message CreateFeaturePipelineRunRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeaturePipelineRun item = 1;
}

message CreateFeaturePipelineRunResponse {

}

message UpdateFeaturePipelineRunRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeaturePipelineRun item = 1;
}

message UpdateFeaturePipelineRunResponse {

}

message GetFeaturePipelineRunRequest {
    string namespace = 1;
    string name      = 2;
}


message GetFeaturePipelineRunResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.FeaturePipelineRun item = 1;
    string yaml = 2;
}


message DeleteFeaturePipelineRunRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteFeaturePipelineRunResponse {

}


service FeaturePipelineRunService {
    rpc ListFeaturePipelineRuns(ListFeaturePipelineRunRequest) returns (ListFeaturePipelineRunResponse) {
        option (google.api.http).get = "/v1/featurepipelineruns/{namespace}";
    }
    rpc CreateFeaturePipelineRun(CreateFeaturePipelineRunRequest) returns (CreateFeaturePipelineRunResponse) {
        option (google.api.http) = {
			post: "/v1/featurepipelineruns"
			body: "*"
		};
    }
    rpc GetFeaturePipelineRun(GetFeaturePipelineRunRequest) returns (GetFeaturePipelineRunResponse) {
        option (google.api.http).get = "/v1/featurepipelineruns/{namespace}/{name}";
    }
    rpc UpdateFeaturePipelineRun(UpdateFeaturePipelineRunRequest) returns (UpdateFeaturePipelineRunResponse) {
        option (google.api.http) = {
			put: "/v1/featurepipelines/{item.metadata.namespace}/{item.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteFeaturePipelineRun(DeleteFeaturePipelineRunRequest) returns (DeleteFeaturePipelineRunResponse) {
        option (google.api.http).delete = "/v1/featurepipeline/{namespace}/{name}";
    }



}