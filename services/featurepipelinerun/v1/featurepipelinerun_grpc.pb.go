// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/featurepipelinerun/v1/featurepipelinerun.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeaturePipelineRunServiceClient is the client API for FeaturePipelineRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeaturePipelineRunServiceClient interface {
	ListFeaturePipelineRuns(ctx context.Context, in *ListFeaturePipelineRunRequest, opts ...grpc.CallOption) (*ListFeaturePipelineRunResponse, error)
	CreateFeaturePipelineRun(ctx context.Context, in *CreateFeaturePipelineRunRequest, opts ...grpc.CallOption) (*CreateFeaturePipelineRunResponse, error)
	GetFeaturePipelineRun(ctx context.Context, in *GetFeaturePipelineRunRequest, opts ...grpc.CallOption) (*GetFeaturePipelineRunResponse, error)
	UpdateFeaturePipelineRun(ctx context.Context, in *UpdateFeaturePipelineRunRequest, opts ...grpc.CallOption) (*UpdateFeaturePipelineRunResponse, error)
	DeleteFeaturePipelineRun(ctx context.Context, in *DeleteFeaturePipelineRunRequest, opts ...grpc.CallOption) (*DeleteFeaturePipelineRunResponse, error)
}

type featurePipelineRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeaturePipelineRunServiceClient(cc grpc.ClientConnInterface) FeaturePipelineRunServiceClient {
	return &featurePipelineRunServiceClient{cc}
}

func (c *featurePipelineRunServiceClient) ListFeaturePipelineRuns(ctx context.Context, in *ListFeaturePipelineRunRequest, opts ...grpc.CallOption) (*ListFeaturePipelineRunResponse, error) {
	out := new(ListFeaturePipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipelinerun.v1.FeaturePipelineRunService/ListFeaturePipelineRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineRunServiceClient) CreateFeaturePipelineRun(ctx context.Context, in *CreateFeaturePipelineRunRequest, opts ...grpc.CallOption) (*CreateFeaturePipelineRunResponse, error) {
	out := new(CreateFeaturePipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipelinerun.v1.FeaturePipelineRunService/CreateFeaturePipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineRunServiceClient) GetFeaturePipelineRun(ctx context.Context, in *GetFeaturePipelineRunRequest, opts ...grpc.CallOption) (*GetFeaturePipelineRunResponse, error) {
	out := new(GetFeaturePipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipelinerun.v1.FeaturePipelineRunService/GetFeaturePipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineRunServiceClient) UpdateFeaturePipelineRun(ctx context.Context, in *UpdateFeaturePipelineRunRequest, opts ...grpc.CallOption) (*UpdateFeaturePipelineRunResponse, error) {
	out := new(UpdateFeaturePipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipelinerun.v1.FeaturePipelineRunService/UpdateFeaturePipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featurePipelineRunServiceClient) DeleteFeaturePipelineRun(ctx context.Context, in *DeleteFeaturePipelineRunRequest, opts ...grpc.CallOption) (*DeleteFeaturePipelineRunResponse, error) {
	out := new(DeleteFeaturePipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featurepipelinerun.v1.FeaturePipelineRunService/DeleteFeaturePipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeaturePipelineRunServiceServer is the server API for FeaturePipelineRunService service.
// All implementations must embed UnimplementedFeaturePipelineRunServiceServer
// for forward compatibility
type FeaturePipelineRunServiceServer interface {
	ListFeaturePipelineRuns(context.Context, *ListFeaturePipelineRunRequest) (*ListFeaturePipelineRunResponse, error)
	CreateFeaturePipelineRun(context.Context, *CreateFeaturePipelineRunRequest) (*CreateFeaturePipelineRunResponse, error)
	GetFeaturePipelineRun(context.Context, *GetFeaturePipelineRunRequest) (*GetFeaturePipelineRunResponse, error)
	UpdateFeaturePipelineRun(context.Context, *UpdateFeaturePipelineRunRequest) (*UpdateFeaturePipelineRunResponse, error)
	DeleteFeaturePipelineRun(context.Context, *DeleteFeaturePipelineRunRequest) (*DeleteFeaturePipelineRunResponse, error)
	mustEmbedUnimplementedFeaturePipelineRunServiceServer()
}

// UnimplementedFeaturePipelineRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeaturePipelineRunServiceServer struct {
}

func (UnimplementedFeaturePipelineRunServiceServer) ListFeaturePipelineRuns(context.Context, *ListFeaturePipelineRunRequest) (*ListFeaturePipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeaturePipelineRuns not implemented")
}
func (UnimplementedFeaturePipelineRunServiceServer) CreateFeaturePipelineRun(context.Context, *CreateFeaturePipelineRunRequest) (*CreateFeaturePipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeaturePipelineRun not implemented")
}
func (UnimplementedFeaturePipelineRunServiceServer) GetFeaturePipelineRun(context.Context, *GetFeaturePipelineRunRequest) (*GetFeaturePipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeaturePipelineRun not implemented")
}
func (UnimplementedFeaturePipelineRunServiceServer) UpdateFeaturePipelineRun(context.Context, *UpdateFeaturePipelineRunRequest) (*UpdateFeaturePipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeaturePipelineRun not implemented")
}
func (UnimplementedFeaturePipelineRunServiceServer) DeleteFeaturePipelineRun(context.Context, *DeleteFeaturePipelineRunRequest) (*DeleteFeaturePipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeaturePipelineRun not implemented")
}
func (UnimplementedFeaturePipelineRunServiceServer) mustEmbedUnimplementedFeaturePipelineRunServiceServer() {
}

// UnsafeFeaturePipelineRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeaturePipelineRunServiceServer will
// result in compilation errors.
type UnsafeFeaturePipelineRunServiceServer interface {
	mustEmbedUnimplementedFeaturePipelineRunServiceServer()
}

func RegisterFeaturePipelineRunServiceServer(s grpc.ServiceRegistrar, srv FeaturePipelineRunServiceServer) {
	s.RegisterService(&FeaturePipelineRunService_ServiceDesc, srv)
}

func _FeaturePipelineRunService_ListFeaturePipelineRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeaturePipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineRunServiceServer).ListFeaturePipelineRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipelinerun.v1.FeaturePipelineRunService/ListFeaturePipelineRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineRunServiceServer).ListFeaturePipelineRuns(ctx, req.(*ListFeaturePipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineRunService_CreateFeaturePipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeaturePipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineRunServiceServer).CreateFeaturePipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipelinerun.v1.FeaturePipelineRunService/CreateFeaturePipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineRunServiceServer).CreateFeaturePipelineRun(ctx, req.(*CreateFeaturePipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineRunService_GetFeaturePipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeaturePipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineRunServiceServer).GetFeaturePipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipelinerun.v1.FeaturePipelineRunService/GetFeaturePipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineRunServiceServer).GetFeaturePipelineRun(ctx, req.(*GetFeaturePipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineRunService_UpdateFeaturePipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeaturePipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineRunServiceServer).UpdateFeaturePipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipelinerun.v1.FeaturePipelineRunService/UpdateFeaturePipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineRunServiceServer).UpdateFeaturePipelineRun(ctx, req.(*UpdateFeaturePipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturePipelineRunService_DeleteFeaturePipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeaturePipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePipelineRunServiceServer).DeleteFeaturePipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featurepipelinerun.v1.FeaturePipelineRunService/DeleteFeaturePipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePipelineRunServiceServer).DeleteFeaturePipelineRun(ctx, req.(*DeleteFeaturePipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeaturePipelineRunService_ServiceDesc is the grpc.ServiceDesc for FeaturePipelineRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeaturePipelineRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.featurepipelinerun.v1.FeaturePipelineRunService",
	HandlerType: (*FeaturePipelineRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFeaturePipelineRuns",
			Handler:    _FeaturePipelineRunService_ListFeaturePipelineRuns_Handler,
		},
		{
			MethodName: "CreateFeaturePipelineRun",
			Handler:    _FeaturePipelineRunService_CreateFeaturePipelineRun_Handler,
		},
		{
			MethodName: "GetFeaturePipelineRun",
			Handler:    _FeaturePipelineRunService_GetFeaturePipelineRun_Handler,
		},
		{
			MethodName: "UpdateFeaturePipelineRun",
			Handler:    _FeaturePipelineRunService_UpdateFeaturePipelineRun_Handler,
		},
		{
			MethodName: "DeleteFeaturePipelineRun",
			Handler:    _FeaturePipelineRunService_DeleteFeaturePipelineRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/featurepipelinerun/v1/featurepipelinerun.proto",
}
