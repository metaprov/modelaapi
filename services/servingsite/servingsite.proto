syntax = "proto3";
option go_package = "github.com/metaprov/modeld/services/servingsite";

package github.com.metaprov.modeld.services.servingsite;

import "google/api/annotations.proto";
import "github.com/metaprov/modeld-api/pkg/apis/infra/v1alpha1/generated.proto";
import "github.com/metaprov/modeld/services/common/common.proto";

message ListServingSitesRequest {
    string namespace = 1;
    map<string,string> labels =3;
}

message ListServingSitesResponse {
    github.com.metaprov.modeld.pkg.apis.infra.v1alpha1.ServingSiteList items = 1;
}

message CreateServingSiteRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeld.pkg.apis.infra.v1alpha1.ServingSiteSpec spec = 4;
}

message CreateServingSiteResponse {

}

message UpdateServingSiteRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels = 3;
    github.com.metaprov.modeld.pkg.apis.infra.v1alpha1.ServingSiteSpec spec = 5;
}

message UpdateServingSiteResponse {

}

message GetServingSiteRequest {
    string namespace = 1;
    string name      = 2;
}


message GetServingSiteResponse {
    github.com.metaprov.modeld.pkg.apis.infra.v1alpha1.ServingSite item = 1;
    string yaml = 2;
}



message GetServingSiteNamespacesRequest {
    string namespace = 1;
    string name      = 2;
}


message GetServingSiteNamespacesResponse {
    repeated github.com.metaprov.modeld.services.common.NamespaceInfo namespaces= 1;
}

message DeleteServingSiteRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteServingSiteResponse {

}




service ServingSiteService {
    rpc ListServingSites(ListServingSitesRequest) returns (ListServingSitesResponse) {
        option (google.api.http).get = "/v1/servingsites";
    }
    rpc CreateServingSite(CreateServingSiteRequest) returns (CreateServingSiteResponse) {
        option (google.api.http) = {
			post: "/v1/servingsites"
			body: "servingsite"
		};
    }
    rpc GetServingSite(GetServingSiteRequest) returns (GetServingSiteResponse) {
        option (google.api.http).get = "/v1/servingsites/{name}";
    }
    rpc UpdateServingSite(UpdateServingSiteRequest) returns (UpdateServingSiteResponse) {
        option (google.api.http) = {
			put: "/v1/servingsites/{servingsite.metadata.name}"
			body: "servingsite"
		};
    }

    rpc DeleteServingSite(DeleteServingSiteRequest) returns (DeleteServingSiteResponse) {
        option (google.api.http) = {
			delete: "/v1/servingsites/{servingsite.metadata.name}"
		};
    }


}