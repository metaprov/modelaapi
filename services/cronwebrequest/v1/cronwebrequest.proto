syntax = "proto3";

option go_package = "github.com/metaprov/modelaapi/services/cronwebrequest/v1";
package github.com.metaprov.modelaapi.services.cronwebrequest.v1;


import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";


message ListCronWebRequestsRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message ListCronWebRequestsResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequestList items = 1;
}

message CreateCronWebRequestResponse {}

message CreateCronWebRequestRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequest item = 1;
}

message UpdateCronWebRequestRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequest item = 1;
}

message UpdateCronWebRequestResponse {

}

message GetCronWebRequestRequest {
    string namespace = 1;
    string name      = 2;
}

message GetCronWebRequestResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequest item = 1;
    string yaml = 2;

}

message DeleteCronWebRequestRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteCronWebRequestResponse {

}

message RunCronWebRequestRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequest item = 1;
}


message RunCronWebRequestResponse {
    
}


service CronWebRequestService {

    rpc ListCronWebRequests(ListCronWebRequestsRequest) returns (ListCronWebRequestsResponse) {
        option (google.api.http).get = "/v1/cronwebrequests";
    }

    rpc CreateCronWebRequest(CreateCronWebRequestRequest) returns (CreateCronWebRequestResponse) {
        option (google.api.http) = {
			post: "/v1/cronwebrequests"
			body: "*"
		};
    }

    rpc GetCronWebRequest(GetCronWebRequestRequest) returns (GetCronWebRequestResponse) {
        option (google.api.http).get = "/v1/cronwebrequests/{name}";
    }

    rpc UpdateCronWebRequest(UpdateCronWebRequestRequest) returns (UpdateCronWebRequestResponse) {
        option (google.api.http) = {
			put: "/v1/cronwebrequests/{cronprediction.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteCronWebRequest(DeleteCronWebRequestRequest) returns (DeleteCronWebRequestResponse) {
        option (google.api.http).delete = "/v1/cronwebrequests/{name}";
    }

    
    rpc RunCronWebRequest(RunCronWebRequestRequest) returns (RunCronWebRequestResponse) {
        option (google.api.http).post = "/v1/cronwebrequests/{name}:run";
    }

    

    
  

}