// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.7
// source: github.com/metaprov/modelaapi/services/cronwebrequest/v1/cronwebrequest.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListCronWebRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListCronWebRequestsRequest) Reset() {
	*x = ListCronWebRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronWebRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronWebRequestsRequest) ProtoMessage() {}

func (x *ListCronWebRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronWebRequestsRequest.ProtoReflect.Descriptor instead.
func (*ListCronWebRequestsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{0}
}

func (x *ListCronWebRequestsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListCronWebRequestsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListCronWebRequestsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListCronWebRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *v1alpha1.CronWebRequestList `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCronWebRequestsResponse) Reset() {
	*x = ListCronWebRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronWebRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronWebRequestsResponse) ProtoMessage() {}

func (x *ListCronWebRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronWebRequestsResponse.ProtoReflect.Descriptor instead.
func (*ListCronWebRequestsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{1}
}

func (x *ListCronWebRequestsResponse) GetItems() *v1alpha1.CronWebRequestList {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateCronWebRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCronWebRequestResponse) Reset() {
	*x = CreateCronWebRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronWebRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronWebRequestResponse) ProtoMessage() {}

func (x *CreateCronWebRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronWebRequestResponse.ProtoReflect.Descriptor instead.
func (*CreateCronWebRequestResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{2}
}

type CreateCronWebRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronWebRequest `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateCronWebRequestRequest) Reset() {
	*x = CreateCronWebRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronWebRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronWebRequestRequest) ProtoMessage() {}

func (x *CreateCronWebRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronWebRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateCronWebRequestRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCronWebRequestRequest) GetItem() *v1alpha1.CronWebRequest {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateCronWebRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronWebRequest `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateCronWebRequestRequest) Reset() {
	*x = UpdateCronWebRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronWebRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronWebRequestRequest) ProtoMessage() {}

func (x *UpdateCronWebRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronWebRequestRequest.ProtoReflect.Descriptor instead.
func (*UpdateCronWebRequestRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCronWebRequestRequest) GetItem() *v1alpha1.CronWebRequest {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateCronWebRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCronWebRequestResponse) Reset() {
	*x = UpdateCronWebRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronWebRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronWebRequestResponse) ProtoMessage() {}

func (x *UpdateCronWebRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronWebRequestResponse.ProtoReflect.Descriptor instead.
func (*UpdateCronWebRequestResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{5}
}

type GetCronWebRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCronWebRequestRequest) Reset() {
	*x = GetCronWebRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronWebRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronWebRequestRequest) ProtoMessage() {}

func (x *GetCronWebRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronWebRequestRequest.ProtoReflect.Descriptor instead.
func (*GetCronWebRequestRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{6}
}

func (x *GetCronWebRequestRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetCronWebRequestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCronWebRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronWebRequest `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Yaml string                   `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetCronWebRequestResponse) Reset() {
	*x = GetCronWebRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronWebRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronWebRequestResponse) ProtoMessage() {}

func (x *GetCronWebRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronWebRequestResponse.ProtoReflect.Descriptor instead.
func (*GetCronWebRequestResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{7}
}

func (x *GetCronWebRequestResponse) GetItem() *v1alpha1.CronWebRequest {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetCronWebRequestResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeleteCronWebRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteCronWebRequestRequest) Reset() {
	*x = DeleteCronWebRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronWebRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronWebRequestRequest) ProtoMessage() {}

func (x *DeleteCronWebRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronWebRequestRequest.ProtoReflect.Descriptor instead.
func (*DeleteCronWebRequestRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCronWebRequestRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteCronWebRequestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteCronWebRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCronWebRequestResponse) Reset() {
	*x = DeleteCronWebRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronWebRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronWebRequestResponse) ProtoMessage() {}

func (x *DeleteCronWebRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronWebRequestResponse.ProtoReflect.Descriptor instead.
func (*DeleteCronWebRequestResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{9}
}

type PauseCronWebRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PauseCronWebRequestRequest) Reset() {
	*x = PauseCronWebRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseCronWebRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseCronWebRequestRequest) ProtoMessage() {}

func (x *PauseCronWebRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseCronWebRequestRequest.ProtoReflect.Descriptor instead.
func (*PauseCronWebRequestRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{10}
}

func (x *PauseCronWebRequestRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PauseCronWebRequestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PauseCronWebRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PauseCronWebRequestResponse) Reset() {
	*x = PauseCronWebRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseCronWebRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseCronWebRequestResponse) ProtoMessage() {}

func (x *PauseCronWebRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseCronWebRequestResponse.ProtoReflect.Descriptor instead.
func (*PauseCronWebRequestResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{11}
}

type ResumeCronWebRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ResumeCronWebRequestRequest) Reset() {
	*x = ResumeCronWebRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeCronWebRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeCronWebRequestRequest) ProtoMessage() {}

func (x *ResumeCronWebRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeCronWebRequestRequest.ProtoReflect.Descriptor instead.
func (*ResumeCronWebRequestRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{12}
}

func (x *ResumeCronWebRequestRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResumeCronWebRequestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResumeCronWebRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResumeCronWebRequestResponse) Reset() {
	*x = ResumeCronWebRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeCronWebRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeCronWebRequestResponse) ProtoMessage() {}

func (x *ResumeCronWebRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeCronWebRequestResponse.ProtoReflect.Descriptor instead.
func (*ResumeCronWebRequestResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{13}
}

type RunCronWebRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronWebRequest `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *RunCronWebRequestRequest) Reset() {
	*x = RunCronWebRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronWebRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronWebRequestRequest) ProtoMessage() {}

func (x *RunCronWebRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronWebRequestRequest.ProtoReflect.Descriptor instead.
func (*RunCronWebRequestRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{14}
}

func (x *RunCronWebRequestRequest) GetItem() *v1alpha1.CronWebRequest {
	if x != nil {
		return x.Item
	}
	return nil
}

type RunCronWebRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunCronWebRequestResponse) Reset() {
	*x = RunCronWebRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronWebRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronWebRequestResponse) ProtoMessage() {}

func (x *RunCronWebRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronWebRequestResponse.ProtoReflect.Descriptor instead.
func (*RunCronWebRequestResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP(), []int{15}
}

var File_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDesc = []byte{
	0x0a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x77,
	0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x02,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x78,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72,
	0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x77, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x58, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x77, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61,
	0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x4f,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4e, 0x0a, 0x1a, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x1d, 0x0a, 0x1b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f,
	0x0a, 0x1b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x74, 0x0a, 0x18, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e,
	0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xfc, 0x0e, 0x0a, 0x15, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xdf, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x54, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0xe5,
	0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xe0, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x53, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65,
	0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x84, 0x02, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x1a, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0xe9, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x56, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65,
	0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xec, 0x01, 0x0a,
	0x13, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f,
	0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x21, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0xe0,
	0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65,
	0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x43,
	0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x77, 0x65, 0x62, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x72, 0x75,
	0x6e, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e,
	0x77, 0x65, 0x62, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescData = file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDesc
)

func file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescData)
	})
	return file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDescData
}

var file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_goTypes = []interface{}{
	(*ListCronWebRequestsRequest)(nil),   // 0: github.com.metaprov.modelaapi.services.cronwebrequest.v1.ListCronWebRequestsRequest
	(*ListCronWebRequestsResponse)(nil),  // 1: github.com.metaprov.modelaapi.services.cronwebrequest.v1.ListCronWebRequestsResponse
	(*CreateCronWebRequestResponse)(nil), // 2: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CreateCronWebRequestResponse
	(*CreateCronWebRequestRequest)(nil),  // 3: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CreateCronWebRequestRequest
	(*UpdateCronWebRequestRequest)(nil),  // 4: github.com.metaprov.modelaapi.services.cronwebrequest.v1.UpdateCronWebRequestRequest
	(*UpdateCronWebRequestResponse)(nil), // 5: github.com.metaprov.modelaapi.services.cronwebrequest.v1.UpdateCronWebRequestResponse
	(*GetCronWebRequestRequest)(nil),     // 6: github.com.metaprov.modelaapi.services.cronwebrequest.v1.GetCronWebRequestRequest
	(*GetCronWebRequestResponse)(nil),    // 7: github.com.metaprov.modelaapi.services.cronwebrequest.v1.GetCronWebRequestResponse
	(*DeleteCronWebRequestRequest)(nil),  // 8: github.com.metaprov.modelaapi.services.cronwebrequest.v1.DeleteCronWebRequestRequest
	(*DeleteCronWebRequestResponse)(nil), // 9: github.com.metaprov.modelaapi.services.cronwebrequest.v1.DeleteCronWebRequestResponse
	(*PauseCronWebRequestRequest)(nil),   // 10: github.com.metaprov.modelaapi.services.cronwebrequest.v1.PauseCronWebRequestRequest
	(*PauseCronWebRequestResponse)(nil),  // 11: github.com.metaprov.modelaapi.services.cronwebrequest.v1.PauseCronWebRequestResponse
	(*ResumeCronWebRequestRequest)(nil),  // 12: github.com.metaprov.modelaapi.services.cronwebrequest.v1.ResumeCronWebRequestRequest
	(*ResumeCronWebRequestResponse)(nil), // 13: github.com.metaprov.modelaapi.services.cronwebrequest.v1.ResumeCronWebRequestResponse
	(*RunCronWebRequestRequest)(nil),     // 14: github.com.metaprov.modelaapi.services.cronwebrequest.v1.RunCronWebRequestRequest
	(*RunCronWebRequestResponse)(nil),    // 15: github.com.metaprov.modelaapi.services.cronwebrequest.v1.RunCronWebRequestResponse
	nil,                                  // 16: github.com.metaprov.modelaapi.services.cronwebrequest.v1.ListCronWebRequestsRequest.LabelsEntry
	(*v1alpha1.CronWebRequestList)(nil),  // 17: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequestList
	(*v1alpha1.CronWebRequest)(nil),      // 18: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequest
}
var file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_depIdxs = []int32{
	16, // 0: github.com.metaprov.modelaapi.services.cronwebrequest.v1.ListCronWebRequestsRequest.labels:type_name -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.ListCronWebRequestsRequest.LabelsEntry
	17, // 1: github.com.metaprov.modelaapi.services.cronwebrequest.v1.ListCronWebRequestsResponse.items:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequestList
	18, // 2: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CreateCronWebRequestRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequest
	18, // 3: github.com.metaprov.modelaapi.services.cronwebrequest.v1.UpdateCronWebRequestRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequest
	18, // 4: github.com.metaprov.modelaapi.services.cronwebrequest.v1.GetCronWebRequestResponse.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequest
	18, // 5: github.com.metaprov.modelaapi.services.cronwebrequest.v1.RunCronWebRequestRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronWebRequest
	0,  // 6: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.ListCronWebRequests:input_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.ListCronWebRequestsRequest
	3,  // 7: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.CreateCronWebRequest:input_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.CreateCronWebRequestRequest
	6,  // 8: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.GetCronWebRequest:input_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.GetCronWebRequestRequest
	4,  // 9: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.UpdateCronWebRequest:input_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.UpdateCronWebRequestRequest
	8,  // 10: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.DeleteCronWebRequest:input_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.DeleteCronWebRequestRequest
	10, // 11: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.PauseCronWebRequest:input_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.PauseCronWebRequestRequest
	12, // 12: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.ResumeCronWebRequest:input_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.ResumeCronWebRequestRequest
	14, // 13: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.RunPrediction:input_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.RunCronWebRequestRequest
	1,  // 14: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.ListCronWebRequests:output_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.ListCronWebRequestsResponse
	2,  // 15: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.CreateCronWebRequest:output_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.CreateCronWebRequestResponse
	7,  // 16: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.GetCronWebRequest:output_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.GetCronWebRequestResponse
	5,  // 17: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.UpdateCronWebRequest:output_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.UpdateCronWebRequestResponse
	9,  // 18: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.DeleteCronWebRequest:output_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.DeleteCronWebRequestResponse
	11, // 19: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.PauseCronWebRequest:output_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.PauseCronWebRequestResponse
	13, // 20: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.ResumeCronWebRequest:output_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.ResumeCronWebRequestResponse
	15, // 21: github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService.RunPrediction:output_type -> github.com.metaprov.modelaapi.services.cronwebrequest.v1.RunCronWebRequestResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() {
	file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_init()
}
func file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_init() {
	if File_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronWebRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronWebRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronWebRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronWebRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronWebRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronWebRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronWebRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronWebRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronWebRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronWebRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseCronWebRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseCronWebRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeCronWebRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeCronWebRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronWebRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronWebRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_depIdxs,
		MessageInfos:      file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto = out.File
	file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_rawDesc = nil
	file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_goTypes = nil
	file_github_com_metaprov_modelaapi_services_cronwebrequest_v1_cronwebrequest_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CronWebRequestServiceClient is the client API for CronWebRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronWebRequestServiceClient interface {
	ListCronWebRequests(ctx context.Context, in *ListCronWebRequestsRequest, opts ...grpc.CallOption) (*ListCronWebRequestsResponse, error)
	CreateCronWebRequest(ctx context.Context, in *CreateCronWebRequestRequest, opts ...grpc.CallOption) (*CreateCronWebRequestResponse, error)
	GetCronWebRequest(ctx context.Context, in *GetCronWebRequestRequest, opts ...grpc.CallOption) (*GetCronWebRequestResponse, error)
	UpdateCronWebRequest(ctx context.Context, in *UpdateCronWebRequestRequest, opts ...grpc.CallOption) (*UpdateCronWebRequestResponse, error)
	DeleteCronWebRequest(ctx context.Context, in *DeleteCronWebRequestRequest, opts ...grpc.CallOption) (*DeleteCronWebRequestResponse, error)
	PauseCronWebRequest(ctx context.Context, in *PauseCronWebRequestRequest, opts ...grpc.CallOption) (*PauseCronWebRequestResponse, error)
	ResumeCronWebRequest(ctx context.Context, in *ResumeCronWebRequestRequest, opts ...grpc.CallOption) (*ResumeCronWebRequestResponse, error)
	RunPrediction(ctx context.Context, in *RunCronWebRequestRequest, opts ...grpc.CallOption) (*RunCronWebRequestResponse, error)
}

type cronWebRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCronWebRequestServiceClient(cc grpc.ClientConnInterface) CronWebRequestServiceClient {
	return &cronWebRequestServiceClient{cc}
}

func (c *cronWebRequestServiceClient) ListCronWebRequests(ctx context.Context, in *ListCronWebRequestsRequest, opts ...grpc.CallOption) (*ListCronWebRequestsResponse, error) {
	out := new(ListCronWebRequestsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/ListCronWebRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWebRequestServiceClient) CreateCronWebRequest(ctx context.Context, in *CreateCronWebRequestRequest, opts ...grpc.CallOption) (*CreateCronWebRequestResponse, error) {
	out := new(CreateCronWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/CreateCronWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWebRequestServiceClient) GetCronWebRequest(ctx context.Context, in *GetCronWebRequestRequest, opts ...grpc.CallOption) (*GetCronWebRequestResponse, error) {
	out := new(GetCronWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/GetCronWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWebRequestServiceClient) UpdateCronWebRequest(ctx context.Context, in *UpdateCronWebRequestRequest, opts ...grpc.CallOption) (*UpdateCronWebRequestResponse, error) {
	out := new(UpdateCronWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/UpdateCronWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWebRequestServiceClient) DeleteCronWebRequest(ctx context.Context, in *DeleteCronWebRequestRequest, opts ...grpc.CallOption) (*DeleteCronWebRequestResponse, error) {
	out := new(DeleteCronWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/DeleteCronWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWebRequestServiceClient) PauseCronWebRequest(ctx context.Context, in *PauseCronWebRequestRequest, opts ...grpc.CallOption) (*PauseCronWebRequestResponse, error) {
	out := new(PauseCronWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/PauseCronWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWebRequestServiceClient) ResumeCronWebRequest(ctx context.Context, in *ResumeCronWebRequestRequest, opts ...grpc.CallOption) (*ResumeCronWebRequestResponse, error) {
	out := new(ResumeCronWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/ResumeCronWebRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWebRequestServiceClient) RunPrediction(ctx context.Context, in *RunCronWebRequestRequest, opts ...grpc.CallOption) (*RunCronWebRequestResponse, error) {
	out := new(RunCronWebRequestResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/RunPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronWebRequestServiceServer is the server API for CronWebRequestService service.
type CronWebRequestServiceServer interface {
	ListCronWebRequests(context.Context, *ListCronWebRequestsRequest) (*ListCronWebRequestsResponse, error)
	CreateCronWebRequest(context.Context, *CreateCronWebRequestRequest) (*CreateCronWebRequestResponse, error)
	GetCronWebRequest(context.Context, *GetCronWebRequestRequest) (*GetCronWebRequestResponse, error)
	UpdateCronWebRequest(context.Context, *UpdateCronWebRequestRequest) (*UpdateCronWebRequestResponse, error)
	DeleteCronWebRequest(context.Context, *DeleteCronWebRequestRequest) (*DeleteCronWebRequestResponse, error)
	PauseCronWebRequest(context.Context, *PauseCronWebRequestRequest) (*PauseCronWebRequestResponse, error)
	ResumeCronWebRequest(context.Context, *ResumeCronWebRequestRequest) (*ResumeCronWebRequestResponse, error)
	RunPrediction(context.Context, *RunCronWebRequestRequest) (*RunCronWebRequestResponse, error)
}

// UnimplementedCronWebRequestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCronWebRequestServiceServer struct {
}

func (*UnimplementedCronWebRequestServiceServer) ListCronWebRequests(context.Context, *ListCronWebRequestsRequest) (*ListCronWebRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronWebRequests not implemented")
}
func (*UnimplementedCronWebRequestServiceServer) CreateCronWebRequest(context.Context, *CreateCronWebRequestRequest) (*CreateCronWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronWebRequest not implemented")
}
func (*UnimplementedCronWebRequestServiceServer) GetCronWebRequest(context.Context, *GetCronWebRequestRequest) (*GetCronWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronWebRequest not implemented")
}
func (*UnimplementedCronWebRequestServiceServer) UpdateCronWebRequest(context.Context, *UpdateCronWebRequestRequest) (*UpdateCronWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronWebRequest not implemented")
}
func (*UnimplementedCronWebRequestServiceServer) DeleteCronWebRequest(context.Context, *DeleteCronWebRequestRequest) (*DeleteCronWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronWebRequest not implemented")
}
func (*UnimplementedCronWebRequestServiceServer) PauseCronWebRequest(context.Context, *PauseCronWebRequestRequest) (*PauseCronWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCronWebRequest not implemented")
}
func (*UnimplementedCronWebRequestServiceServer) ResumeCronWebRequest(context.Context, *ResumeCronWebRequestRequest) (*ResumeCronWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeCronWebRequest not implemented")
}
func (*UnimplementedCronWebRequestServiceServer) RunPrediction(context.Context, *RunCronWebRequestRequest) (*RunCronWebRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPrediction not implemented")
}

func RegisterCronWebRequestServiceServer(s *grpc.Server, srv CronWebRequestServiceServer) {
	s.RegisterService(&_CronWebRequestService_serviceDesc, srv)
}

func _CronWebRequestService_ListCronWebRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronWebRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWebRequestServiceServer).ListCronWebRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/ListCronWebRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWebRequestServiceServer).ListCronWebRequests(ctx, req.(*ListCronWebRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWebRequestService_CreateCronWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWebRequestServiceServer).CreateCronWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/CreateCronWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWebRequestServiceServer).CreateCronWebRequest(ctx, req.(*CreateCronWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWebRequestService_GetCronWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWebRequestServiceServer).GetCronWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/GetCronWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWebRequestServiceServer).GetCronWebRequest(ctx, req.(*GetCronWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWebRequestService_UpdateCronWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCronWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWebRequestServiceServer).UpdateCronWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/UpdateCronWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWebRequestServiceServer).UpdateCronWebRequest(ctx, req.(*UpdateCronWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWebRequestService_DeleteCronWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWebRequestServiceServer).DeleteCronWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/DeleteCronWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWebRequestServiceServer).DeleteCronWebRequest(ctx, req.(*DeleteCronWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWebRequestService_PauseCronWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseCronWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWebRequestServiceServer).PauseCronWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/PauseCronWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWebRequestServiceServer).PauseCronWebRequest(ctx, req.(*PauseCronWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWebRequestService_ResumeCronWebRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeCronWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWebRequestServiceServer).ResumeCronWebRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/ResumeCronWebRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWebRequestServiceServer).ResumeCronWebRequest(ctx, req.(*ResumeCronWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWebRequestService_RunPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCronWebRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWebRequestServiceServer).RunPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService/RunPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWebRequestServiceServer).RunPrediction(ctx, req.(*RunCronWebRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronWebRequestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.cronwebrequest.v1.CronWebRequestService",
	HandlerType: (*CronWebRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCronWebRequests",
			Handler:    _CronWebRequestService_ListCronWebRequests_Handler,
		},
		{
			MethodName: "CreateCronWebRequest",
			Handler:    _CronWebRequestService_CreateCronWebRequest_Handler,
		},
		{
			MethodName: "GetCronWebRequest",
			Handler:    _CronWebRequestService_GetCronWebRequest_Handler,
		},
		{
			MethodName: "UpdateCronWebRequest",
			Handler:    _CronWebRequestService_UpdateCronWebRequest_Handler,
		},
		{
			MethodName: "DeleteCronWebRequest",
			Handler:    _CronWebRequestService_DeleteCronWebRequest_Handler,
		},
		{
			MethodName: "PauseCronWebRequest",
			Handler:    _CronWebRequestService_PauseCronWebRequest_Handler,
		},
		{
			MethodName: "ResumeCronWebRequest",
			Handler:    _CronWebRequestService_ResumeCronWebRequest_Handler,
		},
		{
			MethodName: "RunPrediction",
			Handler:    _CronWebRequestService_RunPrediction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/cronwebrequest/v1/cronwebrequest.proto",
}
