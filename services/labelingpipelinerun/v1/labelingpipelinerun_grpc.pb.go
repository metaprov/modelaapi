// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/labelingpipelinerun/v1/labelingpipelinerun.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LabelingPipelineRunServiceClient is the client API for LabelingPipelineRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LabelingPipelineRunServiceClient interface {
	ListLabelingPipelineRuns(ctx context.Context, in *ListLabelingPipelineRunRequest, opts ...grpc.CallOption) (*ListLabelingPipelineRunResponse, error)
	CreateLabelingPipelineRun(ctx context.Context, in *CreateLabelingPipelineRunRequest, opts ...grpc.CallOption) (*CreateLabelingPipelineRunResponse, error)
	GetLabelingPipelineRun(ctx context.Context, in *GetLabelingPipelineRunRequest, opts ...grpc.CallOption) (*GetLabelingPipelineRunResponse, error)
	UpdateLabelingPipelineRun(ctx context.Context, in *UpdateLabelingPipelineRunRequest, opts ...grpc.CallOption) (*UpdateLabelingPipelineRunResponse, error)
	DeleteLabelingPipelineRun(ctx context.Context, in *DeleteLabelingPipelineRunRequest, opts ...grpc.CallOption) (*DeleteLabelingPipelineRunResponse, error)
}

type labelingPipelineRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLabelingPipelineRunServiceClient(cc grpc.ClientConnInterface) LabelingPipelineRunServiceClient {
	return &labelingPipelineRunServiceClient{cc}
}

func (c *labelingPipelineRunServiceClient) ListLabelingPipelineRuns(ctx context.Context, in *ListLabelingPipelineRunRequest, opts ...grpc.CallOption) (*ListLabelingPipelineRunResponse, error) {
	out := new(ListLabelingPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/ListLabelingPipelineRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineRunServiceClient) CreateLabelingPipelineRun(ctx context.Context, in *CreateLabelingPipelineRunRequest, opts ...grpc.CallOption) (*CreateLabelingPipelineRunResponse, error) {
	out := new(CreateLabelingPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/CreateLabelingPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineRunServiceClient) GetLabelingPipelineRun(ctx context.Context, in *GetLabelingPipelineRunRequest, opts ...grpc.CallOption) (*GetLabelingPipelineRunResponse, error) {
	out := new(GetLabelingPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/GetLabelingPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineRunServiceClient) UpdateLabelingPipelineRun(ctx context.Context, in *UpdateLabelingPipelineRunRequest, opts ...grpc.CallOption) (*UpdateLabelingPipelineRunResponse, error) {
	out := new(UpdateLabelingPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/UpdateLabelingPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineRunServiceClient) DeleteLabelingPipelineRun(ctx context.Context, in *DeleteLabelingPipelineRunRequest, opts ...grpc.CallOption) (*DeleteLabelingPipelineRunResponse, error) {
	out := new(DeleteLabelingPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/DeleteLabelingPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabelingPipelineRunServiceServer is the server API for LabelingPipelineRunService service.
// All implementations must embed UnimplementedLabelingPipelineRunServiceServer
// for forward compatibility
type LabelingPipelineRunServiceServer interface {
	ListLabelingPipelineRuns(context.Context, *ListLabelingPipelineRunRequest) (*ListLabelingPipelineRunResponse, error)
	CreateLabelingPipelineRun(context.Context, *CreateLabelingPipelineRunRequest) (*CreateLabelingPipelineRunResponse, error)
	GetLabelingPipelineRun(context.Context, *GetLabelingPipelineRunRequest) (*GetLabelingPipelineRunResponse, error)
	UpdateLabelingPipelineRun(context.Context, *UpdateLabelingPipelineRunRequest) (*UpdateLabelingPipelineRunResponse, error)
	DeleteLabelingPipelineRun(context.Context, *DeleteLabelingPipelineRunRequest) (*DeleteLabelingPipelineRunResponse, error)
	mustEmbedUnimplementedLabelingPipelineRunServiceServer()
}

// UnimplementedLabelingPipelineRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLabelingPipelineRunServiceServer struct {
}

func (UnimplementedLabelingPipelineRunServiceServer) ListLabelingPipelineRuns(context.Context, *ListLabelingPipelineRunRequest) (*ListLabelingPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabelingPipelineRuns not implemented")
}
func (UnimplementedLabelingPipelineRunServiceServer) CreateLabelingPipelineRun(context.Context, *CreateLabelingPipelineRunRequest) (*CreateLabelingPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabelingPipelineRun not implemented")
}
func (UnimplementedLabelingPipelineRunServiceServer) GetLabelingPipelineRun(context.Context, *GetLabelingPipelineRunRequest) (*GetLabelingPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelingPipelineRun not implemented")
}
func (UnimplementedLabelingPipelineRunServiceServer) UpdateLabelingPipelineRun(context.Context, *UpdateLabelingPipelineRunRequest) (*UpdateLabelingPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabelingPipelineRun not implemented")
}
func (UnimplementedLabelingPipelineRunServiceServer) DeleteLabelingPipelineRun(context.Context, *DeleteLabelingPipelineRunRequest) (*DeleteLabelingPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabelingPipelineRun not implemented")
}
func (UnimplementedLabelingPipelineRunServiceServer) mustEmbedUnimplementedLabelingPipelineRunServiceServer() {
}

// UnsafeLabelingPipelineRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabelingPipelineRunServiceServer will
// result in compilation errors.
type UnsafeLabelingPipelineRunServiceServer interface {
	mustEmbedUnimplementedLabelingPipelineRunServiceServer()
}

func RegisterLabelingPipelineRunServiceServer(s grpc.ServiceRegistrar, srv LabelingPipelineRunServiceServer) {
	s.RegisterService(&LabelingPipelineRunService_ServiceDesc, srv)
}

func _LabelingPipelineRunService_ListLabelingPipelineRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelingPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineRunServiceServer).ListLabelingPipelineRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/ListLabelingPipelineRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineRunServiceServer).ListLabelingPipelineRuns(ctx, req.(*ListLabelingPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineRunService_CreateLabelingPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabelingPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineRunServiceServer).CreateLabelingPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/CreateLabelingPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineRunServiceServer).CreateLabelingPipelineRun(ctx, req.(*CreateLabelingPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineRunService_GetLabelingPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelingPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineRunServiceServer).GetLabelingPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/GetLabelingPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineRunServiceServer).GetLabelingPipelineRun(ctx, req.(*GetLabelingPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineRunService_UpdateLabelingPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelingPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineRunServiceServer).UpdateLabelingPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/UpdateLabelingPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineRunServiceServer).UpdateLabelingPipelineRun(ctx, req.(*UpdateLabelingPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineRunService_DeleteLabelingPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelingPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineRunServiceServer).DeleteLabelingPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/DeleteLabelingPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineRunServiceServer).DeleteLabelingPipelineRun(ctx, req.(*DeleteLabelingPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LabelingPipelineRunService_ServiceDesc is the grpc.ServiceDesc for LabelingPipelineRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LabelingPipelineRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService",
	HandlerType: (*LabelingPipelineRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLabelingPipelineRuns",
			Handler:    _LabelingPipelineRunService_ListLabelingPipelineRuns_Handler,
		},
		{
			MethodName: "CreateLabelingPipelineRun",
			Handler:    _LabelingPipelineRunService_CreateLabelingPipelineRun_Handler,
		},
		{
			MethodName: "GetLabelingPipelineRun",
			Handler:    _LabelingPipelineRunService_GetLabelingPipelineRun_Handler,
		},
		{
			MethodName: "UpdateLabelingPipelineRun",
			Handler:    _LabelingPipelineRunService_UpdateLabelingPipelineRun_Handler,
		},
		{
			MethodName: "DeleteLabelingPipelineRun",
			Handler:    _LabelingPipelineRunService_DeleteLabelingPipelineRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/labelingpipelinerun/v1/labelingpipelinerun.proto",
}
