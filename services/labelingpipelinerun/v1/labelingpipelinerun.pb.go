// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.7
// source: github.com/metaprov/modelaapi/services/labelingpipelinerun/v1/labelingpipelinerun.proto

package v1

import (
	context "context"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListLabelingPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels    map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListLabelingPipelineRunRequest) Reset() {
	*x = ListLabelingPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabelingPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelingPipelineRunRequest) ProtoMessage() {}

func (x *ListLabelingPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelingPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*ListLabelingPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescGZIP(), []int{0}
}

func (x *ListLabelingPipelineRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListLabelingPipelineRunRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListLabelingPipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *v1alpha1.LabelingPipelineRunList `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *ListLabelingPipelineRunResponse) Reset() {
	*x = ListLabelingPipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabelingPipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelingPipelineRunResponse) ProtoMessage() {}

func (x *ListLabelingPipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelingPipelineRunResponse.ProtoReflect.Descriptor instead.
func (*ListLabelingPipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescGZIP(), []int{1}
}

func (x *ListLabelingPipelineRunResponse) GetItems() *v1alpha1.LabelingPipelineRunList {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateLabelingPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.LabelingPipelineRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateLabelingPipelineRunRequest) Reset() {
	*x = CreateLabelingPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLabelingPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabelingPipelineRunRequest) ProtoMessage() {}

func (x *CreateLabelingPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabelingPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*CreateLabelingPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescGZIP(), []int{2}
}

func (x *CreateLabelingPipelineRunRequest) GetItem() *v1alpha1.LabelingPipelineRun {
	if x != nil {
		return x.Item
	}
	return nil
}

type CreateLabelingPipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateLabelingPipelineRunResponse) Reset() {
	*x = CreateLabelingPipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLabelingPipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabelingPipelineRunResponse) ProtoMessage() {}

func (x *CreateLabelingPipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabelingPipelineRunResponse.ProtoReflect.Descriptor instead.
func (*CreateLabelingPipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescGZIP(), []int{3}
}

type UpdateLabelingPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.LabelingPipelineRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateLabelingPipelineRunRequest) Reset() {
	*x = UpdateLabelingPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelingPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelingPipelineRunRequest) ProtoMessage() {}

func (x *UpdateLabelingPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelingPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*UpdateLabelingPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateLabelingPipelineRunRequest) GetItem() *v1alpha1.LabelingPipelineRun {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateLabelingPipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateLabelingPipelineRunResponse) Reset() {
	*x = UpdateLabelingPipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelingPipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelingPipelineRunResponse) ProtoMessage() {}

func (x *UpdateLabelingPipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelingPipelineRunResponse.ProtoReflect.Descriptor instead.
func (*UpdateLabelingPipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescGZIP(), []int{5}
}

type GetLabelingPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetLabelingPipelineRunRequest) Reset() {
	*x = GetLabelingPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelingPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelingPipelineRunRequest) ProtoMessage() {}

func (x *GetLabelingPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelingPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*GetLabelingPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescGZIP(), []int{6}
}

func (x *GetLabelingPipelineRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetLabelingPipelineRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetLabelingPipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.LabelingPipelineRun `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Yaml string                        `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetLabelingPipelineRunResponse) Reset() {
	*x = GetLabelingPipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelingPipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelingPipelineRunResponse) ProtoMessage() {}

func (x *GetLabelingPipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelingPipelineRunResponse.ProtoReflect.Descriptor instead.
func (*GetLabelingPipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescGZIP(), []int{7}
}

func (x *GetLabelingPipelineRunResponse) GetItem() *v1alpha1.LabelingPipelineRun {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetLabelingPipelineRunResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeleteLabelingPipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteLabelingPipelineRunRequest) Reset() {
	*x = DeleteLabelingPipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLabelingPipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabelingPipelineRunRequest) ProtoMessage() {}

func (x *DeleteLabelingPipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabelingPipelineRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteLabelingPipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteLabelingPipelineRunRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteLabelingPipelineRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteLabelingPipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteLabelingPipelineRunResponse) Reset() {
	*x = DeleteLabelingPipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLabelingPipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabelingPipelineRunResponse) ProtoMessage() {}

func (x *DeleteLabelingPipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabelingPipelineRunResponse.ProtoReflect.Descriptor instead.
func (*DeleteLabelingPipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescGZIP(), []int{9}
}

var File_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDesc = []byte{
	0x0a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x01, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x69,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x63, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x22, 0x23, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c,
	0x22, 0x54, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9d, 0x0a, 0x0a, 0x1a,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xfb, 0x01, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x5d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x83, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x5f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x60, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xfe,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x5c, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x96, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x5f, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x60,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f,
	0x7b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xe0, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x5f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x60, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x75, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescData = file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDesc
)

func file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescData)
	})
	return file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDescData
}

var file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_goTypes = []interface{}{
	(*ListLabelingPipelineRunRequest)(nil),    // 0: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.ListLabelingPipelineRunRequest
	(*ListLabelingPipelineRunResponse)(nil),   // 1: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.ListLabelingPipelineRunResponse
	(*CreateLabelingPipelineRunRequest)(nil),  // 2: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.CreateLabelingPipelineRunRequest
	(*CreateLabelingPipelineRunResponse)(nil), // 3: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.CreateLabelingPipelineRunResponse
	(*UpdateLabelingPipelineRunRequest)(nil),  // 4: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.UpdateLabelingPipelineRunRequest
	(*UpdateLabelingPipelineRunResponse)(nil), // 5: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.UpdateLabelingPipelineRunResponse
	(*GetLabelingPipelineRunRequest)(nil),     // 6: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.GetLabelingPipelineRunRequest
	(*GetLabelingPipelineRunResponse)(nil),    // 7: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.GetLabelingPipelineRunResponse
	(*DeleteLabelingPipelineRunRequest)(nil),  // 8: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.DeleteLabelingPipelineRunRequest
	(*DeleteLabelingPipelineRunResponse)(nil), // 9: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.DeleteLabelingPipelineRunResponse
	nil,                                      // 10: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.ListLabelingPipelineRunRequest.LabelsEntry
	(*v1alpha1.LabelingPipelineRunList)(nil), // 11: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.LabelingPipelineRunList
	(*v1alpha1.LabelingPipelineRun)(nil),     // 12: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.LabelingPipelineRun
}
var file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_depIdxs = []int32{
	10, // 0: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.ListLabelingPipelineRunRequest.labels:type_name -> github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.ListLabelingPipelineRunRequest.LabelsEntry
	11, // 1: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.ListLabelingPipelineRunResponse.items:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.LabelingPipelineRunList
	12, // 2: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.CreateLabelingPipelineRunRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.LabelingPipelineRun
	12, // 3: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.UpdateLabelingPipelineRunRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.LabelingPipelineRun
	12, // 4: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.GetLabelingPipelineRunResponse.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.LabelingPipelineRun
	0,  // 5: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService.ListLabelingPipelineRuns:input_type -> github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.ListLabelingPipelineRunRequest
	2,  // 6: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService.CreateLabelingPipelineRun:input_type -> github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.CreateLabelingPipelineRunRequest
	6,  // 7: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService.GetLabelingPipelineRun:input_type -> github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.GetLabelingPipelineRunRequest
	4,  // 8: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService.UpdateLabelingPipelineRun:input_type -> github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.UpdateLabelingPipelineRunRequest
	8,  // 9: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService.DeleteLabelingPipelineRun:input_type -> github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.DeleteLabelingPipelineRunRequest
	1,  // 10: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService.ListLabelingPipelineRuns:output_type -> github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.ListLabelingPipelineRunResponse
	3,  // 11: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService.CreateLabelingPipelineRun:output_type -> github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.CreateLabelingPipelineRunResponse
	7,  // 12: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService.GetLabelingPipelineRun:output_type -> github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.GetLabelingPipelineRunResponse
	5,  // 13: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService.UpdateLabelingPipelineRun:output_type -> github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.UpdateLabelingPipelineRunResponse
	9,  // 14: github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService.DeleteLabelingPipelineRun:output_type -> github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.DeleteLabelingPipelineRunResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() {
	file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_init()
}
func file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_init() {
	if File_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabelingPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabelingPipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLabelingPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLabelingPipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelingPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelingPipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelingPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelingPipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLabelingPipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLabelingPipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_depIdxs,
		MessageInfos:      file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto = out.File
	file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_rawDesc = nil
	file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_goTypes = nil
	file_github_com_metaprov_modelaapi_services_labelingpipelinerun_v1_labelingpipelinerun_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LabelingPipelineRunServiceClient is the client API for LabelingPipelineRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LabelingPipelineRunServiceClient interface {
	ListLabelingPipelineRuns(ctx context.Context, in *ListLabelingPipelineRunRequest, opts ...grpc.CallOption) (*ListLabelingPipelineRunResponse, error)
	CreateLabelingPipelineRun(ctx context.Context, in *CreateLabelingPipelineRunRequest, opts ...grpc.CallOption) (*CreateLabelingPipelineRunResponse, error)
	GetLabelingPipelineRun(ctx context.Context, in *GetLabelingPipelineRunRequest, opts ...grpc.CallOption) (*GetLabelingPipelineRunResponse, error)
	UpdateLabelingPipelineRun(ctx context.Context, in *UpdateLabelingPipelineRunRequest, opts ...grpc.CallOption) (*UpdateLabelingPipelineRunResponse, error)
	DeleteLabelingPipelineRun(ctx context.Context, in *DeleteLabelingPipelineRunRequest, opts ...grpc.CallOption) (*DeleteLabelingPipelineRunResponse, error)
}

type labelingPipelineRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLabelingPipelineRunServiceClient(cc grpc.ClientConnInterface) LabelingPipelineRunServiceClient {
	return &labelingPipelineRunServiceClient{cc}
}

func (c *labelingPipelineRunServiceClient) ListLabelingPipelineRuns(ctx context.Context, in *ListLabelingPipelineRunRequest, opts ...grpc.CallOption) (*ListLabelingPipelineRunResponse, error) {
	out := new(ListLabelingPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/ListLabelingPipelineRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineRunServiceClient) CreateLabelingPipelineRun(ctx context.Context, in *CreateLabelingPipelineRunRequest, opts ...grpc.CallOption) (*CreateLabelingPipelineRunResponse, error) {
	out := new(CreateLabelingPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/CreateLabelingPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineRunServiceClient) GetLabelingPipelineRun(ctx context.Context, in *GetLabelingPipelineRunRequest, opts ...grpc.CallOption) (*GetLabelingPipelineRunResponse, error) {
	out := new(GetLabelingPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/GetLabelingPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineRunServiceClient) UpdateLabelingPipelineRun(ctx context.Context, in *UpdateLabelingPipelineRunRequest, opts ...grpc.CallOption) (*UpdateLabelingPipelineRunResponse, error) {
	out := new(UpdateLabelingPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/UpdateLabelingPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelingPipelineRunServiceClient) DeleteLabelingPipelineRun(ctx context.Context, in *DeleteLabelingPipelineRunRequest, opts ...grpc.CallOption) (*DeleteLabelingPipelineRunResponse, error) {
	out := new(DeleteLabelingPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/DeleteLabelingPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabelingPipelineRunServiceServer is the server API for LabelingPipelineRunService service.
type LabelingPipelineRunServiceServer interface {
	ListLabelingPipelineRuns(context.Context, *ListLabelingPipelineRunRequest) (*ListLabelingPipelineRunResponse, error)
	CreateLabelingPipelineRun(context.Context, *CreateLabelingPipelineRunRequest) (*CreateLabelingPipelineRunResponse, error)
	GetLabelingPipelineRun(context.Context, *GetLabelingPipelineRunRequest) (*GetLabelingPipelineRunResponse, error)
	UpdateLabelingPipelineRun(context.Context, *UpdateLabelingPipelineRunRequest) (*UpdateLabelingPipelineRunResponse, error)
	DeleteLabelingPipelineRun(context.Context, *DeleteLabelingPipelineRunRequest) (*DeleteLabelingPipelineRunResponse, error)
}

// UnimplementedLabelingPipelineRunServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLabelingPipelineRunServiceServer struct {
}

func (*UnimplementedLabelingPipelineRunServiceServer) ListLabelingPipelineRuns(context.Context, *ListLabelingPipelineRunRequest) (*ListLabelingPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabelingPipelineRuns not implemented")
}
func (*UnimplementedLabelingPipelineRunServiceServer) CreateLabelingPipelineRun(context.Context, *CreateLabelingPipelineRunRequest) (*CreateLabelingPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabelingPipelineRun not implemented")
}
func (*UnimplementedLabelingPipelineRunServiceServer) GetLabelingPipelineRun(context.Context, *GetLabelingPipelineRunRequest) (*GetLabelingPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelingPipelineRun not implemented")
}
func (*UnimplementedLabelingPipelineRunServiceServer) UpdateLabelingPipelineRun(context.Context, *UpdateLabelingPipelineRunRequest) (*UpdateLabelingPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabelingPipelineRun not implemented")
}
func (*UnimplementedLabelingPipelineRunServiceServer) DeleteLabelingPipelineRun(context.Context, *DeleteLabelingPipelineRunRequest) (*DeleteLabelingPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabelingPipelineRun not implemented")
}

func RegisterLabelingPipelineRunServiceServer(s *grpc.Server, srv LabelingPipelineRunServiceServer) {
	s.RegisterService(&_LabelingPipelineRunService_serviceDesc, srv)
}

func _LabelingPipelineRunService_ListLabelingPipelineRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelingPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineRunServiceServer).ListLabelingPipelineRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/ListLabelingPipelineRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineRunServiceServer).ListLabelingPipelineRuns(ctx, req.(*ListLabelingPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineRunService_CreateLabelingPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabelingPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineRunServiceServer).CreateLabelingPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/CreateLabelingPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineRunServiceServer).CreateLabelingPipelineRun(ctx, req.(*CreateLabelingPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineRunService_GetLabelingPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelingPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineRunServiceServer).GetLabelingPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/GetLabelingPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineRunServiceServer).GetLabelingPipelineRun(ctx, req.(*GetLabelingPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineRunService_UpdateLabelingPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelingPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineRunServiceServer).UpdateLabelingPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/UpdateLabelingPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineRunServiceServer).UpdateLabelingPipelineRun(ctx, req.(*UpdateLabelingPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelingPipelineRunService_DeleteLabelingPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelingPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelingPipelineRunServiceServer).DeleteLabelingPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService/DeleteLabelingPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelingPipelineRunServiceServer).DeleteLabelingPipelineRun(ctx, req.(*DeleteLabelingPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LabelingPipelineRunService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.labelingpipelinerun.v1.LabelingPipelineRunService",
	HandlerType: (*LabelingPipelineRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLabelingPipelineRuns",
			Handler:    _LabelingPipelineRunService_ListLabelingPipelineRuns_Handler,
		},
		{
			MethodName: "CreateLabelingPipelineRun",
			Handler:    _LabelingPipelineRunService_CreateLabelingPipelineRun_Handler,
		},
		{
			MethodName: "GetLabelingPipelineRun",
			Handler:    _LabelingPipelineRunService_GetLabelingPipelineRun_Handler,
		},
		{
			MethodName: "UpdateLabelingPipelineRun",
			Handler:    _LabelingPipelineRunService_UpdateLabelingPipelineRun_Handler,
		},
		{
			MethodName: "DeleteLabelingPipelineRun",
			Handler:    _LabelingPipelineRunService_DeleteLabelingPipelineRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/labelingpipelinerun/v1/labelingpipelinerun.proto",
}
