// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: github.com/metaprov/modelaapi/services/studyrun/v1/studyrun.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudyRunServiceClient is the client API for StudyRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyRunServiceClient interface {
	ListStudyRuns(ctx context.Context, in *ListStudyRunRequest, opts ...grpc.CallOption) (*ListStudyRunResponse, error)
	CreateStudyRun(ctx context.Context, in *CreateStudyRunRequest, opts ...grpc.CallOption) (*CreateStudyRunResponse, error)
	GetStudyRun(ctx context.Context, in *GetStudyRunRequest, opts ...grpc.CallOption) (*GetStudyRunResponse, error)
	UpdateStudyRun(ctx context.Context, in *UpdateStudyRunRequest, opts ...grpc.CallOption) (*UpdateStudyRunResponse, error)
	DeleteStudyRun(ctx context.Context, in *DeleteStudyRunRequest, opts ...grpc.CallOption) (*DeleteStudyRunResponse, error)
	GetStudyRunProfile(ctx context.Context, in *GetStudyRunProfileRequest, opts ...grpc.CallOption) (*GetStudyRunProfileResponse, error)
	AbortStudyRun(ctx context.Context, in *AbortStudyRunRequest, opts ...grpc.CallOption) (*AbortStudyRunResponse, error)
	PauseStudyRun(ctx context.Context, in *PauseStudyRunRequest, opts ...grpc.CallOption) (*PauseStudyRunResponse, error)
	ResumeStudyRun(ctx context.Context, in *ResumeStudyRunRequest, opts ...grpc.CallOption) (*ResumeStudyRunResponse, error)
	CompleteSearch(ctx context.Context, in *CompleteStudyRunSearchRequest, opts ...grpc.CallOption) (*CompleteStudyRunSearchResponse, error)
}

type studyRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyRunServiceClient(cc grpc.ClientConnInterface) StudyRunServiceClient {
	return &studyRunServiceClient{cc}
}

func (c *studyRunServiceClient) ListStudyRuns(ctx context.Context, in *ListStudyRunRequest, opts ...grpc.CallOption) (*ListStudyRunResponse, error) {
	out := new(ListStudyRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/ListStudyRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyRunServiceClient) CreateStudyRun(ctx context.Context, in *CreateStudyRunRequest, opts ...grpc.CallOption) (*CreateStudyRunResponse, error) {
	out := new(CreateStudyRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/CreateStudyRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyRunServiceClient) GetStudyRun(ctx context.Context, in *GetStudyRunRequest, opts ...grpc.CallOption) (*GetStudyRunResponse, error) {
	out := new(GetStudyRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/GetStudyRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyRunServiceClient) UpdateStudyRun(ctx context.Context, in *UpdateStudyRunRequest, opts ...grpc.CallOption) (*UpdateStudyRunResponse, error) {
	out := new(UpdateStudyRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/UpdateStudyRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyRunServiceClient) DeleteStudyRun(ctx context.Context, in *DeleteStudyRunRequest, opts ...grpc.CallOption) (*DeleteStudyRunResponse, error) {
	out := new(DeleteStudyRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/DeleteStudyRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyRunServiceClient) GetStudyRunProfile(ctx context.Context, in *GetStudyRunProfileRequest, opts ...grpc.CallOption) (*GetStudyRunProfileResponse, error) {
	out := new(GetStudyRunProfileResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/GetStudyRunProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyRunServiceClient) AbortStudyRun(ctx context.Context, in *AbortStudyRunRequest, opts ...grpc.CallOption) (*AbortStudyRunResponse, error) {
	out := new(AbortStudyRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/AbortStudyRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyRunServiceClient) PauseStudyRun(ctx context.Context, in *PauseStudyRunRequest, opts ...grpc.CallOption) (*PauseStudyRunResponse, error) {
	out := new(PauseStudyRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/PauseStudyRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyRunServiceClient) ResumeStudyRun(ctx context.Context, in *ResumeStudyRunRequest, opts ...grpc.CallOption) (*ResumeStudyRunResponse, error) {
	out := new(ResumeStudyRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/ResumeStudyRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyRunServiceClient) CompleteSearch(ctx context.Context, in *CompleteStudyRunSearchRequest, opts ...grpc.CallOption) (*CompleteStudyRunSearchResponse, error) {
	out := new(CompleteStudyRunSearchResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/CompleteSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyRunServiceServer is the server API for StudyRunService service.
// All implementations must embed UnimplementedStudyRunServiceServer
// for forward compatibility
type StudyRunServiceServer interface {
	ListStudyRuns(context.Context, *ListStudyRunRequest) (*ListStudyRunResponse, error)
	CreateStudyRun(context.Context, *CreateStudyRunRequest) (*CreateStudyRunResponse, error)
	GetStudyRun(context.Context, *GetStudyRunRequest) (*GetStudyRunResponse, error)
	UpdateStudyRun(context.Context, *UpdateStudyRunRequest) (*UpdateStudyRunResponse, error)
	DeleteStudyRun(context.Context, *DeleteStudyRunRequest) (*DeleteStudyRunResponse, error)
	GetStudyRunProfile(context.Context, *GetStudyRunProfileRequest) (*GetStudyRunProfileResponse, error)
	AbortStudyRun(context.Context, *AbortStudyRunRequest) (*AbortStudyRunResponse, error)
	PauseStudyRun(context.Context, *PauseStudyRunRequest) (*PauseStudyRunResponse, error)
	ResumeStudyRun(context.Context, *ResumeStudyRunRequest) (*ResumeStudyRunResponse, error)
	CompleteSearch(context.Context, *CompleteStudyRunSearchRequest) (*CompleteStudyRunSearchResponse, error)
	mustEmbedUnimplementedStudyRunServiceServer()
}

// UnimplementedStudyRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudyRunServiceServer struct {
}

func (UnimplementedStudyRunServiceServer) ListStudyRuns(context.Context, *ListStudyRunRequest) (*ListStudyRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudyRuns not implemented")
}
func (UnimplementedStudyRunServiceServer) CreateStudyRun(context.Context, *CreateStudyRunRequest) (*CreateStudyRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudyRun not implemented")
}
func (UnimplementedStudyRunServiceServer) GetStudyRun(context.Context, *GetStudyRunRequest) (*GetStudyRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyRun not implemented")
}
func (UnimplementedStudyRunServiceServer) UpdateStudyRun(context.Context, *UpdateStudyRunRequest) (*UpdateStudyRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudyRun not implemented")
}
func (UnimplementedStudyRunServiceServer) DeleteStudyRun(context.Context, *DeleteStudyRunRequest) (*DeleteStudyRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudyRun not implemented")
}
func (UnimplementedStudyRunServiceServer) GetStudyRunProfile(context.Context, *GetStudyRunProfileRequest) (*GetStudyRunProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyRunProfile not implemented")
}
func (UnimplementedStudyRunServiceServer) AbortStudyRun(context.Context, *AbortStudyRunRequest) (*AbortStudyRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortStudyRun not implemented")
}
func (UnimplementedStudyRunServiceServer) PauseStudyRun(context.Context, *PauseStudyRunRequest) (*PauseStudyRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseStudyRun not implemented")
}
func (UnimplementedStudyRunServiceServer) ResumeStudyRun(context.Context, *ResumeStudyRunRequest) (*ResumeStudyRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeStudyRun not implemented")
}
func (UnimplementedStudyRunServiceServer) CompleteSearch(context.Context, *CompleteStudyRunSearchRequest) (*CompleteStudyRunSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteSearch not implemented")
}
func (UnimplementedStudyRunServiceServer) mustEmbedUnimplementedStudyRunServiceServer() {}

// UnsafeStudyRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyRunServiceServer will
// result in compilation errors.
type UnsafeStudyRunServiceServer interface {
	mustEmbedUnimplementedStudyRunServiceServer()
}

func RegisterStudyRunServiceServer(s grpc.ServiceRegistrar, srv StudyRunServiceServer) {
	s.RegisterService(&StudyRunService_ServiceDesc, srv)
}

func _StudyRunService_ListStudyRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudyRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyRunServiceServer).ListStudyRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/ListStudyRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyRunServiceServer).ListStudyRuns(ctx, req.(*ListStudyRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyRunService_CreateStudyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudyRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyRunServiceServer).CreateStudyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/CreateStudyRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyRunServiceServer).CreateStudyRun(ctx, req.(*CreateStudyRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyRunService_GetStudyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudyRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyRunServiceServer).GetStudyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/GetStudyRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyRunServiceServer).GetStudyRun(ctx, req.(*GetStudyRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyRunService_UpdateStudyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudyRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyRunServiceServer).UpdateStudyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/UpdateStudyRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyRunServiceServer).UpdateStudyRun(ctx, req.(*UpdateStudyRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyRunService_DeleteStudyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudyRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyRunServiceServer).DeleteStudyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/DeleteStudyRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyRunServiceServer).DeleteStudyRun(ctx, req.(*DeleteStudyRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyRunService_GetStudyRunProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudyRunProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyRunServiceServer).GetStudyRunProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/GetStudyRunProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyRunServiceServer).GetStudyRunProfile(ctx, req.(*GetStudyRunProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyRunService_AbortStudyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortStudyRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyRunServiceServer).AbortStudyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/AbortStudyRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyRunServiceServer).AbortStudyRun(ctx, req.(*AbortStudyRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyRunService_PauseStudyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseStudyRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyRunServiceServer).PauseStudyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/PauseStudyRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyRunServiceServer).PauseStudyRun(ctx, req.(*PauseStudyRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyRunService_ResumeStudyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeStudyRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyRunServiceServer).ResumeStudyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/ResumeStudyRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyRunServiceServer).ResumeStudyRun(ctx, req.(*ResumeStudyRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyRunService_CompleteSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteStudyRunSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyRunServiceServer).CompleteSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.study.v1.StudyRunService/CompleteSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyRunServiceServer).CompleteSearch(ctx, req.(*CompleteStudyRunSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudyRunService_ServiceDesc is the grpc.ServiceDesc for StudyRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudyRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.study.v1.StudyRunService",
	HandlerType: (*StudyRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStudyRuns",
			Handler:    _StudyRunService_ListStudyRuns_Handler,
		},
		{
			MethodName: "CreateStudyRun",
			Handler:    _StudyRunService_CreateStudyRun_Handler,
		},
		{
			MethodName: "GetStudyRun",
			Handler:    _StudyRunService_GetStudyRun_Handler,
		},
		{
			MethodName: "UpdateStudyRun",
			Handler:    _StudyRunService_UpdateStudyRun_Handler,
		},
		{
			MethodName: "DeleteStudyRun",
			Handler:    _StudyRunService_DeleteStudyRun_Handler,
		},
		{
			MethodName: "GetStudyRunProfile",
			Handler:    _StudyRunService_GetStudyRunProfile_Handler,
		},
		{
			MethodName: "AbortStudyRun",
			Handler:    _StudyRunService_AbortStudyRun_Handler,
		},
		{
			MethodName: "PauseStudyRun",
			Handler:    _StudyRunService_PauseStudyRun_Handler,
		},
		{
			MethodName: "ResumeStudyRun",
			Handler:    _StudyRunService_ResumeStudyRun_Handler,
		},
		{
			MethodName: "CompleteSearch",
			Handler:    _StudyRunService_CompleteSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/studyrun/v1/studyrun.proto",
}
