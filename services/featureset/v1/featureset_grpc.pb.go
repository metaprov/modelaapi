// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/featureset/v1/featureset.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeaturesetServiceClient is the client API for FeaturesetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeaturesetServiceClient interface {
	ListFeaturesets(ctx context.Context, in *ListFeaturesetRequest, opts ...grpc.CallOption) (*ListFeaturesetResponse, error)
	CreateFeatureset(ctx context.Context, in *CreateFeaturesetRequest, opts ...grpc.CallOption) (*CreateFeaturesetResponse, error)
	GetFeatureset(ctx context.Context, in *GetFeaturesetRequest, opts ...grpc.CallOption) (*GetFeaturesetResponse, error)
	UpdateFeatureset(ctx context.Context, in *UpdateFeaturesetRequest, opts ...grpc.CallOption) (*UpdateFeaturesetResponse, error)
	DeleteFeatureset(ctx context.Context, in *DeleteFeaturesetRequest, opts ...grpc.CallOption) (*DeleteFeaturesetResponse, error)
}

type featuresetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeaturesetServiceClient(cc grpc.ClientConnInterface) FeaturesetServiceClient {
	return &featuresetServiceClient{cc}
}

func (c *featuresetServiceClient) ListFeaturesets(ctx context.Context, in *ListFeaturesetRequest, opts ...grpc.CallOption) (*ListFeaturesetResponse, error) {
	out := new(ListFeaturesetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureset.v1.FeaturesetService/ListFeaturesets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresetServiceClient) CreateFeatureset(ctx context.Context, in *CreateFeaturesetRequest, opts ...grpc.CallOption) (*CreateFeaturesetResponse, error) {
	out := new(CreateFeaturesetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureset.v1.FeaturesetService/CreateFeatureset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresetServiceClient) GetFeatureset(ctx context.Context, in *GetFeaturesetRequest, opts ...grpc.CallOption) (*GetFeaturesetResponse, error) {
	out := new(GetFeaturesetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureset.v1.FeaturesetService/GetFeatureset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresetServiceClient) UpdateFeatureset(ctx context.Context, in *UpdateFeaturesetRequest, opts ...grpc.CallOption) (*UpdateFeaturesetResponse, error) {
	out := new(UpdateFeaturesetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureset.v1.FeaturesetService/UpdateFeatureset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresetServiceClient) DeleteFeatureset(ctx context.Context, in *DeleteFeaturesetRequest, opts ...grpc.CallOption) (*DeleteFeaturesetResponse, error) {
	out := new(DeleteFeaturesetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.featureset.v1.FeaturesetService/DeleteFeatureset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeaturesetServiceServer is the server API for FeaturesetService service.
// All implementations must embed UnimplementedFeaturesetServiceServer
// for forward compatibility
type FeaturesetServiceServer interface {
	ListFeaturesets(context.Context, *ListFeaturesetRequest) (*ListFeaturesetResponse, error)
	CreateFeatureset(context.Context, *CreateFeaturesetRequest) (*CreateFeaturesetResponse, error)
	GetFeatureset(context.Context, *GetFeaturesetRequest) (*GetFeaturesetResponse, error)
	UpdateFeatureset(context.Context, *UpdateFeaturesetRequest) (*UpdateFeaturesetResponse, error)
	DeleteFeatureset(context.Context, *DeleteFeaturesetRequest) (*DeleteFeaturesetResponse, error)
	mustEmbedUnimplementedFeaturesetServiceServer()
}

// UnimplementedFeaturesetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeaturesetServiceServer struct {
}

func (UnimplementedFeaturesetServiceServer) ListFeaturesets(context.Context, *ListFeaturesetRequest) (*ListFeaturesetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeaturesets not implemented")
}
func (UnimplementedFeaturesetServiceServer) CreateFeatureset(context.Context, *CreateFeaturesetRequest) (*CreateFeaturesetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatureset not implemented")
}
func (UnimplementedFeaturesetServiceServer) GetFeatureset(context.Context, *GetFeaturesetRequest) (*GetFeaturesetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureset not implemented")
}
func (UnimplementedFeaturesetServiceServer) UpdateFeatureset(context.Context, *UpdateFeaturesetRequest) (*UpdateFeaturesetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureset not implemented")
}
func (UnimplementedFeaturesetServiceServer) DeleteFeatureset(context.Context, *DeleteFeaturesetRequest) (*DeleteFeaturesetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatureset not implemented")
}
func (UnimplementedFeaturesetServiceServer) mustEmbedUnimplementedFeaturesetServiceServer() {}

// UnsafeFeaturesetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeaturesetServiceServer will
// result in compilation errors.
type UnsafeFeaturesetServiceServer interface {
	mustEmbedUnimplementedFeaturesetServiceServer()
}

func RegisterFeaturesetServiceServer(s grpc.ServiceRegistrar, srv FeaturesetServiceServer) {
	s.RegisterService(&FeaturesetService_ServiceDesc, srv)
}

func _FeaturesetService_ListFeaturesets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeaturesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetServiceServer).ListFeaturesets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureset.v1.FeaturesetService/ListFeaturesets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetServiceServer).ListFeaturesets(ctx, req.(*ListFeaturesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesetService_CreateFeatureset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeaturesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetServiceServer).CreateFeatureset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureset.v1.FeaturesetService/CreateFeatureset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetServiceServer).CreateFeatureset(ctx, req.(*CreateFeaturesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesetService_GetFeatureset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeaturesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetServiceServer).GetFeatureset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureset.v1.FeaturesetService/GetFeatureset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetServiceServer).GetFeatureset(ctx, req.(*GetFeaturesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesetService_UpdateFeatureset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeaturesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetServiceServer).UpdateFeatureset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureset.v1.FeaturesetService/UpdateFeatureset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetServiceServer).UpdateFeatureset(ctx, req.(*UpdateFeaturesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesetService_DeleteFeatureset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeaturesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesetServiceServer).DeleteFeatureset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.featureset.v1.FeaturesetService/DeleteFeatureset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesetServiceServer).DeleteFeatureset(ctx, req.(*DeleteFeaturesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeaturesetService_ServiceDesc is the grpc.ServiceDesc for FeaturesetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeaturesetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.featureset.v1.FeaturesetService",
	HandlerType: (*FeaturesetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFeaturesets",
			Handler:    _FeaturesetService_ListFeaturesets_Handler,
		},
		{
			MethodName: "CreateFeatureset",
			Handler:    _FeaturesetService_CreateFeatureset_Handler,
		},
		{
			MethodName: "GetFeatureset",
			Handler:    _FeaturesetService_GetFeatureset_Handler,
		},
		{
			MethodName: "UpdateFeatureset",
			Handler:    _FeaturesetService_UpdateFeatureset_Handler,
		},
		{
			MethodName: "DeleteFeatureset",
			Handler:    _FeaturesetService_DeleteFeatureset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/featureset/v1/featureset.proto",
}
