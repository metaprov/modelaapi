syntax = "proto3";

option go_package = "github.com/metaprov/modeldapi/services/predictionpipeline/v1";
package github.com.metaprov.modeldapi.services.predictionpipeline.v1;


import "google/api/annotations.proto";
import "github.com/metaprov/modeldapi/pkg/apis/inference/v1alpha1/generated.proto";


message ListPredictionPipelinesRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message ListPredictionPipelinesResponse {
    github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipelineList items = 1;
}


message CreatePredictionPipelineResponse {}

message CreatePredictionPipelineRequest {
    github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipeline item = 1;
}

message UpdatePredictionPipelineRequest {
    github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipeline item = 1;
}

message UpdatePredictionPipelineResponse {

}

message GetPredictionPipelineRequest {
    string namespace = 1;
    string name      = 2;
}

message GetPredictionPipelineResponse {
    github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipeline item = 1;
    string yaml = 2;

}

message DeletePredictionPipelineRequest {
    string namespace = 1;
    string name      = 2;
}

message DeletePredictionPipelineResponse {

}

message DownloadPredictionPipelineRequest {
    string namespace = 1;
    string name      = 2;
}

// Answer the report in base 64
message DownloadPredictionPipelineResponse {
    bytes raw = 1;

}


service PredictionPipelineService {

    rpc ListPredictionPipelines(ListPredictionPipelinesRequest) returns (ListPredictionPipelinesResponse) {
        option (google.api.http).get = "/v1/predictionpipelines";
    }

    rpc CreatePredictionPipeline(CreatePredictionPipelineRequest) returns (CreatePredictionPipelineResponse) {
        option (google.api.http) = {
			post: "/v1/predictionpipelines"
			body: "predictionpipeline"
		};
    }

    rpc GetPredictionPipeline(GetPredictionPipelineRequest) returns (GetPredictionPipelineResponse) {
        option (google.api.http).get = "/v1/predictionpipelines/{name}";
    }

    rpc UpdatePredictionPipeline(UpdatePredictionPipelineRequest) returns (UpdatePredictionPipelineResponse) {
        option (google.api.http) = {
			put: "/v1/predictions/{predictionpipeline.metadata.name}"
			body: "predictionpipeline"
		};
    }

    rpc DeletePredictionPipeline(DeletePredictionPipelineRequest) returns (DeletePredictionPipelineResponse) {
        option (google.api.http).delete = "/v1/predictionpipelines/{name}";
    }

    rpc Download(DownloadPredictionPipelineRequest) returns (DownloadPredictionPipelineResponse) {
        option (google.api.http).get = "/api/v1alpha1/predictionpipelines/{name}:download";
    }


}