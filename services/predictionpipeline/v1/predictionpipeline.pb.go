// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: services/predictionpipeline/v1/predictionpipeline.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/inference/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListPredictionPipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListPredictionPipelinesRequest) Reset() {
	*x = ListPredictionPipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPredictionPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPredictionPipelinesRequest) ProtoMessage() {}

func (x *ListPredictionPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPredictionPipelinesRequest.ProtoReflect.Descriptor instead.
func (*ListPredictionPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{0}
}

func (x *ListPredictionPipelinesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListPredictionPipelinesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPredictionPipelinesRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListPredictionPipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *v1alpha1.PredictionPipelineList `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *ListPredictionPipelinesResponse) Reset() {
	*x = ListPredictionPipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPredictionPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPredictionPipelinesResponse) ProtoMessage() {}

func (x *ListPredictionPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPredictionPipelinesResponse.ProtoReflect.Descriptor instead.
func (*ListPredictionPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{1}
}

func (x *ListPredictionPipelinesResponse) GetItems() *v1alpha1.PredictionPipelineList {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreatePredictionPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePredictionPipelineResponse) Reset() {
	*x = CreatePredictionPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePredictionPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePredictionPipelineResponse) ProtoMessage() {}

func (x *CreatePredictionPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePredictionPipelineResponse.ProtoReflect.Descriptor instead.
func (*CreatePredictionPipelineResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{2}
}

type CreatePredictionPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.PredictionPipeline `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreatePredictionPipelineRequest) Reset() {
	*x = CreatePredictionPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePredictionPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePredictionPipelineRequest) ProtoMessage() {}

func (x *CreatePredictionPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePredictionPipelineRequest.ProtoReflect.Descriptor instead.
func (*CreatePredictionPipelineRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePredictionPipelineRequest) GetItem() *v1alpha1.PredictionPipeline {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdatePredictionPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.PredictionPipeline `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdatePredictionPipelineRequest) Reset() {
	*x = UpdatePredictionPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePredictionPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePredictionPipelineRequest) ProtoMessage() {}

func (x *UpdatePredictionPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePredictionPipelineRequest.ProtoReflect.Descriptor instead.
func (*UpdatePredictionPipelineRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePredictionPipelineRequest) GetItem() *v1alpha1.PredictionPipeline {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdatePredictionPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePredictionPipelineResponse) Reset() {
	*x = UpdatePredictionPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePredictionPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePredictionPipelineResponse) ProtoMessage() {}

func (x *UpdatePredictionPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePredictionPipelineResponse.ProtoReflect.Descriptor instead.
func (*UpdatePredictionPipelineResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{5}
}

type GetPredictionPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPredictionPipelineRequest) Reset() {
	*x = GetPredictionPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredictionPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredictionPipelineRequest) ProtoMessage() {}

func (x *GetPredictionPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredictionPipelineRequest.ProtoReflect.Descriptor instead.
func (*GetPredictionPipelineRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{6}
}

func (x *GetPredictionPipelineRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetPredictionPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPredictionPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.PredictionPipeline `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Yaml string                       `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetPredictionPipelineResponse) Reset() {
	*x = GetPredictionPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredictionPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredictionPipelineResponse) ProtoMessage() {}

func (x *GetPredictionPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredictionPipelineResponse.ProtoReflect.Descriptor instead.
func (*GetPredictionPipelineResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{7}
}

func (x *GetPredictionPipelineResponse) GetItem() *v1alpha1.PredictionPipeline {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetPredictionPipelineResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeletePredictionPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeletePredictionPipelineRequest) Reset() {
	*x = DeletePredictionPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePredictionPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePredictionPipelineRequest) ProtoMessage() {}

func (x *DeletePredictionPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePredictionPipelineRequest.ProtoReflect.Descriptor instead.
func (*DeletePredictionPipelineRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePredictionPipelineRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeletePredictionPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeletePredictionPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePredictionPipelineResponse) Reset() {
	*x = DeletePredictionPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePredictionPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePredictionPipelineResponse) ProtoMessage() {}

func (x *DeletePredictionPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePredictionPipelineResponse.ProtoReflect.Descriptor instead.
func (*DeletePredictionPipelineResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{9}
}

type DownloadPredictionPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DownloadPredictionPipelineRequest) Reset() {
	*x = DownloadPredictionPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadPredictionPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadPredictionPipelineRequest) ProtoMessage() {}

func (x *DownloadPredictionPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadPredictionPipelineRequest.ProtoReflect.Descriptor instead.
func (*DownloadPredictionPipelineRequest) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadPredictionPipelineRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DownloadPredictionPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Answer the report in base 64
type DownloadPredictionPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *DownloadPredictionPipelineResponse) Reset() {
	*x = DownloadPredictionPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadPredictionPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadPredictionPipelineResponse) ProtoMessage() {}

func (x *DownloadPredictionPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadPredictionPipelineResponse.ProtoReflect.Descriptor instead.
func (*DownloadPredictionPipelineResponse) Descriptor() ([]byte, []int) {
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP(), []int{11}
}

func (x *DownloadPredictionPipelineResponse) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

var File_services_predictionpipeline_v1_predictionpipeline_proto protoreflect.FileDescriptor

var file_services_predictionpipeline_v1_predictionpipeline_proto_rawDesc = []byte{
	0x0a, 0x37, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x90, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x22, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x84, 0x01, 0x0a, 0x1f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x61, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x22, 0x22, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d,
	0x6c, 0x22, 0x53, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x21, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x36, 0x0a, 0x22, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x32, 0xf9, 0x0c, 0x0a, 0x19, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf7, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x5c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x5d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0xfd, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x5d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5e, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x84, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x5a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xbf, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x5d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x5e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x1a, 0x59, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x02, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x5d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x94,
	0x02, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5f, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x60, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x7d, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescOnce sync.Once
	file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescData = file_services_predictionpipeline_v1_predictionpipeline_proto_rawDesc
)

func file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescGZIP() []byte {
	file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescOnce.Do(func() {
		file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescData)
	})
	return file_services_predictionpipeline_v1_predictionpipeline_proto_rawDescData
}

var file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_services_predictionpipeline_v1_predictionpipeline_proto_goTypes = []interface{}{
	(*ListPredictionPipelinesRequest)(nil),     // 0: github.com.metaprov.modeldapi.services.predictionpipeline.v1.ListPredictionPipelinesRequest
	(*ListPredictionPipelinesResponse)(nil),    // 1: github.com.metaprov.modeldapi.services.predictionpipeline.v1.ListPredictionPipelinesResponse
	(*CreatePredictionPipelineResponse)(nil),   // 2: github.com.metaprov.modeldapi.services.predictionpipeline.v1.CreatePredictionPipelineResponse
	(*CreatePredictionPipelineRequest)(nil),    // 3: github.com.metaprov.modeldapi.services.predictionpipeline.v1.CreatePredictionPipelineRequest
	(*UpdatePredictionPipelineRequest)(nil),    // 4: github.com.metaprov.modeldapi.services.predictionpipeline.v1.UpdatePredictionPipelineRequest
	(*UpdatePredictionPipelineResponse)(nil),   // 5: github.com.metaprov.modeldapi.services.predictionpipeline.v1.UpdatePredictionPipelineResponse
	(*GetPredictionPipelineRequest)(nil),       // 6: github.com.metaprov.modeldapi.services.predictionpipeline.v1.GetPredictionPipelineRequest
	(*GetPredictionPipelineResponse)(nil),      // 7: github.com.metaprov.modeldapi.services.predictionpipeline.v1.GetPredictionPipelineResponse
	(*DeletePredictionPipelineRequest)(nil),    // 8: github.com.metaprov.modeldapi.services.predictionpipeline.v1.DeletePredictionPipelineRequest
	(*DeletePredictionPipelineResponse)(nil),   // 9: github.com.metaprov.modeldapi.services.predictionpipeline.v1.DeletePredictionPipelineResponse
	(*DownloadPredictionPipelineRequest)(nil),  // 10: github.com.metaprov.modeldapi.services.predictionpipeline.v1.DownloadPredictionPipelineRequest
	(*DownloadPredictionPipelineResponse)(nil), // 11: github.com.metaprov.modeldapi.services.predictionpipeline.v1.DownloadPredictionPipelineResponse
	nil,                                     // 12: github.com.metaprov.modeldapi.services.predictionpipeline.v1.ListPredictionPipelinesRequest.LabelsEntry
	(*v1alpha1.PredictionPipelineList)(nil), // 13: github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipelineList
	(*v1alpha1.PredictionPipeline)(nil),     // 14: github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipeline
}
var file_services_predictionpipeline_v1_predictionpipeline_proto_depIdxs = []int32{
	12, // 0: github.com.metaprov.modeldapi.services.predictionpipeline.v1.ListPredictionPipelinesRequest.labels:type_name -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.ListPredictionPipelinesRequest.LabelsEntry
	13, // 1: github.com.metaprov.modeldapi.services.predictionpipeline.v1.ListPredictionPipelinesResponse.items:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipelineList
	14, // 2: github.com.metaprov.modeldapi.services.predictionpipeline.v1.CreatePredictionPipelineRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipeline
	14, // 3: github.com.metaprov.modeldapi.services.predictionpipeline.v1.UpdatePredictionPipelineRequest.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipeline
	14, // 4: github.com.metaprov.modeldapi.services.predictionpipeline.v1.GetPredictionPipelineResponse.item:type_name -> github.com.metaprov.modeldapi.pkg.apis.inference.v1alpha1.PredictionPipeline
	0,  // 5: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.ListPredictionPipelines:input_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.ListPredictionPipelinesRequest
	3,  // 6: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.CreatePredictionPipeline:input_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.CreatePredictionPipelineRequest
	6,  // 7: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.GetPredictionPipeline:input_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.GetPredictionPipelineRequest
	4,  // 8: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.UpdatePredictionPipeline:input_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.UpdatePredictionPipelineRequest
	8,  // 9: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.DeletePredictionPipeline:input_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.DeletePredictionPipelineRequest
	10, // 10: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.Download:input_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.DownloadPredictionPipelineRequest
	1,  // 11: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.ListPredictionPipelines:output_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.ListPredictionPipelinesResponse
	2,  // 12: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.CreatePredictionPipeline:output_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.CreatePredictionPipelineResponse
	7,  // 13: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.GetPredictionPipeline:output_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.GetPredictionPipelineResponse
	5,  // 14: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.UpdatePredictionPipeline:output_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.UpdatePredictionPipelineResponse
	9,  // 15: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.DeletePredictionPipeline:output_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.DeletePredictionPipelineResponse
	11, // 16: github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService.Download:output_type -> github.com.metaprov.modeldapi.services.predictionpipeline.v1.DownloadPredictionPipelineResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_services_predictionpipeline_v1_predictionpipeline_proto_init() }
func file_services_predictionpipeline_v1_predictionpipeline_proto_init() {
	if File_services_predictionpipeline_v1_predictionpipeline_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPredictionPipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPredictionPipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePredictionPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePredictionPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePredictionPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePredictionPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredictionPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredictionPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePredictionPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePredictionPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadPredictionPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadPredictionPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_predictionpipeline_v1_predictionpipeline_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_predictionpipeline_v1_predictionpipeline_proto_goTypes,
		DependencyIndexes: file_services_predictionpipeline_v1_predictionpipeline_proto_depIdxs,
		MessageInfos:      file_services_predictionpipeline_v1_predictionpipeline_proto_msgTypes,
	}.Build()
	File_services_predictionpipeline_v1_predictionpipeline_proto = out.File
	file_services_predictionpipeline_v1_predictionpipeline_proto_rawDesc = nil
	file_services_predictionpipeline_v1_predictionpipeline_proto_goTypes = nil
	file_services_predictionpipeline_v1_predictionpipeline_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PredictionPipelineServiceClient is the client API for PredictionPipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PredictionPipelineServiceClient interface {
	ListPredictionPipelines(ctx context.Context, in *ListPredictionPipelinesRequest, opts ...grpc.CallOption) (*ListPredictionPipelinesResponse, error)
	CreatePredictionPipeline(ctx context.Context, in *CreatePredictionPipelineRequest, opts ...grpc.CallOption) (*CreatePredictionPipelineResponse, error)
	GetPredictionPipeline(ctx context.Context, in *GetPredictionPipelineRequest, opts ...grpc.CallOption) (*GetPredictionPipelineResponse, error)
	UpdatePredictionPipeline(ctx context.Context, in *UpdatePredictionPipelineRequest, opts ...grpc.CallOption) (*UpdatePredictionPipelineResponse, error)
	DeletePredictionPipeline(ctx context.Context, in *DeletePredictionPipelineRequest, opts ...grpc.CallOption) (*DeletePredictionPipelineResponse, error)
	Download(ctx context.Context, in *DownloadPredictionPipelineRequest, opts ...grpc.CallOption) (*DownloadPredictionPipelineResponse, error)
}

type predictionPipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPredictionPipelineServiceClient(cc grpc.ClientConnInterface) PredictionPipelineServiceClient {
	return &predictionPipelineServiceClient{cc}
}

func (c *predictionPipelineServiceClient) ListPredictionPipelines(ctx context.Context, in *ListPredictionPipelinesRequest, opts ...grpc.CallOption) (*ListPredictionPipelinesResponse, error) {
	out := new(ListPredictionPipelinesResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/ListPredictionPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionPipelineServiceClient) CreatePredictionPipeline(ctx context.Context, in *CreatePredictionPipelineRequest, opts ...grpc.CallOption) (*CreatePredictionPipelineResponse, error) {
	out := new(CreatePredictionPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/CreatePredictionPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionPipelineServiceClient) GetPredictionPipeline(ctx context.Context, in *GetPredictionPipelineRequest, opts ...grpc.CallOption) (*GetPredictionPipelineResponse, error) {
	out := new(GetPredictionPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/GetPredictionPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionPipelineServiceClient) UpdatePredictionPipeline(ctx context.Context, in *UpdatePredictionPipelineRequest, opts ...grpc.CallOption) (*UpdatePredictionPipelineResponse, error) {
	out := new(UpdatePredictionPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/UpdatePredictionPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionPipelineServiceClient) DeletePredictionPipeline(ctx context.Context, in *DeletePredictionPipelineRequest, opts ...grpc.CallOption) (*DeletePredictionPipelineResponse, error) {
	out := new(DeletePredictionPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/DeletePredictionPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionPipelineServiceClient) Download(ctx context.Context, in *DownloadPredictionPipelineRequest, opts ...grpc.CallOption) (*DownloadPredictionPipelineResponse, error) {
	out := new(DownloadPredictionPipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PredictionPipelineServiceServer is the server API for PredictionPipelineService service.
type PredictionPipelineServiceServer interface {
	ListPredictionPipelines(context.Context, *ListPredictionPipelinesRequest) (*ListPredictionPipelinesResponse, error)
	CreatePredictionPipeline(context.Context, *CreatePredictionPipelineRequest) (*CreatePredictionPipelineResponse, error)
	GetPredictionPipeline(context.Context, *GetPredictionPipelineRequest) (*GetPredictionPipelineResponse, error)
	UpdatePredictionPipeline(context.Context, *UpdatePredictionPipelineRequest) (*UpdatePredictionPipelineResponse, error)
	DeletePredictionPipeline(context.Context, *DeletePredictionPipelineRequest) (*DeletePredictionPipelineResponse, error)
	Download(context.Context, *DownloadPredictionPipelineRequest) (*DownloadPredictionPipelineResponse, error)
}

// UnimplementedPredictionPipelineServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPredictionPipelineServiceServer struct {
}

func (*UnimplementedPredictionPipelineServiceServer) ListPredictionPipelines(context.Context, *ListPredictionPipelinesRequest) (*ListPredictionPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPredictionPipelines not implemented")
}
func (*UnimplementedPredictionPipelineServiceServer) CreatePredictionPipeline(context.Context, *CreatePredictionPipelineRequest) (*CreatePredictionPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePredictionPipeline not implemented")
}
func (*UnimplementedPredictionPipelineServiceServer) GetPredictionPipeline(context.Context, *GetPredictionPipelineRequest) (*GetPredictionPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictionPipeline not implemented")
}
func (*UnimplementedPredictionPipelineServiceServer) UpdatePredictionPipeline(context.Context, *UpdatePredictionPipelineRequest) (*UpdatePredictionPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePredictionPipeline not implemented")
}
func (*UnimplementedPredictionPipelineServiceServer) DeletePredictionPipeline(context.Context, *DeletePredictionPipelineRequest) (*DeletePredictionPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePredictionPipeline not implemented")
}
func (*UnimplementedPredictionPipelineServiceServer) Download(context.Context, *DownloadPredictionPipelineRequest) (*DownloadPredictionPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterPredictionPipelineServiceServer(s *grpc.Server, srv PredictionPipelineServiceServer) {
	s.RegisterService(&_PredictionPipelineService_serviceDesc, srv)
}

func _PredictionPipelineService_ListPredictionPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPredictionPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineServiceServer).ListPredictionPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/ListPredictionPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineServiceServer).ListPredictionPipelines(ctx, req.(*ListPredictionPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionPipelineService_CreatePredictionPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePredictionPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineServiceServer).CreatePredictionPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/CreatePredictionPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineServiceServer).CreatePredictionPipeline(ctx, req.(*CreatePredictionPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionPipelineService_GetPredictionPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictionPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineServiceServer).GetPredictionPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/GetPredictionPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineServiceServer).GetPredictionPipeline(ctx, req.(*GetPredictionPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionPipelineService_UpdatePredictionPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePredictionPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineServiceServer).UpdatePredictionPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/UpdatePredictionPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineServiceServer).UpdatePredictionPipeline(ctx, req.(*UpdatePredictionPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionPipelineService_DeletePredictionPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePredictionPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineServiceServer).DeletePredictionPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/DeletePredictionPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineServiceServer).DeletePredictionPipeline(ctx, req.(*DeletePredictionPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionPipelineService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadPredictionPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionPipelineServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionPipelineServiceServer).Download(ctx, req.(*DownloadPredictionPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PredictionPipelineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeldapi.services.predictionpipeline.v1.PredictionPipelineService",
	HandlerType: (*PredictionPipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPredictionPipelines",
			Handler:    _PredictionPipelineService_ListPredictionPipelines_Handler,
		},
		{
			MethodName: "CreatePredictionPipeline",
			Handler:    _PredictionPipelineService_CreatePredictionPipeline_Handler,
		},
		{
			MethodName: "GetPredictionPipeline",
			Handler:    _PredictionPipelineService_GetPredictionPipeline_Handler,
		},
		{
			MethodName: "UpdatePredictionPipeline",
			Handler:    _PredictionPipelineService_UpdatePredictionPipeline_Handler,
		},
		{
			MethodName: "DeletePredictionPipeline",
			Handler:    _PredictionPipelineService_DeletePredictionPipeline_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _PredictionPipelineService_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/predictionpipeline/v1/predictionpipeline.proto",
}
