// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: services/publishernext/publisherd.proto

package publishernext

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1"
	v1alpha12 "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1"
	v1alpha11 "github.com/metaprov/modeldapi/pkg/apis/training/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PublishModelRequest struct {
	DataproductName             string                           `protobuf:"bytes,1,opt,name=dataproductName,proto3" json:"dataproductName,omitempty"`
	DataproductNamespace        string                           `protobuf:"bytes,2,opt,name=dataproductNamespace,proto3" json:"dataproductNamespace,omitempty"`
	DataproductSpec             *v1alpha1.DataProductSpec        `protobuf:"bytes,3,opt,name=dataproductSpec,proto3" json:"dataproductSpec,omitempty"`
	DataproductversionName      string                           `protobuf:"bytes,4,opt,name=dataproductversionName,proto3" json:"dataproductversionName,omitempty"`
	DataproductversionNamespace string                           `protobuf:"bytes,5,opt,name=dataproductversionNamespace,proto3" json:"dataproductversionNamespace,omitempty"`
	DataproductversionSpec      *v1alpha1.DataProductVersionSpec `protobuf:"bytes,6,opt,name=dataproductversionSpec,proto3" json:"dataproductversionSpec,omitempty"`
	ModelName                   string                           `protobuf:"bytes,7,opt,name=modelName,proto3" json:"modelName,omitempty"`
	ModelNamespace              string                           `protobuf:"bytes,8,opt,name=modelNamespace,proto3" json:"modelNamespace,omitempty"`
	ModelSpec                   *v1alpha11.ModelSpec             `protobuf:"bytes,9,opt,name=modelSpec,proto3" json:"modelSpec,omitempty"`
	StudyName                   string                           `protobuf:"bytes,13,opt,name=studyName,proto3" json:"studyName,omitempty"`
	StudyNamespace              string                           `protobuf:"bytes,14,opt,name=studyNamespace,proto3" json:"studyNamespace,omitempty"`
	StudySpec                   *v1alpha11.StudySpec             `protobuf:"bytes,15,opt,name=studySpec,proto3" json:"studySpec,omitempty"`
	DatasourceName              string                           `protobuf:"bytes,16,opt,name=datasourceName,proto3" json:"datasourceName,omitempty"`
	DatasourceNamespace         string                           `protobuf:"bytes,17,opt,name=datasourceNamespace,proto3" json:"datasourceNamespace,omitempty"`
	DatasourceSpec              *v1alpha1.DataSourceSpec         `protobuf:"bytes,18,opt,name=datasourceSpec,proto3" json:"datasourceSpec,omitempty"`
	DatasetName                 string                           `protobuf:"bytes,19,opt,name=datasetName,proto3" json:"datasetName,omitempty"`
	DatasetNamespace            string                           `protobuf:"bytes,20,opt,name=datasetNamespace,proto3" json:"datasetNamespace,omitempty"`
	DatasetSpec                 *v1alpha1.DatasetSpec            `protobuf:"bytes,21,opt,name=datasetSpec,proto3" json:"datasetSpec,omitempty"`
	Provider                    string                           `protobuf:"bytes,22,opt,name=provider,proto3" json:"provider,omitempty"`
	ImageRegistrySecret         map[string][]byte                `protobuf:"bytes,23,rep,name=imageRegistrySecret,proto3" json:"imageRegistrySecret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Imagename                   string                           `protobuf:"bytes,24,opt,name=imagename,proto3" json:"imagename,omitempty"`
	Push                        bool                             `protobuf:"varint,25,opt,name=push,proto3" json:"push,omitempty"`
	BucketName                  string                           `protobuf:"bytes,26,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	BucketNamespace             string                           `protobuf:"bytes,27,opt,name=bucketNamespace,proto3" json:"bucketNamespace,omitempty"`
	BucketSpec                  *v1alpha12.VirtualBucketSpec     `protobuf:"bytes,28,opt,name=bucketSpec,proto3" json:"bucketSpec,omitempty"`
	CloudConnectionName         string                           `protobuf:"bytes,29,opt,name=cloudConnectionName,proto3" json:"cloudConnectionName,omitempty"`
	CloudsConnectionNamespace   string                           `protobuf:"bytes,30,opt,name=cloudsConnectionNamespace,proto3" json:"cloudsConnectionNamespace,omitempty"`
	CloudConnectionSpec         *v1alpha12.ConnectionSpec        `protobuf:"bytes,31,opt,name=cloudConnectionSpec,proto3" json:"cloudConnectionSpec,omitempty"`
	CloudSecret                 map[string][]byte                `protobuf:"bytes,32,rep,name=cloudSecret,proto3" json:"cloudSecret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ModelWeightsUri             string                           `protobuf:"bytes,33,opt,name=modelWeightsUri,proto3" json:"modelWeightsUri,omitempty"`
	PreprocessorWeightsUri      string                           `protobuf:"bytes,34,opt,name=preprocessorWeightsUri,proto3" json:"preprocessorWeightsUri,omitempty"`
	LabelEncoderUri             string                           `protobuf:"bytes,35,opt,name=labelEncoderUri,proto3" json:"labelEncoderUri,omitempty"`
	Kaniko                      bool                             `protobuf:"varint,36,opt,name=kaniko,proto3" json:"kaniko,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}                         `json:"-"`
	XXX_unrecognized            []byte                           `json:"-"`
	XXX_sizecache               int32                            `json:"-"`
}

func (m *PublishModelRequest) Reset()         { *m = PublishModelRequest{} }
func (m *PublishModelRequest) String() string { return proto.CompactTextString(m) }
func (*PublishModelRequest) ProtoMessage()    {}
func (*PublishModelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e40f21cd2751449f, []int{0}
}
func (m *PublishModelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishModelRequest.Unmarshal(m, b)
}
func (m *PublishModelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishModelRequest.Marshal(b, m, deterministic)
}
func (m *PublishModelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishModelRequest.Merge(m, src)
}
func (m *PublishModelRequest) XXX_Size() int {
	return xxx_messageInfo_PublishModelRequest.Size(m)
}
func (m *PublishModelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishModelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishModelRequest proto.InternalMessageInfo

func (m *PublishModelRequest) GetDataproductName() string {
	if m != nil {
		return m.DataproductName
	}
	return ""
}

func (m *PublishModelRequest) GetDataproductNamespace() string {
	if m != nil {
		return m.DataproductNamespace
	}
	return ""
}

func (m *PublishModelRequest) GetDataproductSpec() *v1alpha1.DataProductSpec {
	if m != nil {
		return m.DataproductSpec
	}
	return nil
}

func (m *PublishModelRequest) GetDataproductversionName() string {
	if m != nil {
		return m.DataproductversionName
	}
	return ""
}

func (m *PublishModelRequest) GetDataproductversionNamespace() string {
	if m != nil {
		return m.DataproductversionNamespace
	}
	return ""
}

func (m *PublishModelRequest) GetDataproductversionSpec() *v1alpha1.DataProductVersionSpec {
	if m != nil {
		return m.DataproductversionSpec
	}
	return nil
}

func (m *PublishModelRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *PublishModelRequest) GetModelNamespace() string {
	if m != nil {
		return m.ModelNamespace
	}
	return ""
}

func (m *PublishModelRequest) GetModelSpec() *v1alpha11.ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *PublishModelRequest) GetStudyName() string {
	if m != nil {
		return m.StudyName
	}
	return ""
}

func (m *PublishModelRequest) GetStudyNamespace() string {
	if m != nil {
		return m.StudyNamespace
	}
	return ""
}

func (m *PublishModelRequest) GetStudySpec() *v1alpha11.StudySpec {
	if m != nil {
		return m.StudySpec
	}
	return nil
}

func (m *PublishModelRequest) GetDatasourceName() string {
	if m != nil {
		return m.DatasourceName
	}
	return ""
}

func (m *PublishModelRequest) GetDatasourceNamespace() string {
	if m != nil {
		return m.DatasourceNamespace
	}
	return ""
}

func (m *PublishModelRequest) GetDatasourceSpec() *v1alpha1.DataSourceSpec {
	if m != nil {
		return m.DatasourceSpec
	}
	return nil
}

func (m *PublishModelRequest) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

func (m *PublishModelRequest) GetDatasetNamespace() string {
	if m != nil {
		return m.DatasetNamespace
	}
	return ""
}

func (m *PublishModelRequest) GetDatasetSpec() *v1alpha1.DatasetSpec {
	if m != nil {
		return m.DatasetSpec
	}
	return nil
}

func (m *PublishModelRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *PublishModelRequest) GetImageRegistrySecret() map[string][]byte {
	if m != nil {
		return m.ImageRegistrySecret
	}
	return nil
}

func (m *PublishModelRequest) GetImagename() string {
	if m != nil {
		return m.Imagename
	}
	return ""
}

func (m *PublishModelRequest) GetPush() bool {
	if m != nil {
		return m.Push
	}
	return false
}

func (m *PublishModelRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *PublishModelRequest) GetBucketNamespace() string {
	if m != nil {
		return m.BucketNamespace
	}
	return ""
}

func (m *PublishModelRequest) GetBucketSpec() *v1alpha12.VirtualBucketSpec {
	if m != nil {
		return m.BucketSpec
	}
	return nil
}

func (m *PublishModelRequest) GetCloudConnectionName() string {
	if m != nil {
		return m.CloudConnectionName
	}
	return ""
}

func (m *PublishModelRequest) GetCloudsConnectionNamespace() string {
	if m != nil {
		return m.CloudsConnectionNamespace
	}
	return ""
}

func (m *PublishModelRequest) GetCloudConnectionSpec() *v1alpha12.ConnectionSpec {
	if m != nil {
		return m.CloudConnectionSpec
	}
	return nil
}

func (m *PublishModelRequest) GetCloudSecret() map[string][]byte {
	if m != nil {
		return m.CloudSecret
	}
	return nil
}

func (m *PublishModelRequest) GetModelWeightsUri() string {
	if m != nil {
		return m.ModelWeightsUri
	}
	return ""
}

func (m *PublishModelRequest) GetPreprocessorWeightsUri() string {
	if m != nil {
		return m.PreprocessorWeightsUri
	}
	return ""
}

func (m *PublishModelRequest) GetLabelEncoderUri() string {
	if m != nil {
		return m.LabelEncoderUri
	}
	return ""
}

func (m *PublishModelRequest) GetKaniko() bool {
	if m != nil {
		return m.Kaniko
	}
	return false
}

type PublishModelResponse struct {
	ImageName            string   `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishModelResponse) Reset()         { *m = PublishModelResponse{} }
func (m *PublishModelResponse) String() string { return proto.CompactTextString(m) }
func (*PublishModelResponse) ProtoMessage()    {}
func (*PublishModelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e40f21cd2751449f, []int{1}
}
func (m *PublishModelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishModelResponse.Unmarshal(m, b)
}
func (m *PublishModelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishModelResponse.Marshal(b, m, deterministic)
}
func (m *PublishModelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishModelResponse.Merge(m, src)
}
func (m *PublishModelResponse) XXX_Size() int {
	return xxx_messageInfo_PublishModelResponse.Size(m)
}
func (m *PublishModelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishModelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishModelResponse proto.InternalMessageInfo

func (m *PublishModelResponse) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func init() {
	proto.RegisterType((*PublishModelRequest)(nil), "github.com.metaprov.modeld.services.publishernext.PublishModelRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "github.com.metaprov.modeld.services.publishernext.PublishModelRequest.CloudSecretEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "github.com.metaprov.modeld.services.publishernext.PublishModelRequest.ImageRegistrySecretEntry")
	proto.RegisterType((*PublishModelResponse)(nil), "github.com.metaprov.modeld.services.publishernext.PublishModelResponse")
}

func init() {
	proto.RegisterFile("services/publishernext/publisherd.proto", fileDescriptor_e40f21cd2751449f)
}

var fileDescriptor_e40f21cd2751449f = []byte{
	// 870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xc6, 0xdd, 0x76, 0xd9, 0x9d, 0x2d, 0x6d, 0x76, 0x12, 0x16, 0x37, 0x2d, 0x25, 0x04, 0x04,
	0x11, 0x17, 0x36, 0x1b, 0xaa, 0x0a, 0x21, 0x84, 0xa0, 0xbb, 0x29, 0x45, 0xa2, 0x68, 0xe5, 0x88,
	0x56, 0xe2, 0x06, 0x4d, 0xec, 0xc1, 0x19, 0xc5, 0xf1, 0x0c, 0x33, 0xe3, 0x40, 0xee, 0x79, 0x01,
	0x1e, 0x81, 0xa7, 0xe0, 0x55, 0x78, 0x1c, 0x34, 0x67, 0xe2, 0xdf, 0x75, 0xaa, 0x6c, 0xb7, 0x77,
	0x3e, 0xdf, 0xcc, 0xf9, 0xce, 0xf7, 0xf9, 0x1c, 0x8f, 0x07, 0x7d, 0xaa, 0xa8, 0x5c, 0xb1, 0x90,
	0x2a, 0x5f, 0x64, 0xb3, 0x84, 0xa9, 0x39, 0x95, 0x29, 0xfd, 0x53, 0x97, 0x51, 0xe4, 0x09, 0xc9,
	0x35, 0xc7, 0xa7, 0x31, 0xd3, 0xf3, 0x6c, 0xe6, 0x85, 0x7c, 0xe9, 0x2d, 0xa9, 0x26, 0x42, 0xf2,
	0x95, 0xb7, 0xe4, 0x11, 0x4d, 0x22, 0x2f, 0xe7, 0xf0, 0x6a, 0x1c, 0xfd, 0x67, 0x65, 0x8a, 0x9f,
	0xa7, 0xf8, 0x36, 0x85, 0x08, 0xe6, 0x8b, 0x45, 0xec, 0x13, 0xc1, 0x94, 0xaf, 0x25, 0x61, 0x29,
	0x4b, 0x63, 0x7f, 0x75, 0x4a, 0x12, 0x31, 0x27, 0xa7, 0x7e, 0x4c, 0x53, 0x2a, 0x89, 0xa6, 0x9b,
	0xe2, 0xfd, 0xf3, 0x1d, 0x99, 0x22, 0xa2, 0xc9, 0x76, 0x96, 0xc9, 0x8e, 0x2c, 0x2c, 0xfd, 0x4d,
	0x6e, 0xa7, 0x19, 0xfe, 0x77, 0x8c, 0xba, 0x17, 0xd6, 0xe8, 0x73, 0x93, 0x1c, 0xd0, 0xdf, 0x33,
	0xaa, 0x34, 0x1e, 0xa1, 0xbb, 0xa6, 0xbe, 0x90, 0x3c, 0xca, 0x42, 0xfd, 0x13, 0x59, 0x52, 0xd7,
	0x19, 0x38, 0xa3, 0xc3, 0xa0, 0x09, 0xe3, 0x31, 0xea, 0x35, 0x20, 0x25, 0x48, 0x48, 0xdd, 0x1b,
	0xb0, 0xbd, 0x75, 0x0d, 0xf3, 0x1a, 0xfb, 0x54, 0xd0, 0xd0, 0xdd, 0x1b, 0x38, 0xa3, 0xa3, 0xf1,
	0xc4, 0xdb, 0xde, 0x19, 0x22, 0x98, 0x27, 0x16, 0xb1, 0x67, 0x6c, 0x79, 0x26, 0xdd, 0xcb, 0x5d,
	0x79, 0xe7, 0x44, 0x93, 0x8b, 0x92, 0x2c, 0x68, 0xb2, 0xe3, 0xc7, 0xe8, 0xa4, 0x02, 0xad, 0xa8,
	0x54, 0x8c, 0xa7, 0xe0, 0xea, 0x26, 0xc8, 0xdc, 0xb2, 0x8a, 0xbf, 0x45, 0xf7, 0xdb, 0x57, 0xac,
	0xc7, 0x5b, 0x90, 0xfc, 0xaa, 0x2d, 0xf8, 0x2f, 0xa7, 0xad, 0x34, 0x58, 0xde, 0x07, 0xcb, 0x3f,
	0x5e, 0xdb, 0xf2, 0x8b, 0x92, 0x33, 0xd8, 0x52, 0x0b, 0x3f, 0x40, 0x87, 0x40, 0x09, 0x9e, 0xdf,
	0x06, 0xd9, 0x25, 0x80, 0x3f, 0x41, 0x77, 0x8a, 0xc0, 0x3a, 0x3b, 0x80, 0x2d, 0x0d, 0x14, 0x93,
	0x0d, 0x0b, 0xc8, 0x3f, 0x04, 0xf9, 0x67, 0xbb, 0xca, 0xcf, 0x3f, 0x8c, 0xd2, 0xc2, 0xf3, 0x9c,
	0x2a, 0x28, 0x59, 0x8d, 0x50, 0xa5, 0xb3, 0x68, 0x0d, 0x42, 0xdf, 0xb1, 0x42, 0x0b, 0xc0, 0x08,
	0x2d, 0x02, 0x2b, 0xf4, 0x8e, 0x15, 0x5a, 0x47, 0x8d, 0x50, 0x40, 0x40, 0xe8, 0xdd, 0xeb, 0x0a,
	0x9d, 0xe6, 0x54, 0x41, 0xc9, 0x6a, 0xa4, 0x98, 0x77, 0xad, 0x78, 0x26, 0x43, 0x0a, 0x6a, 0x3b,
	0x56, 0x4a, 0x1d, 0xc5, 0x9f, 0xa3, 0x6e, 0x1d, 0xb1, 0xba, 0x8f, 0x61, 0x73, 0xdb, 0x12, 0x4e,
	0xaa, 0xcc, 0xe0, 0x00, 0x83, 0x83, 0xf3, 0xd7, 0x9f, 0x94, 0x69, 0xc1, 0x15, 0x34, 0xb8, 0xf1,
	0x00, 0x1d, 0x01, 0x42, 0xed, 0x57, 0xde, 0x05, 0x5d, 0x55, 0x08, 0x7f, 0x86, 0x3a, 0x95, 0xd0,
	0xca, 0xef, 0xc1, 0xb6, 0x4b, 0x38, 0x0e, 0x0b, 0x36, 0x10, 0xfe, 0x2e, 0x08, 0xff, 0xee, 0xf5,
	0x85, 0x6f, 0x88, 0x82, 0x2a, 0x2b, 0xee, 0xa3, 0x03, 0xc3, 0xc0, 0x22, 0x2a, 0xdd, 0x13, 0x10,
	0x52, 0xc4, 0xf8, 0x6f, 0x07, 0x75, 0xd9, 0x92, 0xc4, 0x34, 0xa0, 0x31, 0x53, 0x5a, 0xae, 0xa7,
	0x34, 0x94, 0x54, 0xbb, 0xef, 0x0d, 0xf6, 0x46, 0x47, 0xe3, 0x5f, 0xbd, 0x2b, 0x9f, 0xfc, 0x5e,
	0xcb, 0xf1, 0xe8, 0xfd, 0x70, 0xb9, 0xc2, 0x24, 0xd5, 0x72, 0x1d, 0xb4, 0xd5, 0x36, 0x33, 0x0d,
	0x70, 0x6a, 0x5e, 0xb0, 0x6b, 0x67, 0xba, 0x00, 0x30, 0x46, 0x37, 0x45, 0xa6, 0xe6, 0xee, 0xbd,
	0x81, 0x33, 0x3a, 0x08, 0xe0, 0x19, 0x3f, 0x44, 0x68, 0x96, 0x85, 0x8b, 0x4d, 0x4f, 0xfa, 0x90,
	0x52, 0x41, 0xcc, 0xf1, 0x5c, 0x46, 0xb6, 0x23, 0xf7, 0xed, 0xf1, 0xdc, 0x80, 0xf1, 0x3c, 0x67,
	0x82, 0x7e, 0x3c, 0x80, 0x7e, 0x3c, 0xdb, 0xb5, 0x1f, 0xf0, 0xf3, 0x28, 0x1b, 0xf2, 0x82, 0x49,
	0x9d, 0x91, 0xe4, 0x49, 0xc1, 0x17, 0x54, 0xb8, 0xcd, 0xa0, 0x87, 0x09, 0xcf, 0xa2, 0x33, 0x9e,
	0xa6, 0x34, 0xd4, 0xf9, 0x01, 0xfb, 0xbe, 0x1d, 0xf4, 0x96, 0x25, 0xfc, 0x35, 0xba, 0x07, 0xb0,
	0xaa, 0xe3, 0xd6, 0xcf, 0x43, 0xc8, 0xdb, 0xbe, 0x01, 0xff, 0x71, 0xa9, 0x1e, 0x58, 0xfc, 0xe0,
	0x6a, 0x3f, 0x92, 0x86, 0xc5, 0x3a, 0x59, 0xd0, 0x56, 0x01, 0xaf, 0xd1, 0x11, 0xc0, 0x9b, 0xc9,
	0x1a, 0xc0, 0x64, 0xbd, 0x7c, 0x43, 0x93, 0x75, 0x56, 0x32, 0xdb, 0x89, 0xaa, 0xd6, 0x32, 0x7d,
	0x07, 0xca, 0x97, 0x94, 0xc5, 0x73, 0xad, 0x7e, 0x96, 0xcc, 0xfd, 0xd0, 0xf6, 0xbd, 0x01, 0x9b,
	0x3f, 0x9e, 0x90, 0x54, 0x48, 0x1e, 0x52, 0xa5, 0xb8, 0xac, 0x24, 0x0c, 0xed, 0x1f, 0xaf, 0x7d,
	0xd5, 0x54, 0x48, 0xc8, 0x8c, 0x26, 0x93, 0x34, 0xe4, 0x11, 0x95, 0x26, 0xe1, 0x23, 0x5b, 0xa1,
	0x01, 0xe3, 0x13, 0xb4, 0xbf, 0x20, 0x29, 0x5b, 0x70, 0xf7, 0x63, 0x98, 0xdc, 0x4d, 0xd4, 0x7f,
	0x8a, 0xdc, 0x6d, 0x9f, 0x07, 0xee, 0xa0, 0xbd, 0x05, 0x5d, 0x6f, 0xae, 0x12, 0xe6, 0x11, 0xf7,
	0xd0, 0xad, 0x15, 0x49, 0x32, 0x7b, 0x5f, 0xb8, 0x1d, 0xd8, 0xe0, 0xab, 0x1b, 0x5f, 0x3a, 0xfd,
	0x6f, 0x50, 0xa7, 0xf9, 0x32, 0xae, 0x92, 0x3f, 0x7c, 0x84, 0x7a, 0xf5, 0x17, 0xac, 0x04, 0x4f,
	0x15, 0x35, 0x5f, 0x23, 0xe8, 0xab, 0x5c, 0x6a, 0x4a, 0x60, 0xfc, 0xaf, 0x83, 0x8e, 0x2f, 0x8a,
	0xfb, 0xe2, 0xd4, 0x36, 0x0e, 0xff, 0xe3, 0xa0, 0xdb, 0x55, 0x32, 0xfc, 0xf4, 0xcd, 0xb4, 0xbb,
	0xff, 0xfd, 0xb5, 0x79, 0xac, 0xab, 0xe1, 0x5b, 0x4f, 0x1e, 0xff, 0xf2, 0xe8, 0xd5, 0x77, 0xc2,
	0xf6, 0xdb, 0xf1, 0x6c, 0x1f, 0x6e, 0x82, 0x5f, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xd0,
	0x62, 0x9a, 0x3e, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublisherdServiceClient is the client API for PublisherdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublisherdServiceClient interface {
	PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error)
}

type publisherdServiceClient struct {
	cc *grpc.ClientConn
}

func NewPublisherdServiceClient(cc *grpc.ClientConn) PublisherdServiceClient {
	return &publisherdServiceClient{cc}
}

func (c *publisherdServiceClient) PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error) {
	out := new(PublishModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.publishernext.PublisherdService/PublishModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherdServiceServer is the server API for PublisherdService service.
type PublisherdServiceServer interface {
	PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error)
}

// UnimplementedPublisherdServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPublisherdServiceServer struct {
}

func (*UnimplementedPublisherdServiceServer) PublishModel(ctx context.Context, req *PublishModelRequest) (*PublishModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishModel not implemented")
}

func RegisterPublisherdServiceServer(s *grpc.Server, srv PublisherdServiceServer) {
	s.RegisterService(&_PublisherdService_serviceDesc, srv)
}

func _PublisherdService_PublishModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherdServiceServer).PublishModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.publishernext.PublisherdService/PublishModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherdServiceServer).PublishModel(ctx, req.(*PublishModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublisherdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeld.services.publishernext.PublisherdService",
	HandlerType: (*PublisherdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishModel",
			Handler:    _PublisherdService_PublishModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/publishernext/publisherd.proto",
}
