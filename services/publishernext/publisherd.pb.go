// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: services/publishernext/publisherd.proto

package publishernext

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1"
	v1alpha12 "github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1"
	v1alpha11 "github.com/metaprov/modeldapi/pkg/apis/training/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PublishModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataproductName             string                           `protobuf:"bytes,1,opt,name=dataproductName,proto3" json:"dataproductName,omitempty"`
	DataproductNamespace        string                           `protobuf:"bytes,2,opt,name=dataproductNamespace,proto3" json:"dataproductNamespace,omitempty"`
	DataproductSpec             *v1alpha1.DataProductSpec        `protobuf:"bytes,3,opt,name=dataproductSpec,proto3" json:"dataproductSpec,omitempty"`
	DataproductversionName      string                           `protobuf:"bytes,4,opt,name=dataproductversionName,proto3" json:"dataproductversionName,omitempty"`
	DataproductversionNamespace string                           `protobuf:"bytes,5,opt,name=dataproductversionNamespace,proto3" json:"dataproductversionNamespace,omitempty"`
	DataproductversionSpec      *v1alpha1.DataProductVersionSpec `protobuf:"bytes,6,opt,name=dataproductversionSpec,proto3" json:"dataproductversionSpec,omitempty"`
	ModelName                   string                           `protobuf:"bytes,7,opt,name=modelName,proto3" json:"modelName,omitempty"`
	ModelNamespace              string                           `protobuf:"bytes,8,opt,name=modelNamespace,proto3" json:"modelNamespace,omitempty"`
	ModelSpec                   *v1alpha11.ModelSpec             `protobuf:"bytes,9,opt,name=modelSpec,proto3" json:"modelSpec,omitempty"`
	StudyName                   string                           `protobuf:"bytes,13,opt,name=studyName,proto3" json:"studyName,omitempty"`
	StudyNamespace              string                           `protobuf:"bytes,14,opt,name=studyNamespace,proto3" json:"studyNamespace,omitempty"`
	StudySpec                   *v1alpha11.StudySpec             `protobuf:"bytes,15,opt,name=studySpec,proto3" json:"studySpec,omitempty"`
	DatasourceName              string                           `protobuf:"bytes,16,opt,name=datasourceName,proto3" json:"datasourceName,omitempty"`
	DatasourceNamespace         string                           `protobuf:"bytes,17,opt,name=datasourceNamespace,proto3" json:"datasourceNamespace,omitempty"`
	DatasourceSpec              *v1alpha1.DataSourceSpec         `protobuf:"bytes,18,opt,name=datasourceSpec,proto3" json:"datasourceSpec,omitempty"`
	DatasetName                 string                           `protobuf:"bytes,19,opt,name=datasetName,proto3" json:"datasetName,omitempty"`
	DatasetNamespace            string                           `protobuf:"bytes,20,opt,name=datasetNamespace,proto3" json:"datasetNamespace,omitempty"`
	DatasetSpec                 *v1alpha1.DatasetSpec            `protobuf:"bytes,21,opt,name=datasetSpec,proto3" json:"datasetSpec,omitempty"`
	Provider                    string                           `protobuf:"bytes,22,opt,name=provider,proto3" json:"provider,omitempty"`                                                                                                               // the image registry provider
	ImageRegistrySecret         map[string][]byte                `protobuf:"bytes,23,rep,name=imageRegistrySecret,proto3" json:"imageRegistrySecret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the image registry login details.
	Imagename                   string                           `protobuf:"bytes,24,opt,name=imagename,proto3" json:"imagename,omitempty"`
	Push                        bool                             `protobuf:"varint,25,opt,name=push,proto3" json:"push,omitempty"`
	BucketName                  string                           `protobuf:"bytes,26,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	BucketNamespace             string                           `protobuf:"bytes,27,opt,name=bucketNamespace,proto3" json:"bucketNamespace,omitempty"`
	BucketSpec                  *v1alpha12.VirtualBucketSpec     `protobuf:"bytes,28,opt,name=bucketSpec,proto3" json:"bucketSpec,omitempty"`
	CloudConnectionName         string                           `protobuf:"bytes,29,opt,name=cloudConnectionName,proto3" json:"cloudConnectionName,omitempty"`
	CloudsConnectionNamespace   string                           `protobuf:"bytes,30,opt,name=cloudsConnectionNamespace,proto3" json:"cloudsConnectionNamespace,omitempty"`
	CloudConnectionSpec         *v1alpha12.ConnectionSpec        `protobuf:"bytes,31,opt,name=cloudConnectionSpec,proto3" json:"cloudConnectionSpec,omitempty"`
	CloudSecret                 map[string][]byte                `protobuf:"bytes,32,rep,name=cloudSecret,proto3" json:"cloudSecret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the image registry login details.
	ModelWeightsUri             string                           `protobuf:"bytes,33,opt,name=modelWeightsUri,proto3" json:"modelWeightsUri,omitempty"`
	PreprocessorWeightsUri      string                           `protobuf:"bytes,34,opt,name=preprocessorWeightsUri,proto3" json:"preprocessorWeightsUri,omitempty"`
	LabelEncoderUri             string                           `protobuf:"bytes,35,opt,name=labelEncoderUri,proto3" json:"labelEncoderUri,omitempty"`
	Kaniko                      bool                             `protobuf:"varint,36,opt,name=kaniko,proto3" json:"kaniko,omitempty"`
}

func (x *PublishModelRequest) Reset() {
	*x = PublishModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_publishernext_publisherd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishModelRequest) ProtoMessage() {}

func (x *PublishModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_publishernext_publisherd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishModelRequest.ProtoReflect.Descriptor instead.
func (*PublishModelRequest) Descriptor() ([]byte, []int) {
	return file_services_publishernext_publisherd_proto_rawDescGZIP(), []int{0}
}

func (x *PublishModelRequest) GetDataproductName() string {
	if x != nil {
		return x.DataproductName
	}
	return ""
}

func (x *PublishModelRequest) GetDataproductNamespace() string {
	if x != nil {
		return x.DataproductNamespace
	}
	return ""
}

func (x *PublishModelRequest) GetDataproductSpec() *v1alpha1.DataProductSpec {
	if x != nil {
		return x.DataproductSpec
	}
	return nil
}

func (x *PublishModelRequest) GetDataproductversionName() string {
	if x != nil {
		return x.DataproductversionName
	}
	return ""
}

func (x *PublishModelRequest) GetDataproductversionNamespace() string {
	if x != nil {
		return x.DataproductversionNamespace
	}
	return ""
}

func (x *PublishModelRequest) GetDataproductversionSpec() *v1alpha1.DataProductVersionSpec {
	if x != nil {
		return x.DataproductversionSpec
	}
	return nil
}

func (x *PublishModelRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *PublishModelRequest) GetModelNamespace() string {
	if x != nil {
		return x.ModelNamespace
	}
	return ""
}

func (x *PublishModelRequest) GetModelSpec() *v1alpha11.ModelSpec {
	if x != nil {
		return x.ModelSpec
	}
	return nil
}

func (x *PublishModelRequest) GetStudyName() string {
	if x != nil {
		return x.StudyName
	}
	return ""
}

func (x *PublishModelRequest) GetStudyNamespace() string {
	if x != nil {
		return x.StudyNamespace
	}
	return ""
}

func (x *PublishModelRequest) GetStudySpec() *v1alpha11.StudySpec {
	if x != nil {
		return x.StudySpec
	}
	return nil
}

func (x *PublishModelRequest) GetDatasourceName() string {
	if x != nil {
		return x.DatasourceName
	}
	return ""
}

func (x *PublishModelRequest) GetDatasourceNamespace() string {
	if x != nil {
		return x.DatasourceNamespace
	}
	return ""
}

func (x *PublishModelRequest) GetDatasourceSpec() *v1alpha1.DataSourceSpec {
	if x != nil {
		return x.DatasourceSpec
	}
	return nil
}

func (x *PublishModelRequest) GetDatasetName() string {
	if x != nil {
		return x.DatasetName
	}
	return ""
}

func (x *PublishModelRequest) GetDatasetNamespace() string {
	if x != nil {
		return x.DatasetNamespace
	}
	return ""
}

func (x *PublishModelRequest) GetDatasetSpec() *v1alpha1.DatasetSpec {
	if x != nil {
		return x.DatasetSpec
	}
	return nil
}

func (x *PublishModelRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *PublishModelRequest) GetImageRegistrySecret() map[string][]byte {
	if x != nil {
		return x.ImageRegistrySecret
	}
	return nil
}

func (x *PublishModelRequest) GetImagename() string {
	if x != nil {
		return x.Imagename
	}
	return ""
}

func (x *PublishModelRequest) GetPush() bool {
	if x != nil {
		return x.Push
	}
	return false
}

func (x *PublishModelRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *PublishModelRequest) GetBucketNamespace() string {
	if x != nil {
		return x.BucketNamespace
	}
	return ""
}

func (x *PublishModelRequest) GetBucketSpec() *v1alpha12.VirtualBucketSpec {
	if x != nil {
		return x.BucketSpec
	}
	return nil
}

func (x *PublishModelRequest) GetCloudConnectionName() string {
	if x != nil {
		return x.CloudConnectionName
	}
	return ""
}

func (x *PublishModelRequest) GetCloudsConnectionNamespace() string {
	if x != nil {
		return x.CloudsConnectionNamespace
	}
	return ""
}

func (x *PublishModelRequest) GetCloudConnectionSpec() *v1alpha12.ConnectionSpec {
	if x != nil {
		return x.CloudConnectionSpec
	}
	return nil
}

func (x *PublishModelRequest) GetCloudSecret() map[string][]byte {
	if x != nil {
		return x.CloudSecret
	}
	return nil
}

func (x *PublishModelRequest) GetModelWeightsUri() string {
	if x != nil {
		return x.ModelWeightsUri
	}
	return ""
}

func (x *PublishModelRequest) GetPreprocessorWeightsUri() string {
	if x != nil {
		return x.PreprocessorWeightsUri
	}
	return ""
}

func (x *PublishModelRequest) GetLabelEncoderUri() string {
	if x != nil {
		return x.LabelEncoderUri
	}
	return ""
}

func (x *PublishModelRequest) GetKaniko() bool {
	if x != nil {
		return x.Kaniko
	}
	return false
}

type PublishModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName string `protobuf:"bytes,1,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
}

func (x *PublishModelResponse) Reset() {
	*x = PublishModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_publishernext_publisherd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishModelResponse) ProtoMessage() {}

func (x *PublishModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_publishernext_publisherd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishModelResponse.ProtoReflect.Descriptor instead.
func (*PublishModelResponse) Descriptor() ([]byte, []int) {
	return file_services_publishernext_publisherd_proto_rawDescGZIP(), []int{1}
}

func (x *PublishModelResponse) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

var File_services_publishernext_publisherd_proto protoreflect.FileDescriptor

var file_services_publishernext_publisherd_proto_rawDesc = []byte{
	0x0a, 0x27, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x78, 0x74, 0x1a, 0x48, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x11, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x61, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x09, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x53, 0x70, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x30,
	0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x77,
	0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x79, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x78, 0x74,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x55, 0x72, 0x69, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x55, 0x72, 0x69, 0x12, 0x36, 0x0a, 0x16,
	0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x55, 0x72, 0x69, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x55, 0x72, 0x69, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x55, 0x72, 0x69, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x16,
	0x0a, 0x06, 0x6b, 0x61, 0x6e, 0x69, 0x6b, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6b, 0x61, 0x6e, 0x69, 0x6b, 0x6f, 0x1a, 0x46, 0x0a, 0x18, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34,
	0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0xb7, 0x01, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x46, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x78, 0x74, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x36,
	0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x78, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_publishernext_publisherd_proto_rawDescOnce sync.Once
	file_services_publishernext_publisherd_proto_rawDescData = file_services_publishernext_publisherd_proto_rawDesc
)

func file_services_publishernext_publisherd_proto_rawDescGZIP() []byte {
	file_services_publishernext_publisherd_proto_rawDescOnce.Do(func() {
		file_services_publishernext_publisherd_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_publishernext_publisherd_proto_rawDescData)
	})
	return file_services_publishernext_publisherd_proto_rawDescData
}

var file_services_publishernext_publisherd_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_services_publishernext_publisherd_proto_goTypes = []interface{}{
	(*PublishModelRequest)(nil),             // 0: github.com.metaprov.modeld.services.publishernext.PublishModelRequest
	(*PublishModelResponse)(nil),            // 1: github.com.metaprov.modeld.services.publishernext.PublishModelResponse
	nil,                                     // 2: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.ImageRegistrySecretEntry
	nil,                                     // 3: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.CloudSecretEntry
	(*v1alpha1.DataProductSpec)(nil),        // 4: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProductSpec
	(*v1alpha1.DataProductVersionSpec)(nil), // 5: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProductVersionSpec
	(*v1alpha11.ModelSpec)(nil),             // 6: github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.ModelSpec
	(*v1alpha11.StudySpec)(nil),             // 7: github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.StudySpec
	(*v1alpha1.DataSourceSpec)(nil),         // 8: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataSourceSpec
	(*v1alpha1.DatasetSpec)(nil),            // 9: github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DatasetSpec
	(*v1alpha12.VirtualBucketSpec)(nil),     // 10: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucketSpec
	(*v1alpha12.ConnectionSpec)(nil),        // 11: github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.ConnectionSpec
}
var file_services_publishernext_publisherd_proto_depIdxs = []int32{
	4,  // 0: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.dataproductSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProductSpec
	5,  // 1: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.dataproductversionSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataProductVersionSpec
	6,  // 2: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.modelSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.ModelSpec
	7,  // 3: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.studySpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.training.v1alpha1.StudySpec
	8,  // 4: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.datasourceSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DataSourceSpec
	9,  // 5: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.datasetSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.data.v1alpha1.DatasetSpec
	2,  // 6: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.imageRegistrySecret:type_name -> github.com.metaprov.modeld.services.publishernext.PublishModelRequest.ImageRegistrySecretEntry
	10, // 7: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.bucketSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.VirtualBucketSpec
	11, // 8: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.cloudConnectionSpec:type_name -> github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.ConnectionSpec
	3,  // 9: github.com.metaprov.modeld.services.publishernext.PublishModelRequest.cloudSecret:type_name -> github.com.metaprov.modeld.services.publishernext.PublishModelRequest.CloudSecretEntry
	0,  // 10: github.com.metaprov.modeld.services.publishernext.PublisherdService.PublishModel:input_type -> github.com.metaprov.modeld.services.publishernext.PublishModelRequest
	1,  // 11: github.com.metaprov.modeld.services.publishernext.PublisherdService.PublishModel:output_type -> github.com.metaprov.modeld.services.publishernext.PublishModelResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_services_publishernext_publisherd_proto_init() }
func file_services_publishernext_publisherd_proto_init() {
	if File_services_publishernext_publisherd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_publishernext_publisherd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_publishernext_publisherd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_publishernext_publisherd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_publishernext_publisherd_proto_goTypes,
		DependencyIndexes: file_services_publishernext_publisherd_proto_depIdxs,
		MessageInfos:      file_services_publishernext_publisherd_proto_msgTypes,
	}.Build()
	File_services_publishernext_publisherd_proto = out.File
	file_services_publishernext_publisherd_proto_rawDesc = nil
	file_services_publishernext_publisherd_proto_goTypes = nil
	file_services_publishernext_publisherd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PublisherdServiceClient is the client API for PublisherdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublisherdServiceClient interface {
	PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error)
}

type publisherdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherdServiceClient(cc grpc.ClientConnInterface) PublisherdServiceClient {
	return &publisherdServiceClient{cc}
}

func (c *publisherdServiceClient) PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error) {
	out := new(PublishModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modeld.services.publishernext.PublisherdService/PublishModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherdServiceServer is the server API for PublisherdService service.
type PublisherdServiceServer interface {
	PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error)
}

// UnimplementedPublisherdServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPublisherdServiceServer struct {
}

func (*UnimplementedPublisherdServiceServer) PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishModel not implemented")
}

func RegisterPublisherdServiceServer(s *grpc.Server, srv PublisherdServiceServer) {
	s.RegisterService(&_PublisherdService_serviceDesc, srv)
}

func _PublisherdService_PublishModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherdServiceServer).PublishModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modeld.services.publishernext.PublisherdService/PublishModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherdServiceServer).PublishModel(ctx, req.(*PublishModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublisherdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modeld.services.publishernext.PublisherdService",
	HandlerType: (*PublisherdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishModel",
			Handler:    _PublisherdService_PublishModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/publishernext/publisherd.proto",
}
