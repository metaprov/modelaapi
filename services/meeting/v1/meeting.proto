syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/meeting/v1";

package github.com.metaprov.modelaapi.services.meeting.v1;
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/team/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/services/common/v1/common.proto";

message ListMeetingsRequest {
    string             namespace = 1;
    map<string,string> labels    = 2;   
}

message ListMeetingsResponse {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.MeetingList items = 1;   
}

message MeetingResponse {}

message CreateMeetingRequest {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.Meeting  item = 1;
    string password = 2;    
}

message CreateMeetingResponse {

}

message UpdateMeetingRequest {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.Meeting item = 1;
}

message UpdateMeetingResponse {

}

message GetMeetingRequest {
    string namespace = 1;
    string name      = 2;
}


message GetMeetingResponse {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.Meeting item = 1;
    string yaml = 2;
}



message GetMeetingNamespacesRequest {
    string namespace = 1;
    string name      = 2;
}


message GetMeetingNamespacesResponse {
    repeated github.com.metaprov.modelaapi.services.common.v1.NamespaceInfo namespaces= 1;
}




message DeleteMeetingRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteMeetingResponse {}


message MeetingCreateResponse {}

message MeetingGetByNameRequest {
    string namespace = 1;
    string name = 2;
}

message MeetingLogoutRequest {
    string token = 1; // jwt token
}

service MeetingService {
    rpc ListMeetings(ListMeetingsRequest) returns (ListMeetingsResponse) {
        option (google.api.http).get = "/v1/meetings";
    }
    rpc CreateMeeting(CreateMeetingRequest) returns (CreateMeetingResponse) {
        option (google.api.http) = {
			post: "/v1/meetings"
			body: "meeting"
		};
    }
    rpc GetMeeting(GetMeetingRequest) returns (GetMeetingResponse) {
        option (google.api.http).get = "/v1/{namespace}/meetings/{name}";
    }
    rpc UpdateMeeting(UpdateMeetingRequest) returns (UpdateMeetingResponse) {
        option (google.api.http) = {
			put: "/v1/{meeting.metadata.namespace}/meetings//{meeting.metadata.name}"
			body: "meeting"
		};
    }

    rpc DeleteMeeting(DeleteMeetingRequest) returns (DeleteMeetingResponse) {
        option (google.api.http).delete = "/api/{namespace}/v1/meetings/{name}";
    }

}