syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/meeting/v1";

package github.com.metaprov.modelaapi.services.meeting.v1;
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/team/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/services/common/v1/common.proto";

message ListMeetingsRequest {
    string             namespace = 1;
    map<string,string> labels    = 2;  
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5; 
}

message ListMeetingsResponse {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.MeetingList items = 1;   
}

message MeetingResponse {}

message CreateMeetingRequest {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.Meeting  item = 1;
    string password = 2;    
}

message CreateMeetingResponse {

}

message UpdateMeetingRequest {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.Meeting item = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateMeetingResponse {

}

message GetMeetingRequest {
    string namespace = 1;
    string name      = 2;
    
}


message GetMeetingResponse {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.Meeting item = 1;
    string yaml = 2;
}

message DeleteMeetingRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteMeetingResponse {}


service MeetingService {
    rpc ListMeetings(ListMeetingsRequest) returns (ListMeetingsResponse) {
        option (google.api.http).get = "/v1/meetings/{namespace}";
    }
    rpc CreateMeeting(CreateMeetingRequest) returns (CreateMeetingResponse) {
        option (google.api.http) = {
			post: "/v1/meetings"
			body: "*"
		};
    }
    rpc GetMeeting(GetMeetingRequest) returns (GetMeetingResponse) {
        option (google.api.http).get = "/v1/meetings/{namespace}/{name}";
    }
    rpc UpdateMeeting(UpdateMeetingRequest) returns (UpdateMeetingResponse) {
        option (google.api.http) = {
			put: "/v1/meetings/{item.metadata.namespace}/{item.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteMeeting(DeleteMeetingRequest) returns (DeleteMeetingResponse) {
        option (google.api.http).delete = "/v1/meetings/{namespace}/{name}";
    }

}