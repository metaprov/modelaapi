// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.7
// source: github.com/metaprov/modelaapi/services/cronapicall/v1/cronapicall.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListCronApiCallsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListCronApiCallsRequest) Reset() {
	*x = ListCronApiCallsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronApiCallsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronApiCallsRequest) ProtoMessage() {}

func (x *ListCronApiCallsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronApiCallsRequest.ProtoReflect.Descriptor instead.
func (*ListCronApiCallsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{0}
}

func (x *ListCronApiCallsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListCronApiCallsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListCronApiCallsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListCronApiCallsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *v1alpha1.CronApiCallList `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCronApiCallsResponse) Reset() {
	*x = ListCronApiCallsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronApiCallsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronApiCallsResponse) ProtoMessage() {}

func (x *ListCronApiCallsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronApiCallsResponse.ProtoReflect.Descriptor instead.
func (*ListCronApiCallsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{1}
}

func (x *ListCronApiCallsResponse) GetItems() *v1alpha1.CronApiCallList {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateCronApiCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCronApiCallResponse) Reset() {
	*x = CreateCronApiCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronApiCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronApiCallResponse) ProtoMessage() {}

func (x *CreateCronApiCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronApiCallResponse.ProtoReflect.Descriptor instead.
func (*CreateCronApiCallResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{2}
}

type CreateCronApiCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronApiCall `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateCronApiCallRequest) Reset() {
	*x = CreateCronApiCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronApiCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronApiCallRequest) ProtoMessage() {}

func (x *CreateCronApiCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronApiCallRequest.ProtoReflect.Descriptor instead.
func (*CreateCronApiCallRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCronApiCallRequest) GetItem() *v1alpha1.CronApiCall {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateCronApiCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronApiCall `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateCronApiCallRequest) Reset() {
	*x = UpdateCronApiCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronApiCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronApiCallRequest) ProtoMessage() {}

func (x *UpdateCronApiCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronApiCallRequest.ProtoReflect.Descriptor instead.
func (*UpdateCronApiCallRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCronApiCallRequest) GetItem() *v1alpha1.CronApiCall {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateCronApiCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCronApiCallResponse) Reset() {
	*x = UpdateCronApiCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronApiCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronApiCallResponse) ProtoMessage() {}

func (x *UpdateCronApiCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronApiCallResponse.ProtoReflect.Descriptor instead.
func (*UpdateCronApiCallResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{5}
}

type GetCronApiCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCronApiCallRequest) Reset() {
	*x = GetCronApiCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronApiCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronApiCallRequest) ProtoMessage() {}

func (x *GetCronApiCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronApiCallRequest.ProtoReflect.Descriptor instead.
func (*GetCronApiCallRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{6}
}

func (x *GetCronApiCallRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetCronApiCallRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCronApiCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronApiCall `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Yaml string                `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *GetCronApiCallResponse) Reset() {
	*x = GetCronApiCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronApiCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronApiCallResponse) ProtoMessage() {}

func (x *GetCronApiCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronApiCallResponse.ProtoReflect.Descriptor instead.
func (*GetCronApiCallResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{7}
}

func (x *GetCronApiCallResponse) GetItem() *v1alpha1.CronApiCall {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetCronApiCallResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeleteCronApiCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteCronApiCallRequest) Reset() {
	*x = DeleteCronApiCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronApiCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronApiCallRequest) ProtoMessage() {}

func (x *DeleteCronApiCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronApiCallRequest.ProtoReflect.Descriptor instead.
func (*DeleteCronApiCallRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCronApiCallRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteCronApiCallRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteCronApiCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCronApiCallResponse) Reset() {
	*x = DeleteCronApiCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronApiCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronApiCallResponse) ProtoMessage() {}

func (x *DeleteCronApiCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronApiCallResponse.ProtoReflect.Descriptor instead.
func (*DeleteCronApiCallResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{9}
}

type PauseCronApiCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PauseCronApiCallRequest) Reset() {
	*x = PauseCronApiCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseCronApiCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseCronApiCallRequest) ProtoMessage() {}

func (x *PauseCronApiCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseCronApiCallRequest.ProtoReflect.Descriptor instead.
func (*PauseCronApiCallRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{10}
}

func (x *PauseCronApiCallRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PauseCronApiCallRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PauseCronApiCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PauseCronApiCallResponse) Reset() {
	*x = PauseCronApiCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseCronApiCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseCronApiCallResponse) ProtoMessage() {}

func (x *PauseCronApiCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseCronApiCallResponse.ProtoReflect.Descriptor instead.
func (*PauseCronApiCallResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{11}
}

type ResumeCronApiCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ResumeCronApiCallRequest) Reset() {
	*x = ResumeCronApiCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeCronApiCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeCronApiCallRequest) ProtoMessage() {}

func (x *ResumeCronApiCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeCronApiCallRequest.ProtoReflect.Descriptor instead.
func (*ResumeCronApiCallRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{12}
}

func (x *ResumeCronApiCallRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResumeCronApiCallRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResumeCronApiCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResumeCronApiCallResponse) Reset() {
	*x = ResumeCronApiCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeCronApiCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeCronApiCallResponse) ProtoMessage() {}

func (x *ResumeCronApiCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeCronApiCallResponse.ProtoReflect.Descriptor instead.
func (*ResumeCronApiCallResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{13}
}

type RunCronApiCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *v1alpha1.CronApiCall `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *RunCronApiCallRequest) Reset() {
	*x = RunCronApiCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronApiCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronApiCallRequest) ProtoMessage() {}

func (x *RunCronApiCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronApiCallRequest.ProtoReflect.Descriptor instead.
func (*RunCronApiCallRequest) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{14}
}

func (x *RunCronApiCallRequest) GetItem() *v1alpha1.CronApiCall {
	if x != nil {
		return x.Item
	}
	return nil
}

type RunCronApiCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunCronApiCallResponse) Reset() {
	*x = RunCronApiCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronApiCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronApiCallResponse) ProtoMessage() {}

func (x *RunCronApiCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronApiCallResponse.ProtoReflect.Descriptor instead.
func (*RunCronApiCallResponse) Descriptor() ([]byte, []int) {
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP(), []int{15}
}

var File_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto protoreflect.FileDescriptor

var file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDesc = []byte{
	0x0a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69,
	0x63, 0x61, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f,
	0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x72, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x77, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x71, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e,
	0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x1b, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f,
	0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x4c, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x17, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43,
	0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4c, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a,
	0x19, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x0a, 0x15, 0x52, 0x75,
	0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x75,
	0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xec, 0x0d, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f,
	0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f,
	0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x61,
	0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0xce, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0xf2, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f,
	0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x1a, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xd7, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4f, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f,
	0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0xda, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41,
	0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22,
	0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0xde,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12,
	0xd1, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x61,
	0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f,
	0x6e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69,
	0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x41,
	0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e,
	0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a,
	0x72, 0x75, 0x6e, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x61, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72,
	0x6f, 0x6e, 0x61, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescOnce sync.Once
	file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescData = file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDesc
)

func file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescGZIP() []byte {
	file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescOnce.Do(func() {
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescData)
	})
	return file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDescData
}

var file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_goTypes = []interface{}{
	(*ListCronApiCallsRequest)(nil),   // 0: github.com.metaprov.modelaapi.services.cronapicall.v1.ListCronApiCallsRequest
	(*ListCronApiCallsResponse)(nil),  // 1: github.com.metaprov.modelaapi.services.cronapicall.v1.ListCronApiCallsResponse
	(*CreateCronApiCallResponse)(nil), // 2: github.com.metaprov.modelaapi.services.cronapicall.v1.CreateCronApiCallResponse
	(*CreateCronApiCallRequest)(nil),  // 3: github.com.metaprov.modelaapi.services.cronapicall.v1.CreateCronApiCallRequest
	(*UpdateCronApiCallRequest)(nil),  // 4: github.com.metaprov.modelaapi.services.cronapicall.v1.UpdateCronApiCallRequest
	(*UpdateCronApiCallResponse)(nil), // 5: github.com.metaprov.modelaapi.services.cronapicall.v1.UpdateCronApiCallResponse
	(*GetCronApiCallRequest)(nil),     // 6: github.com.metaprov.modelaapi.services.cronapicall.v1.GetCronApiCallRequest
	(*GetCronApiCallResponse)(nil),    // 7: github.com.metaprov.modelaapi.services.cronapicall.v1.GetCronApiCallResponse
	(*DeleteCronApiCallRequest)(nil),  // 8: github.com.metaprov.modelaapi.services.cronapicall.v1.DeleteCronApiCallRequest
	(*DeleteCronApiCallResponse)(nil), // 9: github.com.metaprov.modelaapi.services.cronapicall.v1.DeleteCronApiCallResponse
	(*PauseCronApiCallRequest)(nil),   // 10: github.com.metaprov.modelaapi.services.cronapicall.v1.PauseCronApiCallRequest
	(*PauseCronApiCallResponse)(nil),  // 11: github.com.metaprov.modelaapi.services.cronapicall.v1.PauseCronApiCallResponse
	(*ResumeCronApiCallRequest)(nil),  // 12: github.com.metaprov.modelaapi.services.cronapicall.v1.ResumeCronApiCallRequest
	(*ResumeCronApiCallResponse)(nil), // 13: github.com.metaprov.modelaapi.services.cronapicall.v1.ResumeCronApiCallResponse
	(*RunCronApiCallRequest)(nil),     // 14: github.com.metaprov.modelaapi.services.cronapicall.v1.RunCronApiCallRequest
	(*RunCronApiCallResponse)(nil),    // 15: github.com.metaprov.modelaapi.services.cronapicall.v1.RunCronApiCallResponse
	nil,                               // 16: github.com.metaprov.modelaapi.services.cronapicall.v1.ListCronApiCallsRequest.LabelsEntry
	(*v1alpha1.CronApiCallList)(nil),  // 17: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCallList
	(*v1alpha1.CronApiCall)(nil),      // 18: github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCall
}
var file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_depIdxs = []int32{
	16, // 0: github.com.metaprov.modelaapi.services.cronapicall.v1.ListCronApiCallsRequest.labels:type_name -> github.com.metaprov.modelaapi.services.cronapicall.v1.ListCronApiCallsRequest.LabelsEntry
	17, // 1: github.com.metaprov.modelaapi.services.cronapicall.v1.ListCronApiCallsResponse.items:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCallList
	18, // 2: github.com.metaprov.modelaapi.services.cronapicall.v1.CreateCronApiCallRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCall
	18, // 3: github.com.metaprov.modelaapi.services.cronapicall.v1.UpdateCronApiCallRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCall
	18, // 4: github.com.metaprov.modelaapi.services.cronapicall.v1.GetCronApiCallResponse.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCall
	18, // 5: github.com.metaprov.modelaapi.services.cronapicall.v1.RunCronApiCallRequest.item:type_name -> github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCall
	0,  // 6: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.ListCronApiCalls:input_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.ListCronApiCallsRequest
	3,  // 7: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.CreateCronApiCall:input_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.CreateCronApiCallRequest
	6,  // 8: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.GetCronApiCall:input_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.GetCronApiCallRequest
	4,  // 9: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.UpdateCronApiCall:input_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.UpdateCronApiCallRequest
	8,  // 10: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.DeleteCronApiCall:input_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.DeleteCronApiCallRequest
	10, // 11: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.PauseCronApiCall:input_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.PauseCronApiCallRequest
	12, // 12: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.ResumeCronApiCall:input_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.ResumeCronApiCallRequest
	14, // 13: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.RunPrediction:input_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.RunCronApiCallRequest
	1,  // 14: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.ListCronApiCalls:output_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.ListCronApiCallsResponse
	2,  // 15: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.CreateCronApiCall:output_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.CreateCronApiCallResponse
	7,  // 16: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.GetCronApiCall:output_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.GetCronApiCallResponse
	5,  // 17: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.UpdateCronApiCall:output_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.UpdateCronApiCallResponse
	9,  // 18: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.DeleteCronApiCall:output_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.DeleteCronApiCallResponse
	11, // 19: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.PauseCronApiCall:output_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.PauseCronApiCallResponse
	13, // 20: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.ResumeCronApiCall:output_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.ResumeCronApiCallResponse
	15, // 21: github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService.RunPrediction:output_type -> github.com.metaprov.modelaapi.services.cronapicall.v1.RunCronApiCallResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_init() }
func file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_init() {
	if File_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronApiCallsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronApiCallsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronApiCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronApiCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronApiCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronApiCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronApiCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronApiCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronApiCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronApiCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseCronApiCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseCronApiCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeCronApiCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeCronApiCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronApiCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronApiCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_goTypes,
		DependencyIndexes: file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_depIdxs,
		MessageInfos:      file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_msgTypes,
	}.Build()
	File_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto = out.File
	file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_rawDesc = nil
	file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_goTypes = nil
	file_github_com_metaprov_modelaapi_services_cronapicall_v1_cronapicall_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CronApiCallServiceClient is the client API for CronApiCallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronApiCallServiceClient interface {
	ListCronApiCalls(ctx context.Context, in *ListCronApiCallsRequest, opts ...grpc.CallOption) (*ListCronApiCallsResponse, error)
	CreateCronApiCall(ctx context.Context, in *CreateCronApiCallRequest, opts ...grpc.CallOption) (*CreateCronApiCallResponse, error)
	GetCronApiCall(ctx context.Context, in *GetCronApiCallRequest, opts ...grpc.CallOption) (*GetCronApiCallResponse, error)
	UpdateCronApiCall(ctx context.Context, in *UpdateCronApiCallRequest, opts ...grpc.CallOption) (*UpdateCronApiCallResponse, error)
	DeleteCronApiCall(ctx context.Context, in *DeleteCronApiCallRequest, opts ...grpc.CallOption) (*DeleteCronApiCallResponse, error)
	PauseCronApiCall(ctx context.Context, in *PauseCronApiCallRequest, opts ...grpc.CallOption) (*PauseCronApiCallResponse, error)
	ResumeCronApiCall(ctx context.Context, in *ResumeCronApiCallRequest, opts ...grpc.CallOption) (*ResumeCronApiCallResponse, error)
	RunPrediction(ctx context.Context, in *RunCronApiCallRequest, opts ...grpc.CallOption) (*RunCronApiCallResponse, error)
}

type cronApiCallServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCronApiCallServiceClient(cc grpc.ClientConnInterface) CronApiCallServiceClient {
	return &cronApiCallServiceClient{cc}
}

func (c *cronApiCallServiceClient) ListCronApiCalls(ctx context.Context, in *ListCronApiCallsRequest, opts ...grpc.CallOption) (*ListCronApiCallsResponse, error) {
	out := new(ListCronApiCallsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/ListCronApiCalls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronApiCallServiceClient) CreateCronApiCall(ctx context.Context, in *CreateCronApiCallRequest, opts ...grpc.CallOption) (*CreateCronApiCallResponse, error) {
	out := new(CreateCronApiCallResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/CreateCronApiCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronApiCallServiceClient) GetCronApiCall(ctx context.Context, in *GetCronApiCallRequest, opts ...grpc.CallOption) (*GetCronApiCallResponse, error) {
	out := new(GetCronApiCallResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/GetCronApiCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronApiCallServiceClient) UpdateCronApiCall(ctx context.Context, in *UpdateCronApiCallRequest, opts ...grpc.CallOption) (*UpdateCronApiCallResponse, error) {
	out := new(UpdateCronApiCallResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/UpdateCronApiCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronApiCallServiceClient) DeleteCronApiCall(ctx context.Context, in *DeleteCronApiCallRequest, opts ...grpc.CallOption) (*DeleteCronApiCallResponse, error) {
	out := new(DeleteCronApiCallResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/DeleteCronApiCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronApiCallServiceClient) PauseCronApiCall(ctx context.Context, in *PauseCronApiCallRequest, opts ...grpc.CallOption) (*PauseCronApiCallResponse, error) {
	out := new(PauseCronApiCallResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/PauseCronApiCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronApiCallServiceClient) ResumeCronApiCall(ctx context.Context, in *ResumeCronApiCallRequest, opts ...grpc.CallOption) (*ResumeCronApiCallResponse, error) {
	out := new(ResumeCronApiCallResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/ResumeCronApiCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronApiCallServiceClient) RunPrediction(ctx context.Context, in *RunCronApiCallRequest, opts ...grpc.CallOption) (*RunCronApiCallResponse, error) {
	out := new(RunCronApiCallResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/RunPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronApiCallServiceServer is the server API for CronApiCallService service.
type CronApiCallServiceServer interface {
	ListCronApiCalls(context.Context, *ListCronApiCallsRequest) (*ListCronApiCallsResponse, error)
	CreateCronApiCall(context.Context, *CreateCronApiCallRequest) (*CreateCronApiCallResponse, error)
	GetCronApiCall(context.Context, *GetCronApiCallRequest) (*GetCronApiCallResponse, error)
	UpdateCronApiCall(context.Context, *UpdateCronApiCallRequest) (*UpdateCronApiCallResponse, error)
	DeleteCronApiCall(context.Context, *DeleteCronApiCallRequest) (*DeleteCronApiCallResponse, error)
	PauseCronApiCall(context.Context, *PauseCronApiCallRequest) (*PauseCronApiCallResponse, error)
	ResumeCronApiCall(context.Context, *ResumeCronApiCallRequest) (*ResumeCronApiCallResponse, error)
	RunPrediction(context.Context, *RunCronApiCallRequest) (*RunCronApiCallResponse, error)
}

// UnimplementedCronApiCallServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCronApiCallServiceServer struct {
}

func (*UnimplementedCronApiCallServiceServer) ListCronApiCalls(context.Context, *ListCronApiCallsRequest) (*ListCronApiCallsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronApiCalls not implemented")
}
func (*UnimplementedCronApiCallServiceServer) CreateCronApiCall(context.Context, *CreateCronApiCallRequest) (*CreateCronApiCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronApiCall not implemented")
}
func (*UnimplementedCronApiCallServiceServer) GetCronApiCall(context.Context, *GetCronApiCallRequest) (*GetCronApiCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronApiCall not implemented")
}
func (*UnimplementedCronApiCallServiceServer) UpdateCronApiCall(context.Context, *UpdateCronApiCallRequest) (*UpdateCronApiCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronApiCall not implemented")
}
func (*UnimplementedCronApiCallServiceServer) DeleteCronApiCall(context.Context, *DeleteCronApiCallRequest) (*DeleteCronApiCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronApiCall not implemented")
}
func (*UnimplementedCronApiCallServiceServer) PauseCronApiCall(context.Context, *PauseCronApiCallRequest) (*PauseCronApiCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCronApiCall not implemented")
}
func (*UnimplementedCronApiCallServiceServer) ResumeCronApiCall(context.Context, *ResumeCronApiCallRequest) (*ResumeCronApiCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeCronApiCall not implemented")
}
func (*UnimplementedCronApiCallServiceServer) RunPrediction(context.Context, *RunCronApiCallRequest) (*RunCronApiCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPrediction not implemented")
}

func RegisterCronApiCallServiceServer(s *grpc.Server, srv CronApiCallServiceServer) {
	s.RegisterService(&_CronApiCallService_serviceDesc, srv)
}

func _CronApiCallService_ListCronApiCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronApiCallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronApiCallServiceServer).ListCronApiCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/ListCronApiCalls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronApiCallServiceServer).ListCronApiCalls(ctx, req.(*ListCronApiCallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronApiCallService_CreateCronApiCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronApiCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronApiCallServiceServer).CreateCronApiCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/CreateCronApiCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronApiCallServiceServer).CreateCronApiCall(ctx, req.(*CreateCronApiCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronApiCallService_GetCronApiCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronApiCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronApiCallServiceServer).GetCronApiCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/GetCronApiCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronApiCallServiceServer).GetCronApiCall(ctx, req.(*GetCronApiCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronApiCallService_UpdateCronApiCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCronApiCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronApiCallServiceServer).UpdateCronApiCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/UpdateCronApiCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronApiCallServiceServer).UpdateCronApiCall(ctx, req.(*UpdateCronApiCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronApiCallService_DeleteCronApiCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronApiCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronApiCallServiceServer).DeleteCronApiCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/DeleteCronApiCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronApiCallServiceServer).DeleteCronApiCall(ctx, req.(*DeleteCronApiCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronApiCallService_PauseCronApiCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseCronApiCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronApiCallServiceServer).PauseCronApiCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/PauseCronApiCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronApiCallServiceServer).PauseCronApiCall(ctx, req.(*PauseCronApiCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronApiCallService_ResumeCronApiCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeCronApiCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronApiCallServiceServer).ResumeCronApiCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/ResumeCronApiCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronApiCallServiceServer).ResumeCronApiCall(ctx, req.(*ResumeCronApiCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronApiCallService_RunPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCronApiCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronApiCallServiceServer).RunPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService/RunPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronApiCallServiceServer).RunPrediction(ctx, req.(*RunCronApiCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronApiCallService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.cronapicall.v1.CronApiCallService",
	HandlerType: (*CronApiCallServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCronApiCalls",
			Handler:    _CronApiCallService_ListCronApiCalls_Handler,
		},
		{
			MethodName: "CreateCronApiCall",
			Handler:    _CronApiCallService_CreateCronApiCall_Handler,
		},
		{
			MethodName: "GetCronApiCall",
			Handler:    _CronApiCallService_GetCronApiCall_Handler,
		},
		{
			MethodName: "UpdateCronApiCall",
			Handler:    _CronApiCallService_UpdateCronApiCall_Handler,
		},
		{
			MethodName: "DeleteCronApiCall",
			Handler:    _CronApiCallService_DeleteCronApiCall_Handler,
		},
		{
			MethodName: "PauseCronApiCall",
			Handler:    _CronApiCallService_PauseCronApiCall_Handler,
		},
		{
			MethodName: "ResumeCronApiCall",
			Handler:    _CronApiCallService_ResumeCronApiCall_Handler,
		},
		{
			MethodName: "RunPrediction",
			Handler:    _CronApiCallService_RunPrediction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/cronapicall/v1/cronapicall.proto",
}
