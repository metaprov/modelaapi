syntax = "proto3";

option go_package = "github.com/metaprov/modelaapi/services/cronapicall/v1";
package github.com.metaprov.modelaapi.services.cronapicall.v1;


import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";


message ListCronApiCallsRequest {
    string namespace = 1;
    string name      = 2;
    map<string,string> labels =3;
}

message ListCronApiCallsResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCallList items = 1;
}

message CreateCronApiCallResponse {}

message CreateCronApiCallRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCall item = 1;
}

message UpdateCronApiCallRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCall item = 1;
}

message UpdateCronApiCallResponse {

}

message GetCronApiCallRequest {
    string namespace = 1;
    string name      = 2;
}

message GetCronApiCallResponse {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCall item = 1;
    string yaml = 2;

}

message DeleteCronApiCallRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteCronApiCallResponse {

}

message PauseCronApiCallRequest {
    string namespace = 1;
    string name      = 2;
}

message PauseCronApiCallResponse {

}

message ResumeCronApiCallRequest {
    string namespace = 1;
    string name      = 2;
}

message ResumeCronApiCallResponse {

}



message RunCronApiCallRequest {
    github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.CronApiCall item = 1;
}


message RunCronApiCallResponse {
    
}


service CronApiCallService {

    rpc ListCronApiCalls(ListCronApiCallsRequest) returns (ListCronApiCallsResponse) {
        option (google.api.http).get = "/v1/cronapicalls";
    }

    rpc CreateCronApiCall(CreateCronApiCallRequest) returns (CreateCronApiCallResponse) {
        option (google.api.http) = {
			post: "/v1/cronapicalls"
			body: "*"
		};
    }

    rpc GetCronApiCall(GetCronApiCallRequest) returns (GetCronApiCallResponse) {
        option (google.api.http).get = "/v1/cronapicalls/{name}";
    }

    rpc UpdateCronApiCall(UpdateCronApiCallRequest) returns (UpdateCronApiCallResponse) {
        option (google.api.http) = {
			put: "/v1/cronapicalls/{cronprediction.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteCronApiCall(DeleteCronApiCallRequest) returns (DeleteCronApiCallResponse) {
        option (google.api.http).delete = "/v1/cronapicalls/{name}";
    }

    rpc PauseCronApiCall(PauseCronApiCallRequest) returns (PauseCronApiCallResponse) {
        option (google.api.http).post = "/v1/cronapicalls/{name}:pause";
    }

    rpc ResumeCronApiCall(ResumeCronApiCallRequest) returns (ResumeCronApiCallResponse) {
        option (google.api.http).post = "/v1/cronapicalls/{name}:resume";
    }


    rpc RunPrediction(RunCronApiCallRequest) returns (RunCronApiCallResponse) {
        option (google.api.http).post = "/v1/cronapicalls/{name}:run";
    }

    

    
  

}