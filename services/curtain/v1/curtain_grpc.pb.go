// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/curtain/v1/curtain.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurtainServiceClient is the client API for CurtainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurtainServiceClient interface {
	ListCurtains(ctx context.Context, in *ListCurtainsRequest, opts ...grpc.CallOption) (*ListCurtainsResponse, error)
	CreateCurtain(ctx context.Context, in *CreateCurtainRequest, opts ...grpc.CallOption) (*CreateCurtainResponse, error)
	GetCurtain(ctx context.Context, in *GetCurtainRequest, opts ...grpc.CallOption) (*GetCurtainResponse, error)
	UpdateCurtain(ctx context.Context, in *UpdateCurtainRequest, opts ...grpc.CallOption) (*UpdateCurtainResponse, error)
	DeleteCurtain(ctx context.Context, in *DeleteCurtainRequest, opts ...grpc.CallOption) (*DeleteCurtainResponse, error)
}

type curtainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurtainServiceClient(cc grpc.ClientConnInterface) CurtainServiceClient {
	return &curtainServiceClient{cc}
}

func (c *curtainServiceClient) ListCurtains(ctx context.Context, in *ListCurtainsRequest, opts ...grpc.CallOption) (*ListCurtainsResponse, error) {
	out := new(ListCurtainsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.curtain.v1.CurtainService/ListCurtains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curtainServiceClient) CreateCurtain(ctx context.Context, in *CreateCurtainRequest, opts ...grpc.CallOption) (*CreateCurtainResponse, error) {
	out := new(CreateCurtainResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.curtain.v1.CurtainService/CreateCurtain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curtainServiceClient) GetCurtain(ctx context.Context, in *GetCurtainRequest, opts ...grpc.CallOption) (*GetCurtainResponse, error) {
	out := new(GetCurtainResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.curtain.v1.CurtainService/GetCurtain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curtainServiceClient) UpdateCurtain(ctx context.Context, in *UpdateCurtainRequest, opts ...grpc.CallOption) (*UpdateCurtainResponse, error) {
	out := new(UpdateCurtainResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.curtain.v1.CurtainService/UpdateCurtain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curtainServiceClient) DeleteCurtain(ctx context.Context, in *DeleteCurtainRequest, opts ...grpc.CallOption) (*DeleteCurtainResponse, error) {
	out := new(DeleteCurtainResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.curtain.v1.CurtainService/DeleteCurtain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurtainServiceServer is the server API for CurtainService service.
// All implementations must embed UnimplementedCurtainServiceServer
// for forward compatibility
type CurtainServiceServer interface {
	ListCurtains(context.Context, *ListCurtainsRequest) (*ListCurtainsResponse, error)
	CreateCurtain(context.Context, *CreateCurtainRequest) (*CreateCurtainResponse, error)
	GetCurtain(context.Context, *GetCurtainRequest) (*GetCurtainResponse, error)
	UpdateCurtain(context.Context, *UpdateCurtainRequest) (*UpdateCurtainResponse, error)
	DeleteCurtain(context.Context, *DeleteCurtainRequest) (*DeleteCurtainResponse, error)
	mustEmbedUnimplementedCurtainServiceServer()
}

// UnimplementedCurtainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCurtainServiceServer struct {
}

func (UnimplementedCurtainServiceServer) ListCurtains(context.Context, *ListCurtainsRequest) (*ListCurtainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurtains not implemented")
}
func (UnimplementedCurtainServiceServer) CreateCurtain(context.Context, *CreateCurtainRequest) (*CreateCurtainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurtain not implemented")
}
func (UnimplementedCurtainServiceServer) GetCurtain(context.Context, *GetCurtainRequest) (*GetCurtainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurtain not implemented")
}
func (UnimplementedCurtainServiceServer) UpdateCurtain(context.Context, *UpdateCurtainRequest) (*UpdateCurtainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurtain not implemented")
}
func (UnimplementedCurtainServiceServer) DeleteCurtain(context.Context, *DeleteCurtainRequest) (*DeleteCurtainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurtain not implemented")
}
func (UnimplementedCurtainServiceServer) mustEmbedUnimplementedCurtainServiceServer() {}

// UnsafeCurtainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurtainServiceServer will
// result in compilation errors.
type UnsafeCurtainServiceServer interface {
	mustEmbedUnimplementedCurtainServiceServer()
}

func RegisterCurtainServiceServer(s grpc.ServiceRegistrar, srv CurtainServiceServer) {
	s.RegisterService(&CurtainService_ServiceDesc, srv)
}

func _CurtainService_ListCurtains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurtainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurtainServiceServer).ListCurtains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.curtain.v1.CurtainService/ListCurtains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurtainServiceServer).ListCurtains(ctx, req.(*ListCurtainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurtainService_CreateCurtain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurtainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurtainServiceServer).CreateCurtain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.curtain.v1.CurtainService/CreateCurtain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurtainServiceServer).CreateCurtain(ctx, req.(*CreateCurtainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurtainService_GetCurtain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurtainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurtainServiceServer).GetCurtain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.curtain.v1.CurtainService/GetCurtain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurtainServiceServer).GetCurtain(ctx, req.(*GetCurtainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurtainService_UpdateCurtain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurtainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurtainServiceServer).UpdateCurtain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.curtain.v1.CurtainService/UpdateCurtain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurtainServiceServer).UpdateCurtain(ctx, req.(*UpdateCurtainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurtainService_DeleteCurtain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurtainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurtainServiceServer).DeleteCurtain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.curtain.v1.CurtainService/DeleteCurtain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurtainServiceServer).DeleteCurtain(ctx, req.(*DeleteCurtainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurtainService_ServiceDesc is the grpc.ServiceDesc for CurtainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurtainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.curtain.v1.CurtainService",
	HandlerType: (*CurtainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCurtains",
			Handler:    _CurtainService_ListCurtains_Handler,
		},
		{
			MethodName: "CreateCurtain",
			Handler:    _CurtainService_CreateCurtain_Handler,
		},
		{
			MethodName: "GetCurtain",
			Handler:    _CurtainService_GetCurtain_Handler,
		},
		{
			MethodName: "UpdateCurtain",
			Handler:    _CurtainService_UpdateCurtain_Handler,
		},
		{
			MethodName: "DeleteCurtain",
			Handler:    _CurtainService_DeleteCurtain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/curtain/v1/curtain.proto",
}
