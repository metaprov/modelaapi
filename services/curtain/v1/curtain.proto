syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/curtain/v1";

package github.com.metaprov.modelaapi.services.curtain.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/inference/v1alpha1/generated.proto";


message ListCurtainsRequest {
    string namespace              = 1;
    map<string,string> labels     = 2;
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;  
    
}

message ListCurtainsResponse {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.CurtainList curtains = 1;
    string next_page_token = 2;
}


message CreateCurtainResponse {}

message CreateCurtainRequest {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.Curtain curtain = 1;
}

message UpdateCurtainRequest {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.Curtain curtain = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateCurtainResponse {

}

message GetCurtainRequest {
    string namespace = 1;
    string name      = 2;
    
}

message GetCurtainResponse {
    github.com.metaprov.modelaapi.pkg.apis.inference.v1alpha1.Curtain curtain = 1;
    string yaml = 2;

}

message DeleteCurtainRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteCurtainResponse {

}



service CurtainService {
    rpc ListCurtains(ListCurtainsRequest) returns (ListCurtainsResponse) {
        option (google.api.http).get = "/v1/curtains/{namespace}";        
    }

    rpc CreateCurtain(CreateCurtainRequest) returns (CreateCurtainResponse) {
        option (google.api.http) = {
			post: "/v1/curtains"
			body: "*"
		};
    }

    rpc GetCurtain(GetCurtainRequest) returns (GetCurtainResponse) {
        option (google.api.http).get = "/v1/curtains/{namespace}/{name}";
    }

    rpc UpdateCurtain(UpdateCurtainRequest) returns (UpdateCurtainResponse) {
        option (google.api.http) = {
			put: "/v1/curtains/{item.metadata.namespace}/{item.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteCurtain(DeleteCurtainRequest) returns (DeleteCurtainResponse) {
        option (google.api.http).delete = "/v1/curtains/{namespace}/{name}";
    }

}