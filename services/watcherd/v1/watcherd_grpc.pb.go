// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/watcherd/v1/watcherd.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WatcherdServiceClient is the client API for WatcherdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatcherdServiceClient interface {
	WatchDatapipeline(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDatapipelineResponse, error)
	WatchDatapipelineRun(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDatapipelineRunResponse, error)
	WatchDataproduct(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDataProductResponse, error)
	WatchDataproductVersion(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDataProductVersionResponse, error)
	WatchEntity(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchEntityResponse, error)
	WatchFeatureHistogram(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchFeatureHistogramResponse, error)
	WatchFeatureGroup(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchFeatureGroupResponse, error)
	WatchRecipe(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchRecipeResponse, error)
	WatchRecipeRun(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchRecipeRunResponse, error)
	WatchDataset(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDatasetResponse, error)
	WatchDatasetSnapshot(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDatasetSnapshotResponse, error)
	WatchDatasource(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDatasetSnapshotResponse, error)
	WatchModel(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchModelResponse, error)
	WatchModelClass(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchModelClassResponse, error)
	WatchModelClassRun(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchModelClassRunResponse, error)
	WatchReport(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchReportResponse, error)
	WatchStudy(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchStudyResponse, error)
	WatchStudyRun(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchStudyRunResponse, error)
	WatchAccount(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchAccountResponse, error)
	WatchAlert(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchAlertResponse, error)
	WatchAttachement(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchAttachmentResponse, error)
	WatchConnection(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchConnectionResponse, error)
	WatchLab(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchLabResponse, error)
	WatchLicense(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchLicenseResponse, error)
	WatchNotifier(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchNotifierResponse, error)
	WatchServingSite(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchServingsiteResponse, error)
	WatchTenant(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchTenantResponse, error)
	WatchUserclass(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchUserclassResponse, error)
	WatchVirtualBucket(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchVirtualBucketResponse, error)
	// inference
	WatchDataApp(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDataAppResponse, error)
	WatchPrediction(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchPredictionResponse, error)
	WatchPredictionRun(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchPredictionRunResponse, error)
	WatchPredictor(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchPredictorResponse, error)
	// team
	WatchPostmortem(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchPostmortemResponse, error)
	WatchReview(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchReviewResponse, error)
	WatchRunbook(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchRunbookResponse, error)
	WatchTodo(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchTodoResponse, error)
}

type watcherdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatcherdServiceClient(cc grpc.ClientConnInterface) WatcherdServiceClient {
	return &watcherdServiceClient{cc}
}

func (c *watcherdServiceClient) WatchDatapipeline(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDatapipelineResponse, error) {
	out := new(WatchDatapipelineResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDatapipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchDatapipelineRun(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDatapipelineRunResponse, error) {
	out := new(WatchDatapipelineRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDatapipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchDataproduct(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDataProductResponse, error) {
	out := new(WatchDataProductResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDataproduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchDataproductVersion(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDataProductVersionResponse, error) {
	out := new(WatchDataProductVersionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDataproductVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchEntity(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchEntityResponse, error) {
	out := new(WatchEntityResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchFeatureHistogram(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchFeatureHistogramResponse, error) {
	out := new(WatchFeatureHistogramResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchFeatureHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchFeatureGroup(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchFeatureGroupResponse, error) {
	out := new(WatchFeatureGroupResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchFeatureGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchRecipe(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchRecipeResponse, error) {
	out := new(WatchRecipeResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchRecipeRun(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchRecipeRunResponse, error) {
	out := new(WatchRecipeRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchRecipeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchDataset(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDatasetResponse, error) {
	out := new(WatchDatasetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchDatasetSnapshot(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDatasetSnapshotResponse, error) {
	out := new(WatchDatasetSnapshotResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDatasetSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchDatasource(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDatasetSnapshotResponse, error) {
	out := new(WatchDatasetSnapshotResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDatasource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchModel(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchModelResponse, error) {
	out := new(WatchModelResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchModelClass(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchModelClassResponse, error) {
	out := new(WatchModelClassResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchModelClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchModelClassRun(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchModelClassRunResponse, error) {
	out := new(WatchModelClassRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchModelClassRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchReport(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchReportResponse, error) {
	out := new(WatchReportResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchStudy(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchStudyResponse, error) {
	out := new(WatchStudyResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchStudyRun(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchStudyRunResponse, error) {
	out := new(WatchStudyRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchStudyRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchAccount(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchAccountResponse, error) {
	out := new(WatchAccountResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchAlert(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchAlertResponse, error) {
	out := new(WatchAlertResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchAttachement(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchAttachmentResponse, error) {
	out := new(WatchAttachmentResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchAttachement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchConnection(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchConnectionResponse, error) {
	out := new(WatchConnectionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchLab(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchLabResponse, error) {
	out := new(WatchLabResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchLab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchLicense(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchLicenseResponse, error) {
	out := new(WatchLicenseResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchNotifier(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchNotifierResponse, error) {
	out := new(WatchNotifierResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchNotifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchServingSite(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchServingsiteResponse, error) {
	out := new(WatchServingsiteResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchServingSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchTenant(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchTenantResponse, error) {
	out := new(WatchTenantResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchUserclass(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchUserclassResponse, error) {
	out := new(WatchUserclassResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchUserclass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchVirtualBucket(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchVirtualBucketResponse, error) {
	out := new(WatchVirtualBucketResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchVirtualBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchDataApp(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchDataAppResponse, error) {
	out := new(WatchDataAppResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDataApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchPrediction(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchPredictionResponse, error) {
	out := new(WatchPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchPredictionRun(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchPredictionRunResponse, error) {
	out := new(WatchPredictionRunResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchPredictionRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchPredictor(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchPredictorResponse, error) {
	out := new(WatchPredictorResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchPredictor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchPostmortem(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchPostmortemResponse, error) {
	out := new(WatchPostmortemResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchPostmortem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchReview(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchReviewResponse, error) {
	out := new(WatchReviewResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchRunbook(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchRunbookResponse, error) {
	out := new(WatchRunbookResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchRunbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherdServiceClient) WatchTodo(ctx context.Context, in *WatchRequestOptions, opts ...grpc.CallOption) (*WatchTodoResponse, error) {
	out := new(WatchTodoResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatcherdServiceServer is the server API for WatcherdService service.
// All implementations must embed UnimplementedWatcherdServiceServer
// for forward compatibility
type WatcherdServiceServer interface {
	WatchDatapipeline(context.Context, *WatchRequestOptions) (*WatchDatapipelineResponse, error)
	WatchDatapipelineRun(context.Context, *WatchRequestOptions) (*WatchDatapipelineRunResponse, error)
	WatchDataproduct(context.Context, *WatchRequestOptions) (*WatchDataProductResponse, error)
	WatchDataproductVersion(context.Context, *WatchRequestOptions) (*WatchDataProductVersionResponse, error)
	WatchEntity(context.Context, *WatchRequestOptions) (*WatchEntityResponse, error)
	WatchFeatureHistogram(context.Context, *WatchRequestOptions) (*WatchFeatureHistogramResponse, error)
	WatchFeatureGroup(context.Context, *WatchRequestOptions) (*WatchFeatureGroupResponse, error)
	WatchRecipe(context.Context, *WatchRequestOptions) (*WatchRecipeResponse, error)
	WatchRecipeRun(context.Context, *WatchRequestOptions) (*WatchRecipeRunResponse, error)
	WatchDataset(context.Context, *WatchRequestOptions) (*WatchDatasetResponse, error)
	WatchDatasetSnapshot(context.Context, *WatchRequestOptions) (*WatchDatasetSnapshotResponse, error)
	WatchDatasource(context.Context, *WatchRequestOptions) (*WatchDatasetSnapshotResponse, error)
	WatchModel(context.Context, *WatchRequestOptions) (*WatchModelResponse, error)
	WatchModelClass(context.Context, *WatchRequestOptions) (*WatchModelClassResponse, error)
	WatchModelClassRun(context.Context, *WatchRequestOptions) (*WatchModelClassRunResponse, error)
	WatchReport(context.Context, *WatchRequestOptions) (*WatchReportResponse, error)
	WatchStudy(context.Context, *WatchRequestOptions) (*WatchStudyResponse, error)
	WatchStudyRun(context.Context, *WatchRequestOptions) (*WatchStudyRunResponse, error)
	WatchAccount(context.Context, *WatchRequestOptions) (*WatchAccountResponse, error)
	WatchAlert(context.Context, *WatchRequestOptions) (*WatchAlertResponse, error)
	WatchAttachement(context.Context, *WatchRequestOptions) (*WatchAttachmentResponse, error)
	WatchConnection(context.Context, *WatchRequestOptions) (*WatchConnectionResponse, error)
	WatchLab(context.Context, *WatchRequestOptions) (*WatchLabResponse, error)
	WatchLicense(context.Context, *WatchRequestOptions) (*WatchLicenseResponse, error)
	WatchNotifier(context.Context, *WatchRequestOptions) (*WatchNotifierResponse, error)
	WatchServingSite(context.Context, *WatchRequestOptions) (*WatchServingsiteResponse, error)
	WatchTenant(context.Context, *WatchRequestOptions) (*WatchTenantResponse, error)
	WatchUserclass(context.Context, *WatchRequestOptions) (*WatchUserclassResponse, error)
	WatchVirtualBucket(context.Context, *WatchRequestOptions) (*WatchVirtualBucketResponse, error)
	// inference
	WatchDataApp(context.Context, *WatchRequestOptions) (*WatchDataAppResponse, error)
	WatchPrediction(context.Context, *WatchRequestOptions) (*WatchPredictionResponse, error)
	WatchPredictionRun(context.Context, *WatchRequestOptions) (*WatchPredictionRunResponse, error)
	WatchPredictor(context.Context, *WatchRequestOptions) (*WatchPredictorResponse, error)
	// team
	WatchPostmortem(context.Context, *WatchRequestOptions) (*WatchPostmortemResponse, error)
	WatchReview(context.Context, *WatchRequestOptions) (*WatchReviewResponse, error)
	WatchRunbook(context.Context, *WatchRequestOptions) (*WatchRunbookResponse, error)
	WatchTodo(context.Context, *WatchRequestOptions) (*WatchTodoResponse, error)
	mustEmbedUnimplementedWatcherdServiceServer()
}

// UnimplementedWatcherdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWatcherdServiceServer struct {
}

func (UnimplementedWatcherdServiceServer) WatchDatapipeline(context.Context, *WatchRequestOptions) (*WatchDatapipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDatapipeline not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchDatapipelineRun(context.Context, *WatchRequestOptions) (*WatchDatapipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDatapipelineRun not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchDataproduct(context.Context, *WatchRequestOptions) (*WatchDataProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDataproduct not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchDataproductVersion(context.Context, *WatchRequestOptions) (*WatchDataProductVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDataproductVersion not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchEntity(context.Context, *WatchRequestOptions) (*WatchEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchEntity not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchFeatureHistogram(context.Context, *WatchRequestOptions) (*WatchFeatureHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchFeatureHistogram not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchFeatureGroup(context.Context, *WatchRequestOptions) (*WatchFeatureGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchFeatureGroup not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchRecipe(context.Context, *WatchRequestOptions) (*WatchRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchRecipe not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchRecipeRun(context.Context, *WatchRequestOptions) (*WatchRecipeRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchRecipeRun not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchDataset(context.Context, *WatchRequestOptions) (*WatchDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDataset not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchDatasetSnapshot(context.Context, *WatchRequestOptions) (*WatchDatasetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDatasetSnapshot not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchDatasource(context.Context, *WatchRequestOptions) (*WatchDatasetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDatasource not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchModel(context.Context, *WatchRequestOptions) (*WatchModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchModel not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchModelClass(context.Context, *WatchRequestOptions) (*WatchModelClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchModelClass not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchModelClassRun(context.Context, *WatchRequestOptions) (*WatchModelClassRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchModelClassRun not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchReport(context.Context, *WatchRequestOptions) (*WatchReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchReport not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchStudy(context.Context, *WatchRequestOptions) (*WatchStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchStudy not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchStudyRun(context.Context, *WatchRequestOptions) (*WatchStudyRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchStudyRun not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchAccount(context.Context, *WatchRequestOptions) (*WatchAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchAccount not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchAlert(context.Context, *WatchRequestOptions) (*WatchAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchAlert not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchAttachement(context.Context, *WatchRequestOptions) (*WatchAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchAttachement not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchConnection(context.Context, *WatchRequestOptions) (*WatchConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchConnection not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchLab(context.Context, *WatchRequestOptions) (*WatchLabResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchLab not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchLicense(context.Context, *WatchRequestOptions) (*WatchLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchLicense not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchNotifier(context.Context, *WatchRequestOptions) (*WatchNotifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchNotifier not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchServingSite(context.Context, *WatchRequestOptions) (*WatchServingsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchServingSite not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchTenant(context.Context, *WatchRequestOptions) (*WatchTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchTenant not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchUserclass(context.Context, *WatchRequestOptions) (*WatchUserclassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchUserclass not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchVirtualBucket(context.Context, *WatchRequestOptions) (*WatchVirtualBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchVirtualBucket not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchDataApp(context.Context, *WatchRequestOptions) (*WatchDataAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDataApp not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchPrediction(context.Context, *WatchRequestOptions) (*WatchPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchPrediction not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchPredictionRun(context.Context, *WatchRequestOptions) (*WatchPredictionRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchPredictionRun not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchPredictor(context.Context, *WatchRequestOptions) (*WatchPredictorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchPredictor not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchPostmortem(context.Context, *WatchRequestOptions) (*WatchPostmortemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchPostmortem not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchReview(context.Context, *WatchRequestOptions) (*WatchReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchReview not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchRunbook(context.Context, *WatchRequestOptions) (*WatchRunbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchRunbook not implemented")
}
func (UnimplementedWatcherdServiceServer) WatchTodo(context.Context, *WatchRequestOptions) (*WatchTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchTodo not implemented")
}
func (UnimplementedWatcherdServiceServer) mustEmbedUnimplementedWatcherdServiceServer() {}

// UnsafeWatcherdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatcherdServiceServer will
// result in compilation errors.
type UnsafeWatcherdServiceServer interface {
	mustEmbedUnimplementedWatcherdServiceServer()
}

func RegisterWatcherdServiceServer(s grpc.ServiceRegistrar, srv WatcherdServiceServer) {
	s.RegisterService(&WatcherdService_ServiceDesc, srv)
}

func _WatcherdService_WatchDatapipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchDatapipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDatapipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchDatapipeline(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchDatapipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchDatapipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDatapipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchDatapipelineRun(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchDataproduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchDataproduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDataproduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchDataproduct(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchDataproductVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchDataproductVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDataproductVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchDataproductVersion(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchEntity(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchFeatureHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchFeatureHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchFeatureHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchFeatureHistogram(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchFeatureGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchFeatureGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchFeatureGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchFeatureGroup(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchRecipe(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchRecipeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchRecipeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchRecipeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchRecipeRun(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchDataset(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchDatasetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchDatasetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDatasetSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchDatasetSnapshot(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDatasource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchDatasource(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchModel(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchModelClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchModelClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchModelClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchModelClass(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchModelClassRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchModelClassRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchModelClassRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchModelClassRun(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchReport(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchStudy(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchStudyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchStudyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchStudyRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchStudyRun(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchAccount(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchAlert(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchAttachement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchAttachement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchAttachement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchAttachement(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchConnection(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchLab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchLab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchLab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchLab(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchLicense(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchNotifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchNotifier(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchServingSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchServingSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchServingSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchServingSite(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchTenant(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchUserclass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchUserclass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchUserclass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchUserclass(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchVirtualBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchVirtualBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchVirtualBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchVirtualBucket(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchDataApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchDataApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDataApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchDataApp(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchPrediction(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchPredictionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchPredictionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchPredictionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchPredictionRun(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchPredictor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchPredictor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchPredictor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchPredictor(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchPostmortem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchPostmortem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchPostmortem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchPostmortem(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchReview(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchRunbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchRunbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchRunbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchRunbook(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherdService_WatchTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchTodo(ctx, req.(*WatchRequestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// WatcherdService_ServiceDesc is the grpc.ServiceDesc for WatcherdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatcherdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService",
	HandlerType: (*WatcherdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WatchDatapipeline",
			Handler:    _WatcherdService_WatchDatapipeline_Handler,
		},
		{
			MethodName: "WatchDatapipelineRun",
			Handler:    _WatcherdService_WatchDatapipelineRun_Handler,
		},
		{
			MethodName: "WatchDataproduct",
			Handler:    _WatcherdService_WatchDataproduct_Handler,
		},
		{
			MethodName: "WatchDataproductVersion",
			Handler:    _WatcherdService_WatchDataproductVersion_Handler,
		},
		{
			MethodName: "WatchEntity",
			Handler:    _WatcherdService_WatchEntity_Handler,
		},
		{
			MethodName: "WatchFeatureHistogram",
			Handler:    _WatcherdService_WatchFeatureHistogram_Handler,
		},
		{
			MethodName: "WatchFeatureGroup",
			Handler:    _WatcherdService_WatchFeatureGroup_Handler,
		},
		{
			MethodName: "WatchRecipe",
			Handler:    _WatcherdService_WatchRecipe_Handler,
		},
		{
			MethodName: "WatchRecipeRun",
			Handler:    _WatcherdService_WatchRecipeRun_Handler,
		},
		{
			MethodName: "WatchDataset",
			Handler:    _WatcherdService_WatchDataset_Handler,
		},
		{
			MethodName: "WatchDatasetSnapshot",
			Handler:    _WatcherdService_WatchDatasetSnapshot_Handler,
		},
		{
			MethodName: "WatchDatasource",
			Handler:    _WatcherdService_WatchDatasource_Handler,
		},
		{
			MethodName: "WatchModel",
			Handler:    _WatcherdService_WatchModel_Handler,
		},
		{
			MethodName: "WatchModelClass",
			Handler:    _WatcherdService_WatchModelClass_Handler,
		},
		{
			MethodName: "WatchModelClassRun",
			Handler:    _WatcherdService_WatchModelClassRun_Handler,
		},
		{
			MethodName: "WatchReport",
			Handler:    _WatcherdService_WatchReport_Handler,
		},
		{
			MethodName: "WatchStudy",
			Handler:    _WatcherdService_WatchStudy_Handler,
		},
		{
			MethodName: "WatchStudyRun",
			Handler:    _WatcherdService_WatchStudyRun_Handler,
		},
		{
			MethodName: "WatchAccount",
			Handler:    _WatcherdService_WatchAccount_Handler,
		},
		{
			MethodName: "WatchAlert",
			Handler:    _WatcherdService_WatchAlert_Handler,
		},
		{
			MethodName: "WatchAttachement",
			Handler:    _WatcherdService_WatchAttachement_Handler,
		},
		{
			MethodName: "WatchConnection",
			Handler:    _WatcherdService_WatchConnection_Handler,
		},
		{
			MethodName: "WatchLab",
			Handler:    _WatcherdService_WatchLab_Handler,
		},
		{
			MethodName: "WatchLicense",
			Handler:    _WatcherdService_WatchLicense_Handler,
		},
		{
			MethodName: "WatchNotifier",
			Handler:    _WatcherdService_WatchNotifier_Handler,
		},
		{
			MethodName: "WatchServingSite",
			Handler:    _WatcherdService_WatchServingSite_Handler,
		},
		{
			MethodName: "WatchTenant",
			Handler:    _WatcherdService_WatchTenant_Handler,
		},
		{
			MethodName: "WatchUserclass",
			Handler:    _WatcherdService_WatchUserclass_Handler,
		},
		{
			MethodName: "WatchVirtualBucket",
			Handler:    _WatcherdService_WatchVirtualBucket_Handler,
		},
		{
			MethodName: "WatchDataApp",
			Handler:    _WatcherdService_WatchDataApp_Handler,
		},
		{
			MethodName: "WatchPrediction",
			Handler:    _WatcherdService_WatchPrediction_Handler,
		},
		{
			MethodName: "WatchPredictionRun",
			Handler:    _WatcherdService_WatchPredictionRun_Handler,
		},
		{
			MethodName: "WatchPredictor",
			Handler:    _WatcherdService_WatchPredictor_Handler,
		},
		{
			MethodName: "WatchPostmortem",
			Handler:    _WatcherdService_WatchPostmortem_Handler,
		},
		{
			MethodName: "WatchReview",
			Handler:    _WatcherdService_WatchReview_Handler,
		},
		{
			MethodName: "WatchRunbook",
			Handler:    _WatcherdService_WatchRunbook_Handler,
		},
		{
			MethodName: "WatchTodo",
			Handler:    _WatcherdService_WatchTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/watcherd/v1/watcherd.proto",
}
