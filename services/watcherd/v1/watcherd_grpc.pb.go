// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: github.com/metaprov/modelaapi/services/watcherd/v1/watcherd.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WatcherdServiceClient is the client API for WatcherdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatcherdServiceClient interface {
	WatchDataset(ctx context.Context, in *WatchDatasetRequest, opts ...grpc.CallOption) (*WatchDatasetResponse, error)
}

type watcherdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatcherdServiceClient(cc grpc.ClientConnInterface) WatcherdServiceClient {
	return &watcherdServiceClient{cc}
}

func (c *watcherdServiceClient) WatchDataset(ctx context.Context, in *WatchDatasetRequest, opts ...grpc.CallOption) (*WatchDatasetResponse, error) {
	out := new(WatchDatasetResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatcherdServiceServer is the server API for WatcherdService service.
// All implementations must embed UnimplementedWatcherdServiceServer
// for forward compatibility
type WatcherdServiceServer interface {
	WatchDataset(context.Context, *WatchDatasetRequest) (*WatchDatasetResponse, error)
	mustEmbedUnimplementedWatcherdServiceServer()
}

// UnimplementedWatcherdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWatcherdServiceServer struct {
}

func (UnimplementedWatcherdServiceServer) WatchDataset(context.Context, *WatchDatasetRequest) (*WatchDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDataset not implemented")
}
func (UnimplementedWatcherdServiceServer) mustEmbedUnimplementedWatcherdServiceServer() {}

// UnsafeWatcherdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatcherdServiceServer will
// result in compilation errors.
type UnsafeWatcherdServiceServer interface {
	mustEmbedUnimplementedWatcherdServiceServer()
}

func RegisterWatcherdServiceServer(s grpc.ServiceRegistrar, srv WatcherdServiceServer) {
	s.RegisterService(&WatcherdService_ServiceDesc, srv)
}

func _WatcherdService_WatchDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherdServiceServer).WatchDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService/WatchDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherdServiceServer).WatchDataset(ctx, req.(*WatchDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WatcherdService_ServiceDesc is the grpc.ServiceDesc for WatcherdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatcherdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.watcherd.v1.WatcherdService",
	HandlerType: (*WatcherdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WatchDataset",
			Handler:    _WatcherdService_WatchDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/watcherd/v1/watcherd.proto",
}
