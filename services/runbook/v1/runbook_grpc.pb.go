// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: github.com/metaprov/modelaapi/services/runbook/v1/runbook.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunBookServiceClient is the client API for RunBookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunBookServiceClient interface {
	ListRunBooks(ctx context.Context, in *ListRunBooksRequest, opts ...grpc.CallOption) (*ListRunBooksResponse, error)
	CreateRunBook(ctx context.Context, in *CreateRunBookRequest, opts ...grpc.CallOption) (*CreateRunBookResponse, error)
	GetRunBook(ctx context.Context, in *GetRunBookRequest, opts ...grpc.CallOption) (*GetRunBookResponse, error)
	UpdateRunBook(ctx context.Context, in *UpdateRunBookRequest, opts ...grpc.CallOption) (*UpdateRunBookResponse, error)
	DeleteRunBook(ctx context.Context, in *DeleteRunBookRequest, opts ...grpc.CallOption) (*DeleteRunBookResponse, error)
}

type runBookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunBookServiceClient(cc grpc.ClientConnInterface) RunBookServiceClient {
	return &runBookServiceClient{cc}
}

func (c *runBookServiceClient) ListRunBooks(ctx context.Context, in *ListRunBooksRequest, opts ...grpc.CallOption) (*ListRunBooksResponse, error) {
	out := new(ListRunBooksResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.runbook.v1.RunBookService/ListRunBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runBookServiceClient) CreateRunBook(ctx context.Context, in *CreateRunBookRequest, opts ...grpc.CallOption) (*CreateRunBookResponse, error) {
	out := new(CreateRunBookResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.runbook.v1.RunBookService/CreateRunBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runBookServiceClient) GetRunBook(ctx context.Context, in *GetRunBookRequest, opts ...grpc.CallOption) (*GetRunBookResponse, error) {
	out := new(GetRunBookResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.runbook.v1.RunBookService/GetRunBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runBookServiceClient) UpdateRunBook(ctx context.Context, in *UpdateRunBookRequest, opts ...grpc.CallOption) (*UpdateRunBookResponse, error) {
	out := new(UpdateRunBookResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.runbook.v1.RunBookService/UpdateRunBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runBookServiceClient) DeleteRunBook(ctx context.Context, in *DeleteRunBookRequest, opts ...grpc.CallOption) (*DeleteRunBookResponse, error) {
	out := new(DeleteRunBookResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.runbook.v1.RunBookService/DeleteRunBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunBookServiceServer is the server API for RunBookService service.
// All implementations must embed UnimplementedRunBookServiceServer
// for forward compatibility
type RunBookServiceServer interface {
	ListRunBooks(context.Context, *ListRunBooksRequest) (*ListRunBooksResponse, error)
	CreateRunBook(context.Context, *CreateRunBookRequest) (*CreateRunBookResponse, error)
	GetRunBook(context.Context, *GetRunBookRequest) (*GetRunBookResponse, error)
	UpdateRunBook(context.Context, *UpdateRunBookRequest) (*UpdateRunBookResponse, error)
	DeleteRunBook(context.Context, *DeleteRunBookRequest) (*DeleteRunBookResponse, error)
	mustEmbedUnimplementedRunBookServiceServer()
}

// UnimplementedRunBookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRunBookServiceServer struct {
}

func (UnimplementedRunBookServiceServer) ListRunBooks(context.Context, *ListRunBooksRequest) (*ListRunBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunBooks not implemented")
}
func (UnimplementedRunBookServiceServer) CreateRunBook(context.Context, *CreateRunBookRequest) (*CreateRunBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunBook not implemented")
}
func (UnimplementedRunBookServiceServer) GetRunBook(context.Context, *GetRunBookRequest) (*GetRunBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunBook not implemented")
}
func (UnimplementedRunBookServiceServer) UpdateRunBook(context.Context, *UpdateRunBookRequest) (*UpdateRunBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunBook not implemented")
}
func (UnimplementedRunBookServiceServer) DeleteRunBook(context.Context, *DeleteRunBookRequest) (*DeleteRunBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRunBook not implemented")
}
func (UnimplementedRunBookServiceServer) mustEmbedUnimplementedRunBookServiceServer() {}

// UnsafeRunBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunBookServiceServer will
// result in compilation errors.
type UnsafeRunBookServiceServer interface {
	mustEmbedUnimplementedRunBookServiceServer()
}

func RegisterRunBookServiceServer(s grpc.ServiceRegistrar, srv RunBookServiceServer) {
	s.RegisterService(&RunBookService_ServiceDesc, srv)
}

func _RunBookService_ListRunBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunBookServiceServer).ListRunBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.runbook.v1.RunBookService/ListRunBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunBookServiceServer).ListRunBooks(ctx, req.(*ListRunBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunBookService_CreateRunBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunBookServiceServer).CreateRunBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.runbook.v1.RunBookService/CreateRunBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunBookServiceServer).CreateRunBook(ctx, req.(*CreateRunBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunBookService_GetRunBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunBookServiceServer).GetRunBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.runbook.v1.RunBookService/GetRunBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunBookServiceServer).GetRunBook(ctx, req.(*GetRunBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunBookService_UpdateRunBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunBookServiceServer).UpdateRunBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.runbook.v1.RunBookService/UpdateRunBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunBookServiceServer).UpdateRunBook(ctx, req.(*UpdateRunBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunBookService_DeleteRunBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunBookServiceServer).DeleteRunBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.runbook.v1.RunBookService/DeleteRunBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunBookServiceServer).DeleteRunBook(ctx, req.(*DeleteRunBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunBookService_ServiceDesc is the grpc.ServiceDesc for RunBookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunBookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.runbook.v1.RunBookService",
	HandlerType: (*RunBookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRunBooks",
			Handler:    _RunBookService_ListRunBooks_Handler,
		},
		{
			MethodName: "CreateRunBook",
			Handler:    _RunBookService_CreateRunBook_Handler,
		},
		{
			MethodName: "GetRunBook",
			Handler:    _RunBookService_GetRunBook_Handler,
		},
		{
			MethodName: "UpdateRunBook",
			Handler:    _RunBookService_UpdateRunBook_Handler,
		},
		{
			MethodName: "DeleteRunBook",
			Handler:    _RunBookService_DeleteRunBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/runbook/v1/runbook.proto",
}
