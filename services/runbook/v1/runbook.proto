syntax = "proto3";
option go_package = "github.com/metaprov/modelaapi/services/runbook/v1";
package github.com.metaprov.modelaapi.services.runbook.v1;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/metaprov/modelaapi/pkg/apis/team/v1alpha1/generated.proto";

message ListRunBooksRequest {
    string namespace = 1;
    map<string,string> labels =2;
    int32              page_size  = 3;
    string             page_token = 4;
    string             order_by   = 5;  
}

message ListRunBooksResponse {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.RunBookList runbooks = 1;
    string next_page_token = 2;
}

message CreateRunBookRequest {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.RunBook runbook = 1;
}

message CreateRunBookResponse {

}

message UpdateRunBookRequest {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.RunBook runbook = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateRunBookResponse {

}

message GetRunBookRequest {
    string namespace = 1;
    string name      = 2;
}


message GetRunBookResponse {
    github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1.RunBook runbook = 1;
    string yaml = 2;
}


message DeleteRunBookRequest {
    string namespace = 1;
    string name      = 2;
}

message DeleteRunBookResponse {

}


service RunBookService {
    rpc ListRunBooks(ListRunBooksRequest) returns (ListRunBooksResponse) {
        option (google.api.http).get = "/v1/runbooks/{namespace}";
    }
    rpc CreateRunBook(CreateRunBookRequest) returns (CreateRunBookResponse) {
        option (google.api.http) = {
			post: "/v1/runbooks"
			body: "*"
		};
    }
    rpc GetRunBook(GetRunBookRequest) returns (GetRunBookResponse) {
        option (google.api.http).get = "/v1/runbooks/{namespace}/{name}";
    }
    rpc UpdateRunBook(UpdateRunBookRequest) returns (UpdateRunBookResponse) {
        option (google.api.http) = {
			put: "/v1/runbooks/{item.metadata.namespace}/{item.metadata.name}"
			body: "*"
		};
    }

    rpc DeleteRunBook(DeleteRunBookRequest) returns (DeleteRunBookResponse) {
        option (google.api.http).delete = "/v1/runbooks/{namespace}/{name}";
    }
}