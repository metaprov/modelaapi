// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/metaprov/modelaapi/services/prediction/v1/prediction.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PredictionServiceClient is the client API for PredictionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PredictionServiceClient interface {
	ListPredictions(ctx context.Context, in *ListPredictionsRequest, opts ...grpc.CallOption) (*ListPredictionsResponse, error)
	CreatePrediction(ctx context.Context, in *CreatePredictionRequest, opts ...grpc.CallOption) (*CreatePredictionResponse, error)
	GetPrediction(ctx context.Context, in *GetPredictionRequest, opts ...grpc.CallOption) (*GetPredictionResponse, error)
	UpdatePrediction(ctx context.Context, in *UpdatePredictionRequest, opts ...grpc.CallOption) (*UpdatePredictionResponse, error)
	DeletePrediction(ctx context.Context, in *DeletePredictionRequest, opts ...grpc.CallOption) (*DeletePredictionResponse, error)
	Download(ctx context.Context, in *DownloadPredictionRequest, opts ...grpc.CallOption) (*DownloadPredictionResponse, error)
	Abort(ctx context.Context, in *AbortPredictionRequest, opts ...grpc.CallOption) (*AbortPredictionResponse, error)
}

type predictionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPredictionServiceClient(cc grpc.ClientConnInterface) PredictionServiceClient {
	return &predictionServiceClient{cc}
}

func (c *predictionServiceClient) ListPredictions(ctx context.Context, in *ListPredictionsRequest, opts ...grpc.CallOption) (*ListPredictionsResponse, error) {
	out := new(ListPredictionsResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/ListPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) CreatePrediction(ctx context.Context, in *CreatePredictionRequest, opts ...grpc.CallOption) (*CreatePredictionResponse, error) {
	out := new(CreatePredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/CreatePrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) GetPrediction(ctx context.Context, in *GetPredictionRequest, opts ...grpc.CallOption) (*GetPredictionResponse, error) {
	out := new(GetPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/GetPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) UpdatePrediction(ctx context.Context, in *UpdatePredictionRequest, opts ...grpc.CallOption) (*UpdatePredictionResponse, error) {
	out := new(UpdatePredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/UpdatePrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) DeletePrediction(ctx context.Context, in *DeletePredictionRequest, opts ...grpc.CallOption) (*DeletePredictionResponse, error) {
	out := new(DeletePredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/DeletePrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) Download(ctx context.Context, in *DownloadPredictionRequest, opts ...grpc.CallOption) (*DownloadPredictionResponse, error) {
	out := new(DownloadPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) Abort(ctx context.Context, in *AbortPredictionRequest, opts ...grpc.CallOption) (*AbortPredictionResponse, error) {
	out := new(AbortPredictionResponse)
	err := c.cc.Invoke(ctx, "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PredictionServiceServer is the server API for PredictionService service.
// All implementations must embed UnimplementedPredictionServiceServer
// for forward compatibility
type PredictionServiceServer interface {
	ListPredictions(context.Context, *ListPredictionsRequest) (*ListPredictionsResponse, error)
	CreatePrediction(context.Context, *CreatePredictionRequest) (*CreatePredictionResponse, error)
	GetPrediction(context.Context, *GetPredictionRequest) (*GetPredictionResponse, error)
	UpdatePrediction(context.Context, *UpdatePredictionRequest) (*UpdatePredictionResponse, error)
	DeletePrediction(context.Context, *DeletePredictionRequest) (*DeletePredictionResponse, error)
	Download(context.Context, *DownloadPredictionRequest) (*DownloadPredictionResponse, error)
	Abort(context.Context, *AbortPredictionRequest) (*AbortPredictionResponse, error)
	mustEmbedUnimplementedPredictionServiceServer()
}

// UnimplementedPredictionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPredictionServiceServer struct {
}

func (UnimplementedPredictionServiceServer) ListPredictions(context.Context, *ListPredictionsRequest) (*ListPredictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPredictions not implemented")
}
func (UnimplementedPredictionServiceServer) CreatePrediction(context.Context, *CreatePredictionRequest) (*CreatePredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrediction not implemented")
}
func (UnimplementedPredictionServiceServer) GetPrediction(context.Context, *GetPredictionRequest) (*GetPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrediction not implemented")
}
func (UnimplementedPredictionServiceServer) UpdatePrediction(context.Context, *UpdatePredictionRequest) (*UpdatePredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrediction not implemented")
}
func (UnimplementedPredictionServiceServer) DeletePrediction(context.Context, *DeletePredictionRequest) (*DeletePredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrediction not implemented")
}
func (UnimplementedPredictionServiceServer) Download(context.Context, *DownloadPredictionRequest) (*DownloadPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedPredictionServiceServer) Abort(context.Context, *AbortPredictionRequest) (*AbortPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedPredictionServiceServer) mustEmbedUnimplementedPredictionServiceServer() {}

// UnsafePredictionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PredictionServiceServer will
// result in compilation errors.
type UnsafePredictionServiceServer interface {
	mustEmbedUnimplementedPredictionServiceServer()
}

func RegisterPredictionServiceServer(s grpc.ServiceRegistrar, srv PredictionServiceServer) {
	s.RegisterService(&PredictionService_ServiceDesc, srv)
}

func _PredictionService_ListPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).ListPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/ListPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).ListPredictions(ctx, req.(*ListPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_CreatePrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).CreatePrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/CreatePrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).CreatePrediction(ctx, req.(*CreatePredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_GetPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).GetPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/GetPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).GetPrediction(ctx, req.(*GetPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_UpdatePrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).UpdatePrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/UpdatePrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).UpdatePrediction(ctx, req.(*UpdatePredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_DeletePrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).DeletePrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/DeletePrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).DeletePrediction(ctx, req.(*DeletePredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).Download(ctx, req.(*DownloadPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.metaprov.modelaapi.services.prediction.v1.PredictionService/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).Abort(ctx, req.(*AbortPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PredictionService_ServiceDesc is the grpc.ServiceDesc for PredictionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PredictionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.metaprov.modelaapi.services.prediction.v1.PredictionService",
	HandlerType: (*PredictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPredictions",
			Handler:    _PredictionService_ListPredictions_Handler,
		},
		{
			MethodName: "CreatePrediction",
			Handler:    _PredictionService_CreatePrediction_Handler,
		},
		{
			MethodName: "GetPrediction",
			Handler:    _PredictionService_GetPrediction_Handler,
		},
		{
			MethodName: "UpdatePrediction",
			Handler:    _PredictionService_UpdatePrediction_Handler,
		},
		{
			MethodName: "DeletePrediction",
			Handler:    _PredictionService_DeletePrediction_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _PredictionService_Download_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _PredictionService_Abort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/metaprov/modelaapi/services/prediction/v1/prediction.proto",
}
