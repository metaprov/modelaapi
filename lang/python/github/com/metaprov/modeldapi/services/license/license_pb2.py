# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: github.com/metaprov/modeldapi/services/license/license.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1 import generated_pb2 as github_dot_com_dot_metaprov_dot_modeldapi_dot_pkg_dot_apis_dot_infra_dot_v1alpha1_dot_generated__pb2
from github.com.metaprov.modeldapi.services.common import common_pb2 as github_dot_com_dot_metaprov_dot_modeldapi_dot_services_dot_common_dot_common__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='github.com/metaprov/modeldapi/services/license/license.proto',
  package='github.com.metaprov.modeld.services.license',
  syntax='proto3',
  serialized_options=b'Z.github.com/metaprov/modeldapi/services/license',
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n<github.com/metaprov/modeldapi/services/license/license.proto\x12+github.com.metaprov.modeld.services.license\x1a\x1cgoogle/api/annotations.proto\x1a\x45github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1/generated.proto\x1a:github.com/metaprov/modeldapi/services/common/common.proto\"\xb5\x01\n\x13ListLicensesRequest\x12\x11\n\tnamespace\x18\x01 \x01(\t\x12\\\n\x06labels\x18\x03 \x03(\x0b\x32L.github.com.metaprov.modeld.services.license.ListLicensesRequest.LabelsEntry\x1a-\n\x0bLabelsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"i\n\x14ListLicensesResponse\x12Q\n\x05items\x18\x01 \x01(\x0b\x32\x42.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.LicenseList\"\x11\n\x0fLicenseResponse\"\x97\x02\n\x14\x43reateLicenseRequest\x12\x11\n\tnamespace\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\x12]\n\x06labels\x18\x03 \x03(\x0b\x32M.github.com.metaprov.modeld.services.license.CreateLicenseRequest.LabelsEntry\x12P\n\x04spec\x18\x04 \x01(\x0b\x32\x42.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.LicenseSpec\x1a-\n\x0bLabelsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"*\n\x1b\x43reateLicenseFromKeyRequest\x12\x0b\n\x03key\x18\x01 \x01(\t\"\x17\n\x15\x43reateLicenseResponse\"\x97\x02\n\x14UpdateLicenseRequest\x12\x11\n\tnamespace\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\x12]\n\x06labels\x18\x03 \x03(\x0b\x32M.github.com.metaprov.modeld.services.license.UpdateLicenseRequest.LabelsEntry\x12P\n\x04spec\x18\x05 \x01(\x0b\x32\x42.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.LicenseSpec\x1a-\n\x0bLabelsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\x17\n\x15UpdateLicenseResponse\"4\n\x11GetLicenseRequest\x12\x11\n\tnamespace\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\"s\n\x12GetLicenseResponse\x12O\n\x07license\x18\x01 \x01(\x0b\x32>.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.License\x12\x0c\n\x04yaml\x18\x02 \x01(\t\">\n\x1bGetLicenseNamespacesRequest\x12\x11\n\tnamespace\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\"m\n\x1cGetLicenseNamespacesResponse\x12M\n\nnamespaces\x18\x01 \x03(\x0b\x32\x39.github.com.metaprov.modeld.services.common.NamespaceInfo\"7\n\x14\x44\x65leteLicenseRequest\x12\x11\n\tnamespace\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\"\x17\n\x15\x44\x65leteLicenseResponse2\xfb\x08\n\x0eLicenseService\x12\xa8\x01\n\x0cListLicenses\x12@.github.com.metaprov.modeld.services.license.ListLicensesRequest\x1a\x41.github.com.metaprov.modeld.services.license.ListLicensesResponse\"\x13\x82\xd3\xe4\x93\x02\r\x12\x0bv1/licenses\x12\xb5\x01\n\rCreateLicense\x12\x41.github.com.metaprov.modeld.services.license.CreateLicenseRequest\x1a\x42.github.com.metaprov.modeld.services.license.CreateLicenseResponse\"\x1d\x82\xd3\xe4\x93\x02\x17\"\x0c/v1/licenses:\x07license\x12\xc3\x01\n\x14\x43reateLicenseFromKey\x12H.github.com.metaprov.modeld.services.license.CreateLicenseFromKeyRequest\x1a\x42.github.com.metaprov.modeld.services.license.CreateLicenseResponse\"\x1d\x82\xd3\xe4\x93\x02\x17\"\x0c/v1/licenses:\x07license\x12\xba\x01\n\nGetLicense\x12>.github.com.metaprov.modeld.services.license.GetLicenseRequest\x1a?.github.com.metaprov.modeld.services.license.GetLicenseResponse\"+\x82\xd3\xe4\x93\x02%\x12#v1/licenses/{license.metadata.name}\x12\xc4\x01\n\rUpdateLicense\x12\x41.github.com.metaprov.modeld.services.license.UpdateLicenseRequest\x1a\x42.github.com.metaprov.modeld.services.license.UpdateLicenseResponse\",\x82\xd3\xe4\x93\x02&\x1a\x1b/v1/licenses/{license_name}:\x07license\x12\xbb\x01\n\rDeleteLicense\x12\x41.github.com.metaprov.modeld.services.license.DeleteLicenseRequest\x1a\x42.github.com.metaprov.modeld.services.license.DeleteLicenseResponse\"#\x82\xd3\xe4\x93\x02\x1d*\x1b/v1/licenses/{license_name}B0Z.github.com/metaprov/modeldapi/services/licenseb\x06proto3'
  ,
  dependencies=[google_dot_api_dot_annotations__pb2.DESCRIPTOR,github_dot_com_dot_metaprov_dot_modeldapi_dot_pkg_dot_apis_dot_infra_dot_v1alpha1_dot_generated__pb2.DESCRIPTOR,github_dot_com_dot_metaprov_dot_modeldapi_dot_services_dot_common_dot_common__pb2.DESCRIPTOR,])




_LISTLICENSESREQUEST_LABELSENTRY = _descriptor.Descriptor(
  name='LabelsEntry',
  full_name='github.com.metaprov.modeld.services.license.ListLicensesRequest.LabelsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='github.com.metaprov.modeld.services.license.ListLicensesRequest.LabelsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='value', full_name='github.com.metaprov.modeld.services.license.ListLicensesRequest.LabelsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=b'8\001',
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=407,
  serialized_end=452,
)

_LISTLICENSESREQUEST = _descriptor.Descriptor(
  name='ListLicensesRequest',
  full_name='github.com.metaprov.modeld.services.license.ListLicensesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='namespace', full_name='github.com.metaprov.modeld.services.license.ListLicensesRequest.namespace', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='labels', full_name='github.com.metaprov.modeld.services.license.ListLicensesRequest.labels', index=1,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[_LISTLICENSESREQUEST_LABELSENTRY, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=271,
  serialized_end=452,
)


_LISTLICENSESRESPONSE = _descriptor.Descriptor(
  name='ListLicensesResponse',
  full_name='github.com.metaprov.modeld.services.license.ListLicensesResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='items', full_name='github.com.metaprov.modeld.services.license.ListLicensesResponse.items', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=454,
  serialized_end=559,
)


_LICENSERESPONSE = _descriptor.Descriptor(
  name='LicenseResponse',
  full_name='github.com.metaprov.modeld.services.license.LicenseResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=561,
  serialized_end=578,
)


_CREATELICENSEREQUEST_LABELSENTRY = _descriptor.Descriptor(
  name='LabelsEntry',
  full_name='github.com.metaprov.modeld.services.license.CreateLicenseRequest.LabelsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='github.com.metaprov.modeld.services.license.CreateLicenseRequest.LabelsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='value', full_name='github.com.metaprov.modeld.services.license.CreateLicenseRequest.LabelsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=b'8\001',
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=407,
  serialized_end=452,
)

_CREATELICENSEREQUEST = _descriptor.Descriptor(
  name='CreateLicenseRequest',
  full_name='github.com.metaprov.modeld.services.license.CreateLicenseRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='namespace', full_name='github.com.metaprov.modeld.services.license.CreateLicenseRequest.namespace', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='name', full_name='github.com.metaprov.modeld.services.license.CreateLicenseRequest.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='labels', full_name='github.com.metaprov.modeld.services.license.CreateLicenseRequest.labels', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='spec', full_name='github.com.metaprov.modeld.services.license.CreateLicenseRequest.spec', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[_CREATELICENSEREQUEST_LABELSENTRY, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=581,
  serialized_end=860,
)


_CREATELICENSEFROMKEYREQUEST = _descriptor.Descriptor(
  name='CreateLicenseFromKeyRequest',
  full_name='github.com.metaprov.modeld.services.license.CreateLicenseFromKeyRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='github.com.metaprov.modeld.services.license.CreateLicenseFromKeyRequest.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=862,
  serialized_end=904,
)


_CREATELICENSERESPONSE = _descriptor.Descriptor(
  name='CreateLicenseResponse',
  full_name='github.com.metaprov.modeld.services.license.CreateLicenseResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=906,
  serialized_end=929,
)


_UPDATELICENSEREQUEST_LABELSENTRY = _descriptor.Descriptor(
  name='LabelsEntry',
  full_name='github.com.metaprov.modeld.services.license.UpdateLicenseRequest.LabelsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='github.com.metaprov.modeld.services.license.UpdateLicenseRequest.LabelsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='value', full_name='github.com.metaprov.modeld.services.license.UpdateLicenseRequest.LabelsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=b'8\001',
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=407,
  serialized_end=452,
)

_UPDATELICENSEREQUEST = _descriptor.Descriptor(
  name='UpdateLicenseRequest',
  full_name='github.com.metaprov.modeld.services.license.UpdateLicenseRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='namespace', full_name='github.com.metaprov.modeld.services.license.UpdateLicenseRequest.namespace', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='name', full_name='github.com.metaprov.modeld.services.license.UpdateLicenseRequest.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='labels', full_name='github.com.metaprov.modeld.services.license.UpdateLicenseRequest.labels', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='spec', full_name='github.com.metaprov.modeld.services.license.UpdateLicenseRequest.spec', index=3,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[_UPDATELICENSEREQUEST_LABELSENTRY, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=932,
  serialized_end=1211,
)


_UPDATELICENSERESPONSE = _descriptor.Descriptor(
  name='UpdateLicenseResponse',
  full_name='github.com.metaprov.modeld.services.license.UpdateLicenseResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1213,
  serialized_end=1236,
)


_GETLICENSEREQUEST = _descriptor.Descriptor(
  name='GetLicenseRequest',
  full_name='github.com.metaprov.modeld.services.license.GetLicenseRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='namespace', full_name='github.com.metaprov.modeld.services.license.GetLicenseRequest.namespace', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='name', full_name='github.com.metaprov.modeld.services.license.GetLicenseRequest.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1238,
  serialized_end=1290,
)


_GETLICENSERESPONSE = _descriptor.Descriptor(
  name='GetLicenseResponse',
  full_name='github.com.metaprov.modeld.services.license.GetLicenseResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='license', full_name='github.com.metaprov.modeld.services.license.GetLicenseResponse.license', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='yaml', full_name='github.com.metaprov.modeld.services.license.GetLicenseResponse.yaml', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1292,
  serialized_end=1407,
)


_GETLICENSENAMESPACESREQUEST = _descriptor.Descriptor(
  name='GetLicenseNamespacesRequest',
  full_name='github.com.metaprov.modeld.services.license.GetLicenseNamespacesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='namespace', full_name='github.com.metaprov.modeld.services.license.GetLicenseNamespacesRequest.namespace', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='name', full_name='github.com.metaprov.modeld.services.license.GetLicenseNamespacesRequest.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1409,
  serialized_end=1471,
)


_GETLICENSENAMESPACESRESPONSE = _descriptor.Descriptor(
  name='GetLicenseNamespacesResponse',
  full_name='github.com.metaprov.modeld.services.license.GetLicenseNamespacesResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='namespaces', full_name='github.com.metaprov.modeld.services.license.GetLicenseNamespacesResponse.namespaces', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1473,
  serialized_end=1582,
)


_DELETELICENSEREQUEST = _descriptor.Descriptor(
  name='DeleteLicenseRequest',
  full_name='github.com.metaprov.modeld.services.license.DeleteLicenseRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='namespace', full_name='github.com.metaprov.modeld.services.license.DeleteLicenseRequest.namespace', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='name', full_name='github.com.metaprov.modeld.services.license.DeleteLicenseRequest.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1584,
  serialized_end=1639,
)


_DELETELICENSERESPONSE = _descriptor.Descriptor(
  name='DeleteLicenseResponse',
  full_name='github.com.metaprov.modeld.services.license.DeleteLicenseResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1641,
  serialized_end=1664,
)

_LISTLICENSESREQUEST_LABELSENTRY.containing_type = _LISTLICENSESREQUEST
_LISTLICENSESREQUEST.fields_by_name['labels'].message_type = _LISTLICENSESREQUEST_LABELSENTRY
_LISTLICENSESRESPONSE.fields_by_name['items'].message_type = github_dot_com_dot_metaprov_dot_modeldapi_dot_pkg_dot_apis_dot_infra_dot_v1alpha1_dot_generated__pb2._LICENSELIST
_CREATELICENSEREQUEST_LABELSENTRY.containing_type = _CREATELICENSEREQUEST
_CREATELICENSEREQUEST.fields_by_name['labels'].message_type = _CREATELICENSEREQUEST_LABELSENTRY
_CREATELICENSEREQUEST.fields_by_name['spec'].message_type = github_dot_com_dot_metaprov_dot_modeldapi_dot_pkg_dot_apis_dot_infra_dot_v1alpha1_dot_generated__pb2._LICENSESPEC
_UPDATELICENSEREQUEST_LABELSENTRY.containing_type = _UPDATELICENSEREQUEST
_UPDATELICENSEREQUEST.fields_by_name['labels'].message_type = _UPDATELICENSEREQUEST_LABELSENTRY
_UPDATELICENSEREQUEST.fields_by_name['spec'].message_type = github_dot_com_dot_metaprov_dot_modeldapi_dot_pkg_dot_apis_dot_infra_dot_v1alpha1_dot_generated__pb2._LICENSESPEC
_GETLICENSERESPONSE.fields_by_name['license'].message_type = github_dot_com_dot_metaprov_dot_modeldapi_dot_pkg_dot_apis_dot_infra_dot_v1alpha1_dot_generated__pb2._LICENSE
_GETLICENSENAMESPACESRESPONSE.fields_by_name['namespaces'].message_type = github_dot_com_dot_metaprov_dot_modeldapi_dot_services_dot_common_dot_common__pb2._NAMESPACEINFO
DESCRIPTOR.message_types_by_name['ListLicensesRequest'] = _LISTLICENSESREQUEST
DESCRIPTOR.message_types_by_name['ListLicensesResponse'] = _LISTLICENSESRESPONSE
DESCRIPTOR.message_types_by_name['LicenseResponse'] = _LICENSERESPONSE
DESCRIPTOR.message_types_by_name['CreateLicenseRequest'] = _CREATELICENSEREQUEST
DESCRIPTOR.message_types_by_name['CreateLicenseFromKeyRequest'] = _CREATELICENSEFROMKEYREQUEST
DESCRIPTOR.message_types_by_name['CreateLicenseResponse'] = _CREATELICENSERESPONSE
DESCRIPTOR.message_types_by_name['UpdateLicenseRequest'] = _UPDATELICENSEREQUEST
DESCRIPTOR.message_types_by_name['UpdateLicenseResponse'] = _UPDATELICENSERESPONSE
DESCRIPTOR.message_types_by_name['GetLicenseRequest'] = _GETLICENSEREQUEST
DESCRIPTOR.message_types_by_name['GetLicenseResponse'] = _GETLICENSERESPONSE
DESCRIPTOR.message_types_by_name['GetLicenseNamespacesRequest'] = _GETLICENSENAMESPACESREQUEST
DESCRIPTOR.message_types_by_name['GetLicenseNamespacesResponse'] = _GETLICENSENAMESPACESRESPONSE
DESCRIPTOR.message_types_by_name['DeleteLicenseRequest'] = _DELETELICENSEREQUEST
DESCRIPTOR.message_types_by_name['DeleteLicenseResponse'] = _DELETELICENSERESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ListLicensesRequest = _reflection.GeneratedProtocolMessageType('ListLicensesRequest', (_message.Message,), {

  'LabelsEntry' : _reflection.GeneratedProtocolMessageType('LabelsEntry', (_message.Message,), {
    'DESCRIPTOR' : _LISTLICENSESREQUEST_LABELSENTRY,
    '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
    # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.ListLicensesRequest.LabelsEntry)
    })
  ,
  'DESCRIPTOR' : _LISTLICENSESREQUEST,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.ListLicensesRequest)
  })
_sym_db.RegisterMessage(ListLicensesRequest)
_sym_db.RegisterMessage(ListLicensesRequest.LabelsEntry)

ListLicensesResponse = _reflection.GeneratedProtocolMessageType('ListLicensesResponse', (_message.Message,), {
  'DESCRIPTOR' : _LISTLICENSESRESPONSE,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.ListLicensesResponse)
  })
_sym_db.RegisterMessage(ListLicensesResponse)

LicenseResponse = _reflection.GeneratedProtocolMessageType('LicenseResponse', (_message.Message,), {
  'DESCRIPTOR' : _LICENSERESPONSE,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.LicenseResponse)
  })
_sym_db.RegisterMessage(LicenseResponse)

CreateLicenseRequest = _reflection.GeneratedProtocolMessageType('CreateLicenseRequest', (_message.Message,), {

  'LabelsEntry' : _reflection.GeneratedProtocolMessageType('LabelsEntry', (_message.Message,), {
    'DESCRIPTOR' : _CREATELICENSEREQUEST_LABELSENTRY,
    '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
    # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.CreateLicenseRequest.LabelsEntry)
    })
  ,
  'DESCRIPTOR' : _CREATELICENSEREQUEST,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.CreateLicenseRequest)
  })
_sym_db.RegisterMessage(CreateLicenseRequest)
_sym_db.RegisterMessage(CreateLicenseRequest.LabelsEntry)

CreateLicenseFromKeyRequest = _reflection.GeneratedProtocolMessageType('CreateLicenseFromKeyRequest', (_message.Message,), {
  'DESCRIPTOR' : _CREATELICENSEFROMKEYREQUEST,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.CreateLicenseFromKeyRequest)
  })
_sym_db.RegisterMessage(CreateLicenseFromKeyRequest)

CreateLicenseResponse = _reflection.GeneratedProtocolMessageType('CreateLicenseResponse', (_message.Message,), {
  'DESCRIPTOR' : _CREATELICENSERESPONSE,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.CreateLicenseResponse)
  })
_sym_db.RegisterMessage(CreateLicenseResponse)

UpdateLicenseRequest = _reflection.GeneratedProtocolMessageType('UpdateLicenseRequest', (_message.Message,), {

  'LabelsEntry' : _reflection.GeneratedProtocolMessageType('LabelsEntry', (_message.Message,), {
    'DESCRIPTOR' : _UPDATELICENSEREQUEST_LABELSENTRY,
    '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
    # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.UpdateLicenseRequest.LabelsEntry)
    })
  ,
  'DESCRIPTOR' : _UPDATELICENSEREQUEST,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.UpdateLicenseRequest)
  })
_sym_db.RegisterMessage(UpdateLicenseRequest)
_sym_db.RegisterMessage(UpdateLicenseRequest.LabelsEntry)

UpdateLicenseResponse = _reflection.GeneratedProtocolMessageType('UpdateLicenseResponse', (_message.Message,), {
  'DESCRIPTOR' : _UPDATELICENSERESPONSE,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.UpdateLicenseResponse)
  })
_sym_db.RegisterMessage(UpdateLicenseResponse)

GetLicenseRequest = _reflection.GeneratedProtocolMessageType('GetLicenseRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETLICENSEREQUEST,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.GetLicenseRequest)
  })
_sym_db.RegisterMessage(GetLicenseRequest)

GetLicenseResponse = _reflection.GeneratedProtocolMessageType('GetLicenseResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETLICENSERESPONSE,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.GetLicenseResponse)
  })
_sym_db.RegisterMessage(GetLicenseResponse)

GetLicenseNamespacesRequest = _reflection.GeneratedProtocolMessageType('GetLicenseNamespacesRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETLICENSENAMESPACESREQUEST,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.GetLicenseNamespacesRequest)
  })
_sym_db.RegisterMessage(GetLicenseNamespacesRequest)

GetLicenseNamespacesResponse = _reflection.GeneratedProtocolMessageType('GetLicenseNamespacesResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETLICENSENAMESPACESRESPONSE,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.GetLicenseNamespacesResponse)
  })
_sym_db.RegisterMessage(GetLicenseNamespacesResponse)

DeleteLicenseRequest = _reflection.GeneratedProtocolMessageType('DeleteLicenseRequest', (_message.Message,), {
  'DESCRIPTOR' : _DELETELICENSEREQUEST,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.DeleteLicenseRequest)
  })
_sym_db.RegisterMessage(DeleteLicenseRequest)

DeleteLicenseResponse = _reflection.GeneratedProtocolMessageType('DeleteLicenseResponse', (_message.Message,), {
  'DESCRIPTOR' : _DELETELICENSERESPONSE,
  '__module__' : 'github.com.metaprov.modeldapi.services.license.license_pb2'
  # @@protoc_insertion_point(class_scope:github.com.metaprov.modeld.services.license.DeleteLicenseResponse)
  })
_sym_db.RegisterMessage(DeleteLicenseResponse)


DESCRIPTOR._options = None
_LISTLICENSESREQUEST_LABELSENTRY._options = None
_CREATELICENSEREQUEST_LABELSENTRY._options = None
_UPDATELICENSEREQUEST_LABELSENTRY._options = None

_LICENSESERVICE = _descriptor.ServiceDescriptor(
  name='LicenseService',
  full_name='github.com.metaprov.modeld.services.license.LicenseService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=1667,
  serialized_end=2814,
  methods=[
  _descriptor.MethodDescriptor(
    name='ListLicenses',
    full_name='github.com.metaprov.modeld.services.license.LicenseService.ListLicenses',
    index=0,
    containing_service=None,
    input_type=_LISTLICENSESREQUEST,
    output_type=_LISTLICENSESRESPONSE,
    serialized_options=b'\202\323\344\223\002\r\022\013v1/licenses',
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='CreateLicense',
    full_name='github.com.metaprov.modeld.services.license.LicenseService.CreateLicense',
    index=1,
    containing_service=None,
    input_type=_CREATELICENSEREQUEST,
    output_type=_CREATELICENSERESPONSE,
    serialized_options=b'\202\323\344\223\002\027\"\014/v1/licenses:\007license',
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='CreateLicenseFromKey',
    full_name='github.com.metaprov.modeld.services.license.LicenseService.CreateLicenseFromKey',
    index=2,
    containing_service=None,
    input_type=_CREATELICENSEFROMKEYREQUEST,
    output_type=_CREATELICENSERESPONSE,
    serialized_options=b'\202\323\344\223\002\027\"\014/v1/licenses:\007license',
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetLicense',
    full_name='github.com.metaprov.modeld.services.license.LicenseService.GetLicense',
    index=3,
    containing_service=None,
    input_type=_GETLICENSEREQUEST,
    output_type=_GETLICENSERESPONSE,
    serialized_options=b'\202\323\344\223\002%\022#v1/licenses/{license.metadata.name}',
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='UpdateLicense',
    full_name='github.com.metaprov.modeld.services.license.LicenseService.UpdateLicense',
    index=4,
    containing_service=None,
    input_type=_UPDATELICENSEREQUEST,
    output_type=_UPDATELICENSERESPONSE,
    serialized_options=b'\202\323\344\223\002&\032\033/v1/licenses/{license_name}:\007license',
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='DeleteLicense',
    full_name='github.com.metaprov.modeld.services.license.LicenseService.DeleteLicense',
    index=5,
    containing_service=None,
    input_type=_DELETELICENSEREQUEST,
    output_type=_DELETELICENSERESPONSE,
    serialized_options=b'\202\323\344\223\002\035*\033/v1/licenses/{license_name}',
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_LICENSESERVICE)

DESCRIPTOR.services_by_name['LicenseService'] = _LICENSESERVICE

# @@protoc_insertion_point(module_scope)
