// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: github.com/metaprov/modelaapi/services/common/v1/common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Github.Com.Metaprov.modelaapi.Services.Common.V1 {

  /// <summary>Holder for reflection information generated from github.com/metaprov/modelaapi/services/common/v1/common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for github.com/metaprov/modelaapi/services/common/v1/common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj1naXRodWIuY29tL21ldGFwcm92L21vZGVsZGFwaS9zZXJ2aWNlcy9jb21t",
            "b24vdjEvY29tbW9uLnByb3RvEjBnaXRodWIuY29tLm1ldGFwcm92Lm1vZGVs",
            "ZGFwaS5zZXJ2aWNlcy5jb21tb24udjEitgIKDkRhdGFzZXRQcm9maWxlEgwK",
            "BGNvbHMYASABKAUSDAoEcm93cxgCIAEoBRIQCghmaWxlc2l6ZRgDIAEoBRIR",
            "CglpbWJhbGFuY2UYBCABKAgSRQoFcGxvdHMYBSADKAsyNi5naXRodWIuY29t",
            "Lm1ldGFwcm92Lm1vZGVsZGFwaS5zZXJ2aWNlcy5jb21tb24udjEuUGxvdBJQ",
            "Cgdjb2x1bW5zGAYgAygLMj8uZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRh",
            "cGkuc2VydmljZXMuY29tbW9uLnYxLkNvbHVtblByb2ZpbGUSSgoFdGFibGUY",
            "ByABKAsyOy5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5zZXJ2aWNl",
            "cy5jb21tb24udjEuVGFibGVWaWV3ImMKDE1vZGVsUHJvZmlsZRIMCgRuYW1l",
            "GAEgASgJEkUKBXBsb3RzGAIgAygLMjYuZ2l0aHViLmNvbS5tZXRhcHJvdi5t",
            "b2RlbGRhcGkuc2VydmljZXMuY29tbW9uLnYxLlBsb3QiZgoPRm9yZWNhc3RQ",
            "cm9maWxlEgwKBG5hbWUYASABKAkSRQoFcGxvdHMYAiADKAsyNi5naXRodWIu",
            "Y29tLm1ldGFwcm92Lm1vZGVsZGFwaS5zZXJ2aWNlcy5jb21tb24udjEuUGxv",
            "dCKlAQoMU3R1ZHlQcm9maWxlEkUKBXBsb3RzGAEgAygLMjYuZ2l0aHViLmNv",
            "bS5tZXRhcHJvdi5tb2RlbGRhcGkuc2VydmljZXMuY29tbW9uLnYxLlBsb3QS",
            "TgoGbW9kZWxzGAIgAygLMj4uZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRh",
            "cGkuc2VydmljZXMuY29tbW9uLnYxLk1vZGVsUHJvZmlsZSJMCgRQbG90EgwK",
            "BG5hbWUYASABKAkSDQoFdGl0bGUYAiABKAkSCwoDaW1nGAMgASgMEg0KBWZu",
            "YW1lGAQgASgJEgsKA3VybBgFIAEoCSLmAwoNQ29sdW1uUHJvZmlsZRIMCgRu",
            "YW1lGAEgASgJEgkKAW4YAiABKAUSDAoEdHlwZRgDIAEoCRIPCgdtaXNzaW5n",
            "GAQgASgFEhAKCGRpc3RpbmN0GAUgASgFEgwKBG1lYW4YBiABKAESCwoDc3Rk",
            "GAcgASgBEhAKCHZhcmlhbmNlGAggASgBEgsKA21pbhgJIAEoARILCgNtYXgY",
            "CiABKAESEAoIa3VydG9zaXMYCyABKAESEAoIc2tld25lc3MYDCABKAESCwoD",
            "c3VtGA0gASgBEgsKA21hZBgOIAEoARINCgV6ZXJvcxgPIAEoARILCgNwMjUY",
            "ECABKAESCwoDcDUwGBEgASgBEgsKA3A3NRgSIAEoARIMCgRwMTAwGBQgASgB",
            "EgsKA2lxchgVIAEoARIKCgJjdhgWIAEoARIRCglwX21pc3NpbmcYFyABKAES",
            "CwoDdG9wGBggASgFEgwKBGZyZXEYGSABKAUSDgoGaWdub3JlGBogASgIEg0K",
            "BWxhYmVsGBsgASgIEgwKBGNvcnIYHCABKAgSTgoJaGlzdG9ncmFtGB0gASgL",
            "MjsuZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkuc2VydmljZXMuY29t",
            "bW9uLnYxLkhpc3RvZ3JhbSIpCg5IaXN0b2dyYW1WYWx1ZRIMCgRuYW1lGAEg",
            "ASgJEgkKAXYYAiABKAIiXQoJSGlzdG9ncmFtElAKBnZhbHVlcxgBIAMoCzJA",
            "LmdpdGh1Yi5jb20ubWV0YXByb3YubW9kZWxkYXBpLnNlcnZpY2VzLmNvbW1v",
            "bi52MS5IaXN0b2dyYW1WYWx1ZSL2AgoNTmFtZXNwYWNlSW5mbxJbCgR0eXBl",
            "GAEgASgOMk0uZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkuc2Vydmlj",
            "ZXMuY29tbW9uLnYxLk5hbWVzcGFjZUluZm8uTmFtZXNwYWNlVHlwZRIMCgRO",
            "YW1lGAIgASgJEhAKCGFjY291bnRzGAMgASgFEg8KB2J1Y2tldHMYBCABKAUS",
            "DAoEbGFicxgFIAEoBRIUCgxzZXJ2aW5nc2l0ZXMYBiABKAUSEAoIZGF0YXNl",
            "dHMYByABKAUSEwoLZGF0YXNvdXJjZXMYCCABKAUSDwoHc3R1ZGllcxgJIAEo",
            "BRIOCgZtb2RlbHMYCiABKAUiawoNTmFtZXNwYWNlVHlwZRIKCgZURU5BTlQQ",
            "ABIPCgtEQVRBUFJPRFVDVBABEgcKA0xBQhACEg8KC1NFUlZJTkdTSVRFEAMS",
            "EAoMTU9ERUxEU1lTVEVNEAQSEQoNTU9ERUxEQ0FUQUxPRxAFIroBCglUYWJs",
            "ZVZpZXcSDAoEY29scxgBIAMoCRJMCgRyb3dzGAIgAygLMj4uZ2l0aHViLmNv",
            "bS5tZXRhcHJvdi5tb2RlbGRhcGkuc2VydmljZXMuY29tbW9uLnYxLlRhYmxl",
            "Vmlld1JvdxJRCghwcm9maWxlcxgDIAMoCzI/LmdpdGh1Yi5jb20ubWV0YXBy",
            "b3YubW9kZWxkYXBpLnNlcnZpY2VzLmNvbW1vbi52MS5Db2x1bW5Qcm9maWxl",
            "Ih4KDFRhYmxlVmlld1JvdxIOCgZ2YWx1ZXMYASADKAlCMlowZ2l0aHViLmNv",
            "bS9tZXRhcHJvdi9tb2RlbGRhcGkvc2VydmljZXMvY29tbW9uL3YxYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.DatasetProfile), global::Github.Com.Metaprov.modelaapi.Services.Common.V1.DatasetProfile.Parser, new[]{ "Cols", "Rows", "Filesize", "Imbalance", "Plots", "Columns", "Table" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ModelProfile), global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ModelProfile.Parser, new[]{ "Name", "Plots" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ForecastProfile), global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ForecastProfile.Parser, new[]{ "Name", "Plots" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.StudyProfile), global::Github.Com.Metaprov.modelaapi.Services.Common.V1.StudyProfile.Parser, new[]{ "Plots", "Models" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot), global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot.Parser, new[]{ "Name", "Title", "Img", "Fname", "Url" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile), global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile.Parser, new[]{ "Name", "N", "Type", "Missing", "Distinct", "Mean", "Std", "Variance", "Min", "Max", "Kurtosis", "Skewness", "Sum", "Mad", "Zeros", "P25", "P50", "P75", "P100", "Iqr", "Cv", "PMissing", "Top", "Freq", "Ignore", "Label", "Corr", "Histogram" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.HistogramValue), global::Github.Com.Metaprov.modelaapi.Services.Common.V1.HistogramValue.Parser, new[]{ "Name", "V" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Histogram), global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Histogram.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo), global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Parser, new[]{ "Type", "Name", "Accounts", "Buckets", "Labs", "Servingsites", "Datasets", "Datasources", "Studies", "Models" }, null, new[]{ typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Types.NamespaceType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableView), global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableView.Parser, new[]{ "Cols", "Rows", "Profiles" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableViewRow), global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableViewRow.Parser, new[]{ "Values" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DatasetProfile : pb::IMessage<DatasetProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DatasetProfile> _parser = new pb::MessageParser<DatasetProfile>(() => new DatasetProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasetProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.modelaapi.Services.Common.V1.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetProfile(DatasetProfile other) : this() {
      cols_ = other.cols_;
      rows_ = other.rows_;
      filesize_ = other.filesize_;
      imbalance_ = other.imbalance_;
      plots_ = other.plots_.Clone();
      columns_ = other.columns_.Clone();
      table_ = other.table_ != null ? other.table_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetProfile Clone() {
      return new DatasetProfile(this);
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 1;
    private int cols_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cols {
      get { return cols_; }
      set {
        cols_ = value;
      }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 2;
    private int rows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rows {
      get { return rows_; }
      set {
        rows_ = value;
      }
    }

    /// <summary>Field number for the "filesize" field.</summary>
    public const int FilesizeFieldNumber = 3;
    private int filesize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Filesize {
      get { return filesize_; }
      set {
        filesize_ = value;
      }
    }

    /// <summary>Field number for the "imbalance" field.</summary>
    public const int ImbalanceFieldNumber = 4;
    private bool imbalance_;
    /// <summary>
    /// return true if this dataset is imbalance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Imbalance {
      get { return imbalance_; }
      set {
        imbalance_ = value;
      }
    }

    /// <summary>Field number for the "plots" field.</summary>
    public const int PlotsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> _repeated_plots_codec
        = pb::FieldCodec.ForMessage(42, global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> plots_ = new pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> Plots {
      get { return plots_; }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(50, global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile> columns_ = new pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 7;
    private global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableView table_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableView Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasetProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasetProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cols != other.Cols) return false;
      if (Rows != other.Rows) return false;
      if (Filesize != other.Filesize) return false;
      if (Imbalance != other.Imbalance) return false;
      if(!plots_.Equals(other.plots_)) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (!object.Equals(Table, other.Table)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cols != 0) hash ^= Cols.GetHashCode();
      if (Rows != 0) hash ^= Rows.GetHashCode();
      if (Filesize != 0) hash ^= Filesize.GetHashCode();
      if (Imbalance != false) hash ^= Imbalance.GetHashCode();
      hash ^= plots_.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (table_ != null) hash ^= Table.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Cols != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cols);
      }
      if (Rows != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rows);
      }
      if (Filesize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Filesize);
      }
      if (Imbalance != false) {
        output.WriteRawTag(32);
        output.WriteBool(Imbalance);
      }
      plots_.WriteTo(output, _repeated_plots_codec);
      columns_.WriteTo(output, _repeated_columns_codec);
      if (table_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Table);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Cols != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cols);
      }
      if (Rows != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rows);
      }
      if (Filesize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Filesize);
      }
      if (Imbalance != false) {
        output.WriteRawTag(32);
        output.WriteBool(Imbalance);
      }
      plots_.WriteTo(ref output, _repeated_plots_codec);
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (table_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Table);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cols != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cols);
      }
      if (Rows != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rows);
      }
      if (Filesize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Filesize);
      }
      if (Imbalance != false) {
        size += 1 + 1;
      }
      size += plots_.CalculateSize(_repeated_plots_codec);
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasetProfile other) {
      if (other == null) {
        return;
      }
      if (other.Cols != 0) {
        Cols = other.Cols;
      }
      if (other.Rows != 0) {
        Rows = other.Rows;
      }
      if (other.Filesize != 0) {
        Filesize = other.Filesize;
      }
      if (other.Imbalance != false) {
        Imbalance = other.Imbalance;
      }
      plots_.Add(other.plots_);
      columns_.Add(other.columns_);
      if (other.table_ != null) {
        if (table_ == null) {
          Table = new global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableView();
        }
        Table.MergeFrom(other.Table);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cols = input.ReadInt32();
            break;
          }
          case 16: {
            Rows = input.ReadInt32();
            break;
          }
          case 24: {
            Filesize = input.ReadInt32();
            break;
          }
          case 32: {
            Imbalance = input.ReadBool();
            break;
          }
          case 42: {
            plots_.AddEntriesFrom(input, _repeated_plots_codec);
            break;
          }
          case 50: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 58: {
            if (table_ == null) {
              Table = new global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableView();
            }
            input.ReadMessage(Table);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Cols = input.ReadInt32();
            break;
          }
          case 16: {
            Rows = input.ReadInt32();
            break;
          }
          case 24: {
            Filesize = input.ReadInt32();
            break;
          }
          case 32: {
            Imbalance = input.ReadBool();
            break;
          }
          case 42: {
            plots_.AddEntriesFrom(ref input, _repeated_plots_codec);
            break;
          }
          case 50: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 58: {
            if (table_ == null) {
              Table = new global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableView();
            }
            input.ReadMessage(Table);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  //////////////////////////////////////////////////////////////////////////
  ////// Model profile
  /////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class ModelProfile : pb::IMessage<ModelProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelProfile> _parser = new pb::MessageParser<ModelProfile>(() => new ModelProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.modelaapi.Services.Common.V1.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelProfile(ModelProfile other) : this() {
      name_ = other.name_;
      plots_ = other.plots_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelProfile Clone() {
      return new ModelProfile(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plots" field.</summary>
    public const int PlotsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> _repeated_plots_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> plots_ = new pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> Plots {
      get { return plots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!plots_.Equals(other.plots_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= plots_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      plots_.WriteTo(output, _repeated_plots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      plots_.WriteTo(ref output, _repeated_plots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += plots_.CalculateSize(_repeated_plots_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelProfile other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      plots_.Add(other.plots_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            plots_.AddEntriesFrom(input, _repeated_plots_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            plots_.AddEntriesFrom(ref input, _repeated_plots_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  //////////////////////////////////////////////////////////////////////////
  ////// Forecast profile
  /////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class ForecastProfile : pb::IMessage<ForecastProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ForecastProfile> _parser = new pb::MessageParser<ForecastProfile>(() => new ForecastProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForecastProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.modelaapi.Services.Common.V1.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForecastProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForecastProfile(ForecastProfile other) : this() {
      name_ = other.name_;
      plots_ = other.plots_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForecastProfile Clone() {
      return new ForecastProfile(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plots" field.</summary>
    public const int PlotsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> _repeated_plots_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> plots_ = new pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> Plots {
      get { return plots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForecastProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForecastProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!plots_.Equals(other.plots_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= plots_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      plots_.WriteTo(output, _repeated_plots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      plots_.WriteTo(ref output, _repeated_plots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += plots_.CalculateSize(_repeated_plots_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForecastProfile other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      plots_.Add(other.plots_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            plots_.AddEntriesFrom(input, _repeated_plots_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            plots_.AddEntriesFrom(ref input, _repeated_plots_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  //////////////////////////////////////////////////////////////////////////
  ////// Study profile
  /////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class StudyProfile : pb::IMessage<StudyProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StudyProfile> _parser = new pb::MessageParser<StudyProfile>(() => new StudyProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StudyProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.modelaapi.Services.Common.V1.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyProfile(StudyProfile other) : this() {
      plots_ = other.plots_.Clone();
      models_ = other.models_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyProfile Clone() {
      return new StudyProfile(this);
    }

    /// <summary>Field number for the "plots" field.</summary>
    public const int PlotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> _repeated_plots_codec
        = pb::FieldCodec.ForMessage(10, global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> plots_ = new pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Plot> Plots {
      get { return plots_; }
    }

    /// <summary>Field number for the "models" field.</summary>
    public const int ModelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ModelProfile> _repeated_models_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ModelProfile.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ModelProfile> models_ = new pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ModelProfile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ModelProfile> Models {
      get { return models_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StudyProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StudyProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plots_.Equals(other.plots_)) return false;
      if(!models_.Equals(other.models_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plots_.GetHashCode();
      hash ^= models_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plots_.WriteTo(output, _repeated_plots_codec);
      models_.WriteTo(output, _repeated_models_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plots_.WriteTo(ref output, _repeated_plots_codec);
      models_.WriteTo(ref output, _repeated_models_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plots_.CalculateSize(_repeated_plots_codec);
      size += models_.CalculateSize(_repeated_models_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StudyProfile other) {
      if (other == null) {
        return;
      }
      plots_.Add(other.plots_);
      models_.Add(other.models_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plots_.AddEntriesFrom(input, _repeated_plots_codec);
            break;
          }
          case 18: {
            models_.AddEntriesFrom(input, _repeated_models_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plots_.AddEntriesFrom(ref input, _repeated_plots_codec);
            break;
          }
          case 18: {
            models_.AddEntriesFrom(ref input, _repeated_models_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Plot : pb::IMessage<Plot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Plot> _parser = new pb::MessageParser<Plot>(() => new Plot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.modelaapi.Services.Common.V1.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plot(Plot other) : this() {
      name_ = other.name_;
      title_ = other.title_;
      img_ = other.img_;
      fname_ = other.fname_;
      url_ = other.url_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plot Clone() {
      return new Plot(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    /// <summary>
    /// The visualization title
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "img" field.</summary>
    public const int ImgFieldNumber = 3;
    private pb::ByteString img_ = pb::ByteString.Empty;
    /// <summary>
    /// image as bin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Img {
      get { return img_; }
      set {
        img_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fname" field.</summary>
    public const int FnameFieldNumber = 4;
    private string fname_ = "";
    /// <summary>
    /// image file name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fname {
      get { return fname_; }
      set {
        fname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 5;
    private string url_ = "";
    /// <summary>
    /// The url in the bucket
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Title != other.Title) return false;
      if (Img != other.Img) return false;
      if (Fname != other.Fname) return false;
      if (Url != other.Url) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Img.Length != 0) hash ^= Img.GetHashCode();
      if (Fname.Length != 0) hash ^= Fname.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Img.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Img);
      }
      if (Fname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Fname);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Url);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Img.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Img);
      }
      if (Fname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Fname);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Url);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Img.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Img);
      }
      if (Fname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fname);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plot other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Img.Length != 0) {
        Img = other.Img;
      }
      if (other.Fname.Length != 0) {
        Fname = other.Fname;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Img = input.ReadBytes();
            break;
          }
          case 34: {
            Fname = input.ReadString();
            break;
          }
          case 42: {
            Url = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Img = input.ReadBytes();
            break;
          }
          case 34: {
            Fname = input.ReadString();
            break;
          }
          case 42: {
            Url = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColumnProfile : pb::IMessage<ColumnProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColumnProfile> _parser = new pb::MessageParser<ColumnProfile>(() => new ColumnProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.modelaapi.Services.Common.V1.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnProfile(ColumnProfile other) : this() {
      name_ = other.name_;
      n_ = other.n_;
      type_ = other.type_;
      missing_ = other.missing_;
      distinct_ = other.distinct_;
      mean_ = other.mean_;
      std_ = other.std_;
      variance_ = other.variance_;
      min_ = other.min_;
      max_ = other.max_;
      kurtosis_ = other.kurtosis_;
      skewness_ = other.skewness_;
      sum_ = other.sum_;
      mad_ = other.mad_;
      zeros_ = other.zeros_;
      p25_ = other.p25_;
      p50_ = other.p50_;
      p75_ = other.p75_;
      p100_ = other.p100_;
      iqr_ = other.iqr_;
      cv_ = other.cv_;
      pMissing_ = other.pMissing_;
      top_ = other.top_;
      freq_ = other.freq_;
      ignore_ = other.ignore_;
      label_ = other.label_;
      corr_ = other.corr_;
      histogram_ = other.histogram_ != null ? other.histogram_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnProfile Clone() {
      return new ColumnProfile(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 2;
    private int n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N {
      get { return n_; }
      set {
        n_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "missing" field.</summary>
    public const int MissingFieldNumber = 4;
    private int missing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Missing {
      get { return missing_; }
      set {
        missing_ = value;
      }
    }

    /// <summary>Field number for the "distinct" field.</summary>
    public const int DistinctFieldNumber = 5;
    private int distinct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Distinct {
      get { return distinct_; }
      set {
        distinct_ = value;
      }
    }

    /// <summary>Field number for the "mean" field.</summary>
    public const int MeanFieldNumber = 6;
    private double mean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Mean {
      get { return mean_; }
      set {
        mean_ = value;
      }
    }

    /// <summary>Field number for the "std" field.</summary>
    public const int StdFieldNumber = 7;
    private double std_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Std {
      get { return std_; }
      set {
        std_ = value;
      }
    }

    /// <summary>Field number for the "variance" field.</summary>
    public const int VarianceFieldNumber = 8;
    private double variance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Variance {
      get { return variance_; }
      set {
        variance_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 9;
    private double min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 10;
    private double max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "kurtosis" field.</summary>
    public const int KurtosisFieldNumber = 11;
    private double kurtosis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Kurtosis {
      get { return kurtosis_; }
      set {
        kurtosis_ = value;
      }
    }

    /// <summary>Field number for the "skewness" field.</summary>
    public const int SkewnessFieldNumber = 12;
    private double skewness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Skewness {
      get { return skewness_; }
      set {
        skewness_ = value;
      }
    }

    /// <summary>Field number for the "sum" field.</summary>
    public const int SumFieldNumber = 13;
    private double sum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sum {
      get { return sum_; }
      set {
        sum_ = value;
      }
    }

    /// <summary>Field number for the "mad" field.</summary>
    public const int MadFieldNumber = 14;
    private double mad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Mad {
      get { return mad_; }
      set {
        mad_ = value;
      }
    }

    /// <summary>Field number for the "zeros" field.</summary>
    public const int ZerosFieldNumber = 15;
    private double zeros_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Zeros {
      get { return zeros_; }
      set {
        zeros_ = value;
      }
    }

    /// <summary>Field number for the "p25" field.</summary>
    public const int P25FieldNumber = 16;
    private double p25_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P25 {
      get { return p25_; }
      set {
        p25_ = value;
      }
    }

    /// <summary>Field number for the "p50" field.</summary>
    public const int P50FieldNumber = 17;
    private double p50_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P50 {
      get { return p50_; }
      set {
        p50_ = value;
      }
    }

    /// <summary>Field number for the "p75" field.</summary>
    public const int P75FieldNumber = 18;
    private double p75_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P75 {
      get { return p75_; }
      set {
        p75_ = value;
      }
    }

    /// <summary>Field number for the "p100" field.</summary>
    public const int P100FieldNumber = 20;
    private double p100_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P100 {
      get { return p100_; }
      set {
        p100_ = value;
      }
    }

    /// <summary>Field number for the "iqr" field.</summary>
    public const int IqrFieldNumber = 21;
    private double iqr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Iqr {
      get { return iqr_; }
      set {
        iqr_ = value;
      }
    }

    /// <summary>Field number for the "cv" field.</summary>
    public const int CvFieldNumber = 22;
    private double cv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cv {
      get { return cv_; }
      set {
        cv_ = value;
      }
    }

    /// <summary>Field number for the "p_missing" field.</summary>
    public const int PMissingFieldNumber = 23;
    private double pMissing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PMissing {
      get { return pMissing_; }
      set {
        pMissing_ = value;
      }
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 24;
    private int top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "freq" field.</summary>
    public const int FreqFieldNumber = 25;
    private int freq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Freq {
      get { return freq_; }
      set {
        freq_ = value;
      }
    }

    /// <summary>Field number for the "ignore" field.</summary>
    public const int IgnoreFieldNumber = 26;
    private bool ignore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ignore {
      get { return ignore_; }
      set {
        ignore_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 27;
    private bool label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "corr" field.</summary>
    public const int CorrFieldNumber = 28;
    private bool corr_;
    /// <summary>
    /// return true if this cols is corrlated to another cols
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Corr {
      get { return corr_; }
      set {
        corr_ = value;
      }
    }

    /// <summary>Field number for the "histogram" field.</summary>
    public const int HistogramFieldNumber = 29;
    private global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Histogram histogram_;
    /// <summary>
    /// histogram
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Histogram Histogram {
      get { return histogram_; }
      set {
        histogram_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (N != other.N) return false;
      if (Type != other.Type) return false;
      if (Missing != other.Missing) return false;
      if (Distinct != other.Distinct) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mean, other.Mean)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Std, other.Std)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Variance, other.Variance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Min, other.Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Max, other.Max)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Kurtosis, other.Kurtosis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Skewness, other.Skewness)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sum, other.Sum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mad, other.Mad)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Zeros, other.Zeros)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(P25, other.P25)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(P50, other.P50)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(P75, other.P75)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(P100, other.P100)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Iqr, other.Iqr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Cv, other.Cv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PMissing, other.PMissing)) return false;
      if (Top != other.Top) return false;
      if (Freq != other.Freq) return false;
      if (Ignore != other.Ignore) return false;
      if (Label != other.Label) return false;
      if (Corr != other.Corr) return false;
      if (!object.Equals(Histogram, other.Histogram)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (N != 0) hash ^= N.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Missing != 0) hash ^= Missing.GetHashCode();
      if (Distinct != 0) hash ^= Distinct.GetHashCode();
      if (Mean != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mean);
      if (Std != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Std);
      if (Variance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Variance);
      if (Min != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Min);
      if (Max != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Max);
      if (Kurtosis != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Kurtosis);
      if (Skewness != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Skewness);
      if (Sum != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sum);
      if (Mad != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mad);
      if (Zeros != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Zeros);
      if (P25 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(P25);
      if (P50 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(P50);
      if (P75 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(P75);
      if (P100 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(P100);
      if (Iqr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Iqr);
      if (Cv != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Cv);
      if (PMissing != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PMissing);
      if (Top != 0) hash ^= Top.GetHashCode();
      if (Freq != 0) hash ^= Freq.GetHashCode();
      if (Ignore != false) hash ^= Ignore.GetHashCode();
      if (Label != false) hash ^= Label.GetHashCode();
      if (Corr != false) hash ^= Corr.GetHashCode();
      if (histogram_ != null) hash ^= Histogram.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (N != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(N);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (Missing != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Missing);
      }
      if (Distinct != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Distinct);
      }
      if (Mean != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Mean);
      }
      if (Std != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Std);
      }
      if (Variance != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Variance);
      }
      if (Min != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Min);
      }
      if (Max != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Max);
      }
      if (Kurtosis != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Kurtosis);
      }
      if (Skewness != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Skewness);
      }
      if (Sum != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Sum);
      }
      if (Mad != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Mad);
      }
      if (Zeros != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Zeros);
      }
      if (P25 != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(P25);
      }
      if (P50 != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(P50);
      }
      if (P75 != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(P75);
      }
      if (P100 != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(P100);
      }
      if (Iqr != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Iqr);
      }
      if (Cv != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Cv);
      }
      if (PMissing != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(PMissing);
      }
      if (Top != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Top);
      }
      if (Freq != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Freq);
      }
      if (Ignore != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Ignore);
      }
      if (Label != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Label);
      }
      if (Corr != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Corr);
      }
      if (histogram_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(Histogram);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (N != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(N);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (Missing != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Missing);
      }
      if (Distinct != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Distinct);
      }
      if (Mean != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Mean);
      }
      if (Std != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Std);
      }
      if (Variance != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Variance);
      }
      if (Min != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Min);
      }
      if (Max != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Max);
      }
      if (Kurtosis != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Kurtosis);
      }
      if (Skewness != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Skewness);
      }
      if (Sum != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Sum);
      }
      if (Mad != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Mad);
      }
      if (Zeros != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Zeros);
      }
      if (P25 != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(P25);
      }
      if (P50 != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(P50);
      }
      if (P75 != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(P75);
      }
      if (P100 != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(P100);
      }
      if (Iqr != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Iqr);
      }
      if (Cv != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Cv);
      }
      if (PMissing != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(PMissing);
      }
      if (Top != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Top);
      }
      if (Freq != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Freq);
      }
      if (Ignore != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Ignore);
      }
      if (Label != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Label);
      }
      if (Corr != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Corr);
      }
      if (histogram_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(Histogram);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (N != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(N);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Missing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Missing);
      }
      if (Distinct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distinct);
      }
      if (Mean != 0D) {
        size += 1 + 8;
      }
      if (Std != 0D) {
        size += 1 + 8;
      }
      if (Variance != 0D) {
        size += 1 + 8;
      }
      if (Min != 0D) {
        size += 1 + 8;
      }
      if (Max != 0D) {
        size += 1 + 8;
      }
      if (Kurtosis != 0D) {
        size += 1 + 8;
      }
      if (Skewness != 0D) {
        size += 1 + 8;
      }
      if (Sum != 0D) {
        size += 1 + 8;
      }
      if (Mad != 0D) {
        size += 1 + 8;
      }
      if (Zeros != 0D) {
        size += 1 + 8;
      }
      if (P25 != 0D) {
        size += 2 + 8;
      }
      if (P50 != 0D) {
        size += 2 + 8;
      }
      if (P75 != 0D) {
        size += 2 + 8;
      }
      if (P100 != 0D) {
        size += 2 + 8;
      }
      if (Iqr != 0D) {
        size += 2 + 8;
      }
      if (Cv != 0D) {
        size += 2 + 8;
      }
      if (PMissing != 0D) {
        size += 2 + 8;
      }
      if (Top != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Top);
      }
      if (Freq != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Freq);
      }
      if (Ignore != false) {
        size += 2 + 1;
      }
      if (Label != false) {
        size += 2 + 1;
      }
      if (Corr != false) {
        size += 2 + 1;
      }
      if (histogram_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Histogram);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnProfile other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.N != 0) {
        N = other.N;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Missing != 0) {
        Missing = other.Missing;
      }
      if (other.Distinct != 0) {
        Distinct = other.Distinct;
      }
      if (other.Mean != 0D) {
        Mean = other.Mean;
      }
      if (other.Std != 0D) {
        Std = other.Std;
      }
      if (other.Variance != 0D) {
        Variance = other.Variance;
      }
      if (other.Min != 0D) {
        Min = other.Min;
      }
      if (other.Max != 0D) {
        Max = other.Max;
      }
      if (other.Kurtosis != 0D) {
        Kurtosis = other.Kurtosis;
      }
      if (other.Skewness != 0D) {
        Skewness = other.Skewness;
      }
      if (other.Sum != 0D) {
        Sum = other.Sum;
      }
      if (other.Mad != 0D) {
        Mad = other.Mad;
      }
      if (other.Zeros != 0D) {
        Zeros = other.Zeros;
      }
      if (other.P25 != 0D) {
        P25 = other.P25;
      }
      if (other.P50 != 0D) {
        P50 = other.P50;
      }
      if (other.P75 != 0D) {
        P75 = other.P75;
      }
      if (other.P100 != 0D) {
        P100 = other.P100;
      }
      if (other.Iqr != 0D) {
        Iqr = other.Iqr;
      }
      if (other.Cv != 0D) {
        Cv = other.Cv;
      }
      if (other.PMissing != 0D) {
        PMissing = other.PMissing;
      }
      if (other.Top != 0) {
        Top = other.Top;
      }
      if (other.Freq != 0) {
        Freq = other.Freq;
      }
      if (other.Ignore != false) {
        Ignore = other.Ignore;
      }
      if (other.Label != false) {
        Label = other.Label;
      }
      if (other.Corr != false) {
        Corr = other.Corr;
      }
      if (other.histogram_ != null) {
        if (histogram_ == null) {
          Histogram = new global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Histogram();
        }
        Histogram.MergeFrom(other.Histogram);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            N = input.ReadInt32();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            Missing = input.ReadInt32();
            break;
          }
          case 40: {
            Distinct = input.ReadInt32();
            break;
          }
          case 49: {
            Mean = input.ReadDouble();
            break;
          }
          case 57: {
            Std = input.ReadDouble();
            break;
          }
          case 65: {
            Variance = input.ReadDouble();
            break;
          }
          case 73: {
            Min = input.ReadDouble();
            break;
          }
          case 81: {
            Max = input.ReadDouble();
            break;
          }
          case 89: {
            Kurtosis = input.ReadDouble();
            break;
          }
          case 97: {
            Skewness = input.ReadDouble();
            break;
          }
          case 105: {
            Sum = input.ReadDouble();
            break;
          }
          case 113: {
            Mad = input.ReadDouble();
            break;
          }
          case 121: {
            Zeros = input.ReadDouble();
            break;
          }
          case 129: {
            P25 = input.ReadDouble();
            break;
          }
          case 137: {
            P50 = input.ReadDouble();
            break;
          }
          case 145: {
            P75 = input.ReadDouble();
            break;
          }
          case 161: {
            P100 = input.ReadDouble();
            break;
          }
          case 169: {
            Iqr = input.ReadDouble();
            break;
          }
          case 177: {
            Cv = input.ReadDouble();
            break;
          }
          case 185: {
            PMissing = input.ReadDouble();
            break;
          }
          case 192: {
            Top = input.ReadInt32();
            break;
          }
          case 200: {
            Freq = input.ReadInt32();
            break;
          }
          case 208: {
            Ignore = input.ReadBool();
            break;
          }
          case 216: {
            Label = input.ReadBool();
            break;
          }
          case 224: {
            Corr = input.ReadBool();
            break;
          }
          case 234: {
            if (histogram_ == null) {
              Histogram = new global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Histogram();
            }
            input.ReadMessage(Histogram);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            N = input.ReadInt32();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            Missing = input.ReadInt32();
            break;
          }
          case 40: {
            Distinct = input.ReadInt32();
            break;
          }
          case 49: {
            Mean = input.ReadDouble();
            break;
          }
          case 57: {
            Std = input.ReadDouble();
            break;
          }
          case 65: {
            Variance = input.ReadDouble();
            break;
          }
          case 73: {
            Min = input.ReadDouble();
            break;
          }
          case 81: {
            Max = input.ReadDouble();
            break;
          }
          case 89: {
            Kurtosis = input.ReadDouble();
            break;
          }
          case 97: {
            Skewness = input.ReadDouble();
            break;
          }
          case 105: {
            Sum = input.ReadDouble();
            break;
          }
          case 113: {
            Mad = input.ReadDouble();
            break;
          }
          case 121: {
            Zeros = input.ReadDouble();
            break;
          }
          case 129: {
            P25 = input.ReadDouble();
            break;
          }
          case 137: {
            P50 = input.ReadDouble();
            break;
          }
          case 145: {
            P75 = input.ReadDouble();
            break;
          }
          case 161: {
            P100 = input.ReadDouble();
            break;
          }
          case 169: {
            Iqr = input.ReadDouble();
            break;
          }
          case 177: {
            Cv = input.ReadDouble();
            break;
          }
          case 185: {
            PMissing = input.ReadDouble();
            break;
          }
          case 192: {
            Top = input.ReadInt32();
            break;
          }
          case 200: {
            Freq = input.ReadInt32();
            break;
          }
          case 208: {
            Ignore = input.ReadBool();
            break;
          }
          case 216: {
            Label = input.ReadBool();
            break;
          }
          case 224: {
            Corr = input.ReadBool();
            break;
          }
          case 234: {
            if (histogram_ == null) {
              Histogram = new global::Github.Com.Metaprov.modelaapi.Services.Common.V1.Histogram();
            }
            input.ReadMessage(Histogram);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HistogramValue : pb::IMessage<HistogramValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HistogramValue> _parser = new pb::MessageParser<HistogramValue>(() => new HistogramValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistogramValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.modelaapi.Services.Common.V1.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistogramValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistogramValue(HistogramValue other) : this() {
      name_ = other.name_;
      v_ = other.v_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistogramValue Clone() {
      return new HistogramValue(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 2;
    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistogramValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistogramValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(V, other.V)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (V != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(V);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (V != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(V);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (V != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(V);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (V != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistogramValue other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.V != 0F) {
        V = other.V;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 21: {
            V = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 21: {
            V = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Histogram : pb::IMessage<Histogram>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Histogram> _parser = new pb::MessageParser<Histogram>(() => new Histogram());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Histogram> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.modelaapi.Services.Common.V1.CommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Histogram() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Histogram(Histogram other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Histogram Clone() {
      return new Histogram(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.HistogramValue> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Github.Com.Metaprov.modelaapi.Services.Common.V1.HistogramValue.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.HistogramValue> values_ = new pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.HistogramValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.HistogramValue> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Histogram);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Histogram other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      values_.WriteTo(ref output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Histogram other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            values_.AddEntriesFrom(ref input, _repeated_values_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NamespaceInfo : pb::IMessage<NamespaceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NamespaceInfo> _parser = new pb::MessageParser<NamespaceInfo>(() => new NamespaceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NamespaceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.modelaapi.Services.Common.V1.CommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamespaceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamespaceInfo(NamespaceInfo other) : this() {
      type_ = other.type_;
      name_ = other.name_;
      accounts_ = other.accounts_;
      buckets_ = other.buckets_;
      labs_ = other.labs_;
      servingsites_ = other.servingsites_;
      datasets_ = other.datasets_;
      datasources_ = other.datasources_;
      studies_ = other.studies_;
      models_ = other.models_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamespaceInfo Clone() {
      return new NamespaceInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Types.NamespaceType type_ = global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Types.NamespaceType.Tenant;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Types.NamespaceType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accounts" field.</summary>
    public const int AccountsFieldNumber = 3;
    private int accounts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Accounts {
      get { return accounts_; }
      set {
        accounts_ = value;
      }
    }

    /// <summary>Field number for the "buckets" field.</summary>
    public const int BucketsFieldNumber = 4;
    private int buckets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Buckets {
      get { return buckets_; }
      set {
        buckets_ = value;
      }
    }

    /// <summary>Field number for the "labs" field.</summary>
    public const int LabsFieldNumber = 5;
    private int labs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Labs {
      get { return labs_; }
      set {
        labs_ = value;
      }
    }

    /// <summary>Field number for the "servingsites" field.</summary>
    public const int ServingsitesFieldNumber = 6;
    private int servingsites_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Servingsites {
      get { return servingsites_; }
      set {
        servingsites_ = value;
      }
    }

    /// <summary>Field number for the "datasets" field.</summary>
    public const int DatasetsFieldNumber = 7;
    private int datasets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Datasets {
      get { return datasets_; }
      set {
        datasets_ = value;
      }
    }

    /// <summary>Field number for the "datasources" field.</summary>
    public const int DatasourcesFieldNumber = 8;
    private int datasources_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Datasources {
      get { return datasources_; }
      set {
        datasources_ = value;
      }
    }

    /// <summary>Field number for the "studies" field.</summary>
    public const int StudiesFieldNumber = 9;
    private int studies_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Studies {
      get { return studies_; }
      set {
        studies_ = value;
      }
    }

    /// <summary>Field number for the "models" field.</summary>
    public const int ModelsFieldNumber = 10;
    private int models_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Models {
      get { return models_; }
      set {
        models_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NamespaceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NamespaceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Accounts != other.Accounts) return false;
      if (Buckets != other.Buckets) return false;
      if (Labs != other.Labs) return false;
      if (Servingsites != other.Servingsites) return false;
      if (Datasets != other.Datasets) return false;
      if (Datasources != other.Datasources) return false;
      if (Studies != other.Studies) return false;
      if (Models != other.Models) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Types.NamespaceType.Tenant) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Accounts != 0) hash ^= Accounts.GetHashCode();
      if (Buckets != 0) hash ^= Buckets.GetHashCode();
      if (Labs != 0) hash ^= Labs.GetHashCode();
      if (Servingsites != 0) hash ^= Servingsites.GetHashCode();
      if (Datasets != 0) hash ^= Datasets.GetHashCode();
      if (Datasources != 0) hash ^= Datasources.GetHashCode();
      if (Studies != 0) hash ^= Studies.GetHashCode();
      if (Models != 0) hash ^= Models.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Types.NamespaceType.Tenant) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Accounts != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Accounts);
      }
      if (Buckets != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Buckets);
      }
      if (Labs != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Labs);
      }
      if (Servingsites != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Servingsites);
      }
      if (Datasets != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Datasets);
      }
      if (Datasources != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Datasources);
      }
      if (Studies != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Studies);
      }
      if (Models != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Models);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Types.NamespaceType.Tenant) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Accounts != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Accounts);
      }
      if (Buckets != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Buckets);
      }
      if (Labs != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Labs);
      }
      if (Servingsites != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Servingsites);
      }
      if (Datasets != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Datasets);
      }
      if (Datasources != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Datasources);
      }
      if (Studies != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Studies);
      }
      if (Models != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Models);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Types.NamespaceType.Tenant) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Accounts != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Accounts);
      }
      if (Buckets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Buckets);
      }
      if (Labs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Labs);
      }
      if (Servingsites != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Servingsites);
      }
      if (Datasets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Datasets);
      }
      if (Datasources != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Datasources);
      }
      if (Studies != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Studies);
      }
      if (Models != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Models);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NamespaceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Types.NamespaceType.Tenant) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Accounts != 0) {
        Accounts = other.Accounts;
      }
      if (other.Buckets != 0) {
        Buckets = other.Buckets;
      }
      if (other.Labs != 0) {
        Labs = other.Labs;
      }
      if (other.Servingsites != 0) {
        Servingsites = other.Servingsites;
      }
      if (other.Datasets != 0) {
        Datasets = other.Datasets;
      }
      if (other.Datasources != 0) {
        Datasources = other.Datasources;
      }
      if (other.Studies != 0) {
        Studies = other.Studies;
      }
      if (other.Models != 0) {
        Models = other.Models;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Types.NamespaceType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Accounts = input.ReadInt32();
            break;
          }
          case 32: {
            Buckets = input.ReadInt32();
            break;
          }
          case 40: {
            Labs = input.ReadInt32();
            break;
          }
          case 48: {
            Servingsites = input.ReadInt32();
            break;
          }
          case 56: {
            Datasets = input.ReadInt32();
            break;
          }
          case 64: {
            Datasources = input.ReadInt32();
            break;
          }
          case 72: {
            Studies = input.ReadInt32();
            break;
          }
          case 80: {
            Models = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Github.Com.Metaprov.modelaapi.Services.Common.V1.NamespaceInfo.Types.NamespaceType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Accounts = input.ReadInt32();
            break;
          }
          case 32: {
            Buckets = input.ReadInt32();
            break;
          }
          case 40: {
            Labs = input.ReadInt32();
            break;
          }
          case 48: {
            Servingsites = input.ReadInt32();
            break;
          }
          case 56: {
            Datasets = input.ReadInt32();
            break;
          }
          case 64: {
            Datasources = input.ReadInt32();
            break;
          }
          case 72: {
            Studies = input.ReadInt32();
            break;
          }
          case 80: {
            Models = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the NamespaceInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum NamespaceType {
        [pbr::OriginalName("TENANT")] Tenant = 0,
        [pbr::OriginalName("DATAPRODUCT")] Dataproduct = 1,
        [pbr::OriginalName("LAB")] Lab = 2,
        [pbr::OriginalName("SERVINGSITE")] Servingsite = 3,
        [pbr::OriginalName("MODELDSYSTEM")] Modeldsystem = 4,
        [pbr::OriginalName("MODELDCATALOG")] Modeldcatalog = 5,
      }

    }
    #endregion

  }

  public sealed partial class TableView : pb::IMessage<TableView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TableView> _parser = new pb::MessageParser<TableView>(() => new TableView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.modelaapi.Services.Common.V1.CommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableView(TableView other) : this() {
      cols_ = other.cols_.Clone();
      rows_ = other.rows_.Clone();
      profiles_ = other.profiles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableView Clone() {
      return new TableView(this);
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_cols_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> cols_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cols {
      get { return cols_; }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableViewRow> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableViewRow.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableViewRow> rows_ = new pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableViewRow>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.TableViewRow> Rows {
      get { return rows_; }
    }

    /// <summary>Field number for the "profiles" field.</summary>
    public const int ProfilesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile> _repeated_profiles_codec
        = pb::FieldCodec.ForMessage(26, global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile> profiles_ = new pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.modelaapi.Services.Common.V1.ColumnProfile> Profiles {
      get { return profiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cols_.Equals(other.cols_)) return false;
      if(!rows_.Equals(other.rows_)) return false;
      if(!profiles_.Equals(other.profiles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cols_.GetHashCode();
      hash ^= rows_.GetHashCode();
      hash ^= profiles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cols_.WriteTo(output, _repeated_cols_codec);
      rows_.WriteTo(output, _repeated_rows_codec);
      profiles_.WriteTo(output, _repeated_profiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cols_.WriteTo(ref output, _repeated_cols_codec);
      rows_.WriteTo(ref output, _repeated_rows_codec);
      profiles_.WriteTo(ref output, _repeated_profiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cols_.CalculateSize(_repeated_cols_codec);
      size += rows_.CalculateSize(_repeated_rows_codec);
      size += profiles_.CalculateSize(_repeated_profiles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableView other) {
      if (other == null) {
        return;
      }
      cols_.Add(other.cols_);
      rows_.Add(other.rows_);
      profiles_.Add(other.profiles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cols_.AddEntriesFrom(input, _repeated_cols_codec);
            break;
          }
          case 18: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
          case 26: {
            profiles_.AddEntriesFrom(input, _repeated_profiles_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            cols_.AddEntriesFrom(ref input, _repeated_cols_codec);
            break;
          }
          case 18: {
            rows_.AddEntriesFrom(ref input, _repeated_rows_codec);
            break;
          }
          case 26: {
            profiles_.AddEntriesFrom(ref input, _repeated_profiles_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TableViewRow : pb::IMessage<TableViewRow>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TableViewRow> _parser = new pb::MessageParser<TableViewRow>(() => new TableViewRow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableViewRow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.modelaapi.Services.Common.V1.CommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableViewRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableViewRow(TableViewRow other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableViewRow Clone() {
      return new TableViewRow(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_values_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> values_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableViewRow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableViewRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      values_.WriteTo(ref output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableViewRow other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            values_.AddEntriesFrom(ref input, _repeated_values_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
