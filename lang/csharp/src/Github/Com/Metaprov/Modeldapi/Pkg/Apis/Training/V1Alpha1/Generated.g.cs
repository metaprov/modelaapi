// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1/generated.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1 {

  /// <summary>Holder for reflection information generated from github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1/generated.proto</summary>
  public static partial class GeneratedReflection {

    #region Descriptor
    /// <summary>File descriptor for github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1/generated.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GeneratedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkhnaXRodWIuY29tL21ldGFwcm92L21vZGVsZGFwaS9wa2cvYXBpcy90cmFp",
            "bmluZy92MWFscGhhMS9nZW5lcmF0ZWQucHJvdG8SOGdpdGh1Yi5jb20ubWV0",
            "YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExGkdn",
            "aXRodWIuY29tL21ldGFwcm92L21vZGVsZGFwaS9wa2cvYXBpcy9jYXRhbG9n",
            "L3YxYWxwaGExL2dlbmVyYXRlZC5wcm90bxpEZ2l0aHViLmNvbS9tZXRhcHJv",
            "di9tb2RlbGRhcGkvcGtnL2FwaXMvZGF0YS92MWFscGhhMS9nZW5lcmF0ZWQu",
            "cHJvdG8aSWdpdGh1Yi5jb20vbWV0YXByb3YvbW9kZWxkYXBpL3BrZy9hcGlz",
            "L2luZmVyZW5jZS92MWFscGhhMS9nZW5lcmF0ZWQucHJvdG8aIms4cy5pby9h",
            "cGkvY29yZS92MS9nZW5lcmF0ZWQucHJvdG8aNGs4cy5pby9hcGltYWNoaW5l",
            "cnkvcGtnL2FwaXMvbWV0YS92MS9nZW5lcmF0ZWQucHJvdG8aL2s4cy5pby9h",
            "cGltYWNoaW5lcnkvcGtnL3J1bnRpbWUvZ2VuZXJhdGVkLnByb3RvGjZrOHMu",
            "aW8vYXBpbWFjaGluZXJ5L3BrZy9ydW50aW1lL3NjaGVtYS9nZW5lcmF0ZWQu",
            "cHJvdG8iVQoTQWNjZXB0YW5jZVN0YWdlU3BlYxIXCg9zZXJ2aW5nU2l0ZU5h",
            "bWUYASABKAkSFwoPdGVzdERhdGFzZXROYW1lGAIgASgJEgwKBGF1dG8YAyAB",
            "KAgiOAoRQXVkaW9QaXBlbGluZVNwZWMSDwoHY29sdW1ucxgBIAMoCRISCgpm",
            "ZWF0dXJpemVyGAIgASgJIjAKDEJhY2t0ZXN0U3BlYxIPCgdpbml0aWFsGAEg",
            "ASgFEg8KB3dpbmRvd3MYAiABKAUiUwoRQ2FwYWNpdHlTdGFnZVNwZWMSFwoP",
            "c2VydmluZ1NpdGVOYW1lGAEgASgJEhcKD3Rlc3REYXRhc2V0TmFtZRgCIAEo",
            "CRIMCgRhdXRvGAMgASgIIkwKF0NhdGVnb3JpY2FsUGlwZWxpbmVTcGVjEg8K",
            "B2NvbHVtbnMYASADKAkSDwoHaW1wdXRlchgCIAEoCRIPCgdlbmNvZGVyGAMg",
            "ASgJIpIBChZDbGFzc2ljYWxFc3RpbWF0b3JTcGVjEhUKDWFsZ29yaXRobU5h",
            "bWUYASABKAkSYQoKcGFyYW1ldGVycxgCIAMoCzJNLmdpdGh1Yi5jb20ubWV0",
            "YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLkh5",
            "cGVyUGFyYW1ldGVyVmFsdWUiggEKCURhdGFTcGxpdBIMCgRhdXRvGAEgASgI",
            "Eg0KBXRyYWluGAIgASgFEhIKCnZhbGlkYXRpb24YAyABKAUSDAoEdGVzdBgE",
            "IAEoBRITCgtzcGxpdFBvbGljeRgFIAEoCRITCgtzcGxpdENvbHVtbhgGIAEo",
            "CRIMCgRzZWVkGAcgASgBIiUKDURhdGFTdGFnZVNwZWMSFAoMd3JhbmdsZXJO",
            "YW1lGAEgASgJIkgKFERhdGVUaW1lUGlwZWxpbmVTcGVjEg8KB2NvbHVtbnMY",
            "ASADKAkSDwoHaW1wdXRlchgCIAEoCRIOCgZleHBhbmQYAyABKAgipQEKEkRl",
            "ZXBFc3RpbWF0b3JMYXllchIMCgRuYW1lGAEgASgJEgwKBHR5cGUYAiABKAkS",
            "XgoKcGFyYW1ldGVycxgDIAMoCzJKLmdpdGh1Yi5jb20ubWV0YXByb3YubW9k",
            "ZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLk5OTGF5ZXJQYXJh",
            "bWV0ZXISEwoLaW5wdXRMYXllcnMYBCADKAki7AEKEURlZXBFc3RpbWF0b3JT",
            "cGVjEmIKDGFyY2hpdGVjdHVyZRgBIAMoCzJMLmdpdGh1Yi5jb20ubWV0YXBy",
            "b3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLkRlZXBF",
            "c3RpbWF0b3JMYXllchIMCgR0eXBlGAIgASgJEhEKCWJhdGNoU2l6ZRgDIAEo",
            "BRIOCgZlcG9jaHMYBCABKAUSFwoPdmFsaWRhdGlvblNwbGl0GAUgASgFEg0K",
            "BWlzU2VxGAYgASgIEgwKBGdwdXMYByABKAUSDAoEbG9zcxgIIAEoCSIsCg5E",
            "aW1lbnNpb25WYWx1ZRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAkiDwoN",
            "RW5zZW1ibGVSdWxlcyIcCgxFbnNlbWJsZVNwZWMSDAoEYmFzZRgCIAMoCSIu",
            "CgtGb3JlY2FzdE9iahILCgNrZXkYASABKAkSEgoKbGV2ZWxJbmRleBgCIAEo",
            "BSKIBAoPRm9yZWNhc3RpbmdTcGVjEhIKCnRpbWVDb2x1bW4YASABKAkSFAoM",
            "dGFyZ2V0Q29sdW1uGAIgASgJEhYKDmRhdGV0aW1lRm9ybWF0GAMgASgJEhIK",
            "CmRpbWVuc2lvbnMYBCADKAkSEgoKcmVwcmVzc29ycxgFIAMoCRJUCghmcmVx",
            "U3BlYxgGIAEoCzJCLmdpdGh1Yi5jb20ubWV0YXByb3YubW9kZWxkYXBpLnBr",
            "Zy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLkZyZXFTcGVjEg8KB2hvcml6b24Y",
            "ByABKAUSGgoSY29uZmlkZW5jZUludGVydmFsGAggASgFEhkKEWNvdW50cnlG",
            "b3JIb2xpZGF5GAkgASgJEmEKD2RpbWVuc2lvblZhbHVlcxgKIAMoCzJILmdp",
            "dGh1Yi5jb20ubWV0YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5n",
            "LnYxYWxwaGExLkRpbWVuc2lvblZhbHVlElgKCGJhY2t0ZXN0GAsgASgLMkYu",
            "Z2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFwaXMudHJhaW5p",
            "bmcudjFhbHBoYTEuQmFja3Rlc3RTcGVjEh4KFmZvcmVjYXN0Q29ubmVjdGlv",
            "bk5hbWUYDCABKAkSEAoIZm9yZWNhc3QYDSABKAgiKgoIRnJlcVNwZWMSEAoI",
            "aW50ZXJ2YWwYASABKAUSDAoEdW5pdBgCIAEoCSJ0CgxHaXRodWJFdmVudHMS",
            "GQoRZ2l0Q29ubmVjdGlvbk5hbWUYASABKAkSEgoKcmVwb3NpdG9yeRgCIAEo",
            "CRIOCgZicmFuY2gYAyABKAkSFQoNYmxvYk5hbWVSZWdleBgEIAEoCRIOCgZl",
            "dmVudHMYBSADKAki3AEKCUhpZXJhcmNoeRIPCgdjb2x1bW5zGAEgAygJElQK",
            "C2dyb3VwTGV2ZWxzGAIgAygLMj8uZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2Rl",
            "bGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuTGV2ZWwSUgoJaXRl",
            "bUxldmVsGAMgASgLMj8uZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRhcGku",
            "cGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuTGV2ZWwSFAoMbm90aWZpZXJO",
            "YW1lGAQgASgJIjIKE0h5cGVyUGFyYW1ldGVyVmFsdWUSDAoEbmFtZRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCSI4ChFJbWFnZVBpcGVsaW5lU3BlYxIPCgdjb2x1",
            "bW5zGAEgAygJEhIKCmZlYXR1cml6ZXIYAiABKAkiWgoFTGV2ZWwSDgoGc3Ry",
            "aW5nGAEgASgJEg8KB2hvcml6b24YAiABKAUSDAoEZnJlcRgDIAEoCRIRCglh",
            "Z2dyZWdhdGUYBCABKAkSDwoHZGlzdGluYxgFIAMoCSIsCgtNZWFzdXJlbWVu",
            "dBIOCgZtZXRyaWMYASABKAkSDQoFdmFsdWUYAiABKAEi9QEKBU1vZGVsEkIK",
            "CG1ldGFkYXRhGAEgASgLMjAuazhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBp",
            "cy5tZXRhLnYxLk9iamVjdE1ldGESUQoEc3BlYxgCIAEoCzJDLmdpdGh1Yi5j",
            "b20ubWV0YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxw",
            "aGExLk1vZGVsU3BlYxJVCgZzdGF0dXMYAyABKAsyRS5naXRodWIuY29tLm1l",
            "dGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhhMS5N",
            "b2RlbFN0YXR1cyKWAgoQTW9kZWxBdXRvYnVpbGRlchJCCghtZXRhZGF0YRgB",
            "IAEoCzIwLms4cy5pby5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0YS52MS5P",
            "YmplY3RNZXRhElwKBHNwZWMYAiABKAsyTi5naXRodWIuY29tLm1ldGFwcm92",
            "Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhhMS5Nb2RlbEF1",
            "dG9idWlsZGVyU3BlYxJgCgZzdGF0dXMYAyABKAsyUC5naXRodWIuY29tLm1l",
            "dGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhhMS5N",
            "b2RlbEF1dG9idWlsZGVyU3RhdHVzIqIBChlNb2RlbEF1dG9idWlsZGVyQ29u",
            "ZGl0aW9uEgwKBHR5cGUYASABKAkSDgoGc3RhdHVzGAIgASgJEkYKEmxhc3RU",
            "cmFuc2l0aW9uVGltZRgEIAEoCzIqLms4cy5pby5hcGltYWNoaW5lcnkucGtn",
            "LmFwaXMubWV0YS52MS5UaW1lEg4KBnJlYXNvbhgFIAEoCRIPCgdtZXNzYWdl",
            "GAYgASgJIrMBChRNb2RlbEF1dG9idWlsZGVyTGlzdBJACghtZXRhZGF0YRgB",
            "IAEoCzIuLms4cy5pby5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0YS52MS5M",
            "aXN0TWV0YRJZCgVpdGVtcxgCIAMoCzJKLmdpdGh1Yi5jb20ubWV0YXByb3Yu",
            "bW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLk1vZGVsQXV0",
            "b2J1aWxkZXIitAMKFE1vZGVsQXV0b2J1aWxkZXJTcGVjEhcKD2RhdGFQcm9k",
            "dWN0TmFtZRgBIAEoCRIeChZkYXRhUHJvZHVjdFZlcnNpb25OYW1lGAIgASgJ",
            "EhYKDmRhdGFzb3VyY2VOYW1lGAMgASgJEhMKC2RhdGFzZXROYW1lGAQgASgJ",
            "EgwKBHBhdGgYBSABKAkSDAoEdGFzaxgGIAEoCRIRCglvYmplY3RpdmUYByAB",
            "KAkSFAoMdGFyZ2V0Q29sdW1uGAggASgJEg8KB21heFRpbWUYCSABKAUSEQoJ",
            "bWF4TW9kZWxzGAogASgFEhQKDGFjY2Vzc01ldGhvZBgLIAEoCRIRCglhdXRv",
            "U2NhbGUYDCABKAgSXAoOZGF0YVNvdXJjZVNwZWMYDSABKAsyRC5naXRodWIu",
            "Y29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy5kYXRhLnYxYWxwaGEx",
            "LkRhdGFTb3VyY2VTcGVjEhAKCHRyYWluZXJzGA4gASgFEhQKDHNlYXJjaE1l",
            "dGhvZBgPIAEoCRIPCgdhYm9ydGVkGBAgASgIEg0KBW93bmVyGBEgASgJIoAF",
            "ChZNb2RlbEF1dG9idWlsZGVyU3RhdHVzEhQKDGZsYXRGaWxlTmFtZRgBIAEo",
            "CRIWCg5kYXRhU291cmNlTmFtZRgCIAEoCRITCgtkYXRhc2V0TmFtZRgDIAEo",
            "CRIRCglzdHVkeU5hbWUYBCABKAkSFQoNYmVzdE1vZGVsTmFtZRgGIAEoCRIV",
            "Cg1wcmVkaWN0b3JOYW1lGAcgASgJEhUKDWltYWdlUmVwb05hbWUYCCABKAkS",
            "DQoFcGhhc2UYCSABKAkSDAoEcm93cxgKIAEoBRIMCgRjb2xzGAsgASgFEhAK",
            "CGZpbGVTaXplGAwgASgFEg4KBm1vZGVscxgNIAEoBRIVCg10cmFpbmVkTW9k",
            "ZWxzGA4gASgFEhYKDmJlc3RNb2RlbFNjb3JlGA8gASgBEmMKCWVzdGltYXRv",
            "chgQIAEoCzJQLmdpdGh1Yi5jb20ubWV0YXByb3YubW9kZWxkYXBpLnBrZy5h",
            "cGlzLnRyYWluaW5nLnYxYWxwaGExLkNsYXNzaWNhbEVzdGltYXRvclNwZWMS",
            "PQoJc3RhcnRUaW1lGBEgASgLMiouazhzLmlvLmFwaW1hY2hpbmVyeS5wa2cu",
            "YXBpcy5tZXRhLnYxLlRpbWUSQgoOY29tcGxldGlvblRpbWUYEiABKAsyKi5r",
            "OHMuaW8uYXBpbWFjaGluZXJ5LnBrZy5hcGlzLm1ldGEudjEuVGltZRJnCgpj",
            "b25kaXRpb25zGBMgAygLMlMuZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRh",
            "cGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuTW9kZWxBdXRvYnVpbGRl",
            "ckNvbmRpdGlvbiKXAQoOTW9kZWxDb25kaXRpb24SDAoEdHlwZRgBIAEoCRIO",
            "CgZzdGF0dXMYAiABKAkSRgoSbGFzdFRyYW5zaXRpb25UaW1lGAQgASgLMiou",
            "azhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRhLnYxLlRpbWUSDgoG",
            "cmVhc29uGAUgASgJEg8KB21lc3NhZ2UYBiABKAkinQEKCU1vZGVsTGlzdBJA",
            "CghtZXRhZGF0YRgBIAEoCzIuLms4cy5pby5hcGltYWNoaW5lcnkucGtnLmFw",
            "aXMubWV0YS52MS5MaXN0TWV0YRJOCgVpdGVtcxgCIAMoCzI/LmdpdGh1Yi5j",
            "b20ubWV0YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxw",
            "aGExLk1vZGVsIo0CCg1Nb2RlbFBpcGVsaW5lEkIKCG1ldGFkYXRhGAEgASgL",
            "MjAuazhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRhLnYxLk9iamVj",
            "dE1ldGESWQoEc3BlYxgCIAEoCzJLLmdpdGh1Yi5jb20ubWV0YXByb3YubW9k",
            "ZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLk1vZGVsUGlwZWxp",
            "bmVTcGVjEl0KBnN0YXR1cxgDIAEoCzJNLmdpdGh1Yi5jb20ubWV0YXByb3Yu",
            "bW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLk1vZGVsUGlw",
            "ZWxpbmVTdGF0dXMinwEKFk1vZGVsUGlwZWxpbmVDb25kaXRpb24SDAoEdHlw",
            "ZRgBIAEoCRIOCgZzdGF0dXMYAiABKAkSRgoSbGFzdFRyYW5zaXRpb25UaW1l",
            "GAMgASgLMiouazhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRhLnYx",
            "LlRpbWUSDgoGcmVhc29uGAQgASgJEg8KB21lc3NhZ2UYBSABKAkirQEKEU1v",
            "ZGVsUGlwZWxpbmVMaXN0EkAKCG1ldGFkYXRhGAEgASgLMi4uazhzLmlvLmFw",
            "aW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRhLnYxLkxpc3RNZXRhElYKBWl0ZW1z",
            "GAIgAygLMkcuZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFw",
            "aXMudHJhaW5pbmcudjFhbHBoYTEuTW9kZWxQaXBlbGluZSKWAgoQTW9kZWxQ",
            "aXBlbGluZVJ1bhJCCghtZXRhZGF0YRgBIAEoCzIwLms4cy5pby5hcGltYWNo",
            "aW5lcnkucGtnLmFwaXMubWV0YS52MS5PYmplY3RNZXRhElwKBHNwZWMYAiAB",
            "KAsyTi5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50",
            "cmFpbmluZy52MWFscGhhMS5Nb2RlbFBpcGVsaW5lUnVuU3BlYxJgCgZzdGF0",
            "dXMYAyABKAsyUC5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cu",
            "YXBpcy50cmFpbmluZy52MWFscGhhMS5Nb2RlbFBpcGVsaW5lUnVuU3RhdHVz",
            "IqIBChlNb2RlbFBpcGVsaW5lUnVuQ29uZGl0aW9uEgwKBHR5cGUYASABKAkS",
            "DgoGc3RhdHVzGAIgASgJEkYKEmxhc3RUcmFuc2l0aW9uVGltZRgEIAEoCzIq",
            "Lms4cy5pby5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0YS52MS5UaW1lEg4K",
            "BnJlYXNvbhgFIAEoCRIPCgdtZXNzYWdlGAYgASgJIrMBChRNb2RlbFBpcGVs",
            "aW5lUnVuTGlzdBJACghtZXRhZGF0YRgBIAEoCzIuLms4cy5pby5hcGltYWNo",
            "aW5lcnkucGtnLmFwaXMubWV0YS52MS5MaXN0TWV0YRJZCgVpdGVtcxgCIAMo",
            "CzJKLmdpdGh1Yi5jb20ubWV0YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRy",
            "YWluaW5nLnYxYWxwaGExLk1vZGVsUGlwZWxpbmVSdW4iegoUTW9kZWxQaXBl",
            "bGluZVJ1blNwZWMSEwoLdmVyc2lvbk5hbWUYASABKAkSEwoLZGVzY3JpcHRp",
            "b24YAiABKAkSEwoLdHJpZ2dlck5hbWUYAyABKAkSFAoMcGlwZWxpbmVOYW1l",
            "GAQgASgJEg0KBW93bmVyGAUgASgJIs4BChtNb2RlbFBpcGVsaW5lUnVuU3Rh",
            "Z2VTdGF0dXMSEAoIYXBwcm92ZWQYASABKAgSEgoKYXBwcm92ZWRCeRgCIAEo",
            "CRINCgVzY29yZRgDIAEoARI9CglzdGFydFRpbWUYBCABKAsyKi5rOHMuaW8u",
            "YXBpbWFjaGluZXJ5LnBrZy5hcGlzLm1ldGEudjEuVGltZRI7CgdlbmRUaW1l",
            "GAUgASgLMiouazhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRhLnYx",
            "LlRpbWUiwgYKFk1vZGVsUGlwZWxpbmVSdW5TdGF0dXMSEQoJc3R1ZHlOYW1l",
            "GAEgASgJEmMKBGRhdGEYAyABKAsyVS5naXRodWIuY29tLm1ldGFwcm92Lm1v",
            "ZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhhMS5Nb2RlbFBpcGVs",
            "aW5lUnVuU3RhZ2VTdGF0dXMSZwoIdHJhaW5pbmcYBCABKAsyVS5naXRodWIu",
            "Y29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFs",
            "cGhhMS5Nb2RlbFBpcGVsaW5lUnVuU3RhZ2VTdGF0dXMSaQoKYWNjZXB0YW5j",
            "ZRgFIAEoCzJVLmdpdGh1Yi5jb20ubWV0YXByb3YubW9kZWxkYXBpLnBrZy5h",
            "cGlzLnRyYWluaW5nLnYxYWxwaGExLk1vZGVsUGlwZWxpbmVSdW5TdGFnZVN0",
            "YXR1cxJnCghjYXBhY2l0eRgGIAEoCzJVLmdpdGh1Yi5jb20ubWV0YXByb3Yu",
            "bW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLk1vZGVsUGlw",
            "ZWxpbmVSdW5TdGFnZVN0YXR1cxJjCgRwcm9kGAcgASgLMlUuZ2l0aHViLmNv",
            "bS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBo",
            "YTEuTW9kZWxQaXBlbGluZVJ1blN0YWdlU3RhdHVzEj0KCXN0YXJ0VGltZRgI",
            "IAEoCzIqLms4cy5pby5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0YS52MS5U",
            "aW1lEkIKDmNvbXBsZXRpb25UaW1lGAkgASgLMiouazhzLmlvLmFwaW1hY2hp",
            "bmVyeS5wa2cuYXBpcy5tZXRhLnYxLlRpbWUSDQoFcGhhc2UYCiABKAkSZwoK",
            "Y29uZGl0aW9ucxgLIAMoCzJTLmdpdGh1Yi5jb20ubWV0YXByb3YubW9kZWxk",
            "YXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLk1vZGVsUGlwZWxpbmVS",
            "dW5Db25kaXRpb24SEwoLZXZhbE1ldHJpY3MYDSABKAki2AUKEU1vZGVsUGlw",
            "ZWxpbmVTcGVjEhMKC3ZlcnNpb25OYW1lGAEgASgJEh4KFmRlZmF1bHRTZXJ2",
            "aW5nU2l0ZU5hbWUYAiABKAkSEwoLZGVzY3JpcHRpb24YAyABKAkSEAoIbWlu",
            "U2NvcmUYBCABKAESWgoJZGF0YVN0YWdlGAUgASgLMkcuZ2l0aHViLmNvbS5t",
            "ZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEu",
            "RGF0YVN0YWdlU3BlYxJiCg10cmFpbmluZ1N0YWdlGAYgASgLMksuZ2l0aHVi",
            "LmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFh",
            "bHBoYTEuVHJhaW5pbmdTdGFnZVNwZWMSZgoPYWNjZXB0YW5jZVN0YWdlGAcg",
            "ASgLMk0uZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFwaXMu",
            "dHJhaW5pbmcudjFhbHBoYTEuQWNjZXB0YW5jZVN0YWdlU3BlYxJiCg1jYXBh",
            "Y2l0eVN0YWdlGAggASgLMksuZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRh",
            "cGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuQ2FwYWNpdHlTdGFnZVNw",
            "ZWMSYAoMcmVsZWFzZVN0YWdlGAkgASgLMkouZ2l0aHViLmNvbS5tZXRhcHJv",
            "di5tb2RlbGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuUmVsZWFz",
            "ZVN0YWdlU3BlYxIOCgZmb2xkZXIYCiABKAkSWgoHdHJpZ2dlchgLIAEoCzJJ",
            "LmdpdGh1Yi5jb20ubWV0YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWlu",
            "aW5nLnYxYWxwaGExLlBpcGVsaW5lVHJpZ2dlchINCgVvd25lchgMIAEoCSJ7",
            "ChNNb2RlbFBpcGVsaW5lU3RhdHVzEmQKCmNvbmRpdGlvbnMYASADKAsyUC5n",
            "aXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmlu",
            "Zy52MWFscGhhMS5Nb2RlbFBpcGVsaW5lQ29uZGl0aW9uIkYKC01vZGVsUmVz",
            "dWx0EgwKBG5hbWUYASABKAkSCwoDYWxnGAIgASgJEg0KBXNjb3JlGAMgASgB",
            "Eg0KBWVycm9yGAQgASgIIsADCg9Nb2RlbFNlYXJjaFNwZWMSDAoEdHlwZRgB",
            "IAEoCRIPCgdtYXhDb3N0GAIgASgFEg8KB21heFRpbWUYAyABKAUSEQoJbWF4",
            "TW9kZWxzGAQgASgFEhAKCG1pblNjb3JlGAUgASgBEhAKCHRyYWluZXJzGAYg",
            "ASgFEmUKCXNoT3B0aW9ucxgHIAEoCzJSLmdpdGh1Yi5jb20ubWV0YXByb3Yu",
            "bW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLlN1Y2Nlc3Np",
            "dmVIYWx2aW5nT3B0aW9ucxIMCgR0ZXN0GAggASgFEhEKCXJldGFpblRvcBgJ",
            "IAEoBRITCgtyZXRhaW5lZEZvchgKIAEoBRJkCglyZXNvdXJjZXMYCyABKAsy",
            "US5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFp",
            "bmluZy52MWFscGhhMS5UcmFpbmluZ1Jlc291cmNlUmVxdWVzdBIRCglhbGxv",
            "d2xpc3QYDCADKAkSFgoOdm90aW5nRW5zZW1ibGUYDSABKAgSGAoQc3RhY2tp",
            "bmdFbnNlbWJsZRgOIAEoCCKnBwoJTW9kZWxTcGVjEg0KBW93bmVyGAEgASgJ",
            "EhMKC3ZlcnNpb25OYW1lGAIgASgJEhEKCXN0dWR5TmFtZRgDIAEoCRITCgtk",
            "YXRhc2V0TmFtZRgEIAEoCRIMCgR0YXNrGAUgASgJEhEKCW9iamVjdGl2ZRgG",
            "IAEoCRJiCg1wcmVwcm9jZXNzaW5nGAcgASgLMksuZ2l0aHViLmNvbS5tZXRh",
            "cHJvdi5tb2RlbGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuUHJl",
            "cHJvY2Vzc2luZ1NwZWMSYwoJZXN0aW1hdG9yGAggASgLMlAuZ2l0aHViLmNv",
            "bS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBo",
            "YTEuQ2xhc3NpY2FsRXN0aW1hdG9yU3BlYxJYCgNkbm4YCSABKAsySy5naXRo",
            "dWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52",
            "MWFscGhhMS5EZWVwRXN0aW1hdG9yU3BlYxJYCghlbnNlbWJsZRgKIAEoCzJG",
            "LmdpdGh1Yi5jb20ubWV0YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWlu",
            "aW5nLnYxYWxwaGExLkVuc2VtYmxlU3BlYxJYCgh0cmFpbmluZxgLIAEoCzJG",
            "LmdpdGh1Yi5jb20ubWV0YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWlu",
            "aW5nLnYxYWxwaGExLlRyYWluaW5nU3BlYxIOCgZ0ZXN0ZWQYDCABKAgSDwoH",
            "YWJvcnRlZBgNIAEoCBIRCglwdWJsaXNoZWQYDiABKAgSDgoGcHVzaGVkGA8g",
            "ASgIEhAKCHJlcG9ydGVkGBAgASgIEg4KBnBhdXNlZBgRIAEoCBIQCghwcm9m",
            "aWxlZBgSIAEoCBIQCghhcmNoaXZlZBgTIAEoCBISCgpmb3JlY2FzdGVkGBQg",
            "ASgIElQKCGxvY2F0aW9uGBUgASgLMkIuZ2l0aHViLmNvbS5tZXRhcHJvdi5t",
            "b2RlbGRhcGkucGtnLmFwaXMuZGF0YS52MWFscGhhMS5EYXRhTG9jYXRpb24S",
            "YgoPZm9yZWNhc3RpbmdTcGVjGBYgASgLMkkuZ2l0aHViLmNvbS5tZXRhcHJv",
            "di5tb2RlbGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuRm9yZWNh",
            "c3RpbmdTcGVjItkHCgtNb2RlbFN0YXR1cxI9CglzdGFydFRpbWUYASABKAsy",
            "Ki5rOHMuaW8uYXBpbWFjaGluZXJ5LnBrZy5hcGlzLm1ldGEudjEuVGltZRJC",
            "Cg50cmFpblN0YXJ0VGltZRgCIAEoCzIqLms4cy5pby5hcGltYWNoaW5lcnku",
            "cGtnLmFwaXMubWV0YS52MS5UaW1lEkcKE3RyYWluQ29tcGxldGlvblRpbWUY",
            "AyABKAsyKi5rOHMuaW8uYXBpbWFjaGluZXJ5LnBrZy5hcGlzLm1ldGEudjEu",
            "VGltZRJBCg10ZXN0U3RhcnRUaW1lGAQgASgLMiouazhzLmlvLmFwaW1hY2hp",
            "bmVyeS5wa2cuYXBpcy5tZXRhLnYxLlRpbWUSRgoSdGVzdENvbXBsZXRpb25U",
            "aW1lGAUgASgLMiouazhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRh",
            "LnYxLlRpbWUSQgoOY29tcGxldGlvblRpbWUYBiABKAsyKi5rOHMuaW8uYXBp",
            "bWFjaGluZXJ5LnBrZy5hcGlzLm1ldGEudjEuVGltZRIPCgdjdlNjb3JlGAcg",
            "ASgBEhIKCnRyYWluU2NvcmUYCCABKAESEQoJdGVzdFNjb3JlGAkgASgBEgwK",
            "BGNvc3QYCiABKAESDAoEYmVzdBgLIAEoCBJaCgt0cmFpblJlc3VsdBgMIAMo",
            "CzJFLmdpdGh1Yi5jb20ubWV0YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRy",
            "YWluaW5nLnYxYWxwaGExLk1lYXN1cmVtZW50ElkKCnRlc3RSZXN1bHQYDSAD",
            "KAsyRS5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50",
            "cmFpbmluZy52MWFscGhhMS5NZWFzdXJlbWVudBINCgVwaGFzZRgOIAEoCRIS",
            "CgpyZXBvcnROYW1lGA8gASgJEhMKC21hbmlmZXN0VXJpGBAgASgJEhIKCndl",
            "aWdodHNVcmkYESABKAkSGAoQbGFiZWxzRW5jb2RlclVyaRgSIAEoCRIPCgds",
            "b2dzVXJpGBMgASgJEhIKCnByb2ZpbGVVcmkYFCABKAkSEwoLbWlzY2xhc3NV",
            "cmkYFSABKAkSEQoJaW1hZ2VOYW1lGBYgASgJEhMKC2ZvcmVjYXN0VXJpGBcg",
            "ASgJElwKCmNvbmRpdGlvbnMYGCADKAsySC5naXRodWIuY29tLm1ldGFwcm92",
            "Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhhMS5Nb2RlbENv",
            "bmRpdGlvbiIvChBOTkxheWVyUGFyYW1ldGVyEgwKBG5hbWUYASABKAkSDQoF",
            "dmFsdWUYAiABKAki/gEKCE5vdGVib29rEkIKCG1ldGFkYXRhGAEgASgLMjAu",
            "azhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRhLnYxLk9iamVjdE1l",
            "dGESVAoEc3BlYxgCIAEoCzJGLmdpdGh1Yi5jb20ubWV0YXByb3YubW9kZWxk",
            "YXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLk5vdGVib29rU3BlYxJY",
            "CgZzdGF0dXMYAyABKAsySC5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFw",
            "aS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhhMS5Ob3RlYm9va1N0YXR1cyKa",
            "AQoRTm90ZWJvb2tDb25kaXRpb24SDAoEdHlwZRgBIAEoCRIOCgZzdGF0dXMY",
            "AiABKAkSRgoSbGFzdFRyYW5zaXRpb25UaW1lGAQgASgLMiouazhzLmlvLmFw",
            "aW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRhLnYxLlRpbWUSDgoGcmVhc29uGAUg",
            "ASgJEg8KB21lc3NhZ2UYBiABKAkiowEKDE5vdGVib29rTGlzdBJACghtZXRh",
            "ZGF0YRgBIAEoCzIuLms4cy5pby5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0",
            "YS52MS5MaXN0TWV0YRJRCgVpdGVtcxgCIAMoCzJCLmdpdGh1Yi5jb20ubWV0",
            "YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLk5v",
            "dGVib29rIocCCgtOb3RlYm9va1J1bhJCCghtZXRhZGF0YRgBIAEoCzIwLms4",
            "cy5pby5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0YS52MS5PYmplY3RNZXRh",
            "ElcKBHNwZWMYAiABKAsySS5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFw",
            "aS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhhMS5Ob3RlYm9va1J1blNwZWMS",
            "WwoGc3RhdHVzGAMgASgLMksuZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRh",
            "cGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuTm90ZWJvb2tSdW5TdGF0",
            "dXMinQEKFE5vdGVib29rUnVuQ29uZGl0aW9uEgwKBHR5cGUYASABKAkSDgoG",
            "c3RhdHVzGAIgASgJEkYKEmxhc3RUcmFuc2l0aW9uVGltZRgEIAEoCzIqLms4",
            "cy5pby5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0YS52MS5UaW1lEg4KBnJl",
            "YXNvbhgFIAEoCRIPCgdtZXNzYWdlGAYgASgJIqkBCg9Ob3RlYm9va1J1bkxp",
            "c3QSQAoIbWV0YWRhdGEYASABKAsyLi5rOHMuaW8uYXBpbWFjaGluZXJ5LnBr",
            "Zy5hcGlzLm1ldGEudjEuTGlzdE1ldGESVAoFaXRlbXMYAiADKAsyRS5naXRo",
            "dWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52",
            "MWFscGhhMS5Ob3RlYm9va1J1biKnAQoPTm90ZWJvb2tSdW5TcGVjEhMKC3Zl",
            "cnNpb25OYW1lGAEgASgJEhQKDG5vdGVib29rTmFtZRgCIAEoCRJaCgZ2YWx1",
            "ZXMYAyADKAsySi5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cu",
            "YXBpcy50cmFpbmluZy52MWFscGhhMS5Ob3RlYm9va1ZhclZhbHVlEg0KBW93",
            "bmVyGAQgASgJIokCChFOb3RlYm9va1J1blN0YXR1cxINCgVwaGFzZRgBIAEo",
            "CRI9CglzdGFydFRpbWUYAiABKAsyKi5rOHMuaW8uYXBpbWFjaGluZXJ5LnBr",
            "Zy5hcGlzLm1ldGEudjEuVGltZRJCCg5jb21wbGV0aW9uVGltZRgDIAEoCzIq",
            "Lms4cy5pby5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0YS52MS5UaW1lEmIK",
            "CmNvbmRpdGlvbnMYBCADKAsyTi5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVs",
            "ZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhhMS5Ob3RlYm9va1J1bkNv",
            "bmRpdGlvbiKhAgoMTm90ZWJvb2tTcGVjEhMKC3ZlcnNpb25OYW1lGAEgASgJ",
            "EhMKC2Rlc2NyaXB0aW9uGAIgASgJEjYKCXNjaGVtYVJlZhgDIAEoCzIjLms4",
            "cy5pby5hcGkuY29yZS52MS5PYmplY3RSZWZlcmVuY2USEQoJaW1hZ2VOYW1l",
            "GAQgASgJEhQKDHJlcXVpcmVtZW50cxgFIAEoCRITCgtkZWJQYWNrYWdlcxgG",
            "IAEoCRIMCgR2YXJzGAcgAygJElQKCGxvY2F0aW9uGAggASgLMkIuZ2l0aHVi",
            "LmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFwaXMuZGF0YS52MWFscGhh",
            "MS5EYXRhTG9jYXRpb24SDQoFb3duZXIYCSABKAkijQEKDk5vdGVib29rU3Rh",
            "dHVzEg0KBWltYWdlGAEgASgJEgsKA3VyaRgCIAEoCRJfCgpjb25kaXRpb25z",
            "GAMgAygLMksuZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFw",
            "aXMudHJhaW5pbmcudjFhbHBoYTEuTm90ZWJvb2tDb25kaXRpb24iLwoQTm90",
            "ZWJvb2tWYXJWYWx1ZRIMCgRuYW1lGAEgASgJEg0KBXZhbHVlGAIgASgJIkcK",
            "E051bWVyaWNQaXBlbGluZVNwZWMSDwoHY29sdW1ucxgBIAMoCRIPCgdpbXB1",
            "dGVyGAIgASgJEg4KBnNjYWxlchgDIAEoCSLMAQoPUGlwZWxpbmVUcmlnZ2Vy",
            "ElsKCHNjaGVkdWxlGAEgASgLMkkuZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2Rl",
            "bGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuVHJpZ2dlclNjaGVk",
            "dWxlElwKDGdpdGh1YkV2ZW50cxgCIAEoCzJGLmdpdGh1Yi5jb20ubWV0YXBy",
            "b3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLkdpdGh1",
            "YkV2ZW50cyLpBQoRUHJlcHJvY2Vzc2luZ1NwZWMSZgoLY2F0ZWdvcmljYWwY",
            "ASABKAsyUS5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBp",
            "cy50cmFpbmluZy52MWFscGhhMS5DYXRlZ29yaWNhbFBpcGVsaW5lU3BlYxJe",
            "CgdudW1lcmljGAIgASgLMk0uZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRh",
            "cGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuTnVtZXJpY1BpcGVsaW5l",
            "U3BlYxJYCgR0ZXh0GAMgASgLMkouZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2Rl",
            "bGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuVGV4dFBpcGVsaW5l",
            "U3BlYxJaCgVpbWFnZRgEIAEoCzJLLmdpdGh1Yi5jb20ubWV0YXByb3YubW9k",
            "ZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLkltYWdlUGlwZWxp",
            "bmVTcGVjEloKBWF1ZGlvGAUgASgLMksuZ2l0aHViLmNvbS5tZXRhcHJvdi5t",
            "b2RlbGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuQXVkaW9QaXBl",
            "bGluZVNwZWMSWgoFdmlkZW8YBiABKAsySy5naXRodWIuY29tLm1ldGFwcm92",
            "Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhhMS5WaWRlb1Bp",
            "cGVsaW5lU3BlYxJgCghkYXRldGltZRgHIAEoCzJOLmdpdGh1Yi5jb20ubWV0",
            "YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGExLkRh",
            "dGVUaW1lUGlwZWxpbmVTcGVjEhcKD2ZlYXR1cmVTZWxlY3RvchgIIAEoCRIP",
            "CgdyZWR1Y2VyGAkgASgJEhIKCmltYmFsYW5jZWQYCiABKAgiKQoQUmVsZWFz",
            "ZVN0YWdlU3BlYxIVCg1wcmVkaWN0b3JOYW1lGAEgASgJIvgBCgZSZXBvcnQS",
            "QgoIbWV0YWRhdGEYASABKAsyMC5rOHMuaW8uYXBpbWFjaGluZXJ5LnBrZy5h",
            "cGlzLm1ldGEudjEuT2JqZWN0TWV0YRJSCgRzcGVjGAIgASgLMkQuZ2l0aHVi",
            "LmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFh",
            "bHBoYTEuUmVwb3J0U3BlYxJWCgZzdGF0dXMYAyABKAsyRi5naXRodWIuY29t",
            "Lm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhh",
            "MS5SZXBvcnRTdGF0dXMimAEKD1JlcG9ydENvbmRpdGlvbhIMCgR0eXBlGAEg",
            "ASgJEg4KBnN0YXR1cxgCIAEoCRJGChJsYXN0VHJhbnNpdGlvblRpbWUYBCAB",
            "KAsyKi5rOHMuaW8uYXBpbWFjaGluZXJ5LnBrZy5hcGlzLm1ldGEudjEuVGlt",
            "ZRIOCgZyZWFzb24YBSABKAkSDwoHbWVzc2FnZRgGIAEoCSKfAQoKUmVwb3J0",
            "TGlzdBJACghtZXRhZGF0YRgBIAEoCzIuLms4cy5pby5hcGltYWNoaW5lcnku",
            "cGtnLmFwaXMubWV0YS52MS5MaXN0TWV0YRJPCgVpdGVtcxgCIAMoCzJALmdp",
            "dGh1Yi5jb20ubWV0YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5n",
            "LnYxYWxwaGExLlJlcG9ydCL3AQoKUmVwb3J0U3BlYxITCgt2ZXJzaW9uTmFt",
            "ZRgBIAEoCRI2CgllbnRpdHlSZWYYAiABKAsyIy5rOHMuaW8uYXBpLmNvcmUu",
            "djEuT2JqZWN0UmVmZXJlbmNlElQKCGxvY2F0aW9uGAQgASgLMkIuZ2l0aHVi",
            "LmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFwaXMuZGF0YS52MWFscGhh",
            "MS5EYXRhTG9jYXRpb24SEgoKcmVwb3J0VHlwZRgFIAEoCRIOCgZmb3JtYXQY",
            "BiABKAkSEwoLZGVzY3JpcHRpb24YByABKAkSDQoFb3duZXIYCCABKAkijAIK",
            "DFJlcG9ydFN0YXR1cxI9CglzdGFydFRpbWUYAiABKAsyKi5rOHMuaW8uYXBp",
            "bWFjaGluZXJ5LnBrZy5hcGlzLm1ldGEudjEuVGltZRJCCg5jb21wbGV0aW9u",
            "VGltZRgDIAEoCzIqLms4cy5pby5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0",
            "YS52MS5UaW1lEg0KBXBoYXNlGAQgASgJEgsKA3VyaRgFIAEoCRJdCgpjb25k",
            "aXRpb25zGAYgAygLMkkuZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRhcGku",
            "cGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuUmVwb3J0Q29uZGl0aW9uIvUB",
            "CgVTdHVkeRJCCghtZXRhZGF0YRgBIAEoCzIwLms4cy5pby5hcGltYWNoaW5l",
            "cnkucGtnLmFwaXMubWV0YS52MS5PYmplY3RNZXRhElEKBHNwZWMYAiABKAsy",
            "Qy5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFp",
            "bmluZy52MWFscGhhMS5TdHVkeVNwZWMSVQoGc3RhdHVzGAMgASgLMkUuZ2l0",
            "aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFwaXMudHJhaW5pbmcu",
            "djFhbHBoYTEuU3R1ZHlTdGF0dXMilwEKDlN0dWR5Q29uZGl0aW9uEgwKBHR5",
            "cGUYASABKAkSDgoGc3RhdHVzGAIgASgJEkYKEmxhc3RUcmFuc2l0aW9uVGlt",
            "ZRgEIAEoCzIqLms4cy5pby5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0YS52",
            "MS5UaW1lEg4KBnJlYXNvbhgFIAEoCRIPCgdtZXNzYWdlGAYgASgJIp0BCglT",
            "dHVkeUxpc3QSQAoIbWV0YWRhdGEYASABKAsyLi5rOHMuaW8uYXBpbWFjaGlu",
            "ZXJ5LnBrZy5hcGlzLm1ldGEudjEuTGlzdE1ldGESTgoFaXRlbXMYAiADKAsy",
            "Py5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFp",
            "bmluZy52MWFscGhhMS5TdHVkeSL/BgoJU3R1ZHlTcGVjEhMKC3ZlcnNpb25O",
            "YW1lGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEjMKBmxhYlJlZhgDIAEo",
            "CzIjLms4cy5pby5hcGkuY29yZS52MS5PYmplY3RSZWZlcmVuY2USEwoLZGF0",
            "YXNldE5hbWUYBCABKAkSDAoEdGFzaxgFIAEoCRIRCglvYmplY3RpdmUYBiAB",
            "KAkSWQoGc2VhcmNoGAggASgLMkkuZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2Rl",
            "bGRhcGkucGtnLmFwaXMudHJhaW5pbmcudjFhbHBoYTEuTW9kZWxTZWFyY2hT",
            "cGVjEmIKDXByZXByb2Nlc3NpbmcYCSABKAsySy5naXRodWIuY29tLm1ldGFw",
            "cm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhhMS5QcmVw",
            "cm9jZXNzaW5nU3BlYxJYCgh0cmFpbmluZxgKIAEoCzJGLmdpdGh1Yi5jb20u",
            "bWV0YXByb3YubW9kZWxkYXBpLnBrZy5hcGlzLnRyYWluaW5nLnYxYWxwaGEx",
            "LlRyYWluaW5nU3BlYxI8Cg90cmFpbmVyQ2xhc3NSZWYYCyABKAsyIy5rOHMu",
            "aW8uYXBpLmNvcmUudjEuT2JqZWN0UmVmZXJlbmNlElIKBXNwbGl0GAwgASgL",
            "MkMuZ2l0aHViLmNvbS5tZXRhcHJvdi5tb2RlbGRhcGkucGtnLmFwaXMudHJh",
            "aW5pbmcudjFhbHBoYTEuRGF0YVNwbGl0Eg8KB2Fib3J0ZWQYDSABKAgSEAoI",
            "cmVwb3J0ZWQYDiABKAgSDgoGcGF1c2VkGA8gASgIEhAKCHByb2ZpbGVkGBAg",
            "ASgIEhYKDm1vZGVsUHVibGlzaGVkGBEgASgIEhgKEG1vZGVsSW1hZ2VQdXNo",
            "ZWQYEiABKAgSVAoIbG9jYXRpb24YEyABKAsyQi5naXRodWIuY29tLm1ldGFw",
            "cm92Lm1vZGVsZGFwaS5wa2cuYXBpcy5kYXRhLnYxYWxwaGExLkRhdGFMb2Nh",
            "dGlvbhJWCgloaWVyYXJjaHkYFSABKAsyQy5naXRodWIuY29tLm1ldGFwcm92",
            "Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFscGhhMS5IaWVyYXJj",
            "aHkSDQoFb3duZXIYFiABKAkijAcKC1N0dWR5U3RhdHVzEg4KBm1vZGVscxgB",
            "IAEoBRIWCg53YWl0aW5nVG9UcmFpbhgCIAEoBRIWCg50cmFpbmluZ01vZGVs",
            "cxgDIAEoBRIcChRmYWlsZWRUcmFpbmluZ01vZGVscxgEIAEoBRIVCg10cmFp",
            "bmVkTW9kZWxzGAUgASgFEhsKE3dhaXRpbmdUb1Rlc3RNb2RlbHMYBiABKAUS",
            "FQoNdGVzdGluZ01vZGVscxgHIAEoBRIbChNmYWlsZWRUZXN0aW5nTW9kZWxz",
            "GAggASgFEhQKDHRlc3RlZE1vZGVscxgJIAEoBRIQCgh0cmFpbmVycxgKIAEo",
            "BRIUCgxmcmVlVHJhaW5lcnMYCyABKAUSFAoMYnVkeVRyYWluZXJzGAwgASgF",
            "Ej0KCXN0YXJ0VGltZRgNIAEoCzIqLms4cy5pby5hcGltYWNoaW5lcnkucGtn",
            "LmFwaXMubWV0YS52MS5UaW1lEkUKEXRyYWluaW5nU3RhcnRUaW1lGA4gASgL",
            "MiouazhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRhLnYxLlRpbWUS",
            "SgoWdHJhaW5pbmdDb21wbGV0aW9uVGltZRgPIAEoCzIqLms4cy5pby5hcGlt",
            "YWNoaW5lcnkucGtnLmFwaXMubWV0YS52MS5UaW1lEkIKDnRlc3RpbmdTdGFy",
            "dGVkGBAgASgLMiouazhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRh",
            "LnYxLlRpbWUSSQoVdGVzdGluZ0NvbXBsZXRpb25UaW1lGBEgASgLMiouazhz",
            "LmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRhLnYxLlRpbWUSQgoOY29t",
            "cGxldGlvblRpbWUYEiABKAsyKi5rOHMuaW8uYXBpbWFjaGluZXJ5LnBrZy5h",
            "cGlzLm1ldGEudjEuVGltZRIRCgliZXN0TW9kZWwYFCABKAkSFgoOYmVzdE1v",
            "ZGVsU2NvcmUYFSABKAESEgoKcHJvZmlsZVVyaRgWIAEoCRISCgpyZXBvcnRO",
            "YW1lGBcgASgJEg0KBXBoYXNlGBggASgJElwKCmNvbmRpdGlvbnMYGSADKAsy",
            "SC5naXRodWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFp",
            "bmluZy52MWFscGhhMS5TdHVkeUNvbmRpdGlvbiJYChhTdWNjZXNzaXZlSGFs",
            "dmluZ09wdGlvbnMSEQoJbWF4QnVkZ2V0GAYgASgFEhcKD2VsaW1pbmF0aW9u",
            "UmF0ZRgHIAEoBRIQCghtb2RhbGl0eRgIIAEoCSJoChVTdWNjZXNzaXZlSGFs",
            "dmluZ1NwZWMSDgoGYnVkZ2V0GAEgASgFEg8KB2JyYWNrZXQYAiABKAUSDAoE",
            "cnVuZxgDIAEoBRIOCgZjb25mSUQYBCABKAUSEAoIbW9kYWxpdHkYGiABKAki",
            "lwEKEFRleHRQaXBlbGluZVNwZWMSDwoHY29sdW1ucxgBIAMoCRIPCgdlbmNv",
            "ZGVyGAIgASgJEhEKCXRva2VuaXplchgDIAEoCRIRCglzdG9wd29yZHMYBCAB",
            "KAgSCwoDcG9zGAUgASgIEg0KBWxlbW1hGAYgASgIEgwKBHN0ZW0YByABKAgS",
            "EQoJZW1iZWRkaW5nGAggASgJIkAKF1RyYWluaW5nUmVzb3VyY2VSZXF1ZXN0",
            "EgsKA2dwdRgBIAEoCRILCgNjcHUYAiABKAkSCwoDbWVtGAMgASgJIuYCCgxU",
            "cmFpbmluZ1NwZWMSEAoIcHJpb3JpdHkYAiABKAUSDgoGY3Z0eXBlGAMgASgJ",
            "EgoKAmN2GAQgASgIEg0KBWZvbGRzGAYgASgFEg0KBXJldHJ5GAcgASgFEhMK",
            "C2V2YWxNZXRyaWNzGAggAygJEhEKCWVhcmx5U3RvcBgJIAEoCBIaChJjaGVj",
            "a3BvaW50SW50ZXJ2YWwYCiABKAUSWwoIZm9yZWNhc3QYCyABKAsySS5naXRo",
            "dWIuY29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52",
            "MWFscGhhMS5Gb3JlY2FzdGluZ1NwZWMSWwoCc2gYDCABKAsyTy5naXRodWIu",
            "Y29tLm1ldGFwcm92Lm1vZGVsZGFwaS5wa2cuYXBpcy50cmFpbmluZy52MWFs",
            "cGhhMS5TdWNjZXNzaXZlSGFsdmluZ1NwZWMSDAoEc2VlZBgNIAEoASJbChFU",
            "cmFpbmluZ1N0YWdlU3BlYxIUCgxub3RlYm9va05hbWUYASABKAkSDwoHbGFi",
            "TmFtZRgCIAEoCRIRCglzdHVkeU5hbWUYAyABKAkSDAoEYXV0bxgEIAEoCCKo",
            "AgoPVHJpZ2dlclNjaGVkdWxlEj0KCXN0YXJ0VGltZRgBIAEoCzIqLms4cy5p",
            "by5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0YS52MS5UaW1lEjwKCHN0YXJ0",
            "RGF5GAIgASgLMiouazhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRh",
            "LnYxLlRpbWUSQAoHZW5kVGltZRgDIAEoCzIvLms4cy5pby5hcGltYWNoaW5l",
            "cnkucGtnLmFwaXMubWV0YS52MS5UaW1lc3RhbXASOgoGZW5kRGF5GAQgASgL",
            "MiouazhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRhLnYxLlRpbWUS",
            "DAoEY3JvbhgFIAEoCRIMCgR0eXBlGAYgASgJIjgKEVZpZGVvUGlwZWxpbmVT",
            "cGVjEg8KB2NvbHVtbnMYASADKAkSEgoKZmVhdHVyaXplchgCIAEoCUIKWgh2",
            "MWFscGhhMQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Catalog.V1Alpha1.GeneratedReflection.Descriptor, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.GeneratedReflection.Descriptor, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Inference.V1Alpha1.GeneratedReflection.Descriptor, global::K8S.Io.Api.Core.V1.GeneratedReflection.Descriptor, global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.GeneratedReflection.Descriptor, global::K8S.Io.Apimachinery.Pkg.Runtime.GeneratedReflection.Descriptor, global::K8S.Io.Apimachinery.Pkg.Runtime.Schema.GeneratedReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AcceptanceStageSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AcceptanceStageSpec.Parser, new[]{ "ServingSiteName", "TestDatasetName", "Auto" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AudioPipelineSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AudioPipelineSpec.Parser, new[]{ "Columns", "Featurizer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.BacktestSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.BacktestSpec.Parser, new[]{ "Initial", "Windows" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CapacityStageSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CapacityStageSpec.Parser, new[]{ "ServingSiteName", "TestDatasetName", "Auto" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CategoricalPipelineSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CategoricalPipelineSpec.Parser, new[]{ "Columns", "Imputer", "Encoder" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec.Parser, new[]{ "AlgorithmName", "Parameters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataSplit), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataSplit.Parser, new[]{ "Auto", "Train", "Validation", "Test", "SplitPolicy", "SplitColumn", "Seed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataStageSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataStageSpec.Parser, new[]{ "WranglerName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DateTimePipelineSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DateTimePipelineSpec.Parser, new[]{ "Columns", "Imputer", "Expand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorLayer), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorLayer.Parser, new[]{ "Name", "Type", "Parameters", "InputLayers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorSpec.Parser, new[]{ "Architecture", "Type", "BatchSize", "Epochs", "ValidationSplit", "IsSeq", "Gpus", "Loss" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DimensionValue), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DimensionValue.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.EnsembleRules), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.EnsembleRules.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.EnsembleSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.EnsembleSpec.Parser, new[]{ "Base" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastObj), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastObj.Parser, new[]{ "Key", "LevelIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec.Parser, new[]{ "TimeColumn", "TargetColumn", "DatetimeFormat", "Dimensions", "Repressors", "FreqSpec", "Horizon", "ConfidenceInterval", "CountryForHoliday", "DimensionValues", "Backtest", "ForecastConnectionName", "Forecast" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.FreqSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.FreqSpec.Parser, new[]{ "Interval", "Unit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GithubEvents), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GithubEvents.Parser, new[]{ "GitConnectionName", "Repository", "Branch", "BlobNameRegex", "Events" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Hierarchy), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Hierarchy.Parser, new[]{ "Columns", "GroupLevels", "ItemLevel", "NotifierName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.HyperParameterValue), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.HyperParameterValue.Parser, new[]{ "Name", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ImagePipelineSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ImagePipelineSpec.Parser, new[]{ "Columns", "Featurizer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level.Parser, new[]{ "String", "Horizon", "Freq", "Aggregate", "Distinc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement.Parser, new[]{ "Metric", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Model), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Model.Parser, new[]{ "Metadata", "Spec", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilder), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilder.Parser, new[]{ "Metadata", "Spec", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderCondition), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderCondition.Parser, new[]{ "Type", "Status", "LastTransitionTime", "Reason", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderList), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderList.Parser, new[]{ "Metadata", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderSpec.Parser, new[]{ "DataProductName", "DataProductVersionName", "DatasourceName", "DatasetName", "Path", "Task", "Objective", "TargetColumn", "MaxTime", "MaxModels", "AccessMethod", "AutoScale", "DataSourceSpec", "Trainers", "SearchMethod", "Aborted", "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderStatus), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderStatus.Parser, new[]{ "FlatFileName", "DataSourceName", "DatasetName", "StudyName", "BestModelName", "PredictorName", "ImageRepoName", "Phase", "Rows", "Cols", "FileSize", "Models", "TrainedModels", "BestModelScore", "Estimator", "StartTime", "CompletionTime", "Conditions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelCondition), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelCondition.Parser, new[]{ "Type", "Status", "LastTransitionTime", "Reason", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelList), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelList.Parser, new[]{ "Metadata", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipeline), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipeline.Parser, new[]{ "Metadata", "Spec", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineCondition), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineCondition.Parser, new[]{ "Type", "Status", "LastTransitionTime", "Reason", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineList), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineList.Parser, new[]{ "Metadata", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRun), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRun.Parser, new[]{ "Metadata", "Spec", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunCondition), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunCondition.Parser, new[]{ "Type", "Status", "LastTransitionTime", "Reason", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunList), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunList.Parser, new[]{ "Metadata", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunSpec.Parser, new[]{ "VersionName", "Description", "TriggerName", "PipelineName", "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus.Parser, new[]{ "Approved", "ApprovedBy", "Score", "StartTime", "EndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStatus), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStatus.Parser, new[]{ "StudyName", "Data", "Training", "Acceptance", "Capacity", "Prod", "StartTime", "CompletionTime", "Phase", "Conditions", "EvalMetrics" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineSpec.Parser, new[]{ "VersionName", "DefaultServingSiteName", "Description", "MinScore", "DataStage", "TrainingStage", "AcceptanceStage", "CapacityStage", "ReleaseStage", "Folder", "Trigger", "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineStatus), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineStatus.Parser, new[]{ "Conditions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelResult), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelResult.Parser, new[]{ "Name", "Alg", "Score", "Error" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSearchSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSearchSpec.Parser, new[]{ "Type", "MaxCost", "MaxTime", "MaxModels", "MinScore", "Trainers", "ShOptions", "Test", "RetainTop", "RetainedFor", "Resources", "Allowlist", "VotingEnsemble", "StackingEnsemble" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSpec.Parser, new[]{ "Owner", "VersionName", "StudyName", "DatasetName", "Task", "Objective", "Preprocessing", "Estimator", "Dnn", "Ensemble", "Training", "Tested", "Aborted", "Published", "Pushed", "Reported", "Paused", "Profiled", "Archived", "Forecasted", "Location", "ForecastingSpec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelStatus), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelStatus.Parser, new[]{ "StartTime", "TrainStartTime", "TrainCompletionTime", "TestStartTime", "TestCompletionTime", "CompletionTime", "CvScore", "TrainScore", "TestScore", "Cost", "Best", "TrainResult", "TestResult", "Phase", "ReportName", "ManifestUri", "WeightsUri", "LabelsEncoderUri", "LogsUri", "ProfileUri", "MisclassUri", "ImageName", "ForecastUri", "Conditions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NNLayerParameter), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NNLayerParameter.Parser, new[]{ "Name", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Notebook), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Notebook.Parser, new[]{ "Metadata", "Spec", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookCondition), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookCondition.Parser, new[]{ "Type", "Status", "LastTransitionTime", "Reason", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookList), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookList.Parser, new[]{ "Metadata", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRun), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRun.Parser, new[]{ "Metadata", "Spec", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunCondition), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunCondition.Parser, new[]{ "Type", "Status", "LastTransitionTime", "Reason", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunList), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunList.Parser, new[]{ "Metadata", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunSpec.Parser, new[]{ "VersionName", "NotebookName", "Values", "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunStatus), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunStatus.Parser, new[]{ "Phase", "StartTime", "CompletionTime", "Conditions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookSpec.Parser, new[]{ "VersionName", "Description", "SchemaRef", "ImageName", "Requirements", "DebPackages", "Vars", "Location", "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookStatus), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookStatus.Parser, new[]{ "Image", "Uri", "Conditions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookVarValue), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookVarValue.Parser, new[]{ "Name", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NumericPipelineSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NumericPipelineSpec.Parser, new[]{ "Columns", "Imputer", "Scaler" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PipelineTrigger), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PipelineTrigger.Parser, new[]{ "Schedule", "GithubEvents" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec.Parser, new[]{ "Categorical", "Numeric", "Text", "Image", "Audio", "Video", "Datetime", "FeatureSelector", "Reducer", "Imbalanced" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReleaseStageSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReleaseStageSpec.Parser, new[]{ "PredictorName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Report), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Report.Parser, new[]{ "Metadata", "Spec", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportCondition), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportCondition.Parser, new[]{ "Type", "Status", "LastTransitionTime", "Reason", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportList), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportList.Parser, new[]{ "Metadata", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportSpec.Parser, new[]{ "VersionName", "EntityRef", "Location", "ReportType", "Format", "Description", "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportStatus), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportStatus.Parser, new[]{ "StartTime", "CompletionTime", "Phase", "Uri", "Conditions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Study), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Study.Parser, new[]{ "Metadata", "Spec", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyCondition), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyCondition.Parser, new[]{ "Type", "Status", "LastTransitionTime", "Reason", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyList), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyList.Parser, new[]{ "Metadata", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudySpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudySpec.Parser, new[]{ "VersionName", "Description", "LabRef", "DatasetName", "Task", "Objective", "Search", "Preprocessing", "Training", "TrainerClassRef", "Split", "Aborted", "Reported", "Paused", "Profiled", "ModelPublished", "ModelImagePushed", "Location", "Hierarchy", "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyStatus), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyStatus.Parser, new[]{ "Models", "WaitingToTrain", "TrainingModels", "FailedTrainingModels", "TrainedModels", "WaitingToTestModels", "TestingModels", "FailedTestingModels", "TestedModels", "Trainers", "FreeTrainers", "BudyTrainers", "StartTime", "TrainingStartTime", "TrainingCompletionTime", "TestingStarted", "TestingCompletionTime", "CompletionTime", "BestModel", "BestModelScore", "ProfileUri", "ReportName", "Phase", "Conditions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingOptions), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingOptions.Parser, new[]{ "MaxBudget", "EliminationRate", "Modality" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingSpec.Parser, new[]{ "Budget", "Bracket", "Rung", "ConfID", "Modality" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TextPipelineSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TextPipelineSpec.Parser, new[]{ "Columns", "Encoder", "Tokenizer", "Stopwords", "Pos", "Lemma", "Stem", "Embedding" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingResourceRequest), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingResourceRequest.Parser, new[]{ "Gpu", "Cpu", "Mem" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec.Parser, new[]{ "Priority", "Cvtype", "Cv", "Folds", "Retry", "EvalMetrics", "EarlyStop", "CheckpointInterval", "Forecast", "Sh", "Seed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingStageSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingStageSpec.Parser, new[]{ "NotebookName", "LabName", "StudyName", "Auto" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TriggerSchedule), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TriggerSchedule.Parser, new[]{ "StartTime", "StartDay", "EndTime", "EndDay", "Cron", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.VideoPipelineSpec), global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.VideoPipelineSpec.Parser, new[]{ "Columns", "Featurizer" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// AcceptanceStageSpec is the desired step of the acceptance stage of the pipeline
  /// </summary>
  public sealed partial class AcceptanceStageSpec : pb::IMessage<AcceptanceStageSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AcceptanceStageSpec> _parser = new pb::MessageParser<AcceptanceStageSpec>(() => new AcceptanceStageSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcceptanceStageSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptanceStageSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptanceStageSpec(AcceptanceStageSpec other) : this() {
      _hasBits0 = other._hasBits0;
      servingSiteName_ = other.servingSiteName_;
      testDatasetName_ = other.testDatasetName_;
      auto_ = other.auto_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptanceStageSpec Clone() {
      return new AcceptanceStageSpec(this);
    }

    /// <summary>Field number for the "servingSiteName" field.</summary>
    public const int ServingSiteNameFieldNumber = 1;
    private readonly static string ServingSiteNameDefaultValue = "";

    private string servingSiteName_;
    /// <summary>
    /// The serving site for the testing
    /// +kubebuilder:default =""
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServingSiteName {
      get { return servingSiteName_ ?? ServingSiteNameDefaultValue; }
      set {
        servingSiteName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "servingSiteName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServingSiteName {
      get { return servingSiteName_ != null; }
    }
    /// <summary>Clears the value of the "servingSiteName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServingSiteName() {
      servingSiteName_ = null;
    }

    /// <summary>Field number for the "testDatasetName" field.</summary>
    public const int TestDatasetNameFieldNumber = 2;
    private readonly static string TestDatasetNameDefaultValue = "";

    private string testDatasetName_;
    /// <summary>
    /// The name of test dataset name
    /// +kubebuilder:default =""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestDatasetName {
      get { return testDatasetName_ ?? TestDatasetNameDefaultValue; }
      set {
        testDatasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "testDatasetName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTestDatasetName {
      get { return testDatasetName_ != null; }
    }
    /// <summary>Clears the value of the "testDatasetName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTestDatasetName() {
      testDatasetName_ = null;
    }

    /// <summary>Field number for the "auto" field.</summary>
    public const int AutoFieldNumber = 3;
    private readonly static bool AutoDefaultValue = false;

    private bool auto_;
    /// <summary>
    /// Auto defines if we move to the next stage without human intervation
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Auto {
      get { if ((_hasBits0 & 1) != 0) { return auto_; } else { return AutoDefaultValue; } }
      set {
        _hasBits0 |= 1;
        auto_ = value;
      }
    }
    /// <summary>Gets whether the "auto" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuto {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "auto" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuto() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcceptanceStageSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcceptanceStageSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServingSiteName != other.ServingSiteName) return false;
      if (TestDatasetName != other.TestDatasetName) return false;
      if (Auto != other.Auto) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServingSiteName) hash ^= ServingSiteName.GetHashCode();
      if (HasTestDatasetName) hash ^= TestDatasetName.GetHashCode();
      if (HasAuto) hash ^= Auto.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasServingSiteName) {
        output.WriteRawTag(10);
        output.WriteString(ServingSiteName);
      }
      if (HasTestDatasetName) {
        output.WriteRawTag(18);
        output.WriteString(TestDatasetName);
      }
      if (HasAuto) {
        output.WriteRawTag(24);
        output.WriteBool(Auto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasServingSiteName) {
        output.WriteRawTag(10);
        output.WriteString(ServingSiteName);
      }
      if (HasTestDatasetName) {
        output.WriteRawTag(18);
        output.WriteString(TestDatasetName);
      }
      if (HasAuto) {
        output.WriteRawTag(24);
        output.WriteBool(Auto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasServingSiteName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServingSiteName);
      }
      if (HasTestDatasetName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestDatasetName);
      }
      if (HasAuto) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcceptanceStageSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasServingSiteName) {
        ServingSiteName = other.ServingSiteName;
      }
      if (other.HasTestDatasetName) {
        TestDatasetName = other.TestDatasetName;
      }
      if (other.HasAuto) {
        Auto = other.Auto;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServingSiteName = input.ReadString();
            break;
          }
          case 18: {
            TestDatasetName = input.ReadString();
            break;
          }
          case 24: {
            Auto = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServingSiteName = input.ReadString();
            break;
          }
          case 18: {
            TestDatasetName = input.ReadString();
            break;
          }
          case 24: {
            Auto = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// AudioPipelineSpec is the specification for preprocessing audio data
  /// </summary>
  public sealed partial class AudioPipelineSpec : pb::IMessage<AudioPipelineSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AudioPipelineSpec> _parser = new pb::MessageParser<AudioPipelineSpec>(() => new AudioPipelineSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioPipelineSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioPipelineSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioPipelineSpec(AudioPipelineSpec other) : this() {
      columns_ = other.columns_.Clone();
      featurizer_ = other.featurizer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioPipelineSpec Clone() {
      return new AudioPipelineSpec(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Name of the datetime columns
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "featurizer" field.</summary>
    public const int FeaturizerFieldNumber = 2;
    private readonly static string FeaturizerDefaultValue = "";

    private string featurizer_;
    /// <summary>
    /// The date time imputer.
    /// +kubebuilder:default:="auto"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Featurizer {
      get { return featurizer_ ?? FeaturizerDefaultValue; }
      set {
        featurizer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "featurizer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFeaturizer {
      get { return featurizer_ != null; }
    }
    /// <summary>Clears the value of the "featurizer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFeaturizer() {
      featurizer_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioPipelineSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioPipelineSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if (Featurizer != other.Featurizer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      if (HasFeaturizer) hash ^= Featurizer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      columns_.WriteTo(output, _repeated_columns_codec);
      if (HasFeaturizer) {
        output.WriteRawTag(18);
        output.WriteString(Featurizer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (HasFeaturizer) {
        output.WriteRawTag(18);
        output.WriteString(Featurizer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (HasFeaturizer) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Featurizer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioPipelineSpec other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      if (other.HasFeaturizer) {
        Featurizer = other.Featurizer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Featurizer = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Featurizer = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// BacktestSpec specify the back test
  /// </summary>
  public sealed partial class BacktestSpec : pb::IMessage<BacktestSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BacktestSpec> _parser = new pb::MessageParser<BacktestSpec>(() => new BacktestSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BacktestSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BacktestSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BacktestSpec(BacktestSpec other) : this() {
      _hasBits0 = other._hasBits0;
      initial_ = other.initial_;
      windows_ = other.windows_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BacktestSpec Clone() {
      return new BacktestSpec(this);
    }

    /// <summary>Field number for the "initial" field.</summary>
    public const int InitialFieldNumber = 1;
    private readonly static int InitialDefaultValue = 0;

    private int initial_;
    /// <summary>
    /// The initial number of data points, default to 80% of rows.
    /// +kubebuilder:default:=80
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Initial {
      get { if ((_hasBits0 & 1) != 0) { return initial_; } else { return InitialDefaultValue; } }
      set {
        _hasBits0 |= 1;
        initial_ = value;
      }
    }
    /// <summary>Gets whether the "initial" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInitial {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "initial" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInitial() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "windows" field.</summary>
    public const int WindowsFieldNumber = 2;
    private readonly static int WindowsDefaultValue = 0;

    private int windows_;
    /// <summary>
    /// The number of backtesting windows. Default to 3. can be from 1 to 5.
    /// +kubebuilder:default:=3
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Windows {
      get { if ((_hasBits0 & 2) != 0) { return windows_; } else { return WindowsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        windows_ = value;
      }
    }
    /// <summary>Gets whether the "windows" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWindows {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "windows" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWindows() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BacktestSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BacktestSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Initial != other.Initial) return false;
      if (Windows != other.Windows) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInitial) hash ^= Initial.GetHashCode();
      if (HasWindows) hash ^= Windows.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasInitial) {
        output.WriteRawTag(8);
        output.WriteInt32(Initial);
      }
      if (HasWindows) {
        output.WriteRawTag(16);
        output.WriteInt32(Windows);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasInitial) {
        output.WriteRawTag(8);
        output.WriteInt32(Initial);
      }
      if (HasWindows) {
        output.WriteRawTag(16);
        output.WriteInt32(Windows);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasInitial) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Initial);
      }
      if (HasWindows) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Windows);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BacktestSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasInitial) {
        Initial = other.Initial;
      }
      if (other.HasWindows) {
        Windows = other.Windows;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Initial = input.ReadInt32();
            break;
          }
          case 16: {
            Windows = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Initial = input.ReadInt32();
            break;
          }
          case 16: {
            Windows = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// CapacityStageSpec is the desired state of the capcity testing.
  /// </summary>
  public sealed partial class CapacityStageSpec : pb::IMessage<CapacityStageSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CapacityStageSpec> _parser = new pb::MessageParser<CapacityStageSpec>(() => new CapacityStageSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CapacityStageSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapacityStageSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapacityStageSpec(CapacityStageSpec other) : this() {
      _hasBits0 = other._hasBits0;
      servingSiteName_ = other.servingSiteName_;
      testDatasetName_ = other.testDatasetName_;
      auto_ = other.auto_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapacityStageSpec Clone() {
      return new CapacityStageSpec(this);
    }

    /// <summary>Field number for the "servingSiteName" field.</summary>
    public const int ServingSiteNameFieldNumber = 1;
    private readonly static string ServingSiteNameDefaultValue = "";

    private string servingSiteName_;
    /// <summary>
    /// ServingSiteName is the serving site for the testing
    /// +kubebuilder:default =""
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServingSiteName {
      get { return servingSiteName_ ?? ServingSiteNameDefaultValue; }
      set {
        servingSiteName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "servingSiteName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServingSiteName {
      get { return servingSiteName_ != null; }
    }
    /// <summary>Clears the value of the "servingSiteName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServingSiteName() {
      servingSiteName_ = null;
    }

    /// <summary>Field number for the "testDatasetName" field.</summary>
    public const int TestDatasetNameFieldNumber = 2;
    private readonly static string TestDatasetNameDefaultValue = "";

    private string testDatasetName_;
    /// <summary>
    /// TestDatasetName is the name of dataset used to test the model at this stage.
    /// +kubebuilder:default =""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestDatasetName {
      get { return testDatasetName_ ?? TestDatasetNameDefaultValue; }
      set {
        testDatasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "testDatasetName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTestDatasetName {
      get { return testDatasetName_ != null; }
    }
    /// <summary>Clears the value of the "testDatasetName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTestDatasetName() {
      testDatasetName_ = null;
    }

    /// <summary>Field number for the "auto" field.</summary>
    public const int AutoFieldNumber = 3;
    private readonly static bool AutoDefaultValue = false;

    private bool auto_;
    /// <summary>
    /// Auto defines if we move from stage to stage automatically.
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Auto {
      get { if ((_hasBits0 & 1) != 0) { return auto_; } else { return AutoDefaultValue; } }
      set {
        _hasBits0 |= 1;
        auto_ = value;
      }
    }
    /// <summary>Gets whether the "auto" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuto {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "auto" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuto() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CapacityStageSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CapacityStageSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServingSiteName != other.ServingSiteName) return false;
      if (TestDatasetName != other.TestDatasetName) return false;
      if (Auto != other.Auto) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServingSiteName) hash ^= ServingSiteName.GetHashCode();
      if (HasTestDatasetName) hash ^= TestDatasetName.GetHashCode();
      if (HasAuto) hash ^= Auto.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasServingSiteName) {
        output.WriteRawTag(10);
        output.WriteString(ServingSiteName);
      }
      if (HasTestDatasetName) {
        output.WriteRawTag(18);
        output.WriteString(TestDatasetName);
      }
      if (HasAuto) {
        output.WriteRawTag(24);
        output.WriteBool(Auto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasServingSiteName) {
        output.WriteRawTag(10);
        output.WriteString(ServingSiteName);
      }
      if (HasTestDatasetName) {
        output.WriteRawTag(18);
        output.WriteString(TestDatasetName);
      }
      if (HasAuto) {
        output.WriteRawTag(24);
        output.WriteBool(Auto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasServingSiteName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServingSiteName);
      }
      if (HasTestDatasetName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestDatasetName);
      }
      if (HasAuto) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CapacityStageSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasServingSiteName) {
        ServingSiteName = other.ServingSiteName;
      }
      if (other.HasTestDatasetName) {
        TestDatasetName = other.TestDatasetName;
      }
      if (other.HasAuto) {
        Auto = other.Auto;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServingSiteName = input.ReadString();
            break;
          }
          case 18: {
            TestDatasetName = input.ReadString();
            break;
          }
          case 24: {
            Auto = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServingSiteName = input.ReadString();
            break;
          }
          case 18: {
            TestDatasetName = input.ReadString();
            break;
          }
          case 24: {
            Auto = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// CategoricalPipelineSpec is the specification for processing categorical columns
  /// </summary>
  public sealed partial class CategoricalPipelineSpec : pb::IMessage<CategoricalPipelineSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CategoricalPipelineSpec> _parser = new pb::MessageParser<CategoricalPipelineSpec>(() => new CategoricalPipelineSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CategoricalPipelineSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoricalPipelineSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoricalPipelineSpec(CategoricalPipelineSpec other) : this() {
      columns_ = other.columns_.Clone();
      imputer_ = other.imputer_;
      encoder_ = other.encoder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoricalPipelineSpec Clone() {
      return new CategoricalPipelineSpec(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The columns for this pipeline. Use * to denotes all the columns.
    /// Must have at least on value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "imputer" field.</summary>
    public const int ImputerFieldNumber = 2;
    private readonly static string ImputerDefaultValue = "";

    private string imputer_;
    /// <summary>
    /// Categorical varaible imputer
    /// +kubebuilder:default:=auto
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Imputer {
      get { return imputer_ ?? ImputerDefaultValue; }
      set {
        imputer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "imputer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImputer {
      get { return imputer_ != null; }
    }
    /// <summary>Clears the value of the "imputer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImputer() {
      imputer_ = null;
    }

    /// <summary>Field number for the "encoder" field.</summary>
    public const int EncoderFieldNumber = 3;
    private readonly static string EncoderDefaultValue = "";

    private string encoder_;
    /// <summary>
    /// CatEncoder
    /// +kubebuilder:default:=auto
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Encoder {
      get { return encoder_ ?? EncoderDefaultValue; }
      set {
        encoder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "encoder" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncoder {
      get { return encoder_ != null; }
    }
    /// <summary>Clears the value of the "encoder" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncoder() {
      encoder_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CategoricalPipelineSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CategoricalPipelineSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if (Imputer != other.Imputer) return false;
      if (Encoder != other.Encoder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      if (HasImputer) hash ^= Imputer.GetHashCode();
      if (HasEncoder) hash ^= Encoder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      columns_.WriteTo(output, _repeated_columns_codec);
      if (HasImputer) {
        output.WriteRawTag(18);
        output.WriteString(Imputer);
      }
      if (HasEncoder) {
        output.WriteRawTag(26);
        output.WriteString(Encoder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (HasImputer) {
        output.WriteRawTag(18);
        output.WriteString(Imputer);
      }
      if (HasEncoder) {
        output.WriteRawTag(26);
        output.WriteString(Encoder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (HasImputer) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imputer);
      }
      if (HasEncoder) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Encoder);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CategoricalPipelineSpec other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      if (other.HasImputer) {
        Imputer = other.Imputer;
      }
      if (other.HasEncoder) {
        Encoder = other.Encoder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Imputer = input.ReadString();
            break;
          }
          case 26: {
            Encoder = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Imputer = input.ReadString();
            break;
          }
          case 26: {
            Encoder = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ClassicalEstimatorSpec is the specification for an algorithm and the actual value fof the hyper parameters
  /// </summary>
  public sealed partial class ClassicalEstimatorSpec : pb::IMessage<ClassicalEstimatorSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClassicalEstimatorSpec> _parser = new pb::MessageParser<ClassicalEstimatorSpec>(() => new ClassicalEstimatorSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClassicalEstimatorSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicalEstimatorSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicalEstimatorSpec(ClassicalEstimatorSpec other) : this() {
      algorithmName_ = other.algorithmName_;
      parameters_ = other.parameters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicalEstimatorSpec Clone() {
      return new ClassicalEstimatorSpec(this);
    }

    /// <summary>Field number for the "algorithmName" field.</summary>
    public const int AlgorithmNameFieldNumber = 1;
    private readonly static string AlgorithmNameDefaultValue = "";

    private string algorithmName_;
    /// <summary>
    /// AlgorithmName is a reference to the algorithm in the catalog
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlgorithmName {
      get { return algorithmName_ ?? AlgorithmNameDefaultValue; }
      set {
        algorithmName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "algorithmName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAlgorithmName {
      get { return algorithmName_ != null; }
    }
    /// <summary>Clears the value of the "algorithmName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlgorithmName() {
      algorithmName_ = null;
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.HyperParameterValue> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.HyperParameterValue.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.HyperParameterValue> parameters_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.HyperParameterValue>();
    /// <summary>
    /// Parameters is a list of the algorithm hyper parameters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.HyperParameterValue> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClassicalEstimatorSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClassicalEstimatorSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlgorithmName != other.AlgorithmName) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAlgorithmName) hash ^= AlgorithmName.GetHashCode();
      hash ^= parameters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAlgorithmName) {
        output.WriteRawTag(10);
        output.WriteString(AlgorithmName);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAlgorithmName) {
        output.WriteRawTag(10);
        output.WriteString(AlgorithmName);
      }
      parameters_.WriteTo(ref output, _repeated_parameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAlgorithmName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlgorithmName);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClassicalEstimatorSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasAlgorithmName) {
        AlgorithmName = other.AlgorithmName;
      }
      parameters_.Add(other.parameters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AlgorithmName = input.ReadString();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AlgorithmName = input.ReadString();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(ref input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DataSplit : pb::IMessage<DataSplit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DataSplit> _parser = new pb::MessageParser<DataSplit>(() => new DataSplit());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSplit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSplit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSplit(DataSplit other) : this() {
      _hasBits0 = other._hasBits0;
      auto_ = other.auto_;
      train_ = other.train_;
      validation_ = other.validation_;
      test_ = other.test_;
      splitPolicy_ = other.splitPolicy_;
      splitColumn_ = other.splitColumn_;
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSplit Clone() {
      return new DataSplit(this);
    }

    /// <summary>Field number for the "auto" field.</summary>
    public const int AutoFieldNumber = 1;
    private readonly static bool AutoDefaultValue = false;

    private bool auto_;
    /// <summary>
    /// Indicate that this is an automatic split.
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Auto {
      get { if ((_hasBits0 & 1) != 0) { return auto_; } else { return AutoDefaultValue; } }
      set {
        _hasBits0 |= 1;
        auto_ = value;
      }
    }
    /// <summary>Gets whether the "auto" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuto {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "auto" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuto() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "train" field.</summary>
    public const int TrainFieldNumber = 2;
    private readonly static int TrainDefaultValue = 0;

    private int train_;
    /// <summary>
    /// Training is a percent number (0-100) which specify how much of
    /// the data will be used for training
    /// +kubebuilder:validation:Optional
    /// +kubebuilder:default:=80
    /// +kubebuilder:validation:Minimum=1
    /// +kubebuilder:validation:Maximum=100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Train {
      get { if ((_hasBits0 & 2) != 0) { return train_; } else { return TrainDefaultValue; } }
      set {
        _hasBits0 |= 2;
        train_ = value;
      }
    }
    /// <summary>Gets whether the "train" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrain {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "train" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrain() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "validation" field.</summary>
    public const int ValidationFieldNumber = 3;
    private readonly static int ValidationDefaultValue = 0;

    private int validation_;
    /// <summary>
    /// Validation is percent of dataset rows which would be used to compute the objective during
    /// hyper parameter search phase.
    /// Only used if we do not do cross validation.
    /// default is 10% of the data, if we do not have cross validation.
    /// default is 0% of the data, if we do cross validation.
    /// +kubebuilder:validation:Minimum=0
    /// +kubebuilder:default:=0
    /// +kubebuilder:validation:Maximum=50
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Validation {
      get { if ((_hasBits0 & 4) != 0) { return validation_; } else { return ValidationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        validation_ = value;
      }
    }
    /// <summary>Gets whether the "validation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValidation {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "validation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValidation() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "test" field.</summary>
    public const int TestFieldNumber = 4;
    private readonly static int TestDefaultValue = 0;

    private int test_;
    /// <summary>
    /// Test is percent of dataset rows which would be used to compute the objective during
    /// +kubebuilder:validation:Minimum=0
    /// +kubebuilder:validation:Maximum=50
    /// +kubebuilder:default:=20
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Test {
      get { if ((_hasBits0 & 8) != 0) { return test_; } else { return TestDefaultValue; } }
      set {
        _hasBits0 |= 8;
        test_ = value;
      }
    }
    /// <summary>Gets whether the "test" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTest {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "test" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTest() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "splitPolicy" field.</summary>
    public const int SplitPolicyFieldNumber = 5;
    private readonly static string SplitPolicyDefaultValue = "";

    private string splitPolicy_;
    /// <summary>
    /// Indicate if the dataset split should be stratified.
    /// +kubebuilder:default:="stratified"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SplitPolicy {
      get { return splitPolicy_ ?? SplitPolicyDefaultValue; }
      set {
        splitPolicy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "splitPolicy" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSplitPolicy {
      get { return splitPolicy_ != null; }
    }
    /// <summary>Clears the value of the "splitPolicy" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSplitPolicy() {
      splitPolicy_ = null;
    }

    /// <summary>Field number for the "splitColumn" field.</summary>
    public const int SplitColumnFieldNumber = 6;
    private readonly static string SplitColumnDefaultValue = "";

    private string splitColumn_;
    /// <summary>
    /// The name of the column used to split
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SplitColumn {
      get { return splitColumn_ ?? SplitColumnDefaultValue; }
      set {
        splitColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "splitColumn" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSplitColumn {
      get { return splitColumn_ != null; }
    }
    /// <summary>Clears the value of the "splitColumn" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSplitColumn() {
      splitColumn_ = null;
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 7;
    private readonly static double SeedDefaultValue = 0D;

    private double seed_;
    /// <summary>
    /// The seed to use for the estimator
    /// Default: 42
    /// +kubebuilder:default:=42
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Seed {
      get { if ((_hasBits0 & 16) != 0) { return seed_; } else { return SeedDefaultValue; } }
      set {
        _hasBits0 |= 16;
        seed_ = value;
      }
    }
    /// <summary>Gets whether the "seed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeed {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "seed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeed() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSplit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSplit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Auto != other.Auto) return false;
      if (Train != other.Train) return false;
      if (Validation != other.Validation) return false;
      if (Test != other.Test) return false;
      if (SplitPolicy != other.SplitPolicy) return false;
      if (SplitColumn != other.SplitColumn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Seed, other.Seed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAuto) hash ^= Auto.GetHashCode();
      if (HasTrain) hash ^= Train.GetHashCode();
      if (HasValidation) hash ^= Validation.GetHashCode();
      if (HasTest) hash ^= Test.GetHashCode();
      if (HasSplitPolicy) hash ^= SplitPolicy.GetHashCode();
      if (HasSplitColumn) hash ^= SplitColumn.GetHashCode();
      if (HasSeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Seed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAuto) {
        output.WriteRawTag(8);
        output.WriteBool(Auto);
      }
      if (HasTrain) {
        output.WriteRawTag(16);
        output.WriteInt32(Train);
      }
      if (HasValidation) {
        output.WriteRawTag(24);
        output.WriteInt32(Validation);
      }
      if (HasTest) {
        output.WriteRawTag(32);
        output.WriteInt32(Test);
      }
      if (HasSplitPolicy) {
        output.WriteRawTag(42);
        output.WriteString(SplitPolicy);
      }
      if (HasSplitColumn) {
        output.WriteRawTag(50);
        output.WriteString(SplitColumn);
      }
      if (HasSeed) {
        output.WriteRawTag(57);
        output.WriteDouble(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAuto) {
        output.WriteRawTag(8);
        output.WriteBool(Auto);
      }
      if (HasTrain) {
        output.WriteRawTag(16);
        output.WriteInt32(Train);
      }
      if (HasValidation) {
        output.WriteRawTag(24);
        output.WriteInt32(Validation);
      }
      if (HasTest) {
        output.WriteRawTag(32);
        output.WriteInt32(Test);
      }
      if (HasSplitPolicy) {
        output.WriteRawTag(42);
        output.WriteString(SplitPolicy);
      }
      if (HasSplitColumn) {
        output.WriteRawTag(50);
        output.WriteString(SplitColumn);
      }
      if (HasSeed) {
        output.WriteRawTag(57);
        output.WriteDouble(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAuto) {
        size += 1 + 1;
      }
      if (HasTrain) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Train);
      }
      if (HasValidation) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Validation);
      }
      if (HasTest) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Test);
      }
      if (HasSplitPolicy) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SplitPolicy);
      }
      if (HasSplitColumn) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SplitColumn);
      }
      if (HasSeed) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSplit other) {
      if (other == null) {
        return;
      }
      if (other.HasAuto) {
        Auto = other.Auto;
      }
      if (other.HasTrain) {
        Train = other.Train;
      }
      if (other.HasValidation) {
        Validation = other.Validation;
      }
      if (other.HasTest) {
        Test = other.Test;
      }
      if (other.HasSplitPolicy) {
        SplitPolicy = other.SplitPolicy;
      }
      if (other.HasSplitColumn) {
        SplitColumn = other.SplitColumn;
      }
      if (other.HasSeed) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Auto = input.ReadBool();
            break;
          }
          case 16: {
            Train = input.ReadInt32();
            break;
          }
          case 24: {
            Validation = input.ReadInt32();
            break;
          }
          case 32: {
            Test = input.ReadInt32();
            break;
          }
          case 42: {
            SplitPolicy = input.ReadString();
            break;
          }
          case 50: {
            SplitColumn = input.ReadString();
            break;
          }
          case 57: {
            Seed = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Auto = input.ReadBool();
            break;
          }
          case 16: {
            Train = input.ReadInt32();
            break;
          }
          case 24: {
            Validation = input.ReadInt32();
            break;
          }
          case 32: {
            Test = input.ReadInt32();
            break;
          }
          case 42: {
            SplitPolicy = input.ReadString();
            break;
          }
          case 50: {
            SplitColumn = input.ReadString();
            break;
          }
          case 57: {
            Seed = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// DataStageSpec is the desired state of the data preprocesing step of the pipeline.
  /// Data preprocessing will be done via
  /// </summary>
  public sealed partial class DataStageSpec : pb::IMessage<DataStageSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DataStageSpec> _parser = new pb::MessageParser<DataStageSpec>(() => new DataStageSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataStageSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataStageSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataStageSpec(DataStageSpec other) : this() {
      wranglerName_ = other.wranglerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataStageSpec Clone() {
      return new DataStageSpec(this);
    }

    /// <summary>Field number for the "wranglerName" field.</summary>
    public const int WranglerNameFieldNumber = 1;
    private readonly static string WranglerNameDefaultValue = "";

    private string wranglerName_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WranglerName {
      get { return wranglerName_ ?? WranglerNameDefaultValue; }
      set {
        wranglerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "wranglerName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWranglerName {
      get { return wranglerName_ != null; }
    }
    /// <summary>Clears the value of the "wranglerName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWranglerName() {
      wranglerName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataStageSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataStageSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WranglerName != other.WranglerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWranglerName) hash ^= WranglerName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasWranglerName) {
        output.WriteRawTag(10);
        output.WriteString(WranglerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasWranglerName) {
        output.WriteRawTag(10);
        output.WriteString(WranglerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasWranglerName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WranglerName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataStageSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasWranglerName) {
        WranglerName = other.WranglerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WranglerName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            WranglerName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// DateTimePipelineSpec is the specification for preprocessing datetime features
  /// </summary>
  public sealed partial class DateTimePipelineSpec : pb::IMessage<DateTimePipelineSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DateTimePipelineSpec> _parser = new pb::MessageParser<DateTimePipelineSpec>(() => new DateTimePipelineSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DateTimePipelineSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateTimePipelineSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateTimePipelineSpec(DateTimePipelineSpec other) : this() {
      _hasBits0 = other._hasBits0;
      columns_ = other.columns_.Clone();
      imputer_ = other.imputer_;
      expand_ = other.expand_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateTimePipelineSpec Clone() {
      return new DateTimePipelineSpec(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Name of the datetime columns
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "imputer" field.</summary>
    public const int ImputerFieldNumber = 2;
    private readonly static string ImputerDefaultValue = "";

    private string imputer_;
    /// <summary>
    /// The date time imputer.
    /// +kubebuilder:default:="auto"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Imputer {
      get { return imputer_ ?? ImputerDefaultValue; }
      set {
        imputer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "imputer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImputer {
      get { return imputer_ != null; }
    }
    /// <summary>Clears the value of the "imputer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImputer() {
      imputer_ = null;
    }

    /// <summary>Field number for the "expand" field.</summary>
    public const int ExpandFieldNumber = 3;
    private readonly static bool ExpandDefaultValue = false;

    private bool expand_;
    /// <summary>
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Expand {
      get { if ((_hasBits0 & 1) != 0) { return expand_; } else { return ExpandDefaultValue; } }
      set {
        _hasBits0 |= 1;
        expand_ = value;
      }
    }
    /// <summary>Gets whether the "expand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpand {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "expand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpand() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DateTimePipelineSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DateTimePipelineSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if (Imputer != other.Imputer) return false;
      if (Expand != other.Expand) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      if (HasImputer) hash ^= Imputer.GetHashCode();
      if (HasExpand) hash ^= Expand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      columns_.WriteTo(output, _repeated_columns_codec);
      if (HasImputer) {
        output.WriteRawTag(18);
        output.WriteString(Imputer);
      }
      if (HasExpand) {
        output.WriteRawTag(24);
        output.WriteBool(Expand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (HasImputer) {
        output.WriteRawTag(18);
        output.WriteString(Imputer);
      }
      if (HasExpand) {
        output.WriteRawTag(24);
        output.WriteBool(Expand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (HasImputer) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imputer);
      }
      if (HasExpand) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DateTimePipelineSpec other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      if (other.HasImputer) {
        Imputer = other.Imputer;
      }
      if (other.HasExpand) {
        Expand = other.Expand;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Imputer = input.ReadString();
            break;
          }
          case 24: {
            Expand = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Imputer = input.ReadString();
            break;
          }
          case 24: {
            Expand = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeepEstimatorLayer : pb::IMessage<DeepEstimatorLayer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeepEstimatorLayer> _parser = new pb::MessageParser<DeepEstimatorLayer>(() => new DeepEstimatorLayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeepEstimatorLayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeepEstimatorLayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeepEstimatorLayer(DeepEstimatorLayer other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      parameters_ = other.parameters_.Clone();
      inputLayers_ = other.inputLayers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeepEstimatorLayer Clone() {
      return new DeepEstimatorLayer(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// FileName is the name of the layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// The type if the layer type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NNLayerParameter> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(26, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NNLayerParameter.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NNLayerParameter> parameters_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NNLayerParameter>();
    /// <summary>
    /// Parameters are the hyper parameters of this layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NNLayerParameter> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "inputLayers" field.</summary>
    public const int InputLayersFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_inputLayers_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> inputLayers_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Input layers are the layer input to this layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InputLayers {
      get { return inputLayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeepEstimatorLayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeepEstimatorLayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      if(!inputLayers_.Equals(other.inputLayers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= parameters_.GetHashCode();
      hash ^= inputLayers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      inputLayers_.WriteTo(output, _repeated_inputLayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      parameters_.WriteTo(ref output, _repeated_parameters_codec);
      inputLayers_.WriteTo(ref output, _repeated_inputLayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      size += inputLayers_.CalculateSize(_repeated_inputLayers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeepEstimatorLayer other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      parameters_.Add(other.parameters_);
      inputLayers_.Add(other.inputLayers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
          case 34: {
            inputLayers_.AddEntriesFrom(input, _repeated_inputLayers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            parameters_.AddEntriesFrom(ref input, _repeated_parameters_codec);
            break;
          }
          case 34: {
            inputLayers_.AddEntriesFrom(ref input, _repeated_inputLayers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeepEstimatorSpec : pb::IMessage<DeepEstimatorSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeepEstimatorSpec> _parser = new pb::MessageParser<DeepEstimatorSpec>(() => new DeepEstimatorSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeepEstimatorSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeepEstimatorSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeepEstimatorSpec(DeepEstimatorSpec other) : this() {
      _hasBits0 = other._hasBits0;
      architecture_ = other.architecture_.Clone();
      type_ = other.type_;
      batchSize_ = other.batchSize_;
      epochs_ = other.epochs_;
      validationSplit_ = other.validationSplit_;
      isSeq_ = other.isSeq_;
      gpus_ = other.gpus_;
      loss_ = other.loss_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeepEstimatorSpec Clone() {
      return new DeepEstimatorSpec(this);
    }

    /// <summary>Field number for the "architecture" field.</summary>
    public const int ArchitectureFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorLayer> _repeated_architecture_codec
        = pb::FieldCodec.ForMessage(10, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorLayer.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorLayer> architecture_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorLayer>();
    /// <summary>
    /// Architecture is the dnn architue
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorLayer> Architecture {
      get { return architecture_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// The type of the dnn
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "batchSize" field.</summary>
    public const int BatchSizeFieldNumber = 3;
    private readonly static int BatchSizeDefaultValue = 0;

    private int batchSize_;
    /// <summary>
    /// Batch size specify about
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatchSize {
      get { if ((_hasBits0 & 1) != 0) { return batchSize_; } else { return BatchSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        batchSize_ = value;
      }
    }
    /// <summary>Gets whether the "batchSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBatchSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "batchSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBatchSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "epochs" field.</summary>
    public const int EpochsFieldNumber = 4;
    private readonly static int EpochsDefaultValue = 0;

    private int epochs_;
    /// <summary>
    /// Budget size specify about
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Epochs {
      get { if ((_hasBits0 & 2) != 0) { return epochs_; } else { return EpochsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        epochs_ = value;
      }
    }
    /// <summary>Gets whether the "epochs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpochs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "epochs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpochs() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "validationSplit" field.</summary>
    public const int ValidationSplitFieldNumber = 5;
    private readonly static int ValidationSplitDefaultValue = 0;

    private int validationSplit_;
    /// <summary>
    /// ValidationSplit specify about
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ValidationSplit {
      get { if ((_hasBits0 & 4) != 0) { return validationSplit_; } else { return ValidationSplitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        validationSplit_ = value;
      }
    }
    /// <summary>Gets whether the "validationSplit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValidationSplit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "validationSplit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValidationSplit() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "isSeq" field.</summary>
    public const int IsSeqFieldNumber = 6;
    private readonly static bool IsSeqDefaultValue = false;

    private bool isSeq_;
    /// <summary>
    /// Is this a seq model
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSeq {
      get { if ((_hasBits0 & 8) != 0) { return isSeq_; } else { return IsSeqDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isSeq_ = value;
      }
    }
    /// <summary>Gets whether the "isSeq" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsSeq {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "isSeq" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsSeq() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gpus" field.</summary>
    public const int GpusFieldNumber = 7;
    private readonly static int GpusDefaultValue = 0;

    private int gpus_;
    /// <summary>
    /// Gpus denote of gpu for trainer, any number more than 1 denote distribute training
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gpus {
      get { if ((_hasBits0 & 16) != 0) { return gpus_; } else { return GpusDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gpus_ = value;
      }
    }
    /// <summary>Gets whether the "gpus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGpus {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gpus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGpus() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "loss" field.</summary>
    public const int LossFieldNumber = 8;
    private readonly static string LossDefaultValue = "";

    private string loss_;
    /// <summary>
    /// compile
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Loss {
      get { return loss_ ?? LossDefaultValue; }
      set {
        loss_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "loss" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLoss {
      get { return loss_ != null; }
    }
    /// <summary>Clears the value of the "loss" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLoss() {
      loss_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeepEstimatorSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeepEstimatorSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!architecture_.Equals(other.architecture_)) return false;
      if (Type != other.Type) return false;
      if (BatchSize != other.BatchSize) return false;
      if (Epochs != other.Epochs) return false;
      if (ValidationSplit != other.ValidationSplit) return false;
      if (IsSeq != other.IsSeq) return false;
      if (Gpus != other.Gpus) return false;
      if (Loss != other.Loss) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= architecture_.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasBatchSize) hash ^= BatchSize.GetHashCode();
      if (HasEpochs) hash ^= Epochs.GetHashCode();
      if (HasValidationSplit) hash ^= ValidationSplit.GetHashCode();
      if (HasIsSeq) hash ^= IsSeq.GetHashCode();
      if (HasGpus) hash ^= Gpus.GetHashCode();
      if (HasLoss) hash ^= Loss.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      architecture_.WriteTo(output, _repeated_architecture_codec);
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (HasBatchSize) {
        output.WriteRawTag(24);
        output.WriteInt32(BatchSize);
      }
      if (HasEpochs) {
        output.WriteRawTag(32);
        output.WriteInt32(Epochs);
      }
      if (HasValidationSplit) {
        output.WriteRawTag(40);
        output.WriteInt32(ValidationSplit);
      }
      if (HasIsSeq) {
        output.WriteRawTag(48);
        output.WriteBool(IsSeq);
      }
      if (HasGpus) {
        output.WriteRawTag(56);
        output.WriteInt32(Gpus);
      }
      if (HasLoss) {
        output.WriteRawTag(66);
        output.WriteString(Loss);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      architecture_.WriteTo(ref output, _repeated_architecture_codec);
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (HasBatchSize) {
        output.WriteRawTag(24);
        output.WriteInt32(BatchSize);
      }
      if (HasEpochs) {
        output.WriteRawTag(32);
        output.WriteInt32(Epochs);
      }
      if (HasValidationSplit) {
        output.WriteRawTag(40);
        output.WriteInt32(ValidationSplit);
      }
      if (HasIsSeq) {
        output.WriteRawTag(48);
        output.WriteBool(IsSeq);
      }
      if (HasGpus) {
        output.WriteRawTag(56);
        output.WriteInt32(Gpus);
      }
      if (HasLoss) {
        output.WriteRawTag(66);
        output.WriteString(Loss);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += architecture_.CalculateSize(_repeated_architecture_codec);
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasBatchSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchSize);
      }
      if (HasEpochs) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Epochs);
      }
      if (HasValidationSplit) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValidationSplit);
      }
      if (HasIsSeq) {
        size += 1 + 1;
      }
      if (HasGpus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gpus);
      }
      if (HasLoss) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Loss);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeepEstimatorSpec other) {
      if (other == null) {
        return;
      }
      architecture_.Add(other.architecture_);
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasBatchSize) {
        BatchSize = other.BatchSize;
      }
      if (other.HasEpochs) {
        Epochs = other.Epochs;
      }
      if (other.HasValidationSplit) {
        ValidationSplit = other.ValidationSplit;
      }
      if (other.HasIsSeq) {
        IsSeq = other.IsSeq;
      }
      if (other.HasGpus) {
        Gpus = other.Gpus;
      }
      if (other.HasLoss) {
        Loss = other.Loss;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            architecture_.AddEntriesFrom(input, _repeated_architecture_codec);
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            BatchSize = input.ReadInt32();
            break;
          }
          case 32: {
            Epochs = input.ReadInt32();
            break;
          }
          case 40: {
            ValidationSplit = input.ReadInt32();
            break;
          }
          case 48: {
            IsSeq = input.ReadBool();
            break;
          }
          case 56: {
            Gpus = input.ReadInt32();
            break;
          }
          case 66: {
            Loss = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            architecture_.AddEntriesFrom(ref input, _repeated_architecture_codec);
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            BatchSize = input.ReadInt32();
            break;
          }
          case 32: {
            Epochs = input.ReadInt32();
            break;
          }
          case 40: {
            ValidationSplit = input.ReadInt32();
            break;
          }
          case 48: {
            IsSeq = input.ReadBool();
            break;
          }
          case 56: {
            Gpus = input.ReadInt32();
            break;
          }
          case 66: {
            Loss = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// DimensionValue specify the partition key values are used for the partition
  /// </summary>
  public sealed partial class DimensionValue : pb::IMessage<DimensionValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DimensionValue> _parser = new pb::MessageParser<DimensionValue>(() => new DimensionValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DimensionValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionValue(DimensionValue other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionValue Clone() {
      return new DimensionValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private readonly static string KeyDefaultValue = "";

    private string key_;
    /// <summary>
    /// Key is the partition key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    /// <summary>
    /// Value if the partition value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DimensionValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DimensionValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DimensionValue other) {
      if (other == null) {
        return;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// EnsembleRules is an algorithm class that decide
  /// </summary>
  public sealed partial class EnsembleRules : pb::IMessage<EnsembleRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EnsembleRules> _parser = new pb::MessageParser<EnsembleRules>(() => new EnsembleRules());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnsembleRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnsembleRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnsembleRules(EnsembleRules other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnsembleRules Clone() {
      return new EnsembleRules(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnsembleRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnsembleRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnsembleRules other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class EnsembleSpec : pb::IMessage<EnsembleSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EnsembleSpec> _parser = new pb::MessageParser<EnsembleSpec>(() => new EnsembleSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnsembleSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnsembleSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnsembleSpec(EnsembleSpec other) : this() {
      base_ = other.base_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnsembleSpec Clone() {
      return new EnsembleSpec(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_base_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> base_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// A list of base model to ensemble. The ensemble method is represented as the algorithm name.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Base {
      get { return base_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnsembleSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnsembleSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!base_.Equals(other.base_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= base_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      base_.WriteTo(output, _repeated_base_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      base_.WriteTo(ref output, _repeated_base_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += base_.CalculateSize(_repeated_base_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnsembleSpec other) {
      if (other == null) {
        return;
      }
      base_.Add(other.base_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            base_.AddEntriesFrom(input, _repeated_base_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            base_.AddEntriesFrom(ref input, _repeated_base_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A definition for a single forecast
  /// A single forecast knows its forecast key and the index to its level
  /// </summary>
  public sealed partial class ForecastObj : pb::IMessage<ForecastObj>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ForecastObj> _parser = new pb::MessageParser<ForecastObj>(() => new ForecastObj());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForecastObj> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForecastObj() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForecastObj(ForecastObj other) : this() {
      _hasBits0 = other._hasBits0;
      key_ = other.key_;
      levelIndex_ = other.levelIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForecastObj Clone() {
      return new ForecastObj(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private readonly static string KeyDefaultValue = "";

    private string key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "levelIndex" field.</summary>
    public const int LevelIndexFieldNumber = 2;
    private readonly static int LevelIndexDefaultValue = 0;

    private int levelIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelIndex {
      get { if ((_hasBits0 & 1) != 0) { return levelIndex_; } else { return LevelIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        levelIndex_ = value;
      }
    }
    /// <summary>Gets whether the "levelIndex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLevelIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "levelIndex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLevelIndex() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForecastObj);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForecastObj other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (LevelIndex != other.LevelIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasLevelIndex) hash ^= LevelIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasLevelIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasLevelIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HasLevelIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForecastObj other) {
      if (other == null) {
        return;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasLevelIndex) {
        LevelIndex = other.LevelIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            LevelIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            LevelIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ForecastingSpec
  /// </summary>
  public sealed partial class ForecastingSpec : pb::IMessage<ForecastingSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ForecastingSpec> _parser = new pb::MessageParser<ForecastingSpec>(() => new ForecastingSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForecastingSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForecastingSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForecastingSpec(ForecastingSpec other) : this() {
      _hasBits0 = other._hasBits0;
      timeColumn_ = other.timeColumn_;
      targetColumn_ = other.targetColumn_;
      datetimeFormat_ = other.datetimeFormat_;
      dimensions_ = other.dimensions_.Clone();
      repressors_ = other.repressors_.Clone();
      freqSpec_ = other.freqSpec_ != null ? other.freqSpec_.Clone() : null;
      horizon_ = other.horizon_;
      confidenceInterval_ = other.confidenceInterval_;
      countryForHoliday_ = other.countryForHoliday_;
      dimensionValues_ = other.dimensionValues_.Clone();
      backtest_ = other.backtest_ != null ? other.backtest_.Clone() : null;
      forecastConnectionName_ = other.forecastConnectionName_;
      forecast_ = other.forecast_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForecastingSpec Clone() {
      return new ForecastingSpec(this);
    }

    /// <summary>Field number for the "timeColumn" field.</summary>
    public const int TimeColumnFieldNumber = 1;
    private readonly static string TimeColumnDefaultValue = "";

    private string timeColumn_;
    /// <summary>
    /// The name of the time column
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeColumn {
      get { return timeColumn_ ?? TimeColumnDefaultValue; }
      set {
        timeColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timeColumn" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeColumn {
      get { return timeColumn_ != null; }
    }
    /// <summary>Clears the value of the "timeColumn" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeColumn() {
      timeColumn_ = null;
    }

    /// <summary>Field number for the "targetColumn" field.</summary>
    public const int TargetColumnFieldNumber = 2;
    private readonly static string TargetColumnDefaultValue = "";

    private string targetColumn_;
    /// <summary>
    /// The name of the column holding the value.
    /// By default this is the target column from the dataset.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetColumn {
      get { return targetColumn_ ?? TargetColumnDefaultValue; }
      set {
        targetColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "targetColumn" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetColumn {
      get { return targetColumn_ != null; }
    }
    /// <summary>Clears the value of the "targetColumn" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetColumn() {
      targetColumn_ = null;
    }

    /// <summary>Field number for the "datetimeFormat" field.</summary>
    public const int DatetimeFormatFieldNumber = 3;
    private readonly static string DatetimeFormatDefaultValue = "";

    private string datetimeFormat_;
    /// <summary>
    /// The format of the datetime column. Used default
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatetimeFormat {
      get { return datetimeFormat_ ?? DatetimeFormatDefaultValue; }
      set {
        datetimeFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "datetimeFormat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDatetimeFormat {
      get { return datetimeFormat_ != null; }
    }
    /// <summary>Clears the value of the "datetimeFormat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDatetimeFormat() {
      datetimeFormat_ = null;
    }

    /// <summary>Field number for the "dimensions" field.</summary>
    public const int DimensionsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_dimensions_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> dimensions_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of the dimension columns. If non, the system will treat the whole time series as one.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Dimensions {
      get { return dimensions_; }
    }

    /// <summary>Field number for the "repressors" field.</summary>
    public const int RepressorsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_repressors_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> repressors_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of other columns to take into consideration
    /// Default None
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Repressors {
      get { return repressors_; }
    }

    /// <summary>Field number for the "freqSpec" field.</summary>
    public const int FreqSpecFieldNumber = 6;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.FreqSpec freqSpec_;
    /// <summary>
    /// Required, the freq of the time series (daily,weekly)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.FreqSpec FreqSpec {
      get { return freqSpec_; }
      set {
        freqSpec_ = value;
      }
    }

    /// <summary>Field number for the "horizon" field.</summary>
    public const int HorizonFieldNumber = 7;
    private readonly static int HorizonDefaultValue = 0;

    private int horizon_;
    /// <summary>
    /// Horizon is the number of data points to predict in the future.
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Horizon {
      get { if ((_hasBits0 & 1) != 0) { return horizon_; } else { return HorizonDefaultValue; } }
      set {
        _hasBits0 |= 1;
        horizon_ = value;
      }
    }
    /// <summary>Gets whether the "horizon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHorizon {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "horizon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHorizon() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "confidenceInterval" field.</summary>
    public const int ConfidenceIntervalFieldNumber = 8;
    private readonly static int ConfidenceIntervalDefaultValue = 0;

    private int confidenceInterval_;
    /// <summary>
    /// The confidence levels for the forecast, each level must be between 1-100.
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfidenceInterval {
      get { if ((_hasBits0 & 2) != 0) { return confidenceInterval_; } else { return ConfidenceIntervalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        confidenceInterval_ = value;
      }
    }
    /// <summary>Gets whether the "confidenceInterval" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConfidenceInterval {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "confidenceInterval" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfidenceInterval() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "countryForHoliday" field.</summary>
    public const int CountryForHolidayFieldNumber = 9;
    private readonly static string CountryForHolidayDefaultValue = "";

    private string countryForHoliday_;
    /// <summary>
    /// Set an holiday schedule for a country.
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryForHoliday {
      get { return countryForHoliday_ ?? CountryForHolidayDefaultValue; }
      set {
        countryForHoliday_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "countryForHoliday" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCountryForHoliday {
      get { return countryForHoliday_ != null; }
    }
    /// <summary>Clears the value of the "countryForHoliday" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCountryForHoliday() {
      countryForHoliday_ = null;
    }

    /// <summary>Field number for the "dimensionValues" field.</summary>
    public const int DimensionValuesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DimensionValue> _repeated_dimensionValues_codec
        = pb::FieldCodec.ForMessage(82, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DimensionValue.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DimensionValue> dimensionValues_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DimensionValue>();
    /// <summary>
    /// a set of value for each partition key
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DimensionValue> DimensionValues {
      get { return dimensionValues_; }
    }

    /// <summary>Field number for the "backtest" field.</summary>
    public const int BacktestFieldNumber = 11;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.BacktestSpec backtest_;
    /// <summary>
    /// The backtest specification, the system supports back testing with expanding windows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.BacktestSpec Backtest {
      get { return backtest_; }
      set {
        backtest_ = value;
      }
    }

    /// <summary>Field number for the "forecastConnectionName" field.</summary>
    public const int ForecastConnectionNameFieldNumber = 12;
    private readonly static string ForecastConnectionNameDefaultValue = "";

    private string forecastConnectionName_;
    /// <summary>
    /// The name of the connection for a database the result of the forecast
    /// If null, the system will insert the forecast in the database.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ForecastConnectionName {
      get { return forecastConnectionName_ ?? ForecastConnectionNameDefaultValue; }
      set {
        forecastConnectionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "forecastConnectionName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasForecastConnectionName {
      get { return forecastConnectionName_ != null; }
    }
    /// <summary>Clears the value of the "forecastConnectionName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearForecastConnectionName() {
      forecastConnectionName_ = null;
    }

    /// <summary>Field number for the "forecast" field.</summary>
    public const int ForecastFieldNumber = 13;
    private readonly static bool ForecastDefaultValue = false;

    private bool forecast_;
    /// <summary>
    /// Specify if we should generate a forecast using the model
    /// If true, the system will perform a forecast and update the forecast connection.
    /// Default it true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Forecast {
      get { if ((_hasBits0 & 4) != 0) { return forecast_; } else { return ForecastDefaultValue; } }
      set {
        _hasBits0 |= 4;
        forecast_ = value;
      }
    }
    /// <summary>Gets whether the "forecast" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasForecast {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "forecast" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearForecast() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForecastingSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForecastingSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeColumn != other.TimeColumn) return false;
      if (TargetColumn != other.TargetColumn) return false;
      if (DatetimeFormat != other.DatetimeFormat) return false;
      if(!dimensions_.Equals(other.dimensions_)) return false;
      if(!repressors_.Equals(other.repressors_)) return false;
      if (!object.Equals(FreqSpec, other.FreqSpec)) return false;
      if (Horizon != other.Horizon) return false;
      if (ConfidenceInterval != other.ConfidenceInterval) return false;
      if (CountryForHoliday != other.CountryForHoliday) return false;
      if(!dimensionValues_.Equals(other.dimensionValues_)) return false;
      if (!object.Equals(Backtest, other.Backtest)) return false;
      if (ForecastConnectionName != other.ForecastConnectionName) return false;
      if (Forecast != other.Forecast) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimeColumn) hash ^= TimeColumn.GetHashCode();
      if (HasTargetColumn) hash ^= TargetColumn.GetHashCode();
      if (HasDatetimeFormat) hash ^= DatetimeFormat.GetHashCode();
      hash ^= dimensions_.GetHashCode();
      hash ^= repressors_.GetHashCode();
      if (freqSpec_ != null) hash ^= FreqSpec.GetHashCode();
      if (HasHorizon) hash ^= Horizon.GetHashCode();
      if (HasConfidenceInterval) hash ^= ConfidenceInterval.GetHashCode();
      if (HasCountryForHoliday) hash ^= CountryForHoliday.GetHashCode();
      hash ^= dimensionValues_.GetHashCode();
      if (backtest_ != null) hash ^= Backtest.GetHashCode();
      if (HasForecastConnectionName) hash ^= ForecastConnectionName.GetHashCode();
      if (HasForecast) hash ^= Forecast.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTimeColumn) {
        output.WriteRawTag(10);
        output.WriteString(TimeColumn);
      }
      if (HasTargetColumn) {
        output.WriteRawTag(18);
        output.WriteString(TargetColumn);
      }
      if (HasDatetimeFormat) {
        output.WriteRawTag(26);
        output.WriteString(DatetimeFormat);
      }
      dimensions_.WriteTo(output, _repeated_dimensions_codec);
      repressors_.WriteTo(output, _repeated_repressors_codec);
      if (freqSpec_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FreqSpec);
      }
      if (HasHorizon) {
        output.WriteRawTag(56);
        output.WriteInt32(Horizon);
      }
      if (HasConfidenceInterval) {
        output.WriteRawTag(64);
        output.WriteInt32(ConfidenceInterval);
      }
      if (HasCountryForHoliday) {
        output.WriteRawTag(74);
        output.WriteString(CountryForHoliday);
      }
      dimensionValues_.WriteTo(output, _repeated_dimensionValues_codec);
      if (backtest_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Backtest);
      }
      if (HasForecastConnectionName) {
        output.WriteRawTag(98);
        output.WriteString(ForecastConnectionName);
      }
      if (HasForecast) {
        output.WriteRawTag(104);
        output.WriteBool(Forecast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTimeColumn) {
        output.WriteRawTag(10);
        output.WriteString(TimeColumn);
      }
      if (HasTargetColumn) {
        output.WriteRawTag(18);
        output.WriteString(TargetColumn);
      }
      if (HasDatetimeFormat) {
        output.WriteRawTag(26);
        output.WriteString(DatetimeFormat);
      }
      dimensions_.WriteTo(ref output, _repeated_dimensions_codec);
      repressors_.WriteTo(ref output, _repeated_repressors_codec);
      if (freqSpec_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FreqSpec);
      }
      if (HasHorizon) {
        output.WriteRawTag(56);
        output.WriteInt32(Horizon);
      }
      if (HasConfidenceInterval) {
        output.WriteRawTag(64);
        output.WriteInt32(ConfidenceInterval);
      }
      if (HasCountryForHoliday) {
        output.WriteRawTag(74);
        output.WriteString(CountryForHoliday);
      }
      dimensionValues_.WriteTo(ref output, _repeated_dimensionValues_codec);
      if (backtest_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Backtest);
      }
      if (HasForecastConnectionName) {
        output.WriteRawTag(98);
        output.WriteString(ForecastConnectionName);
      }
      if (HasForecast) {
        output.WriteRawTag(104);
        output.WriteBool(Forecast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimeColumn) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeColumn);
      }
      if (HasTargetColumn) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetColumn);
      }
      if (HasDatetimeFormat) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatetimeFormat);
      }
      size += dimensions_.CalculateSize(_repeated_dimensions_codec);
      size += repressors_.CalculateSize(_repeated_repressors_codec);
      if (freqSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreqSpec);
      }
      if (HasHorizon) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Horizon);
      }
      if (HasConfidenceInterval) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfidenceInterval);
      }
      if (HasCountryForHoliday) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryForHoliday);
      }
      size += dimensionValues_.CalculateSize(_repeated_dimensionValues_codec);
      if (backtest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Backtest);
      }
      if (HasForecastConnectionName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ForecastConnectionName);
      }
      if (HasForecast) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForecastingSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasTimeColumn) {
        TimeColumn = other.TimeColumn;
      }
      if (other.HasTargetColumn) {
        TargetColumn = other.TargetColumn;
      }
      if (other.HasDatetimeFormat) {
        DatetimeFormat = other.DatetimeFormat;
      }
      dimensions_.Add(other.dimensions_);
      repressors_.Add(other.repressors_);
      if (other.freqSpec_ != null) {
        if (freqSpec_ == null) {
          FreqSpec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.FreqSpec();
        }
        FreqSpec.MergeFrom(other.FreqSpec);
      }
      if (other.HasHorizon) {
        Horizon = other.Horizon;
      }
      if (other.HasConfidenceInterval) {
        ConfidenceInterval = other.ConfidenceInterval;
      }
      if (other.HasCountryForHoliday) {
        CountryForHoliday = other.CountryForHoliday;
      }
      dimensionValues_.Add(other.dimensionValues_);
      if (other.backtest_ != null) {
        if (backtest_ == null) {
          Backtest = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.BacktestSpec();
        }
        Backtest.MergeFrom(other.Backtest);
      }
      if (other.HasForecastConnectionName) {
        ForecastConnectionName = other.ForecastConnectionName;
      }
      if (other.HasForecast) {
        Forecast = other.Forecast;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TimeColumn = input.ReadString();
            break;
          }
          case 18: {
            TargetColumn = input.ReadString();
            break;
          }
          case 26: {
            DatetimeFormat = input.ReadString();
            break;
          }
          case 34: {
            dimensions_.AddEntriesFrom(input, _repeated_dimensions_codec);
            break;
          }
          case 42: {
            repressors_.AddEntriesFrom(input, _repeated_repressors_codec);
            break;
          }
          case 50: {
            if (freqSpec_ == null) {
              FreqSpec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.FreqSpec();
            }
            input.ReadMessage(FreqSpec);
            break;
          }
          case 56: {
            Horizon = input.ReadInt32();
            break;
          }
          case 64: {
            ConfidenceInterval = input.ReadInt32();
            break;
          }
          case 74: {
            CountryForHoliday = input.ReadString();
            break;
          }
          case 82: {
            dimensionValues_.AddEntriesFrom(input, _repeated_dimensionValues_codec);
            break;
          }
          case 90: {
            if (backtest_ == null) {
              Backtest = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.BacktestSpec();
            }
            input.ReadMessage(Backtest);
            break;
          }
          case 98: {
            ForecastConnectionName = input.ReadString();
            break;
          }
          case 104: {
            Forecast = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TimeColumn = input.ReadString();
            break;
          }
          case 18: {
            TargetColumn = input.ReadString();
            break;
          }
          case 26: {
            DatetimeFormat = input.ReadString();
            break;
          }
          case 34: {
            dimensions_.AddEntriesFrom(ref input, _repeated_dimensions_codec);
            break;
          }
          case 42: {
            repressors_.AddEntriesFrom(ref input, _repeated_repressors_codec);
            break;
          }
          case 50: {
            if (freqSpec_ == null) {
              FreqSpec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.FreqSpec();
            }
            input.ReadMessage(FreqSpec);
            break;
          }
          case 56: {
            Horizon = input.ReadInt32();
            break;
          }
          case 64: {
            ConfidenceInterval = input.ReadInt32();
            break;
          }
          case 74: {
            CountryForHoliday = input.ReadString();
            break;
          }
          case 82: {
            dimensionValues_.AddEntriesFrom(ref input, _repeated_dimensionValues_codec);
            break;
          }
          case 90: {
            if (backtest_ == null) {
              Backtest = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.BacktestSpec();
            }
            input.ReadMessage(Backtest);
            break;
          }
          case 98: {
            ForecastConnectionName = input.ReadString();
            break;
          }
          case 104: {
            Forecast = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// FreqSpec specify the frequency specification.
  /// </summary>
  public sealed partial class FreqSpec : pb::IMessage<FreqSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreqSpec> _parser = new pb::MessageParser<FreqSpec>(() => new FreqSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FreqSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreqSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreqSpec(FreqSpec other) : this() {
      _hasBits0 = other._hasBits0;
      interval_ = other.interval_;
      unit_ = other.unit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreqSpec Clone() {
      return new FreqSpec(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private readonly static int IntervalDefaultValue = 0;

    private int interval_;
    /// <summary>
    /// Default to 1.
    /// +kubebuilder:default:=1
    /// optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Interval {
      get { if ((_hasBits0 & 1) != 0) { return interval_; } else { return IntervalDefaultValue; } }
      set {
        _hasBits0 |= 1;
        interval_ = value;
      }
    }
    /// <summary>Gets whether the "interval" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInterval {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "interval" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInterval() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 2;
    private readonly static string UnitDefaultValue = "";

    private string unit_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Unit {
      get { return unit_ ?? UnitDefaultValue; }
      set {
        unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "unit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnit {
      get { return unit_ != null; }
    }
    /// <summary>Clears the value of the "unit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnit() {
      unit_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FreqSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FreqSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Interval != other.Interval) return false;
      if (Unit != other.Unit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInterval) hash ^= Interval.GetHashCode();
      if (HasUnit) hash ^= Unit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasInterval) {
        output.WriteRawTag(8);
        output.WriteInt32(Interval);
      }
      if (HasUnit) {
        output.WriteRawTag(18);
        output.WriteString(Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasInterval) {
        output.WriteRawTag(8);
        output.WriteInt32(Interval);
      }
      if (HasUnit) {
        output.WriteRawTag(18);
        output.WriteString(Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasInterval) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Interval);
      }
      if (HasUnit) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FreqSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasInterval) {
        Interval = other.Interval;
      }
      if (other.HasUnit) {
        Unit = other.Unit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Interval = input.ReadInt32();
            break;
          }
          case 18: {
            Unit = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Interval = input.ReadInt32();
            break;
          }
          case 18: {
            Unit = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// GithubEvents specify repo and the events to listen in order ot fire the pipeline
  /// </summary>
  public sealed partial class GithubEvents : pb::IMessage<GithubEvents>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GithubEvents> _parser = new pb::MessageParser<GithubEvents>(() => new GithubEvents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GithubEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GithubEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GithubEvents(GithubEvents other) : this() {
      gitConnectionName_ = other.gitConnectionName_;
      repository_ = other.repository_;
      branch_ = other.branch_;
      blobNameRegex_ = other.blobNameRegex_;
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GithubEvents Clone() {
      return new GithubEvents(this);
    }

    /// <summary>Field number for the "gitConnectionName" field.</summary>
    public const int GitConnectionNameFieldNumber = 1;
    private readonly static string GitConnectionNameDefaultValue = "";

    private string gitConnectionName_;
    /// <summary>
    /// The github connections used to loginto git
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GitConnectionName {
      get { return gitConnectionName_ ?? GitConnectionNameDefaultValue; }
      set {
        gitConnectionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "gitConnectionName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGitConnectionName {
      get { return gitConnectionName_ != null; }
    }
    /// <summary>Clears the value of the "gitConnectionName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGitConnectionName() {
      gitConnectionName_ = null;
    }

    /// <summary>Field number for the "repository" field.</summary>
    public const int RepositoryFieldNumber = 2;
    private readonly static string RepositoryDefaultValue = "";

    private string repository_;
    /// <summary>
    /// Repository is the name of the github repository
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Repository {
      get { return repository_ ?? RepositoryDefaultValue; }
      set {
        repository_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "repository" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRepository {
      get { return repository_ != null; }
    }
    /// <summary>Clears the value of the "repository" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRepository() {
      repository_ = null;
    }

    /// <summary>Field number for the "branch" field.</summary>
    public const int BranchFieldNumber = 3;
    private readonly static string BranchDefaultValue = "";

    private string branch_;
    /// <summary>
    /// Branch is the name of the github branch.
    /// By default the trigger listen to all branch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Branch {
      get { return branch_ ?? BranchDefaultValue; }
      set {
        branch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "branch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBranch {
      get { return branch_ != null; }
    }
    /// <summary>Clears the value of the "branch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBranch() {
      branch_ = null;
    }

    /// <summary>Field number for the "blobNameRegex" field.</summary>
    public const int BlobNameRegexFieldNumber = 4;
    private readonly static string BlobNameRegexDefaultValue = "";

    private string blobNameRegex_;
    /// <summary>
    /// Blobname regex is a regular expression on the blob name that changed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlobNameRegex {
      get { return blobNameRegex_ ?? BlobNameRegexDefaultValue; }
      set {
        blobNameRegex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "blobNameRegex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBlobNameRegex {
      get { return blobNameRegex_ != null; }
    }
    /// <summary>Clears the value of the "blobNameRegex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBlobNameRegex() {
      blobNameRegex_ = null;
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_events_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> events_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Events is the name of the github events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GithubEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GithubEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GitConnectionName != other.GitConnectionName) return false;
      if (Repository != other.Repository) return false;
      if (Branch != other.Branch) return false;
      if (BlobNameRegex != other.BlobNameRegex) return false;
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGitConnectionName) hash ^= GitConnectionName.GetHashCode();
      if (HasRepository) hash ^= Repository.GetHashCode();
      if (HasBranch) hash ^= Branch.GetHashCode();
      if (HasBlobNameRegex) hash ^= BlobNameRegex.GetHashCode();
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGitConnectionName) {
        output.WriteRawTag(10);
        output.WriteString(GitConnectionName);
      }
      if (HasRepository) {
        output.WriteRawTag(18);
        output.WriteString(Repository);
      }
      if (HasBranch) {
        output.WriteRawTag(26);
        output.WriteString(Branch);
      }
      if (HasBlobNameRegex) {
        output.WriteRawTag(34);
        output.WriteString(BlobNameRegex);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGitConnectionName) {
        output.WriteRawTag(10);
        output.WriteString(GitConnectionName);
      }
      if (HasRepository) {
        output.WriteRawTag(18);
        output.WriteString(Repository);
      }
      if (HasBranch) {
        output.WriteRawTag(26);
        output.WriteString(Branch);
      }
      if (HasBlobNameRegex) {
        output.WriteRawTag(34);
        output.WriteString(BlobNameRegex);
      }
      events_.WriteTo(ref output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGitConnectionName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GitConnectionName);
      }
      if (HasRepository) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Repository);
      }
      if (HasBranch) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Branch);
      }
      if (HasBlobNameRegex) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlobNameRegex);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GithubEvents other) {
      if (other == null) {
        return;
      }
      if (other.HasGitConnectionName) {
        GitConnectionName = other.GitConnectionName;
      }
      if (other.HasRepository) {
        Repository = other.Repository;
      }
      if (other.HasBranch) {
        Branch = other.Branch;
      }
      if (other.HasBlobNameRegex) {
        BlobNameRegex = other.BlobNameRegex;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GitConnectionName = input.ReadString();
            break;
          }
          case 18: {
            Repository = input.ReadString();
            break;
          }
          case 26: {
            Branch = input.ReadString();
            break;
          }
          case 34: {
            BlobNameRegex = input.ReadString();
            break;
          }
          case 42: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GitConnectionName = input.ReadString();
            break;
          }
          case 18: {
            Repository = input.ReadString();
            break;
          }
          case 26: {
            Branch = input.ReadString();
            break;
          }
          case 34: {
            BlobNameRegex = input.ReadString();
            break;
          }
          case 42: {
            events_.AddEntriesFrom(ref input, _repeated_events_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Hierarchy : pb::IMessage<Hierarchy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Hierarchy> _parser = new pb::MessageParser<Hierarchy>(() => new Hierarchy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hierarchy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hierarchy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hierarchy(Hierarchy other) : this() {
      columns_ = other.columns_.Clone();
      groupLevels_ = other.groupLevels_.Clone();
      itemLevel_ = other.itemLevel_ != null ? other.itemLevel_.Clone() : null;
      notifierName_ = other.notifierName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hierarchy Clone() {
      return new Hierarchy(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The columns in the data frame that belongs to the hierarchy. By default, all the item level column is the last one. The default aggregate function is sum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "groupLevels" field.</summary>
    public const int GroupLevelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level> _repeated_groupLevels_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level> groupLevels_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level>();
    /// <summary>
    /// The group level columns. For each group level column specify the horizon and the aggregate function
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level> GroupLevels {
      get { return groupLevels_; }
    }

    /// <summary>Field number for the "itemLevel" field.</summary>
    public const int ItemLevelFieldNumber = 3;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level itemLevel_;
    /// <summary>
    /// Item level column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level ItemLevel {
      get { return itemLevel_; }
      set {
        itemLevel_ = value;
      }
    }

    /// <summary>Field number for the "notifierName" field.</summary>
    public const int NotifierNameFieldNumber = 4;
    private readonly static string NotifierNameDefaultValue = "";

    private string notifierName_;
    /// <summary>
    /// Optional notifier to use when the forecast is complete.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NotifierName {
      get { return notifierName_ ?? NotifierNameDefaultValue; }
      set {
        notifierName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "notifierName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNotifierName {
      get { return notifierName_ != null; }
    }
    /// <summary>Clears the value of the "notifierName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNotifierName() {
      notifierName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hierarchy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hierarchy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if(!groupLevels_.Equals(other.groupLevels_)) return false;
      if (!object.Equals(ItemLevel, other.ItemLevel)) return false;
      if (NotifierName != other.NotifierName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      hash ^= groupLevels_.GetHashCode();
      if (itemLevel_ != null) hash ^= ItemLevel.GetHashCode();
      if (HasNotifierName) hash ^= NotifierName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      columns_.WriteTo(output, _repeated_columns_codec);
      groupLevels_.WriteTo(output, _repeated_groupLevels_codec);
      if (itemLevel_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ItemLevel);
      }
      if (HasNotifierName) {
        output.WriteRawTag(34);
        output.WriteString(NotifierName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      columns_.WriteTo(ref output, _repeated_columns_codec);
      groupLevels_.WriteTo(ref output, _repeated_groupLevels_codec);
      if (itemLevel_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ItemLevel);
      }
      if (HasNotifierName) {
        output.WriteRawTag(34);
        output.WriteString(NotifierName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      size += groupLevels_.CalculateSize(_repeated_groupLevels_codec);
      if (itemLevel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemLevel);
      }
      if (HasNotifierName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NotifierName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hierarchy other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      groupLevels_.Add(other.groupLevels_);
      if (other.itemLevel_ != null) {
        if (itemLevel_ == null) {
          ItemLevel = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level();
        }
        ItemLevel.MergeFrom(other.ItemLevel);
      }
      if (other.HasNotifierName) {
        NotifierName = other.NotifierName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            groupLevels_.AddEntriesFrom(input, _repeated_groupLevels_codec);
            break;
          }
          case 26: {
            if (itemLevel_ == null) {
              ItemLevel = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level();
            }
            input.ReadMessage(ItemLevel);
            break;
          }
          case 34: {
            NotifierName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 18: {
            groupLevels_.AddEntriesFrom(ref input, _repeated_groupLevels_codec);
            break;
          }
          case 26: {
            if (itemLevel_ == null) {
              ItemLevel = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Level();
            }
            input.ReadMessage(ItemLevel);
            break;
          }
          case 34: {
            NotifierName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// HyperParameterValue represent a specific value of
  /// the learning algorithm hyper-parameter. The value is chosen
  /// by the planner
  /// </summary>
  public sealed partial class HyperParameterValue : pb::IMessage<HyperParameterValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HyperParameterValue> _parser = new pb::MessageParser<HyperParameterValue>(() => new HyperParameterValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HyperParameterValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HyperParameterValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HyperParameterValue(HyperParameterValue other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HyperParameterValue Clone() {
      return new HyperParameterValue(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Reference to the name of the hyper parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    /// <summary>
    /// Value hold the value if  the hyper paramer type is string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HyperParameterValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HyperParameterValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HyperParameterValue other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ImagePipelineSpec is the specification for preprocessing image data
  /// </summary>
  public sealed partial class ImagePipelineSpec : pb::IMessage<ImagePipelineSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImagePipelineSpec> _parser = new pb::MessageParser<ImagePipelineSpec>(() => new ImagePipelineSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImagePipelineSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImagePipelineSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImagePipelineSpec(ImagePipelineSpec other) : this() {
      columns_ = other.columns_.Clone();
      featurizer_ = other.featurizer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImagePipelineSpec Clone() {
      return new ImagePipelineSpec(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Name of the datetime columns
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "featurizer" field.</summary>
    public const int FeaturizerFieldNumber = 2;
    private readonly static string FeaturizerDefaultValue = "";

    private string featurizer_;
    /// <summary>
    /// The date time imputer.
    /// +kubebuilder:default:="auto"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Featurizer {
      get { return featurizer_ ?? FeaturizerDefaultValue; }
      set {
        featurizer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "featurizer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFeaturizer {
      get { return featurizer_ != null; }
    }
    /// <summary>Clears the value of the "featurizer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFeaturizer() {
      featurizer_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImagePipelineSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImagePipelineSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if (Featurizer != other.Featurizer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      if (HasFeaturizer) hash ^= Featurizer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      columns_.WriteTo(output, _repeated_columns_codec);
      if (HasFeaturizer) {
        output.WriteRawTag(18);
        output.WriteString(Featurizer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (HasFeaturizer) {
        output.WriteRawTag(18);
        output.WriteString(Featurizer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (HasFeaturizer) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Featurizer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImagePipelineSpec other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      if (other.HasFeaturizer) {
        Featurizer = other.Featurizer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Featurizer = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Featurizer = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Level : pb::IMessage<Level>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Level> _parser = new pb::MessageParser<Level>(() => new Level());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Level> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level(Level other) : this() {
      _hasBits0 = other._hasBits0;
      string_ = other.string_;
      horizon_ = other.horizon_;
      freq_ = other.freq_;
      aggregate_ = other.aggregate_;
      distinc_ = other.distinc_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level Clone() {
      return new Level(this);
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 1;
    private readonly static string StringDefaultValue = "";

    private string string_;
    /// <summary>
    /// The name of the level - the column name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string String {
      get { return string_ ?? StringDefaultValue; }
      set {
        string_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "string" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasString {
      get { return string_ != null; }
    }
    /// <summary>Clears the value of the "string" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearString() {
      string_ = null;
    }

    /// <summary>Field number for the "horizon" field.</summary>
    public const int HorizonFieldNumber = 2;
    private readonly static int HorizonDefaultValue = 0;

    private int horizon_;
    /// <summary>
    /// The number of time periods to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Horizon {
      get { if ((_hasBits0 & 1) != 0) { return horizon_; } else { return HorizonDefaultValue; } }
      set {
        _hasBits0 |= 1;
        horizon_ = value;
      }
    }
    /// <summary>Gets whether the "horizon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHorizon {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "horizon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHorizon() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "freq" field.</summary>
    public const int FreqFieldNumber = 3;
    private readonly static string FreqDefaultValue = "";

    private string freq_;
    /// <summary>
    /// The freq of the level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Freq {
      get { return freq_ ?? FreqDefaultValue; }
      set {
        freq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "freq" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFreq {
      get { return freq_ != null; }
    }
    /// <summary>Clears the value of the "freq" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFreq() {
      freq_ = null;
    }

    /// <summary>Field number for the "aggregate" field.</summary>
    public const int AggregateFieldNumber = 4;
    private readonly static string AggregateDefaultValue = "";

    private string aggregate_;
    /// <summary>
    /// The aggregate function used to roll up the lower level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Aggregate {
      get { return aggregate_ ?? AggregateDefaultValue; }
      set {
        aggregate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "aggregate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAggregate {
      get { return aggregate_ != null; }
    }
    /// <summary>Clears the value of the "aggregate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAggregate() {
      aggregate_ = null;
    }

    /// <summary>Field number for the "distinc" field.</summary>
    public const int DistincFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_distinc_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> distinc_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The distinct values of the column for this level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Distinc {
      get { return distinc_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Level);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Level other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (String != other.String) return false;
      if (Horizon != other.Horizon) return false;
      if (Freq != other.Freq) return false;
      if (Aggregate != other.Aggregate) return false;
      if(!distinc_.Equals(other.distinc_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasString) hash ^= String.GetHashCode();
      if (HasHorizon) hash ^= Horizon.GetHashCode();
      if (HasFreq) hash ^= Freq.GetHashCode();
      if (HasAggregate) hash ^= Aggregate.GetHashCode();
      hash ^= distinc_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasString) {
        output.WriteRawTag(10);
        output.WriteString(String);
      }
      if (HasHorizon) {
        output.WriteRawTag(16);
        output.WriteInt32(Horizon);
      }
      if (HasFreq) {
        output.WriteRawTag(26);
        output.WriteString(Freq);
      }
      if (HasAggregate) {
        output.WriteRawTag(34);
        output.WriteString(Aggregate);
      }
      distinc_.WriteTo(output, _repeated_distinc_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasString) {
        output.WriteRawTag(10);
        output.WriteString(String);
      }
      if (HasHorizon) {
        output.WriteRawTag(16);
        output.WriteInt32(Horizon);
      }
      if (HasFreq) {
        output.WriteRawTag(26);
        output.WriteString(Freq);
      }
      if (HasAggregate) {
        output.WriteRawTag(34);
        output.WriteString(Aggregate);
      }
      distinc_.WriteTo(ref output, _repeated_distinc_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(String);
      }
      if (HasHorizon) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Horizon);
      }
      if (HasFreq) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Freq);
      }
      if (HasAggregate) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Aggregate);
      }
      size += distinc_.CalculateSize(_repeated_distinc_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Level other) {
      if (other == null) {
        return;
      }
      if (other.HasString) {
        String = other.String;
      }
      if (other.HasHorizon) {
        Horizon = other.Horizon;
      }
      if (other.HasFreq) {
        Freq = other.Freq;
      }
      if (other.HasAggregate) {
        Aggregate = other.Aggregate;
      }
      distinc_.Add(other.distinc_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            String = input.ReadString();
            break;
          }
          case 16: {
            Horizon = input.ReadInt32();
            break;
          }
          case 26: {
            Freq = input.ReadString();
            break;
          }
          case 34: {
            Aggregate = input.ReadString();
            break;
          }
          case 42: {
            distinc_.AddEntriesFrom(input, _repeated_distinc_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            String = input.ReadString();
            break;
          }
          case 16: {
            Horizon = input.ReadInt32();
            break;
          }
          case 26: {
            Freq = input.ReadString();
            break;
          }
          case 34: {
            Aggregate = input.ReadString();
            break;
          }
          case 42: {
            distinc_.AddEntriesFrom(ref input, _repeated_distinc_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Measurement is a value for a specific metric
  /// </summary>
  public sealed partial class Measurement : pb::IMessage<Measurement>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Measurement> _parser = new pb::MessageParser<Measurement>(() => new Measurement());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Measurement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement(Measurement other) : this() {
      _hasBits0 = other._hasBits0;
      metric_ = other.metric_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement Clone() {
      return new Measurement(this);
    }

    /// <summary>Field number for the "metric" field.</summary>
    public const int MetricFieldNumber = 1;
    private readonly static string MetricDefaultValue = "";

    private string metric_;
    /// <summary>
    /// The metric type name (e.g. F1 / Accuracy)
    /// +kubebuilder:validation:Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metric {
      get { return metric_ ?? MetricDefaultValue; }
      set {
        metric_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "metric" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMetric {
      get { return metric_ != null; }
    }
    /// <summary>Clears the value of the "metric" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMetric() {
      metric_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static double ValueDefaultValue = 0D;

    private double value_;
    /// <summary>
    /// The value for this model
    /// +kubebuilder:validation:Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 1;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Measurement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Measurement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Metric != other.Metric) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMetric) hash ^= Metric.GetHashCode();
      if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMetric) {
        output.WriteRawTag(10);
        output.WriteString(Metric);
      }
      if (HasValue) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMetric) {
        output.WriteRawTag(10);
        output.WriteString(Metric);
      }
      if (HasValue) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMetric) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metric);
      }
      if (HasValue) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Measurement other) {
      if (other == null) {
        return;
      }
      if (other.HasMetric) {
        Metric = other.Metric;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Metric = input.ReadString();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Metric = input.ReadString();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// +kubebuilder:subresource:status
  /// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
  /// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
  /// +kubebuilder:printcolumn:name="Study",type="string",JSONPath=".spec.studyName"
  /// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task"
  /// +kubebuilder:printcolumn:name="Algorithm",type="string",JSONPath=".spec.estimator.algorithmName"
  /// +kubebuilder:printcolumn:name="Objective",type="string",JSONPath=".spec.objective"
  /// +kubebuilder:printcolumn:name="CV Score",type="number",JSONPath=".status.cvScore"
  /// +kubebuilder:printcolumn:name="Train Score",type="number",JSONPath=".status.trainScore"
  /// +kubebuilder:printcolumn:name="Test Score",type="number",JSONPath=".status.testScore"
  /// +kubebuilder:printcolumn:name="Best",type="boolean",JSONPath=".status.best"
  /// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
  /// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
  /// +kubebuilder:resource:path=models,singular=model,shortName=md,categories={training,modela,all}
  /// Model represent a machine learning model.
  /// models are automatically generated by the planner and trained by the trainer.
  /// After training, models are packaged into a docker container and served
  /// by predictor.
  /// </summary>
  public sealed partial class Model : pb::IMessage<Model>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Model> _parser = new pb::MessageParser<Model>(() => new Model());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Model> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model(Model other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      spec_ = other.spec_ != null ? other.spec_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model Clone() {
      return new Model(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 2;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Model);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Model other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Spec, other.Spec)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (spec_ != null) hash ^= Spec.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Model other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.spec_ != null) {
        if (spec_ == null) {
          Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSpec();
        }
        Spec.MergeFrom(other.Spec);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// +kubebuilder:subresource:status
  /// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
  /// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
  /// +kubebuilder:printcolumn:name="Location Product",type="string",JSONPath=".spec.dataProductName"
  /// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.dataProductVersionName"
  /// +kubebuilder:printcolumn:name="Dataset",type="string",JSONPath=".status.datasetName"
  /// +kubebuilder:printcolumn:name="Study",type="string",JSONPath=".status.studyName"
  /// +kubebuilder:printcolumn:name="Predictor",type="string",JSONPath=".status.predictorName"
  /// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
  /// +kubebuilder:resource:path=modelautobuilders,singular=modelautobuilder,shortName=ar,categories={training,modela,all}
  /// ModelAutobuilder represent an automatic run of all the phases needed to create a model
  /// </summary>
  public sealed partial class ModelAutobuilder : pb::IMessage<ModelAutobuilder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelAutobuilder> _parser = new pb::MessageParser<ModelAutobuilder>(() => new ModelAutobuilder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelAutobuilder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilder(ModelAutobuilder other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      spec_ = other.spec_ != null ? other.spec_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilder Clone() {
      return new ModelAutobuilder(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 2;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelAutobuilder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelAutobuilder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Spec, other.Spec)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (spec_ != null) hash ^= Spec.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelAutobuilder other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.spec_ != null) {
        if (spec_ == null) {
          Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderSpec();
        }
        Spec.MergeFrom(other.Spec);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelAutobuilderCondition describes the state of a pipeline at a certain point.
  /// </summary>
  public sealed partial class ModelAutobuilderCondition : pb::IMessage<ModelAutobuilderCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelAutobuilderCondition> _parser = new pb::MessageParser<ModelAutobuilderCondition>(() => new ModelAutobuilderCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelAutobuilderCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderCondition(ModelAutobuilderCondition other) : this() {
      type_ = other.type_;
      status_ = other.status_;
      lastTransitionTime_ = other.lastTransitionTime_ != null ? other.lastTransitionTime_.Clone() : null;
      reason_ = other.reason_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderCondition Clone() {
      return new ModelAutobuilderCondition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// Type of account condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private readonly static string StatusDefaultValue = "";

    private string status_;
    /// <summary>
    /// Status of the condition, one of True, False, AutoScaler.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_ ?? StatusDefaultValue; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return status_ != null; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      status_ = null;
    }

    /// <summary>Field number for the "lastTransitionTime" field.</summary>
    public const int LastTransitionTimeFieldNumber = 4;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time lastTransitionTime_;
    /// <summary>
    /// Last time the condition transitioned from one status to another.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time LastTransitionTime {
      get { return lastTransitionTime_; }
      set {
        lastTransitionTime_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    /// <summary>
    /// The reason for the condition's last transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    /// <summary>
    /// A human readable message indicating details about the transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelAutobuilderCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelAutobuilderCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LastTransitionTime, other.LastTransitionTime)) return false;
      if (Reason != other.Reason) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (lastTransitionTime_ != null) hash ^= LastTransitionTime.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (lastTransitionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastTransitionTime);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelAutobuilderCondition other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.lastTransitionTime_ != null) {
        if (lastTransitionTime_ == null) {
          LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        LastTransitionTime.MergeFrom(other.LastTransitionTime);
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// ModelAutobuilderList represent a list of ModelAutoBuilders
  /// </summary>
  public sealed partial class ModelAutobuilderList : pb::IMessage<ModelAutobuilderList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelAutobuilderList> _parser = new pb::MessageParser<ModelAutobuilderList>(() => new ModelAutobuilderList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelAutobuilderList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderList(ModelAutobuilderList other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderList Clone() {
      return new ModelAutobuilderList(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilder> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilder.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilder> items_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilder>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilder> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelAutobuilderList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelAutobuilderList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelAutobuilderList other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelAutobuilderSpec define the desired state of the ModelAutobuilder resource.
  /// </summary>
  public sealed partial class ModelAutobuilderSpec : pb::IMessage<ModelAutobuilderSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelAutobuilderSpec> _parser = new pb::MessageParser<ModelAutobuilderSpec>(() => new ModelAutobuilderSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelAutobuilderSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderSpec(ModelAutobuilderSpec other) : this() {
      _hasBits0 = other._hasBits0;
      dataProductName_ = other.dataProductName_;
      dataProductVersionName_ = other.dataProductVersionName_;
      datasourceName_ = other.datasourceName_;
      datasetName_ = other.datasetName_;
      path_ = other.path_;
      task_ = other.task_;
      objective_ = other.objective_;
      targetColumn_ = other.targetColumn_;
      maxTime_ = other.maxTime_;
      maxModels_ = other.maxModels_;
      accessMethod_ = other.accessMethod_;
      autoScale_ = other.autoScale_;
      dataSourceSpec_ = other.dataSourceSpec_ != null ? other.dataSourceSpec_.Clone() : null;
      trainers_ = other.trainers_;
      searchMethod_ = other.searchMethod_;
      aborted_ = other.aborted_;
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderSpec Clone() {
      return new ModelAutobuilderSpec(this);
    }

    /// <summary>Field number for the "dataProductName" field.</summary>
    public const int DataProductNameFieldNumber = 1;
    private readonly static string DataProductNameDefaultValue = "";

    private string dataProductName_;
    /// <summary>
    /// DataProductName is the name of the data product
    /// +kubebuilder:validation:MaxLength=253
    /// +kubebuilder:validation:MinLength=1
    /// +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataProductName {
      get { return dataProductName_ ?? DataProductNameDefaultValue; }
      set {
        dataProductName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dataProductName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDataProductName {
      get { return dataProductName_ != null; }
    }
    /// <summary>Clears the value of the "dataProductName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataProductName() {
      dataProductName_ = null;
    }

    /// <summary>Field number for the "dataProductVersionName" field.</summary>
    public const int DataProductVersionNameFieldNumber = 2;
    private readonly static string DataProductVersionNameDefaultValue = "";

    private string dataProductVersionName_;
    /// <summary>
    /// DataProductVersionName is a reference to data product version
    /// +kubebuilder:validation:MaxLength=253
    /// +kubebuilder:validation:MinLength=1
    /// +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataProductVersionName {
      get { return dataProductVersionName_ ?? DataProductVersionNameDefaultValue; }
      set {
        dataProductVersionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dataProductVersionName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDataProductVersionName {
      get { return dataProductVersionName_ != null; }
    }
    /// <summary>Clears the value of the "dataProductVersionName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataProductVersionName() {
      dataProductVersionName_ = null;
    }

    /// <summary>Field number for the "datasourceName" field.</summary>
    public const int DatasourceNameFieldNumber = 3;
    private readonly static string DatasourceNameDefaultValue = "";

    private string datasourceName_;
    /// <summary>
    /// DataSourceName is the name of existing datasource, if empty the datasource parameters will be inferred from the file
    /// +kubebuilder:validation:MaxLength=253
    /// +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasourceName {
      get { return datasourceName_ ?? DatasourceNameDefaultValue; }
      set {
        datasourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "datasourceName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDatasourceName {
      get { return datasourceName_ != null; }
    }
    /// <summary>Clears the value of the "datasourceName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDatasourceName() {
      datasourceName_ = null;
    }

    /// <summary>Field number for the "datasetName" field.</summary>
    public const int DatasetNameFieldNumber = 4;
    private readonly static string DatasetNameDefaultValue = "";

    private string datasetName_;
    /// <summary>
    /// DatasetName is the name of existing dataset, if empty the dataset object will be created
    /// otherwise, a dataset will be created based on the file in the path section.
    /// +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
    /// +kubebuilder:validation:MaxLength=253
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetName {
      get { return datasetName_ ?? DatasetNameDefaultValue; }
      set {
        datasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "datasetName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDatasetName {
      get { return datasetName_ != null; }
    }
    /// <summary>Clears the value of the "datasetName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDatasetName() {
      datasetName_ = null;
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 5;
    private readonly static string PathDefaultValue = "";

    private string path_;
    /// <summary>
    /// Path is the location of the data in the cloud
    /// +kubebuilder:validation:MaxLength=256
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_ ?? PathDefaultValue; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPath {
      get { return path_ != null; }
    }
    /// <summary>Clears the value of the "path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPath() {
      path_ = null;
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 6;
    private readonly static string TaskDefaultValue = "";

    private string task_;
    /// <summary>
    /// Task is the machine learning task (regression/classification)
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Task {
      get { return task_ ?? TaskDefaultValue; }
      set {
        task_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "task" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTask {
      get { return task_ != null; }
    }
    /// <summary>Clears the value of the "task" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTask() {
      task_ = null;
    }

    /// <summary>Field number for the "objective" field.</summary>
    public const int ObjectiveFieldNumber = 7;
    private readonly static string ObjectiveDefaultValue = "";

    private string objective_;
    /// <summary>
    /// The task objective. this is how models will be scored.
    /// If not defined this will be set to the default objective for the task
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Objective {
      get { return objective_ ?? ObjectiveDefaultValue; }
      set {
        objective_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "objective" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObjective {
      get { return objective_ != null; }
    }
    /// <summary>Clears the value of the "objective" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObjective() {
      objective_ = null;
    }

    /// <summary>Field number for the "targetColumn" field.</summary>
    public const int TargetColumnFieldNumber = 8;
    private readonly static string TargetColumnDefaultValue = "";

    private string targetColumn_;
    /// <summary>
    /// Target column.
    /// Default: last column in the schema.
    /// +kubebuilder:validation:MaxLength=128
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetColumn {
      get { return targetColumn_ ?? TargetColumnDefaultValue; }
      set {
        targetColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "targetColumn" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetColumn {
      get { return targetColumn_ != null; }
    }
    /// <summary>Clears the value of the "targetColumn" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetColumn() {
      targetColumn_ = null;
    }

    /// <summary>Field number for the "maxTime" field.</summary>
    public const int MaxTimeFieldNumber = 9;
    private readonly static int MaxTimeDefaultValue = 0;

    private int maxTime_;
    /// <summary>
    /// Max training time.
    /// +kubebuilder:validation:Maximum=512
    /// +kubebuilder:validation:Minimum=1
    /// +kubebuilder:default:=60
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxTime {
      get { if ((_hasBits0 & 1) != 0) { return maxTime_; } else { return MaxTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maxTime_ = value;
      }
    }
    /// <summary>Gets whether the "maxTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "maxTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "maxModels" field.</summary>
    public const int MaxModelsFieldNumber = 10;
    private readonly static int MaxModelsDefaultValue = 0;

    private int maxModels_;
    /// <summary>
    /// Max model
    /// +kubebuilder:validation:Maximum=512
    /// +kubebuilder:validation:Minimum=1
    /// +kubebuilder:default:=10
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxModels {
      get { if ((_hasBits0 & 2) != 0) { return maxModels_; } else { return MaxModelsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxModels_ = value;
      }
    }
    /// <summary>Gets whether the "maxModels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxModels {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "maxModels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxModels() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "accessMethod" field.</summary>
    public const int AccessMethodFieldNumber = 11;
    private readonly static string AccessMethodDefaultValue = "";

    private string accessMethod_;
    /// <summary>
    /// Access method specify the predictor access method.
    /// Default: ClusterPort
    /// +kubebuilder:default:=cluster-port
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessMethod {
      get { return accessMethod_ ?? AccessMethodDefaultValue; }
      set {
        accessMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "accessMethod" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccessMethod {
      get { return accessMethod_ != null; }
    }
    /// <summary>Clears the value of the "accessMethod" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccessMethod() {
      accessMethod_ = null;
    }

    /// <summary>Field number for the "autoScale" field.</summary>
    public const int AutoScaleFieldNumber = 12;
    private readonly static bool AutoScaleDefaultValue = false;

    private bool autoScale_;
    /// <summary>
    /// Specify if the predictor should autoscale.
    /// Default : false
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoScale {
      get { if ((_hasBits0 & 4) != 0) { return autoScale_; } else { return AutoScaleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        autoScale_ = value;
      }
    }
    /// <summary>Gets whether the "autoScale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAutoScale {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "autoScale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAutoScale() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "dataSourceSpec" field.</summary>
    public const int DataSourceSpecFieldNumber = 13;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataSourceSpec dataSourceSpec_;
    /// <summary>
    /// The spec of the data source, if none, the runner will infer the schema, and will create a new schema with
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataSourceSpec DataSourceSpec {
      get { return dataSourceSpec_; }
      set {
        dataSourceSpec_ = value;
      }
    }

    /// <summary>Field number for the "trainers" field.</summary>
    public const int TrainersFieldNumber = 14;
    private readonly static int TrainersDefaultValue = 0;

    private int trainers_;
    /// <summary>
    /// Specify the number of trainers.
    /// Default 1 trainer.
    /// +kubebuilder:default:=1
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Trainers {
      get { if ((_hasBits0 & 8) != 0) { return trainers_; } else { return TrainersDefaultValue; } }
      set {
        _hasBits0 |= 8;
        trainers_ = value;
      }
    }
    /// <summary>Gets whether the "trainers" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrainers {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "trainers" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrainers() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "searchMethod" field.</summary>
    public const int SearchMethodFieldNumber = 15;
    private readonly static string SearchMethodDefaultValue = "";

    private string searchMethod_;
    /// <summary>
    /// Specify the search method
    /// +kubebuilder:default:="random"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchMethod {
      get { return searchMethod_ ?? SearchMethodDefaultValue; }
      set {
        searchMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "searchMethod" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSearchMethod {
      get { return searchMethod_ != null; }
    }
    /// <summary>Clears the value of the "searchMethod" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSearchMethod() {
      searchMethod_ = null;
    }

    /// <summary>Field number for the "aborted" field.</summary>
    public const int AbortedFieldNumber = 16;
    private readonly static bool AbortedDefaultValue = false;

    private bool aborted_;
    /// <summary>
    /// Set the true to abort the model auto builder
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Aborted {
      get { if ((_hasBits0 & 16) != 0) { return aborted_; } else { return AbortedDefaultValue; } }
      set {
        _hasBits0 |= 16;
        aborted_ = value;
      }
    }
    /// <summary>Gets whether the "aborted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAborted {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "aborted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAborted() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 17;
    private readonly static string OwnerDefaultValue = "";

    private string owner_;
    /// <summary>
    /// The owner account name
    /// +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
    /// +kubebuilder:default:="no-one"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_ ?? OwnerDefaultValue; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwner {
      get { return owner_ != null; }
    }
    /// <summary>Clears the value of the "owner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwner() {
      owner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelAutobuilderSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelAutobuilderSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataProductName != other.DataProductName) return false;
      if (DataProductVersionName != other.DataProductVersionName) return false;
      if (DatasourceName != other.DatasourceName) return false;
      if (DatasetName != other.DatasetName) return false;
      if (Path != other.Path) return false;
      if (Task != other.Task) return false;
      if (Objective != other.Objective) return false;
      if (TargetColumn != other.TargetColumn) return false;
      if (MaxTime != other.MaxTime) return false;
      if (MaxModels != other.MaxModels) return false;
      if (AccessMethod != other.AccessMethod) return false;
      if (AutoScale != other.AutoScale) return false;
      if (!object.Equals(DataSourceSpec, other.DataSourceSpec)) return false;
      if (Trainers != other.Trainers) return false;
      if (SearchMethod != other.SearchMethod) return false;
      if (Aborted != other.Aborted) return false;
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDataProductName) hash ^= DataProductName.GetHashCode();
      if (HasDataProductVersionName) hash ^= DataProductVersionName.GetHashCode();
      if (HasDatasourceName) hash ^= DatasourceName.GetHashCode();
      if (HasDatasetName) hash ^= DatasetName.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (HasTask) hash ^= Task.GetHashCode();
      if (HasObjective) hash ^= Objective.GetHashCode();
      if (HasTargetColumn) hash ^= TargetColumn.GetHashCode();
      if (HasMaxTime) hash ^= MaxTime.GetHashCode();
      if (HasMaxModels) hash ^= MaxModels.GetHashCode();
      if (HasAccessMethod) hash ^= AccessMethod.GetHashCode();
      if (HasAutoScale) hash ^= AutoScale.GetHashCode();
      if (dataSourceSpec_ != null) hash ^= DataSourceSpec.GetHashCode();
      if (HasTrainers) hash ^= Trainers.GetHashCode();
      if (HasSearchMethod) hash ^= SearchMethod.GetHashCode();
      if (HasAborted) hash ^= Aborted.GetHashCode();
      if (HasOwner) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDataProductName) {
        output.WriteRawTag(10);
        output.WriteString(DataProductName);
      }
      if (HasDataProductVersionName) {
        output.WriteRawTag(18);
        output.WriteString(DataProductVersionName);
      }
      if (HasDatasourceName) {
        output.WriteRawTag(26);
        output.WriteString(DatasourceName);
      }
      if (HasDatasetName) {
        output.WriteRawTag(34);
        output.WriteString(DatasetName);
      }
      if (HasPath) {
        output.WriteRawTag(42);
        output.WriteString(Path);
      }
      if (HasTask) {
        output.WriteRawTag(50);
        output.WriteString(Task);
      }
      if (HasObjective) {
        output.WriteRawTag(58);
        output.WriteString(Objective);
      }
      if (HasTargetColumn) {
        output.WriteRawTag(66);
        output.WriteString(TargetColumn);
      }
      if (HasMaxTime) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxTime);
      }
      if (HasMaxModels) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxModels);
      }
      if (HasAccessMethod) {
        output.WriteRawTag(90);
        output.WriteString(AccessMethod);
      }
      if (HasAutoScale) {
        output.WriteRawTag(96);
        output.WriteBool(AutoScale);
      }
      if (dataSourceSpec_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(DataSourceSpec);
      }
      if (HasTrainers) {
        output.WriteRawTag(112);
        output.WriteInt32(Trainers);
      }
      if (HasSearchMethod) {
        output.WriteRawTag(122);
        output.WriteString(SearchMethod);
      }
      if (HasAborted) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Aborted);
      }
      if (HasOwner) {
        output.WriteRawTag(138, 1);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDataProductName) {
        output.WriteRawTag(10);
        output.WriteString(DataProductName);
      }
      if (HasDataProductVersionName) {
        output.WriteRawTag(18);
        output.WriteString(DataProductVersionName);
      }
      if (HasDatasourceName) {
        output.WriteRawTag(26);
        output.WriteString(DatasourceName);
      }
      if (HasDatasetName) {
        output.WriteRawTag(34);
        output.WriteString(DatasetName);
      }
      if (HasPath) {
        output.WriteRawTag(42);
        output.WriteString(Path);
      }
      if (HasTask) {
        output.WriteRawTag(50);
        output.WriteString(Task);
      }
      if (HasObjective) {
        output.WriteRawTag(58);
        output.WriteString(Objective);
      }
      if (HasTargetColumn) {
        output.WriteRawTag(66);
        output.WriteString(TargetColumn);
      }
      if (HasMaxTime) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxTime);
      }
      if (HasMaxModels) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxModels);
      }
      if (HasAccessMethod) {
        output.WriteRawTag(90);
        output.WriteString(AccessMethod);
      }
      if (HasAutoScale) {
        output.WriteRawTag(96);
        output.WriteBool(AutoScale);
      }
      if (dataSourceSpec_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(DataSourceSpec);
      }
      if (HasTrainers) {
        output.WriteRawTag(112);
        output.WriteInt32(Trainers);
      }
      if (HasSearchMethod) {
        output.WriteRawTag(122);
        output.WriteString(SearchMethod);
      }
      if (HasAborted) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Aborted);
      }
      if (HasOwner) {
        output.WriteRawTag(138, 1);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDataProductName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataProductName);
      }
      if (HasDataProductVersionName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataProductVersionName);
      }
      if (HasDatasourceName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasourceName);
      }
      if (HasDatasetName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetName);
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (HasTask) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Task);
      }
      if (HasObjective) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Objective);
      }
      if (HasTargetColumn) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetColumn);
      }
      if (HasMaxTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTime);
      }
      if (HasMaxModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxModels);
      }
      if (HasAccessMethod) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessMethod);
      }
      if (HasAutoScale) {
        size += 1 + 1;
      }
      if (dataSourceSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSourceSpec);
      }
      if (HasTrainers) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Trainers);
      }
      if (HasSearchMethod) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchMethod);
      }
      if (HasAborted) {
        size += 2 + 1;
      }
      if (HasOwner) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelAutobuilderSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasDataProductName) {
        DataProductName = other.DataProductName;
      }
      if (other.HasDataProductVersionName) {
        DataProductVersionName = other.DataProductVersionName;
      }
      if (other.HasDatasourceName) {
        DatasourceName = other.DatasourceName;
      }
      if (other.HasDatasetName) {
        DatasetName = other.DatasetName;
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      if (other.HasTask) {
        Task = other.Task;
      }
      if (other.HasObjective) {
        Objective = other.Objective;
      }
      if (other.HasTargetColumn) {
        TargetColumn = other.TargetColumn;
      }
      if (other.HasMaxTime) {
        MaxTime = other.MaxTime;
      }
      if (other.HasMaxModels) {
        MaxModels = other.MaxModels;
      }
      if (other.HasAccessMethod) {
        AccessMethod = other.AccessMethod;
      }
      if (other.HasAutoScale) {
        AutoScale = other.AutoScale;
      }
      if (other.dataSourceSpec_ != null) {
        if (dataSourceSpec_ == null) {
          DataSourceSpec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataSourceSpec();
        }
        DataSourceSpec.MergeFrom(other.DataSourceSpec);
      }
      if (other.HasTrainers) {
        Trainers = other.Trainers;
      }
      if (other.HasSearchMethod) {
        SearchMethod = other.SearchMethod;
      }
      if (other.HasAborted) {
        Aborted = other.Aborted;
      }
      if (other.HasOwner) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DataProductName = input.ReadString();
            break;
          }
          case 18: {
            DataProductVersionName = input.ReadString();
            break;
          }
          case 26: {
            DatasourceName = input.ReadString();
            break;
          }
          case 34: {
            DatasetName = input.ReadString();
            break;
          }
          case 42: {
            Path = input.ReadString();
            break;
          }
          case 50: {
            Task = input.ReadString();
            break;
          }
          case 58: {
            Objective = input.ReadString();
            break;
          }
          case 66: {
            TargetColumn = input.ReadString();
            break;
          }
          case 72: {
            MaxTime = input.ReadInt32();
            break;
          }
          case 80: {
            MaxModels = input.ReadInt32();
            break;
          }
          case 90: {
            AccessMethod = input.ReadString();
            break;
          }
          case 96: {
            AutoScale = input.ReadBool();
            break;
          }
          case 106: {
            if (dataSourceSpec_ == null) {
              DataSourceSpec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataSourceSpec();
            }
            input.ReadMessage(DataSourceSpec);
            break;
          }
          case 112: {
            Trainers = input.ReadInt32();
            break;
          }
          case 122: {
            SearchMethod = input.ReadString();
            break;
          }
          case 128: {
            Aborted = input.ReadBool();
            break;
          }
          case 138: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DataProductName = input.ReadString();
            break;
          }
          case 18: {
            DataProductVersionName = input.ReadString();
            break;
          }
          case 26: {
            DatasourceName = input.ReadString();
            break;
          }
          case 34: {
            DatasetName = input.ReadString();
            break;
          }
          case 42: {
            Path = input.ReadString();
            break;
          }
          case 50: {
            Task = input.ReadString();
            break;
          }
          case 58: {
            Objective = input.ReadString();
            break;
          }
          case 66: {
            TargetColumn = input.ReadString();
            break;
          }
          case 72: {
            MaxTime = input.ReadInt32();
            break;
          }
          case 80: {
            MaxModels = input.ReadInt32();
            break;
          }
          case 90: {
            AccessMethod = input.ReadString();
            break;
          }
          case 96: {
            AutoScale = input.ReadBool();
            break;
          }
          case 106: {
            if (dataSourceSpec_ == null) {
              DataSourceSpec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataSourceSpec();
            }
            input.ReadMessage(DataSourceSpec);
            break;
          }
          case 112: {
            Trainers = input.ReadInt32();
            break;
          }
          case 122: {
            SearchMethod = input.ReadString();
            break;
          }
          case 128: {
            Aborted = input.ReadBool();
            break;
          }
          case 138: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelAutobuilderStatus define the observed state of the pipeline
  /// </summary>
  public sealed partial class ModelAutobuilderStatus : pb::IMessage<ModelAutobuilderStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelAutobuilderStatus> _parser = new pb::MessageParser<ModelAutobuilderStatus>(() => new ModelAutobuilderStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelAutobuilderStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderStatus(ModelAutobuilderStatus other) : this() {
      _hasBits0 = other._hasBits0;
      flatFileName_ = other.flatFileName_;
      dataSourceName_ = other.dataSourceName_;
      datasetName_ = other.datasetName_;
      studyName_ = other.studyName_;
      bestModelName_ = other.bestModelName_;
      predictorName_ = other.predictorName_;
      imageRepoName_ = other.imageRepoName_;
      phase_ = other.phase_;
      rows_ = other.rows_;
      cols_ = other.cols_;
      fileSize_ = other.fileSize_;
      models_ = other.models_;
      trainedModels_ = other.trainedModels_;
      bestModelScore_ = other.bestModelScore_;
      estimator_ = other.estimator_ != null ? other.estimator_.Clone() : null;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      completionTime_ = other.completionTime_ != null ? other.completionTime_.Clone() : null;
      conditions_ = other.conditions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelAutobuilderStatus Clone() {
      return new ModelAutobuilderStatus(this);
    }

    /// <summary>Field number for the "flatFileName" field.</summary>
    public const int FlatFileNameFieldNumber = 1;
    private readonly static string FlatFileNameDefaultValue = "";

    private string flatFileName_;
    /// <summary>
    /// the generate flat file name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FlatFileName {
      get { return flatFileName_ ?? FlatFileNameDefaultValue; }
      set {
        flatFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "flatFileName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlatFileName {
      get { return flatFileName_ != null; }
    }
    /// <summary>Clears the value of the "flatFileName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlatFileName() {
      flatFileName_ = null;
    }

    /// <summary>Field number for the "dataSourceName" field.</summary>
    public const int DataSourceNameFieldNumber = 2;
    private readonly static string DataSourceNameDefaultValue = "";

    private string dataSourceName_;
    /// <summary>
    /// the generated schema name (if generated)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataSourceName {
      get { return dataSourceName_ ?? DataSourceNameDefaultValue; }
      set {
        dataSourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dataSourceName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDataSourceName {
      get { return dataSourceName_ != null; }
    }
    /// <summary>Clears the value of the "dataSourceName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataSourceName() {
      dataSourceName_ = null;
    }

    /// <summary>Field number for the "datasetName" field.</summary>
    public const int DatasetNameFieldNumber = 3;
    private readonly static string DatasetNameDefaultValue = "";

    private string datasetName_;
    /// <summary>
    /// the generated dataset name (if generated)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetName {
      get { return datasetName_ ?? DatasetNameDefaultValue; }
      set {
        datasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "datasetName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDatasetName {
      get { return datasetName_ != null; }
    }
    /// <summary>Clears the value of the "datasetName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDatasetName() {
      datasetName_ = null;
    }

    /// <summary>Field number for the "studyName" field.</summary>
    public const int StudyNameFieldNumber = 4;
    private readonly static string StudyNameDefaultValue = "";

    private string studyName_;
    /// <summary>
    /// the generate study name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StudyName {
      get { return studyName_ ?? StudyNameDefaultValue; }
      set {
        studyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "studyName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStudyName {
      get { return studyName_ != null; }
    }
    /// <summary>Clears the value of the "studyName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStudyName() {
      studyName_ = null;
    }

    /// <summary>Field number for the "bestModelName" field.</summary>
    public const int BestModelNameFieldNumber = 6;
    private readonly static string BestModelNameDefaultValue = "";

    private string bestModelName_;
    /// <summary>
    /// The selected model name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BestModelName {
      get { return bestModelName_ ?? BestModelNameDefaultValue; }
      set {
        bestModelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "bestModelName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBestModelName {
      get { return bestModelName_ != null; }
    }
    /// <summary>Clears the value of the "bestModelName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBestModelName() {
      bestModelName_ = null;
    }

    /// <summary>Field number for the "predictorName" field.</summary>
    public const int PredictorNameFieldNumber = 7;
    private readonly static string PredictorNameDefaultValue = "";

    private string predictorName_;
    /// <summary>
    /// the generated predictor name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PredictorName {
      get { return predictorName_ ?? PredictorNameDefaultValue; }
      set {
        predictorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "predictorName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPredictorName {
      get { return predictorName_ != null; }
    }
    /// <summary>Clears the value of the "predictorName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPredictorName() {
      predictorName_ = null;
    }

    /// <summary>Field number for the "imageRepoName" field.</summary>
    public const int ImageRepoNameFieldNumber = 8;
    private readonly static string ImageRepoNameDefaultValue = "";

    private string imageRepoName_;
    /// <summary>
    /// the name of the image repository
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageRepoName {
      get { return imageRepoName_ ?? ImageRepoNameDefaultValue; }
      set {
        imageRepoName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "imageRepoName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImageRepoName {
      get { return imageRepoName_ != null; }
    }
    /// <summary>Clears the value of the "imageRepoName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageRepoName() {
      imageRepoName_ = null;
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 9;
    private readonly static string PhaseDefaultValue = "";

    private string phase_;
    /// <summary>
    /// The phase of the auto ml run
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phase {
      get { return phase_ ?? PhaseDefaultValue; }
      set {
        phase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "phase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhase {
      get { return phase_ != null; }
    }
    /// <summary>Clears the value of the "phase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhase() {
      phase_ = null;
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 10;
    private readonly static int RowsDefaultValue = 0;

    private int rows_;
    /// <summary>
    /// number of rows in the dataset
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rows {
      get { if ((_hasBits0 & 1) != 0) { return rows_; } else { return RowsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        rows_ = value;
      }
    }
    /// <summary>Gets whether the "rows" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRows {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rows" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRows() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 11;
    private readonly static int ColsDefaultValue = 0;

    private int cols_;
    /// <summary>
    /// number of columns, used mainly to show the columns
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cols {
      get { if ((_hasBits0 & 2) != 0) { return cols_; } else { return ColsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cols_ = value;
      }
    }
    /// <summary>Gets whether the "cols" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCols {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cols" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCols() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "fileSize" field.</summary>
    public const int FileSizeFieldNumber = 12;
    private readonly static int FileSizeDefaultValue = 0;

    private int fileSize_;
    /// <summary>
    /// file size in bytes
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FileSize {
      get { if ((_hasBits0 & 4) != 0) { return fileSize_; } else { return FileSizeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fileSize_ = value;
      }
    }
    /// <summary>Gets whether the "fileSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFileSize {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "fileSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFileSize() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "models" field.</summary>
    public const int ModelsFieldNumber = 13;
    private readonly static int ModelsDefaultValue = 0;

    private int models_;
    /// <summary>
    /// Total models created for the study
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Models {
      get { if ((_hasBits0 & 8) != 0) { return models_; } else { return ModelsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        models_ = value;
      }
    }
    /// <summary>Gets whether the "models" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModels {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "models" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModels() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "trainedModels" field.</summary>
    public const int TrainedModelsFieldNumber = 14;
    private readonly static int TrainedModelsDefaultValue = 0;

    private int trainedModels_;
    /// <summary>
    /// models that were successful during training
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrainedModels {
      get { if ((_hasBits0 & 16) != 0) { return trainedModels_; } else { return TrainedModelsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        trainedModels_ = value;
      }
    }
    /// <summary>Gets whether the "trainedModels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrainedModels {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "trainedModels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrainedModels() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "bestModelScore" field.</summary>
    public const int BestModelScoreFieldNumber = 15;
    private readonly static double BestModelScoreDefaultValue = 0D;

    private double bestModelScore_;
    /// <summary>
    /// The Best model score, so far.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BestModelScore {
      get { if ((_hasBits0 & 32) != 0) { return bestModelScore_; } else { return BestModelScoreDefaultValue; } }
      set {
        _hasBits0 |= 32;
        bestModelScore_ = value;
      }
    }
    /// <summary>Gets whether the "bestModelScore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBestModelScore {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "bestModelScore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBestModelScore() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "estimator" field.</summary>
    public const int EstimatorFieldNumber = 16;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec estimator_;
    /// <summary>
    /// The best estimator, taken from the best model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec Estimator {
      get { return estimator_; }
      set {
        estimator_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 17;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time startTime_;
    /// <summary>
    /// StartTime is the times that this prediction job started
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "completionTime" field.</summary>
    public const int CompletionTimeFieldNumber = 18;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time completionTime_;
    /// <summary>
    /// CompletionTime is the time that this prediction job finished
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time CompletionTime {
      get { return completionTime_; }
      set {
        completionTime_ = value;
      }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(154, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderCondition.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderCondition> conditions_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderCondition>();
    /// <summary>
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelAutobuilderCondition> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelAutobuilderStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelAutobuilderStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FlatFileName != other.FlatFileName) return false;
      if (DataSourceName != other.DataSourceName) return false;
      if (DatasetName != other.DatasetName) return false;
      if (StudyName != other.StudyName) return false;
      if (BestModelName != other.BestModelName) return false;
      if (PredictorName != other.PredictorName) return false;
      if (ImageRepoName != other.ImageRepoName) return false;
      if (Phase != other.Phase) return false;
      if (Rows != other.Rows) return false;
      if (Cols != other.Cols) return false;
      if (FileSize != other.FileSize) return false;
      if (Models != other.Models) return false;
      if (TrainedModels != other.TrainedModels) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BestModelScore, other.BestModelScore)) return false;
      if (!object.Equals(Estimator, other.Estimator)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(CompletionTime, other.CompletionTime)) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFlatFileName) hash ^= FlatFileName.GetHashCode();
      if (HasDataSourceName) hash ^= DataSourceName.GetHashCode();
      if (HasDatasetName) hash ^= DatasetName.GetHashCode();
      if (HasStudyName) hash ^= StudyName.GetHashCode();
      if (HasBestModelName) hash ^= BestModelName.GetHashCode();
      if (HasPredictorName) hash ^= PredictorName.GetHashCode();
      if (HasImageRepoName) hash ^= ImageRepoName.GetHashCode();
      if (HasPhase) hash ^= Phase.GetHashCode();
      if (HasRows) hash ^= Rows.GetHashCode();
      if (HasCols) hash ^= Cols.GetHashCode();
      if (HasFileSize) hash ^= FileSize.GetHashCode();
      if (HasModels) hash ^= Models.GetHashCode();
      if (HasTrainedModels) hash ^= TrainedModels.GetHashCode();
      if (HasBestModelScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BestModelScore);
      if (estimator_ != null) hash ^= Estimator.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (completionTime_ != null) hash ^= CompletionTime.GetHashCode();
      hash ^= conditions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFlatFileName) {
        output.WriteRawTag(10);
        output.WriteString(FlatFileName);
      }
      if (HasDataSourceName) {
        output.WriteRawTag(18);
        output.WriteString(DataSourceName);
      }
      if (HasDatasetName) {
        output.WriteRawTag(26);
        output.WriteString(DatasetName);
      }
      if (HasStudyName) {
        output.WriteRawTag(34);
        output.WriteString(StudyName);
      }
      if (HasBestModelName) {
        output.WriteRawTag(50);
        output.WriteString(BestModelName);
      }
      if (HasPredictorName) {
        output.WriteRawTag(58);
        output.WriteString(PredictorName);
      }
      if (HasImageRepoName) {
        output.WriteRawTag(66);
        output.WriteString(ImageRepoName);
      }
      if (HasPhase) {
        output.WriteRawTag(74);
        output.WriteString(Phase);
      }
      if (HasRows) {
        output.WriteRawTag(80);
        output.WriteInt32(Rows);
      }
      if (HasCols) {
        output.WriteRawTag(88);
        output.WriteInt32(Cols);
      }
      if (HasFileSize) {
        output.WriteRawTag(96);
        output.WriteInt32(FileSize);
      }
      if (HasModels) {
        output.WriteRawTag(104);
        output.WriteInt32(Models);
      }
      if (HasTrainedModels) {
        output.WriteRawTag(112);
        output.WriteInt32(TrainedModels);
      }
      if (HasBestModelScore) {
        output.WriteRawTag(121);
        output.WriteDouble(BestModelScore);
      }
      if (estimator_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Estimator);
      }
      if (startTime_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(StartTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CompletionTime);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFlatFileName) {
        output.WriteRawTag(10);
        output.WriteString(FlatFileName);
      }
      if (HasDataSourceName) {
        output.WriteRawTag(18);
        output.WriteString(DataSourceName);
      }
      if (HasDatasetName) {
        output.WriteRawTag(26);
        output.WriteString(DatasetName);
      }
      if (HasStudyName) {
        output.WriteRawTag(34);
        output.WriteString(StudyName);
      }
      if (HasBestModelName) {
        output.WriteRawTag(50);
        output.WriteString(BestModelName);
      }
      if (HasPredictorName) {
        output.WriteRawTag(58);
        output.WriteString(PredictorName);
      }
      if (HasImageRepoName) {
        output.WriteRawTag(66);
        output.WriteString(ImageRepoName);
      }
      if (HasPhase) {
        output.WriteRawTag(74);
        output.WriteString(Phase);
      }
      if (HasRows) {
        output.WriteRawTag(80);
        output.WriteInt32(Rows);
      }
      if (HasCols) {
        output.WriteRawTag(88);
        output.WriteInt32(Cols);
      }
      if (HasFileSize) {
        output.WriteRawTag(96);
        output.WriteInt32(FileSize);
      }
      if (HasModels) {
        output.WriteRawTag(104);
        output.WriteInt32(Models);
      }
      if (HasTrainedModels) {
        output.WriteRawTag(112);
        output.WriteInt32(TrainedModels);
      }
      if (HasBestModelScore) {
        output.WriteRawTag(121);
        output.WriteDouble(BestModelScore);
      }
      if (estimator_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Estimator);
      }
      if (startTime_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(StartTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CompletionTime);
      }
      conditions_.WriteTo(ref output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFlatFileName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FlatFileName);
      }
      if (HasDataSourceName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataSourceName);
      }
      if (HasDatasetName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetName);
      }
      if (HasStudyName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StudyName);
      }
      if (HasBestModelName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BestModelName);
      }
      if (HasPredictorName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PredictorName);
      }
      if (HasImageRepoName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageRepoName);
      }
      if (HasPhase) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phase);
      }
      if (HasRows) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rows);
      }
      if (HasCols) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cols);
      }
      if (HasFileSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FileSize);
      }
      if (HasModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Models);
      }
      if (HasTrainedModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrainedModels);
      }
      if (HasBestModelScore) {
        size += 1 + 8;
      }
      if (estimator_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Estimator);
      }
      if (startTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (completionTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CompletionTime);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelAutobuilderStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasFlatFileName) {
        FlatFileName = other.FlatFileName;
      }
      if (other.HasDataSourceName) {
        DataSourceName = other.DataSourceName;
      }
      if (other.HasDatasetName) {
        DatasetName = other.DatasetName;
      }
      if (other.HasStudyName) {
        StudyName = other.StudyName;
      }
      if (other.HasBestModelName) {
        BestModelName = other.BestModelName;
      }
      if (other.HasPredictorName) {
        PredictorName = other.PredictorName;
      }
      if (other.HasImageRepoName) {
        ImageRepoName = other.ImageRepoName;
      }
      if (other.HasPhase) {
        Phase = other.Phase;
      }
      if (other.HasRows) {
        Rows = other.Rows;
      }
      if (other.HasCols) {
        Cols = other.Cols;
      }
      if (other.HasFileSize) {
        FileSize = other.FileSize;
      }
      if (other.HasModels) {
        Models = other.Models;
      }
      if (other.HasTrainedModels) {
        TrainedModels = other.TrainedModels;
      }
      if (other.HasBestModelScore) {
        BestModelScore = other.BestModelScore;
      }
      if (other.estimator_ != null) {
        if (estimator_ == null) {
          Estimator = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec();
        }
        Estimator.MergeFrom(other.Estimator);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.completionTime_ != null) {
        if (completionTime_ == null) {
          CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        CompletionTime.MergeFrom(other.CompletionTime);
      }
      conditions_.Add(other.conditions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FlatFileName = input.ReadString();
            break;
          }
          case 18: {
            DataSourceName = input.ReadString();
            break;
          }
          case 26: {
            DatasetName = input.ReadString();
            break;
          }
          case 34: {
            StudyName = input.ReadString();
            break;
          }
          case 50: {
            BestModelName = input.ReadString();
            break;
          }
          case 58: {
            PredictorName = input.ReadString();
            break;
          }
          case 66: {
            ImageRepoName = input.ReadString();
            break;
          }
          case 74: {
            Phase = input.ReadString();
            break;
          }
          case 80: {
            Rows = input.ReadInt32();
            break;
          }
          case 88: {
            Cols = input.ReadInt32();
            break;
          }
          case 96: {
            FileSize = input.ReadInt32();
            break;
          }
          case 104: {
            Models = input.ReadInt32();
            break;
          }
          case 112: {
            TrainedModels = input.ReadInt32();
            break;
          }
          case 121: {
            BestModelScore = input.ReadDouble();
            break;
          }
          case 130: {
            if (estimator_ == null) {
              Estimator = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec();
            }
            input.ReadMessage(Estimator);
            break;
          }
          case 138: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 146: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 154: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FlatFileName = input.ReadString();
            break;
          }
          case 18: {
            DataSourceName = input.ReadString();
            break;
          }
          case 26: {
            DatasetName = input.ReadString();
            break;
          }
          case 34: {
            StudyName = input.ReadString();
            break;
          }
          case 50: {
            BestModelName = input.ReadString();
            break;
          }
          case 58: {
            PredictorName = input.ReadString();
            break;
          }
          case 66: {
            ImageRepoName = input.ReadString();
            break;
          }
          case 74: {
            Phase = input.ReadString();
            break;
          }
          case 80: {
            Rows = input.ReadInt32();
            break;
          }
          case 88: {
            Cols = input.ReadInt32();
            break;
          }
          case 96: {
            FileSize = input.ReadInt32();
            break;
          }
          case 104: {
            Models = input.ReadInt32();
            break;
          }
          case 112: {
            TrainedModels = input.ReadInt32();
            break;
          }
          case 121: {
            BestModelScore = input.ReadDouble();
            break;
          }
          case 130: {
            if (estimator_ == null) {
              Estimator = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec();
            }
            input.ReadMessage(Estimator);
            break;
          }
          case 138: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 146: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 154: {
            conditions_.AddEntriesFrom(ref input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelCondition describes the state of a model at a certain point.
  /// </summary>
  public sealed partial class ModelCondition : pb::IMessage<ModelCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelCondition> _parser = new pb::MessageParser<ModelCondition>(() => new ModelCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelCondition(ModelCondition other) : this() {
      type_ = other.type_;
      status_ = other.status_;
      lastTransitionTime_ = other.lastTransitionTime_ != null ? other.lastTransitionTime_.Clone() : null;
      reason_ = other.reason_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelCondition Clone() {
      return new ModelCondition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// Type of account condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private readonly static string StatusDefaultValue = "";

    private string status_;
    /// <summary>
    /// Status of the condition, one of True, False, AutoScaler.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_ ?? StatusDefaultValue; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return status_ != null; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      status_ = null;
    }

    /// <summary>Field number for the "lastTransitionTime" field.</summary>
    public const int LastTransitionTimeFieldNumber = 4;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time lastTransitionTime_;
    /// <summary>
    /// Last time the condition transitioned from one status to another.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time LastTransitionTime {
      get { return lastTransitionTime_; }
      set {
        lastTransitionTime_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    /// <summary>
    /// The reason for the condition's last transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    /// <summary>
    /// A human readable message indicating details about the transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LastTransitionTime, other.LastTransitionTime)) return false;
      if (Reason != other.Reason) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (lastTransitionTime_ != null) hash ^= LastTransitionTime.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (lastTransitionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastTransitionTime);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelCondition other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.lastTransitionTime_ != null) {
        if (lastTransitionTime_ == null) {
          LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        LastTransitionTime.MergeFrom(other.LastTransitionTime);
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// ModelList is a list of models.
  /// </summary>
  public sealed partial class ModelList : pb::IMessage<ModelList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelList> _parser = new pb::MessageParser<ModelList>(() => new ModelList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelList(ModelList other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelList Clone() {
      return new ModelList(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Model> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Model.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Model> items_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Model>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Model> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelList other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// +kubebuilder:subresource:status
  /// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
  /// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
  /// +kubebuilder:resource:path=modelpipelines,singular=modelpipeline,shortName=pipe,categories={training,modela,all}
  /// ModelPipeline represent a CI/CD machine learning pipeline definition
  /// </summary>
  public sealed partial class ModelPipeline : pb::IMessage<ModelPipeline>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelPipeline> _parser = new pb::MessageParser<ModelPipeline>(() => new ModelPipeline());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPipeline> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipeline() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipeline(ModelPipeline other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      spec_ = other.spec_ != null ? other.spec_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipeline Clone() {
      return new ModelPipeline(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 2;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelPipeline);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelPipeline other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Spec, other.Spec)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (spec_ != null) hash ^= Spec.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelPipeline other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.spec_ != null) {
        if (spec_ == null) {
          Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineSpec();
        }
        Spec.MergeFrom(other.Spec);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelPipelineCondition describes the state of a pipeline at a certain point.
  /// </summary>
  public sealed partial class ModelPipelineCondition : pb::IMessage<ModelPipelineCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelPipelineCondition> _parser = new pb::MessageParser<ModelPipelineCondition>(() => new ModelPipelineCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPipelineCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineCondition(ModelPipelineCondition other) : this() {
      type_ = other.type_;
      status_ = other.status_;
      lastTransitionTime_ = other.lastTransitionTime_ != null ? other.lastTransitionTime_.Clone() : null;
      reason_ = other.reason_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineCondition Clone() {
      return new ModelPipelineCondition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// Type of account condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private readonly static string StatusDefaultValue = "";

    private string status_;
    /// <summary>
    /// Status of the condition, one of True, False, AutoScaler.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_ ?? StatusDefaultValue; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return status_ != null; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      status_ = null;
    }

    /// <summary>Field number for the "lastTransitionTime" field.</summary>
    public const int LastTransitionTimeFieldNumber = 3;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time lastTransitionTime_;
    /// <summary>
    /// Last time the condition transitioned from one status to another.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time LastTransitionTime {
      get { return lastTransitionTime_; }
      set {
        lastTransitionTime_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    /// <summary>
    /// The reason for the condition's last transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    /// <summary>
    /// A human readable message indicating details about the transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelPipelineCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelPipelineCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LastTransitionTime, other.LastTransitionTime)) return false;
      if (Reason != other.Reason) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (lastTransitionTime_ != null) hash ^= LastTransitionTime.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (lastTransitionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastTransitionTime);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelPipelineCondition other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.lastTransitionTime_ != null) {
        if (lastTransitionTime_ == null) {
          LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        LastTransitionTime.MergeFrom(other.LastTransitionTime);
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 26: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 26: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// ModelPipelineList represent list of pipelines
  /// </summary>
  public sealed partial class ModelPipelineList : pb::IMessage<ModelPipelineList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelPipelineList> _parser = new pb::MessageParser<ModelPipelineList>(() => new ModelPipelineList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPipelineList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineList(ModelPipelineList other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineList Clone() {
      return new ModelPipelineList(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipeline> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipeline.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipeline> items_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipeline>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipeline> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelPipelineList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelPipelineList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelPipelineList other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status"
  /// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
  /// +kubebuilder:printcolumn:name="ModelPipeline",type="string",JSONPath=".status.pipelineName"
  /// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".status.versionName"
  /// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
  /// +kubebuilder:resource:path=modelpipelineruns,shortName=pr,singular=modelpipelinerun,categories={train,modela,all}
  /// ModelPipelineRun represent a execution of a pipeline
  /// </summary>
  public sealed partial class ModelPipelineRun : pb::IMessage<ModelPipelineRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelPipelineRun> _parser = new pb::MessageParser<ModelPipelineRun>(() => new ModelPipelineRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPipelineRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRun(ModelPipelineRun other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      spec_ = other.spec_ != null ? other.spec_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRun Clone() {
      return new ModelPipelineRun(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 2;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStatus status_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelPipelineRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelPipelineRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Spec, other.Spec)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (spec_ != null) hash ^= Spec.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelPipelineRun other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.spec_ != null) {
        if (spec_ == null) {
          Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunSpec();
        }
        Spec.MergeFrom(other.Spec);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelPipelineRunCondition describes the state of a ModelPipelineRun at a certain point.
  /// </summary>
  public sealed partial class ModelPipelineRunCondition : pb::IMessage<ModelPipelineRunCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelPipelineRunCondition> _parser = new pb::MessageParser<ModelPipelineRunCondition>(() => new ModelPipelineRunCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPipelineRunCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunCondition(ModelPipelineRunCondition other) : this() {
      type_ = other.type_;
      status_ = other.status_;
      lastTransitionTime_ = other.lastTransitionTime_ != null ? other.lastTransitionTime_.Clone() : null;
      reason_ = other.reason_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunCondition Clone() {
      return new ModelPipelineRunCondition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// Type of  condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private readonly static string StatusDefaultValue = "";

    private string status_;
    /// <summary>
    /// Status of the condition, one of True, False, Unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_ ?? StatusDefaultValue; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return status_ != null; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      status_ = null;
    }

    /// <summary>Field number for the "lastTransitionTime" field.</summary>
    public const int LastTransitionTimeFieldNumber = 4;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time lastTransitionTime_;
    /// <summary>
    /// Last time the condition transitioned from one status to another.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time LastTransitionTime {
      get { return lastTransitionTime_; }
      set {
        lastTransitionTime_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    /// <summary>
    /// The reason for the condition's last transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    /// <summary>
    /// A human readable message indicating details about the transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelPipelineRunCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelPipelineRunCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LastTransitionTime, other.LastTransitionTime)) return false;
      if (Reason != other.Reason) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (lastTransitionTime_ != null) hash ^= LastTransitionTime.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (lastTransitionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastTransitionTime);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelPipelineRunCondition other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.lastTransitionTime_ != null) {
        if (lastTransitionTime_ == null) {
          LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        LastTransitionTime.MergeFrom(other.LastTransitionTime);
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// ModelPipelineRunList represent list of pipelineruns
  /// </summary>
  public sealed partial class ModelPipelineRunList : pb::IMessage<ModelPipelineRunList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelPipelineRunList> _parser = new pb::MessageParser<ModelPipelineRunList>(() => new ModelPipelineRunList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPipelineRunList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunList(ModelPipelineRunList other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunList Clone() {
      return new ModelPipelineRunList(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRun> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRun.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRun> items_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRun>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRun> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelPipelineRunList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelPipelineRunList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelPipelineRunList other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelPipelineRunSpec is the desired state of the ModelPipelineRun resource
  /// </summary>
  public sealed partial class ModelPipelineRunSpec : pb::IMessage<ModelPipelineRunSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelPipelineRunSpec> _parser = new pb::MessageParser<ModelPipelineRunSpec>(() => new ModelPipelineRunSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPipelineRunSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunSpec(ModelPipelineRunSpec other) : this() {
      versionName_ = other.versionName_;
      description_ = other.description_;
      triggerName_ = other.triggerName_;
      pipelineName_ = other.pipelineName_;
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunSpec Clone() {
      return new ModelPipelineRunSpec(this);
    }

    /// <summary>Field number for the "versionName" field.</summary>
    public const int VersionNameFieldNumber = 1;
    private readonly static string VersionNameDefaultValue = "";

    private string versionName_;
    /// <summary>
    /// User provided description
    /// +kubebuilder:default:=""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionName {
      get { return versionName_ ?? VersionNameDefaultValue; }
      set {
        versionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "versionName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersionName {
      get { return versionName_ != null; }
    }
    /// <summary>Clears the value of the "versionName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionName() {
      versionName_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// User provided description
    /// +kubebuilder:default:=""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "triggerName" field.</summary>
    public const int TriggerNameFieldNumber = 3;
    private readonly static string TriggerNameDefaultValue = "";

    private string triggerName_;
    /// <summary>
    /// TriggerName denote the trigger that fired this pipeline run
    /// +kubebuilder:default:=""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerName {
      get { return triggerName_ ?? TriggerNameDefaultValue; }
      set {
        triggerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "triggerName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTriggerName {
      get { return triggerName_ != null; }
    }
    /// <summary>Clears the value of the "triggerName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTriggerName() {
      triggerName_ = null;
    }

    /// <summary>Field number for the "pipelineName" field.</summary>
    public const int PipelineNameFieldNumber = 4;
    private readonly static string PipelineNameDefaultValue = "";

    private string pipelineName_;
    /// <summary>
    /// PipelineName is the name of the pipeline specification for this pipeline
    /// +kubebuilder:default:=""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PipelineName {
      get { return pipelineName_ ?? PipelineNameDefaultValue; }
      set {
        pipelineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pipelineName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPipelineName {
      get { return pipelineName_ != null; }
    }
    /// <summary>Clears the value of the "pipelineName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPipelineName() {
      pipelineName_ = null;
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 5;
    private readonly static string OwnerDefaultValue = "";

    private string owner_;
    /// <summary>
    /// The owner account name
    /// +kubebuilder:default:=""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_ ?? OwnerDefaultValue; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwner {
      get { return owner_ != null; }
    }
    /// <summary>Clears the value of the "owner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwner() {
      owner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelPipelineRunSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelPipelineRunSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionName != other.VersionName) return false;
      if (Description != other.Description) return false;
      if (TriggerName != other.TriggerName) return false;
      if (PipelineName != other.PipelineName) return false;
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVersionName) hash ^= VersionName.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasTriggerName) hash ^= TriggerName.GetHashCode();
      if (HasPipelineName) hash ^= PipelineName.GetHashCode();
      if (HasOwner) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (HasTriggerName) {
        output.WriteRawTag(26);
        output.WriteString(TriggerName);
      }
      if (HasPipelineName) {
        output.WriteRawTag(34);
        output.WriteString(PipelineName);
      }
      if (HasOwner) {
        output.WriteRawTag(42);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (HasTriggerName) {
        output.WriteRawTag(26);
        output.WriteString(TriggerName);
      }
      if (HasPipelineName) {
        output.WriteRawTag(34);
        output.WriteString(PipelineName);
      }
      if (HasOwner) {
        output.WriteRawTag(42);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVersionName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionName);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasTriggerName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TriggerName);
      }
      if (HasPipelineName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PipelineName);
      }
      if (HasOwner) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelPipelineRunSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasVersionName) {
        VersionName = other.VersionName;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasTriggerName) {
        TriggerName = other.TriggerName;
      }
      if (other.HasPipelineName) {
        PipelineName = other.PipelineName;
      }
      if (other.HasOwner) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            TriggerName = input.ReadString();
            break;
          }
          case 34: {
            PipelineName = input.ReadString();
            break;
          }
          case 42: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            TriggerName = input.ReadString();
            break;
          }
          case 34: {
            PipelineName = input.ReadString();
            break;
          }
          case 42: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelPipelineRunStageStatus is the observed state of the PipelineRunStage.
  /// </summary>
  public sealed partial class ModelPipelineRunStageStatus : pb::IMessage<ModelPipelineRunStageStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelPipelineRunStageStatus> _parser = new pb::MessageParser<ModelPipelineRunStageStatus>(() => new ModelPipelineRunStageStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPipelineRunStageStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunStageStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunStageStatus(ModelPipelineRunStageStatus other) : this() {
      _hasBits0 = other._hasBits0;
      approved_ = other.approved_;
      approvedBy_ = other.approvedBy_;
      score_ = other.score_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunStageStatus Clone() {
      return new ModelPipelineRunStageStatus(this);
    }

    /// <summary>Field number for the "approved" field.</summary>
    public const int ApprovedFieldNumber = 1;
    private readonly static bool ApprovedDefaultValue = false;

    private bool approved_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Approved {
      get { if ((_hasBits0 & 1) != 0) { return approved_; } else { return ApprovedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        approved_ = value;
      }
    }
    /// <summary>Gets whether the "approved" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasApproved {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "approved" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearApproved() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "approvedBy" field.</summary>
    public const int ApprovedByFieldNumber = 2;
    private readonly static string ApprovedByDefaultValue = "";

    private string approvedBy_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApprovedBy {
      get { return approvedBy_ ?? ApprovedByDefaultValue; }
      set {
        approvedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "approvedBy" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasApprovedBy {
      get { return approvedBy_ != null; }
    }
    /// <summary>Clears the value of the "approvedBy" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearApprovedBy() {
      approvedBy_ = null;
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private readonly static double ScoreDefaultValue = 0D;

    private double score_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Score {
      get { if ((_hasBits0 & 2) != 0) { return score_; } else { return ScoreDefaultValue; } }
      set {
        _hasBits0 |= 2;
        score_ = value;
      }
    }
    /// <summary>Gets whether the "score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScore() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 4;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time startTime_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 5;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time endTime_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelPipelineRunStageStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelPipelineRunStageStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Approved != other.Approved) return false;
      if (ApprovedBy != other.ApprovedBy) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Score, other.Score)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasApproved) hash ^= Approved.GetHashCode();
      if (HasApprovedBy) hash ^= ApprovedBy.GetHashCode();
      if (HasScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Score);
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasApproved) {
        output.WriteRawTag(8);
        output.WriteBool(Approved);
      }
      if (HasApprovedBy) {
        output.WriteRawTag(18);
        output.WriteString(ApprovedBy);
      }
      if (HasScore) {
        output.WriteRawTag(25);
        output.WriteDouble(Score);
      }
      if (startTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasApproved) {
        output.WriteRawTag(8);
        output.WriteBool(Approved);
      }
      if (HasApprovedBy) {
        output.WriteRawTag(18);
        output.WriteString(ApprovedBy);
      }
      if (HasScore) {
        output.WriteRawTag(25);
        output.WriteDouble(Score);
      }
      if (startTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasApproved) {
        size += 1 + 1;
      }
      if (HasApprovedBy) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApprovedBy);
      }
      if (HasScore) {
        size += 1 + 8;
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelPipelineRunStageStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasApproved) {
        Approved = other.Approved;
      }
      if (other.HasApprovedBy) {
        ApprovedBy = other.ApprovedBy;
      }
      if (other.HasScore) {
        Score = other.Score;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Approved = input.ReadBool();
            break;
          }
          case 18: {
            ApprovedBy = input.ReadString();
            break;
          }
          case 25: {
            Score = input.ReadDouble();
            break;
          }
          case 34: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 42: {
            if (endTime_ == null) {
              EndTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(EndTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Approved = input.ReadBool();
            break;
          }
          case 18: {
            ApprovedBy = input.ReadString();
            break;
          }
          case 25: {
            Score = input.ReadDouble();
            break;
          }
          case 34: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 42: {
            if (endTime_ == null) {
              EndTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(EndTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelPipelineRunStatus is the observed state of the ModelPipelineRun resource .
  /// </summary>
  public sealed partial class ModelPipelineRunStatus : pb::IMessage<ModelPipelineRunStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelPipelineRunStatus> _parser = new pb::MessageParser<ModelPipelineRunStatus>(() => new ModelPipelineRunStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPipelineRunStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunStatus(ModelPipelineRunStatus other) : this() {
      studyName_ = other.studyName_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      training_ = other.training_ != null ? other.training_.Clone() : null;
      acceptance_ = other.acceptance_ != null ? other.acceptance_.Clone() : null;
      capacity_ = other.capacity_ != null ? other.capacity_.Clone() : null;
      prod_ = other.prod_ != null ? other.prod_.Clone() : null;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      completionTime_ = other.completionTime_ != null ? other.completionTime_.Clone() : null;
      phase_ = other.phase_;
      conditions_ = other.conditions_.Clone();
      evalMetrics_ = other.evalMetrics_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineRunStatus Clone() {
      return new ModelPipelineRunStatus(this);
    }

    /// <summary>Field number for the "studyName" field.</summary>
    public const int StudyNameFieldNumber = 1;
    private readonly static string StudyNameDefaultValue = "";

    private string studyName_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StudyName {
      get { return studyName_ ?? StudyNameDefaultValue; }
      set {
        studyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "studyName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStudyName {
      get { return studyName_ != null; }
    }
    /// <summary>Clears the value of the "studyName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStudyName() {
      studyName_ = null;
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus data_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// data is the status for the data stage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "training" field.</summary>
    public const int TrainingFieldNumber = 4;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus training_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// dev is the status for the dev stage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus Training {
      get { return training_; }
      set {
        training_ = value;
      }
    }

    /// <summary>Field number for the "acceptance" field.</summary>
    public const int AcceptanceFieldNumber = 5;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus acceptance_;
    /// <summary>
    /// Staging is status for each qa stage.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus Acceptance {
      get { return acceptance_; }
      set {
        acceptance_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 6;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus capacity_;
    /// <summary>
    /// ReleaseStage is the status for the production stage.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "prod" field.</summary>
    public const int ProdFieldNumber = 7;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus prod_;
    /// <summary>
    /// ReleaseStage is the status for the production stage.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus Prod {
      get { return prod_; }
      set {
        prod_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 8;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time startTime_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "completionTime" field.</summary>
    public const int CompletionTimeFieldNumber = 9;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time completionTime_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time CompletionTime {
      get { return completionTime_; }
      set {
        completionTime_ = value;
      }
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 10;
    private readonly static string PhaseDefaultValue = "";

    private string phase_;
    /// <summary>
    /// The phase of the pipeline run
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phase {
      get { return phase_ ?? PhaseDefaultValue; }
      set {
        phase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "phase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhase {
      get { return phase_ != null; }
    }
    /// <summary>Clears the value of the "phase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhase() {
      phase_ = null;
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(90, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunCondition.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunCondition> conditions_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunCondition>();
    /// <summary>
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunCondition> Conditions {
      get { return conditions_; }
    }

    /// <summary>Field number for the "evalMetrics" field.</summary>
    public const int EvalMetricsFieldNumber = 13;
    private readonly static string EvalMetricsDefaultValue = "";

    private string evalMetrics_;
    /// <summary>
    /// Folder for pipeline run artifacts. This is assigned by the system
    /// The folder contains all the pipeline artifacts - metadata, logs
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EvalMetrics {
      get { return evalMetrics_ ?? EvalMetricsDefaultValue; }
      set {
        evalMetrics_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "evalMetrics" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEvalMetrics {
      get { return evalMetrics_ != null; }
    }
    /// <summary>Clears the value of the "evalMetrics" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvalMetrics() {
      evalMetrics_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelPipelineRunStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelPipelineRunStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StudyName != other.StudyName) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(Training, other.Training)) return false;
      if (!object.Equals(Acceptance, other.Acceptance)) return false;
      if (!object.Equals(Capacity, other.Capacity)) return false;
      if (!object.Equals(Prod, other.Prod)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(CompletionTime, other.CompletionTime)) return false;
      if (Phase != other.Phase) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      if (EvalMetrics != other.EvalMetrics) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStudyName) hash ^= StudyName.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (training_ != null) hash ^= Training.GetHashCode();
      if (acceptance_ != null) hash ^= Acceptance.GetHashCode();
      if (capacity_ != null) hash ^= Capacity.GetHashCode();
      if (prod_ != null) hash ^= Prod.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (completionTime_ != null) hash ^= CompletionTime.GetHashCode();
      if (HasPhase) hash ^= Phase.GetHashCode();
      hash ^= conditions_.GetHashCode();
      if (HasEvalMetrics) hash ^= EvalMetrics.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStudyName) {
        output.WriteRawTag(10);
        output.WriteString(StudyName);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      if (training_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Training);
      }
      if (acceptance_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Acceptance);
      }
      if (capacity_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Capacity);
      }
      if (prod_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Prod);
      }
      if (startTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StartTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CompletionTime);
      }
      if (HasPhase) {
        output.WriteRawTag(82);
        output.WriteString(Phase);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
      if (HasEvalMetrics) {
        output.WriteRawTag(106);
        output.WriteString(EvalMetrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStudyName) {
        output.WriteRawTag(10);
        output.WriteString(StudyName);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      if (training_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Training);
      }
      if (acceptance_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Acceptance);
      }
      if (capacity_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Capacity);
      }
      if (prod_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Prod);
      }
      if (startTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StartTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CompletionTime);
      }
      if (HasPhase) {
        output.WriteRawTag(82);
        output.WriteString(Phase);
      }
      conditions_.WriteTo(ref output, _repeated_conditions_codec);
      if (HasEvalMetrics) {
        output.WriteRawTag(106);
        output.WriteString(EvalMetrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStudyName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StudyName);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (training_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Training);
      }
      if (acceptance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceptance);
      }
      if (capacity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Capacity);
      }
      if (prod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prod);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (completionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompletionTime);
      }
      if (HasPhase) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phase);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      if (HasEvalMetrics) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EvalMetrics);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelPipelineRunStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasStudyName) {
        StudyName = other.StudyName;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.training_ != null) {
        if (training_ == null) {
          Training = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
        }
        Training.MergeFrom(other.Training);
      }
      if (other.acceptance_ != null) {
        if (acceptance_ == null) {
          Acceptance = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
        }
        Acceptance.MergeFrom(other.Acceptance);
      }
      if (other.capacity_ != null) {
        if (capacity_ == null) {
          Capacity = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
        }
        Capacity.MergeFrom(other.Capacity);
      }
      if (other.prod_ != null) {
        if (prod_ == null) {
          Prod = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
        }
        Prod.MergeFrom(other.Prod);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.completionTime_ != null) {
        if (completionTime_ == null) {
          CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        CompletionTime.MergeFrom(other.CompletionTime);
      }
      if (other.HasPhase) {
        Phase = other.Phase;
      }
      conditions_.Add(other.conditions_);
      if (other.HasEvalMetrics) {
        EvalMetrics = other.EvalMetrics;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StudyName = input.ReadString();
            break;
          }
          case 26: {
            if (data_ == null) {
              Data = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
            }
            input.ReadMessage(Data);
            break;
          }
          case 34: {
            if (training_ == null) {
              Training = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
            }
            input.ReadMessage(Training);
            break;
          }
          case 42: {
            if (acceptance_ == null) {
              Acceptance = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
            }
            input.ReadMessage(Acceptance);
            break;
          }
          case 50: {
            if (capacity_ == null) {
              Capacity = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
            }
            input.ReadMessage(Capacity);
            break;
          }
          case 58: {
            if (prod_ == null) {
              Prod = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
            }
            input.ReadMessage(Prod);
            break;
          }
          case 66: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 74: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 82: {
            Phase = input.ReadString();
            break;
          }
          case 90: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
          case 106: {
            EvalMetrics = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StudyName = input.ReadString();
            break;
          }
          case 26: {
            if (data_ == null) {
              Data = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
            }
            input.ReadMessage(Data);
            break;
          }
          case 34: {
            if (training_ == null) {
              Training = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
            }
            input.ReadMessage(Training);
            break;
          }
          case 42: {
            if (acceptance_ == null) {
              Acceptance = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
            }
            input.ReadMessage(Acceptance);
            break;
          }
          case 50: {
            if (capacity_ == null) {
              Capacity = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
            }
            input.ReadMessage(Capacity);
            break;
          }
          case 58: {
            if (prod_ == null) {
              Prod = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineRunStageStatus();
            }
            input.ReadMessage(Prod);
            break;
          }
          case 66: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 74: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 82: {
            Phase = input.ReadString();
            break;
          }
          case 90: {
            conditions_.AddEntriesFrom(ref input, _repeated_conditions_codec);
            break;
          }
          case 106: {
            EvalMetrics = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelPipelineSpec define the desired state of the ModelPipeline resource.
  /// </summary>
  public sealed partial class ModelPipelineSpec : pb::IMessage<ModelPipelineSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelPipelineSpec> _parser = new pb::MessageParser<ModelPipelineSpec>(() => new ModelPipelineSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPipelineSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineSpec(ModelPipelineSpec other) : this() {
      _hasBits0 = other._hasBits0;
      versionName_ = other.versionName_;
      defaultServingSiteName_ = other.defaultServingSiteName_;
      description_ = other.description_;
      minScore_ = other.minScore_;
      dataStage_ = other.dataStage_ != null ? other.dataStage_.Clone() : null;
      trainingStage_ = other.trainingStage_ != null ? other.trainingStage_.Clone() : null;
      acceptanceStage_ = other.acceptanceStage_ != null ? other.acceptanceStage_.Clone() : null;
      capacityStage_ = other.capacityStage_ != null ? other.capacityStage_.Clone() : null;
      releaseStage_ = other.releaseStage_ != null ? other.releaseStage_.Clone() : null;
      folder_ = other.folder_;
      trigger_ = other.trigger_ != null ? other.trigger_.Clone() : null;
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineSpec Clone() {
      return new ModelPipelineSpec(this);
    }

    /// <summary>Field number for the "versionName" field.</summary>
    public const int VersionNameFieldNumber = 1;
    private readonly static string VersionNameDefaultValue = "";

    private string versionName_;
    /// <summary>
    /// The product version of the resource
    /// +kubebuilder:default ="latest"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionName {
      get { return versionName_ ?? VersionNameDefaultValue; }
      set {
        versionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "versionName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersionName {
      get { return versionName_ != null; }
    }
    /// <summary>Clears the value of the "versionName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionName() {
      versionName_ = null;
    }

    /// <summary>Field number for the "defaultServingSiteName" field.</summary>
    public const int DefaultServingSiteNameFieldNumber = 2;
    private readonly static string DefaultServingSiteNameDefaultValue = "";

    private string defaultServingSiteName_;
    /// <summary>
    /// Servingsite name is the default serving site for each stage.
    /// +kubebuilder:default =""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultServingSiteName {
      get { return defaultServingSiteName_ ?? DefaultServingSiteNameDefaultValue; }
      set {
        defaultServingSiteName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "defaultServingSiteName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefaultServingSiteName {
      get { return defaultServingSiteName_ != null; }
    }
    /// <summary>Clears the value of the "defaultServingSiteName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefaultServingSiteName() {
      defaultServingSiteName_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// User provided description
    /// +kubebuilder:default =""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "minScore" field.</summary>
    public const int MinScoreFieldNumber = 4;
    private readonly static double MinScoreDefaultValue = 0D;

    private double minScore_;
    /// <summary>
    /// Min score to move from stage to stage.
    /// +kubebuilder:default:=0
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinScore {
      get { if ((_hasBits0 & 1) != 0) { return minScore_; } else { return MinScoreDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minScore_ = value;
      }
    }
    /// <summary>Gets whether the "minScore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinScore {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "minScore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinScore() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "dataStage" field.</summary>
    public const int DataStageFieldNumber = 5;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataStageSpec dataStage_;
    /// <summary>
    /// Datastage build new dataset from the data sources.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataStageSpec DataStage {
      get { return dataStage_; }
      set {
        dataStage_ = value;
      }
    }

    /// <summary>Field number for the "trainingStage" field.</summary>
    public const int TrainingStageFieldNumber = 6;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingStageSpec trainingStage_;
    /// <summary>
    /// TrainingSpec stage
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingStageSpec TrainingStage {
      get { return trainingStage_; }
      set {
        trainingStage_ = value;
      }
    }

    /// <summary>Field number for the "acceptanceStage" field.</summary>
    public const int AcceptanceStageFieldNumber = 7;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AcceptanceStageSpec acceptanceStage_;
    /// <summary>
    /// Acceptance stage is used for further testing
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AcceptanceStageSpec AcceptanceStage {
      get { return acceptanceStage_; }
      set {
        acceptanceStage_ = value;
      }
    }

    /// <summary>Field number for the "capacityStage" field.</summary>
    public const int CapacityStageFieldNumber = 8;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CapacityStageSpec capacityStage_;
    /// <summary>
    /// Capacity stage for capacity
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CapacityStageSpec CapacityStage {
      get { return capacityStage_; }
      set {
        capacityStage_ = value;
      }
    }

    /// <summary>Field number for the "releaseStage" field.</summary>
    public const int ReleaseStageFieldNumber = 9;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReleaseStageSpec releaseStage_;
    /// <summary>
    /// ReleaseStage stage define how to place the model into production.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReleaseStageSpec ReleaseStage {
      get { return releaseStage_; }
      set {
        releaseStage_ = value;
      }
    }

    /// <summary>Field number for the "folder" field.</summary>
    public const int FolderFieldNumber = 10;
    private readonly static string FolderDefaultValue = "";

    private string folder_;
    /// <summary>
    /// Folder for the pipeline and pipeline run artifacts.
    /// The folder contains all the study artifacts - metadata, reports, profile,models
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Folder {
      get { return folder_ ?? FolderDefaultValue; }
      set {
        folder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "folder" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFolder {
      get { return folder_ != null; }
    }
    /// <summary>Clears the value of the "folder" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFolder() {
      folder_ = null;
    }

    /// <summary>Field number for the "trigger" field.</summary>
    public const int TriggerFieldNumber = 11;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PipelineTrigger trigger_;
    /// <summary>
    /// Trigger is definition of the pipeline trigger
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PipelineTrigger Trigger {
      get { return trigger_; }
      set {
        trigger_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 12;
    private readonly static string OwnerDefaultValue = "";

    private string owner_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_ ?? OwnerDefaultValue; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwner {
      get { return owner_ != null; }
    }
    /// <summary>Clears the value of the "owner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwner() {
      owner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelPipelineSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelPipelineSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionName != other.VersionName) return false;
      if (DefaultServingSiteName != other.DefaultServingSiteName) return false;
      if (Description != other.Description) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinScore, other.MinScore)) return false;
      if (!object.Equals(DataStage, other.DataStage)) return false;
      if (!object.Equals(TrainingStage, other.TrainingStage)) return false;
      if (!object.Equals(AcceptanceStage, other.AcceptanceStage)) return false;
      if (!object.Equals(CapacityStage, other.CapacityStage)) return false;
      if (!object.Equals(ReleaseStage, other.ReleaseStage)) return false;
      if (Folder != other.Folder) return false;
      if (!object.Equals(Trigger, other.Trigger)) return false;
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVersionName) hash ^= VersionName.GetHashCode();
      if (HasDefaultServingSiteName) hash ^= DefaultServingSiteName.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasMinScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinScore);
      if (dataStage_ != null) hash ^= DataStage.GetHashCode();
      if (trainingStage_ != null) hash ^= TrainingStage.GetHashCode();
      if (acceptanceStage_ != null) hash ^= AcceptanceStage.GetHashCode();
      if (capacityStage_ != null) hash ^= CapacityStage.GetHashCode();
      if (releaseStage_ != null) hash ^= ReleaseStage.GetHashCode();
      if (HasFolder) hash ^= Folder.GetHashCode();
      if (trigger_ != null) hash ^= Trigger.GetHashCode();
      if (HasOwner) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (HasDefaultServingSiteName) {
        output.WriteRawTag(18);
        output.WriteString(DefaultServingSiteName);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasMinScore) {
        output.WriteRawTag(33);
        output.WriteDouble(MinScore);
      }
      if (dataStage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DataStage);
      }
      if (trainingStage_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TrainingStage);
      }
      if (acceptanceStage_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AcceptanceStage);
      }
      if (capacityStage_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CapacityStage);
      }
      if (releaseStage_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ReleaseStage);
      }
      if (HasFolder) {
        output.WriteRawTag(82);
        output.WriteString(Folder);
      }
      if (trigger_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Trigger);
      }
      if (HasOwner) {
        output.WriteRawTag(98);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (HasDefaultServingSiteName) {
        output.WriteRawTag(18);
        output.WriteString(DefaultServingSiteName);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasMinScore) {
        output.WriteRawTag(33);
        output.WriteDouble(MinScore);
      }
      if (dataStage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DataStage);
      }
      if (trainingStage_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TrainingStage);
      }
      if (acceptanceStage_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AcceptanceStage);
      }
      if (capacityStage_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CapacityStage);
      }
      if (releaseStage_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ReleaseStage);
      }
      if (HasFolder) {
        output.WriteRawTag(82);
        output.WriteString(Folder);
      }
      if (trigger_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Trigger);
      }
      if (HasOwner) {
        output.WriteRawTag(98);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVersionName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionName);
      }
      if (HasDefaultServingSiteName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultServingSiteName);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasMinScore) {
        size += 1 + 8;
      }
      if (dataStage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataStage);
      }
      if (trainingStage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainingStage);
      }
      if (acceptanceStage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptanceStage);
      }
      if (capacityStage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CapacityStage);
      }
      if (releaseStage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReleaseStage);
      }
      if (HasFolder) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Folder);
      }
      if (trigger_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trigger);
      }
      if (HasOwner) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelPipelineSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasVersionName) {
        VersionName = other.VersionName;
      }
      if (other.HasDefaultServingSiteName) {
        DefaultServingSiteName = other.DefaultServingSiteName;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasMinScore) {
        MinScore = other.MinScore;
      }
      if (other.dataStage_ != null) {
        if (dataStage_ == null) {
          DataStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataStageSpec();
        }
        DataStage.MergeFrom(other.DataStage);
      }
      if (other.trainingStage_ != null) {
        if (trainingStage_ == null) {
          TrainingStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingStageSpec();
        }
        TrainingStage.MergeFrom(other.TrainingStage);
      }
      if (other.acceptanceStage_ != null) {
        if (acceptanceStage_ == null) {
          AcceptanceStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AcceptanceStageSpec();
        }
        AcceptanceStage.MergeFrom(other.AcceptanceStage);
      }
      if (other.capacityStage_ != null) {
        if (capacityStage_ == null) {
          CapacityStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CapacityStageSpec();
        }
        CapacityStage.MergeFrom(other.CapacityStage);
      }
      if (other.releaseStage_ != null) {
        if (releaseStage_ == null) {
          ReleaseStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReleaseStageSpec();
        }
        ReleaseStage.MergeFrom(other.ReleaseStage);
      }
      if (other.HasFolder) {
        Folder = other.Folder;
      }
      if (other.trigger_ != null) {
        if (trigger_ == null) {
          Trigger = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PipelineTrigger();
        }
        Trigger.MergeFrom(other.Trigger);
      }
      if (other.HasOwner) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            DefaultServingSiteName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 33: {
            MinScore = input.ReadDouble();
            break;
          }
          case 42: {
            if (dataStage_ == null) {
              DataStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataStageSpec();
            }
            input.ReadMessage(DataStage);
            break;
          }
          case 50: {
            if (trainingStage_ == null) {
              TrainingStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingStageSpec();
            }
            input.ReadMessage(TrainingStage);
            break;
          }
          case 58: {
            if (acceptanceStage_ == null) {
              AcceptanceStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AcceptanceStageSpec();
            }
            input.ReadMessage(AcceptanceStage);
            break;
          }
          case 66: {
            if (capacityStage_ == null) {
              CapacityStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CapacityStageSpec();
            }
            input.ReadMessage(CapacityStage);
            break;
          }
          case 74: {
            if (releaseStage_ == null) {
              ReleaseStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReleaseStageSpec();
            }
            input.ReadMessage(ReleaseStage);
            break;
          }
          case 82: {
            Folder = input.ReadString();
            break;
          }
          case 90: {
            if (trigger_ == null) {
              Trigger = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PipelineTrigger();
            }
            input.ReadMessage(Trigger);
            break;
          }
          case 98: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            DefaultServingSiteName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 33: {
            MinScore = input.ReadDouble();
            break;
          }
          case 42: {
            if (dataStage_ == null) {
              DataStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataStageSpec();
            }
            input.ReadMessage(DataStage);
            break;
          }
          case 50: {
            if (trainingStage_ == null) {
              TrainingStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingStageSpec();
            }
            input.ReadMessage(TrainingStage);
            break;
          }
          case 58: {
            if (acceptanceStage_ == null) {
              AcceptanceStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AcceptanceStageSpec();
            }
            input.ReadMessage(AcceptanceStage);
            break;
          }
          case 66: {
            if (capacityStage_ == null) {
              CapacityStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CapacityStageSpec();
            }
            input.ReadMessage(CapacityStage);
            break;
          }
          case 74: {
            if (releaseStage_ == null) {
              ReleaseStage = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReleaseStageSpec();
            }
            input.ReadMessage(ReleaseStage);
            break;
          }
          case 82: {
            Folder = input.ReadString();
            break;
          }
          case 90: {
            if (trigger_ == null) {
              Trigger = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PipelineTrigger();
            }
            input.ReadMessage(Trigger);
            break;
          }
          case 98: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelPipelineStatus define the observed state of the pipeline
  /// </summary>
  public sealed partial class ModelPipelineStatus : pb::IMessage<ModelPipelineStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelPipelineStatus> _parser = new pb::MessageParser<ModelPipelineStatus>(() => new ModelPipelineStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPipelineStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineStatus(ModelPipelineStatus other) : this() {
      conditions_ = other.conditions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelPipelineStatus Clone() {
      return new ModelPipelineStatus(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineCondition.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineCondition> conditions_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineCondition>();
    /// <summary>
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelPipelineCondition> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelPipelineStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelPipelineStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      conditions_.WriteTo(output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      conditions_.WriteTo(ref output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelPipelineStatus other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            conditions_.AddEntriesFrom(ref input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// model cv results
  /// </summary>
  public sealed partial class ModelResult : pb::IMessage<ModelResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelResult> _parser = new pb::MessageParser<ModelResult>(() => new ModelResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelResult(ModelResult other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      alg_ = other.alg_;
      score_ = other.score_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelResult Clone() {
      return new ModelResult(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "alg" field.</summary>
    public const int AlgFieldNumber = 2;
    private readonly static string AlgDefaultValue = "";

    private string alg_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alg {
      get { return alg_ ?? AlgDefaultValue; }
      set {
        alg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "alg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAlg {
      get { return alg_ != null; }
    }
    /// <summary>Clears the value of the "alg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlg() {
      alg_ = null;
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private readonly static double ScoreDefaultValue = 0D;

    private double score_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Score {
      get { if ((_hasBits0 & 1) != 0) { return score_; } else { return ScoreDefaultValue; } }
      set {
        _hasBits0 |= 1;
        score_ = value;
      }
    }
    /// <summary>Gets whether the "score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScore {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScore() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private readonly static bool ErrorDefaultValue = false;

    private bool error_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Error {
      get { if ((_hasBits0 & 2) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Alg != other.Alg) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Score, other.Score)) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasAlg) hash ^= Alg.GetHashCode();
      if (HasScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Score);
      if (HasError) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasAlg) {
        output.WriteRawTag(18);
        output.WriteString(Alg);
      }
      if (HasScore) {
        output.WriteRawTag(25);
        output.WriteDouble(Score);
      }
      if (HasError) {
        output.WriteRawTag(32);
        output.WriteBool(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasAlg) {
        output.WriteRawTag(18);
        output.WriteString(Alg);
      }
      if (HasScore) {
        output.WriteRawTag(25);
        output.WriteDouble(Score);
      }
      if (HasError) {
        output.WriteRawTag(32);
        output.WriteBool(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasAlg) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alg);
      }
      if (HasScore) {
        size += 1 + 8;
      }
      if (HasError) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelResult other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasAlg) {
        Alg = other.Alg;
      }
      if (other.HasScore) {
        Score = other.Score;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Alg = input.ReadString();
            break;
          }
          case 25: {
            Score = input.ReadDouble();
            break;
          }
          case 32: {
            Error = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Alg = input.ReadString();
            break;
          }
          case 25: {
            Score = input.ReadDouble();
            break;
          }
          case 32: {
            Error = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelSearchSpec the constraint on the training process.
  /// The values are assigned to the model from the study.
  /// </summary>
  public sealed partial class ModelSearchSpec : pb::IMessage<ModelSearchSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelSearchSpec> _parser = new pb::MessageParser<ModelSearchSpec>(() => new ModelSearchSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelSearchSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSearchSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSearchSpec(ModelSearchSpec other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      maxCost_ = other.maxCost_;
      maxTime_ = other.maxTime_;
      maxModels_ = other.maxModels_;
      minScore_ = other.minScore_;
      trainers_ = other.trainers_;
      shOptions_ = other.shOptions_ != null ? other.shOptions_.Clone() : null;
      test_ = other.test_;
      retainTop_ = other.retainTop_;
      retainedFor_ = other.retainedFor_;
      resources_ = other.resources_ != null ? other.resources_.Clone() : null;
      allowlist_ = other.allowlist_.Clone();
      votingEnsemble_ = other.votingEnsemble_;
      stackingEnsemble_ = other.stackingEnsemble_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSearchSpec Clone() {
      return new ModelSearchSpec(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// Type specify the hyper parameter optimization search method.
    /// The only supported value is random
    /// +kubebuilder:default:=random
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "maxCost" field.</summary>
    public const int MaxCostFieldNumber = 2;
    private readonly static int MaxCostDefaultValue = 0;

    private int maxCost_;
    /// <summary>
    /// MaxCost specify what is the maximum cost incurred before
    /// stopping model creations
    /// +kubebuilder:validation:Optional
    /// +kubebuilder:default:=100
    /// +kubebuilder:validation:Minimum=1
    /// +kubebuilder:validation:Maximum=1000
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCost {
      get { if ((_hasBits0 & 1) != 0) { return maxCost_; } else { return MaxCostDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maxCost_ = value;
      }
    }
    /// <summary>Gets whether the "maxCost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxCost {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "maxCost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxCost() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "maxTime" field.</summary>
    public const int MaxTimeFieldNumber = 3;
    private readonly static int MaxTimeDefaultValue = 0;

    private int maxTime_;
    /// <summary>
    /// MaxTime specify what is the maximum time allocated to a study (in minutes).
    /// the cross validation stage.
    /// +kubebuilder:default:=30
    /// +kubebuilder:validation:Minimum=1
    /// +kubebuilder:validation:Maximum=10000
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxTime {
      get { if ((_hasBits0 & 2) != 0) { return maxTime_; } else { return MaxTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxTime_ = value;
      }
    }
    /// <summary>Gets whether the "maxTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "maxTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "maxModels" field.</summary>
    public const int MaxModelsFieldNumber = 4;
    private readonly static int MaxModelsDefaultValue = 0;

    private int maxModels_;
    /// <summary>
    /// Used for random search, the max models sampled.
    /// +kubebuilder:default:=10
    /// +kubebuilder:validation:Minimum=1
    /// +kubebuilder:validation:Maximum=1000
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxModels {
      get { if ((_hasBits0 & 4) != 0) { return maxModels_; } else { return MaxModelsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxModels_ = value;
      }
    }
    /// <summary>Gets whether the "maxModels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxModels {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "maxModels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxModels() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "minScore" field.</summary>
    public const int MinScoreFieldNumber = 5;
    private readonly static double MinScoreDefaultValue = 0D;

    private double minScore_;
    /// <summary>
    /// The minimum score by which the search would stop
    /// +kubebuilder:default:=0
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinScore {
      get { if ((_hasBits0 & 8) != 0) { return minScore_; } else { return MinScoreDefaultValue; } }
      set {
        _hasBits0 |= 8;
        minScore_ = value;
      }
    }
    /// <summary>Gets whether the "minScore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinScore {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "minScore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinScore() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "trainers" field.</summary>
    public const int TrainersFieldNumber = 6;
    private readonly static int TrainersDefaultValue = 0;

    private int trainers_;
    /// <summary>
    /// The desired number of trainers running during search.
    /// +kubebuilder:default:=1
    /// +kubebuilder:validation:Optional
    /// +kubebuilder:validation:Maximum=50
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Trainers {
      get { if ((_hasBits0 & 16) != 0) { return trainers_; } else { return TrainersDefaultValue; } }
      set {
        _hasBits0 |= 16;
        trainers_ = value;
      }
    }
    /// <summary>Gets whether the "trainers" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrainers {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "trainers" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrainers() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "shOptions" field.</summary>
    public const int ShOptionsFieldNumber = 7;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingOptions shOptions_;
    /// <summary>
    /// SHOptions is the desired options for successive halving search.
    /// All other models are saved into an archive.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingOptions ShOptions {
      get { return shOptions_; }
      set {
        shOptions_ = value;
      }
    }

    /// <summary>Field number for the "test" field.</summary>
    public const int TestFieldNumber = 8;
    private readonly static int TestDefaultValue = 0;

    private int test_;
    /// <summary>
    /// Test indicate the desired number of models that should be passed to the testing phase.
    /// +kubebuilder:default:=1
    /// +kubebuilder:validation:Minimum=1
    /// +kubebuilder:validation:Maximum=5
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Test {
      get { if ((_hasBits0 & 32) != 0) { return test_; } else { return TestDefaultValue; } }
      set {
        _hasBits0 |= 32;
        test_ = value;
      }
    }
    /// <summary>Gets whether the "test" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTest {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "test" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTest() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "retainTop" field.</summary>
    public const int RetainTopFieldNumber = 9;
    private readonly static int RetainTopDefaultValue = 0;

    private int retainTop_;
    /// <summary>
    /// Indicate the total number of full models that would be retain in etcd.
    /// All other models are garbage collected (archived).
    /// models are sorted by thier objective score.
    /// +kubebuilder:default:=10
    /// +kubebuilder:validation:Minimum=0
    /// +kubebuilder:validation:Maximum=100
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetainTop {
      get { if ((_hasBits0 & 64) != 0) { return retainTop_; } else { return RetainTopDefaultValue; } }
      set {
        _hasBits0 |= 64;
        retainTop_ = value;
      }
    }
    /// <summary>Gets whether the "retainTop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRetainTop {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "retainTop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRetainTop() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "retainedFor" field.</summary>
    public const int RetainedForFieldNumber = 10;
    private readonly static int RetainedForDefaultValue = 0;

    private int retainedFor_;
    /// <summary>
    /// RetainFor measure the time in minutes for modela trained. Default is 60 min (1 H).
    /// +kubebuilder:validation:Optional
    /// +kubebuilder:default:=60
    /// +kubebuilder:validation:Minimum=0
    /// +kubebuilder:validation:Maximum=2400
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetainedFor {
      get { if ((_hasBits0 & 128) != 0) { return retainedFor_; } else { return RetainedForDefaultValue; } }
      set {
        _hasBits0 |= 128;
        retainedFor_ = value;
      }
    }
    /// <summary>Gets whether the "retainedFor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRetainedFor {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "retainedFor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRetainedFor() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 11;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingResourceRequest resources_;
    /// <summary>
    /// Define the general size of the resources needed for each trainer.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingResourceRequest Resources {
      get { return resources_; }
      set {
        resources_ = value;
      }
    }

    /// <summary>Field number for the "allowlist" field.</summary>
    public const int AllowlistFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_allowlist_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> allowlist_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// AllowList contain the list of algorithms that should be tested as part of the search.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Allowlist {
      get { return allowlist_; }
    }

    /// <summary>Field number for the "votingEnsemble" field.</summary>
    public const int VotingEnsembleFieldNumber = 13;
    private readonly static bool VotingEnsembleDefaultValue = false;

    private bool votingEnsemble_;
    /// <summary>
    /// VotingEnsample - If true, create a voting ensemble of the top 3 models.
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optionals
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VotingEnsemble {
      get { if ((_hasBits0 & 256) != 0) { return votingEnsemble_; } else { return VotingEnsembleDefaultValue; } }
      set {
        _hasBits0 |= 256;
        votingEnsemble_ = value;
      }
    }
    /// <summary>Gets whether the "votingEnsemble" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVotingEnsemble {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "votingEnsemble" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVotingEnsemble() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "stackingEnsemble" field.</summary>
    public const int StackingEnsembleFieldNumber = 14;
    private readonly static bool StackingEnsembleDefaultValue = false;

    private bool stackingEnsemble_;
    /// <summary>
    /// StackingEnsemble If true, create a stacking ensemble of the top 3 models.
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StackingEnsemble {
      get { if ((_hasBits0 & 512) != 0) { return stackingEnsemble_; } else { return StackingEnsembleDefaultValue; } }
      set {
        _hasBits0 |= 512;
        stackingEnsemble_ = value;
      }
    }
    /// <summary>Gets whether the "stackingEnsemble" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStackingEnsemble {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "stackingEnsemble" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStackingEnsemble() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelSearchSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelSearchSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (MaxCost != other.MaxCost) return false;
      if (MaxTime != other.MaxTime) return false;
      if (MaxModels != other.MaxModels) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinScore, other.MinScore)) return false;
      if (Trainers != other.Trainers) return false;
      if (!object.Equals(ShOptions, other.ShOptions)) return false;
      if (Test != other.Test) return false;
      if (RetainTop != other.RetainTop) return false;
      if (RetainedFor != other.RetainedFor) return false;
      if (!object.Equals(Resources, other.Resources)) return false;
      if(!allowlist_.Equals(other.allowlist_)) return false;
      if (VotingEnsemble != other.VotingEnsemble) return false;
      if (StackingEnsemble != other.StackingEnsemble) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasMaxCost) hash ^= MaxCost.GetHashCode();
      if (HasMaxTime) hash ^= MaxTime.GetHashCode();
      if (HasMaxModels) hash ^= MaxModels.GetHashCode();
      if (HasMinScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinScore);
      if (HasTrainers) hash ^= Trainers.GetHashCode();
      if (shOptions_ != null) hash ^= ShOptions.GetHashCode();
      if (HasTest) hash ^= Test.GetHashCode();
      if (HasRetainTop) hash ^= RetainTop.GetHashCode();
      if (HasRetainedFor) hash ^= RetainedFor.GetHashCode();
      if (resources_ != null) hash ^= Resources.GetHashCode();
      hash ^= allowlist_.GetHashCode();
      if (HasVotingEnsemble) hash ^= VotingEnsemble.GetHashCode();
      if (HasStackingEnsemble) hash ^= StackingEnsemble.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasMaxCost) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxCost);
      }
      if (HasMaxTime) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxTime);
      }
      if (HasMaxModels) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxModels);
      }
      if (HasMinScore) {
        output.WriteRawTag(41);
        output.WriteDouble(MinScore);
      }
      if (HasTrainers) {
        output.WriteRawTag(48);
        output.WriteInt32(Trainers);
      }
      if (shOptions_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ShOptions);
      }
      if (HasTest) {
        output.WriteRawTag(64);
        output.WriteInt32(Test);
      }
      if (HasRetainTop) {
        output.WriteRawTag(72);
        output.WriteInt32(RetainTop);
      }
      if (HasRetainedFor) {
        output.WriteRawTag(80);
        output.WriteInt32(RetainedFor);
      }
      if (resources_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Resources);
      }
      allowlist_.WriteTo(output, _repeated_allowlist_codec);
      if (HasVotingEnsemble) {
        output.WriteRawTag(104);
        output.WriteBool(VotingEnsemble);
      }
      if (HasStackingEnsemble) {
        output.WriteRawTag(112);
        output.WriteBool(StackingEnsemble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasMaxCost) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxCost);
      }
      if (HasMaxTime) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxTime);
      }
      if (HasMaxModels) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxModels);
      }
      if (HasMinScore) {
        output.WriteRawTag(41);
        output.WriteDouble(MinScore);
      }
      if (HasTrainers) {
        output.WriteRawTag(48);
        output.WriteInt32(Trainers);
      }
      if (shOptions_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ShOptions);
      }
      if (HasTest) {
        output.WriteRawTag(64);
        output.WriteInt32(Test);
      }
      if (HasRetainTop) {
        output.WriteRawTag(72);
        output.WriteInt32(RetainTop);
      }
      if (HasRetainedFor) {
        output.WriteRawTag(80);
        output.WriteInt32(RetainedFor);
      }
      if (resources_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Resources);
      }
      allowlist_.WriteTo(ref output, _repeated_allowlist_codec);
      if (HasVotingEnsemble) {
        output.WriteRawTag(104);
        output.WriteBool(VotingEnsemble);
      }
      if (HasStackingEnsemble) {
        output.WriteRawTag(112);
        output.WriteBool(StackingEnsemble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasMaxCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCost);
      }
      if (HasMaxTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTime);
      }
      if (HasMaxModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxModels);
      }
      if (HasMinScore) {
        size += 1 + 8;
      }
      if (HasTrainers) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Trainers);
      }
      if (shOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShOptions);
      }
      if (HasTest) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Test);
      }
      if (HasRetainTop) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetainTop);
      }
      if (HasRetainedFor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetainedFor);
      }
      if (resources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
      }
      size += allowlist_.CalculateSize(_repeated_allowlist_codec);
      if (HasVotingEnsemble) {
        size += 1 + 1;
      }
      if (HasStackingEnsemble) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelSearchSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasMaxCost) {
        MaxCost = other.MaxCost;
      }
      if (other.HasMaxTime) {
        MaxTime = other.MaxTime;
      }
      if (other.HasMaxModels) {
        MaxModels = other.MaxModels;
      }
      if (other.HasMinScore) {
        MinScore = other.MinScore;
      }
      if (other.HasTrainers) {
        Trainers = other.Trainers;
      }
      if (other.shOptions_ != null) {
        if (shOptions_ == null) {
          ShOptions = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingOptions();
        }
        ShOptions.MergeFrom(other.ShOptions);
      }
      if (other.HasTest) {
        Test = other.Test;
      }
      if (other.HasRetainTop) {
        RetainTop = other.RetainTop;
      }
      if (other.HasRetainedFor) {
        RetainedFor = other.RetainedFor;
      }
      if (other.resources_ != null) {
        if (resources_ == null) {
          Resources = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingResourceRequest();
        }
        Resources.MergeFrom(other.Resources);
      }
      allowlist_.Add(other.allowlist_);
      if (other.HasVotingEnsemble) {
        VotingEnsemble = other.VotingEnsemble;
      }
      if (other.HasStackingEnsemble) {
        StackingEnsemble = other.StackingEnsemble;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            MaxCost = input.ReadInt32();
            break;
          }
          case 24: {
            MaxTime = input.ReadInt32();
            break;
          }
          case 32: {
            MaxModels = input.ReadInt32();
            break;
          }
          case 41: {
            MinScore = input.ReadDouble();
            break;
          }
          case 48: {
            Trainers = input.ReadInt32();
            break;
          }
          case 58: {
            if (shOptions_ == null) {
              ShOptions = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingOptions();
            }
            input.ReadMessage(ShOptions);
            break;
          }
          case 64: {
            Test = input.ReadInt32();
            break;
          }
          case 72: {
            RetainTop = input.ReadInt32();
            break;
          }
          case 80: {
            RetainedFor = input.ReadInt32();
            break;
          }
          case 90: {
            if (resources_ == null) {
              Resources = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingResourceRequest();
            }
            input.ReadMessage(Resources);
            break;
          }
          case 98: {
            allowlist_.AddEntriesFrom(input, _repeated_allowlist_codec);
            break;
          }
          case 104: {
            VotingEnsemble = input.ReadBool();
            break;
          }
          case 112: {
            StackingEnsemble = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            MaxCost = input.ReadInt32();
            break;
          }
          case 24: {
            MaxTime = input.ReadInt32();
            break;
          }
          case 32: {
            MaxModels = input.ReadInt32();
            break;
          }
          case 41: {
            MinScore = input.ReadDouble();
            break;
          }
          case 48: {
            Trainers = input.ReadInt32();
            break;
          }
          case 58: {
            if (shOptions_ == null) {
              ShOptions = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingOptions();
            }
            input.ReadMessage(ShOptions);
            break;
          }
          case 64: {
            Test = input.ReadInt32();
            break;
          }
          case 72: {
            RetainTop = input.ReadInt32();
            break;
          }
          case 80: {
            RetainedFor = input.ReadInt32();
            break;
          }
          case 90: {
            if (resources_ == null) {
              Resources = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingResourceRequest();
            }
            input.ReadMessage(Resources);
            break;
          }
          case 98: {
            allowlist_.AddEntriesFrom(ref input, _repeated_allowlist_codec);
            break;
          }
          case 104: {
            VotingEnsemble = input.ReadBool();
            break;
          }
          case 112: {
            StackingEnsemble = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelSpec defines the desired state of the Model resource
  /// </summary>
  public sealed partial class ModelSpec : pb::IMessage<ModelSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelSpec> _parser = new pb::MessageParser<ModelSpec>(() => new ModelSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSpec(ModelSpec other) : this() {
      _hasBits0 = other._hasBits0;
      owner_ = other.owner_;
      versionName_ = other.versionName_;
      studyName_ = other.studyName_;
      datasetName_ = other.datasetName_;
      task_ = other.task_;
      objective_ = other.objective_;
      preprocessing_ = other.preprocessing_ != null ? other.preprocessing_.Clone() : null;
      estimator_ = other.estimator_ != null ? other.estimator_.Clone() : null;
      dnn_ = other.dnn_ != null ? other.dnn_.Clone() : null;
      ensemble_ = other.ensemble_ != null ? other.ensemble_.Clone() : null;
      training_ = other.training_ != null ? other.training_.Clone() : null;
      tested_ = other.tested_;
      aborted_ = other.aborted_;
      published_ = other.published_;
      pushed_ = other.pushed_;
      reported_ = other.reported_;
      paused_ = other.paused_;
      profiled_ = other.profiled_;
      archived_ = other.archived_;
      forecasted_ = other.forecasted_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      forecastingSpec_ = other.forecastingSpec_ != null ? other.forecastingSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSpec Clone() {
      return new ModelSpec(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private readonly static string OwnerDefaultValue = "";

    private string owner_;
    /// <summary>
    /// Owner is the account name of the owner of this model
    /// +kubebuilder:default:="no-one"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_ ?? OwnerDefaultValue; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwner {
      get { return owner_ != null; }
    }
    /// <summary>Clears the value of the "owner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwner() {
      owner_ = null;
    }

    /// <summary>Field number for the "versionName" field.</summary>
    public const int VersionNameFieldNumber = 2;
    private readonly static string VersionNameDefaultValue = "";

    private string versionName_;
    /// <summary>
    /// VersionName is the product version name for this model
    /// +kubebuilder:validation:Required
    /// +kubebuilder:default:="latest"
    /// +kubebuilder:validation:MaxLength=63
    /// +kubebuilder:validation:MinLength=1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionName {
      get { return versionName_ ?? VersionNameDefaultValue; }
      set {
        versionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "versionName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersionName {
      get { return versionName_ != null; }
    }
    /// <summary>Clears the value of the "versionName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionName() {
      versionName_ = null;
    }

    /// <summary>Field number for the "studyName" field.</summary>
    public const int StudyNameFieldNumber = 3;
    private readonly static string StudyNameDefaultValue = "";

    private string studyName_;
    /// <summary>
    /// StudyName reference the study for this model. IF empty, the model is stand alone
    /// +kubebuilder:validation:Required
    /// +kubebuilder:validation:MaxLength=63
    /// +kubebuilder:validation:MinLength=1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StudyName {
      get { return studyName_ ?? StudyNameDefaultValue; }
      set {
        studyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "studyName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStudyName {
      get { return studyName_ != null; }
    }
    /// <summary>Clears the value of the "studyName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStudyName() {
      studyName_ = null;
    }

    /// <summary>Field number for the "datasetName" field.</summary>
    public const int DatasetNameFieldNumber = 4;
    private readonly static string DatasetNameDefaultValue = "";

    private string datasetName_;
    /// <summary>
    /// DatasetName refer to the dataset object for which the study is for.
    /// +kubebuilder:validation:Required
    /// +kubebuilder:validation:MinLength=1
    /// +kubebuilder:validation:MaxLength=63
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetName {
      get { return datasetName_ ?? DatasetNameDefaultValue; }
      set {
        datasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "datasetName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDatasetName {
      get { return datasetName_ != null; }
    }
    /// <summary>Clears the value of the "datasetName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDatasetName() {
      datasetName_ = null;
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 5;
    private readonly static string TaskDefaultValue = "";

    private string task_;
    /// <summary>
    /// Task is the machine learning task (regression, classification).
    /// The task is generated from the study task
    /// +kubebuilder:validation:Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Task {
      get { return task_ ?? TaskDefaultValue; }
      set {
        task_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "task" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTask {
      get { return task_ != null; }
    }
    /// <summary>Clears the value of the "task" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTask() {
      task_ = null;
    }

    /// <summary>Field number for the "objective" field.</summary>
    public const int ObjectiveFieldNumber = 6;
    private readonly static string ObjectiveDefaultValue = "";

    private string objective_;
    /// <summary>
    /// Objective is the metric by which the system compare models
    /// Default: based on the task. classification is logloss. Regression is rmse
    /// +kubebuilder:validation:Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Objective {
      get { return objective_ ?? ObjectiveDefaultValue; }
      set {
        objective_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "objective" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObjective {
      get { return objective_ != null; }
    }
    /// <summary>Clears the value of the "objective" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObjective() {
      objective_ = null;
    }

    /// <summary>Field number for the "preprocessing" field.</summary>
    public const int PreprocessingFieldNumber = 7;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec preprocessing_;
    /// <summary>
    /// Represent the preprocessing pipeline of the model. Provide a value if you want to customize the model.
    /// Default: All preprocessing will be created automatically
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec Preprocessing {
      get { return preprocessing_; }
      set {
        preprocessing_ = value;
      }
    }

    /// <summary>Field number for the "estimator" field.</summary>
    public const int EstimatorFieldNumber = 8;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec estimator_;
    /// <summary>
    /// Estimator is a specification of the ML algorithm and its hyper parameters.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec Estimator {
      get { return estimator_; }
      set {
        estimator_ = value;
      }
    }

    /// <summary>Field number for the "dnn" field.</summary>
    public const int DnnFieldNumber = 9;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorSpec dnn_;
    /// <summary>
    /// Dnn is a specification of the DNN estimator specification. Not supported for this release.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorSpec Dnn {
      get { return dnn_; }
      set {
        dnn_ = value;
      }
    }

    /// <summary>Field number for the "ensemble" field.</summary>
    public const int EnsembleFieldNumber = 10;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.EnsembleSpec ensemble_;
    /// <summary>
    /// If this is an ensemble model, specify the ensemble
    /// Default: None
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.EnsembleSpec Ensemble {
      get { return ensemble_; }
      set {
        ensemble_ = value;
      }
    }

    /// <summary>Field number for the "training" field.</summary>
    public const int TrainingFieldNumber = 11;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec training_;
    /// <summary>
    /// TrainingSpec is the desired training settings
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec Training {
      get { return training_; }
      set {
        training_ = value;
      }
    }

    /// <summary>Field number for the "tested" field.</summary>
    public const int TestedFieldNumber = 12;
    private readonly static bool TestedDefaultValue = false;

    private bool tested_;
    /// <summary>
    /// Tested indicate if this model should be testedActual. Default is false.
    /// The study controller will set this to true if a model is the best model
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Tested {
      get { if ((_hasBits0 & 1) != 0) { return tested_; } else { return TestedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tested_ = value;
      }
    }
    /// <summary>Gets whether the "tested" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTested {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tested" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTested() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "aborted" field.</summary>
    public const int AbortedFieldNumber = 13;
    private readonly static bool AbortedDefaultValue = false;

    private bool aborted_;
    /// <summary>
    /// Aborted indicate the desire to abort the model
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Aborted {
      get { if ((_hasBits0 & 2) != 0) { return aborted_; } else { return AbortedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        aborted_ = value;
      }
    }
    /// <summary>Gets whether the "aborted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAborted {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "aborted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAborted() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "published" field.</summary>
    public const int PublishedFieldNumber = 14;
    private readonly static bool PublishedDefaultValue = false;

    private bool published_;
    /// <summary>
    /// Published is set when we want to wrap the model in a docker container
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Published {
      get { if ((_hasBits0 & 4) != 0) { return published_; } else { return PublishedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        published_ = value;
      }
    }
    /// <summary>Gets whether the "published" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPublished {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "published" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPublished() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "pushed" field.</summary>
    public const int PushedFieldNumber = 15;
    private readonly static bool PushedDefaultValue = false;

    private bool pushed_;
    /// <summary>
    /// Pushed indicate if the model image should be pushed into the remote docker registry.
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Pushed {
      get { if ((_hasBits0 & 8) != 0) { return pushed_; } else { return PushedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        pushed_ = value;
      }
    }
    /// <summary>Gets whether the "pushed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPushed {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "pushed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPushed() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "reported" field.</summary>
    public const int ReportedFieldNumber = 16;
    private readonly static bool ReportedDefaultValue = false;

    private bool reported_;
    /// <summary>
    /// Reported is set when a report should be created for this model
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reported {
      get { if ((_hasBits0 & 16) != 0) { return reported_; } else { return ReportedDefaultValue; } }
      set {
        _hasBits0 |= 16;
        reported_ = value;
      }
    }
    /// <summary>Gets whether the "reported" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReported {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "reported" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReported() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "paused" field.</summary>
    public const int PausedFieldNumber = 17;
    private readonly static bool PausedDefaultValue = false;

    private bool paused_;
    /// <summary>
    /// Paused is set when we want to pause the training
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Paused {
      get { if ((_hasBits0 & 32) != 0) { return paused_; } else { return PausedDefaultValue; } }
      set {
        _hasBits0 |= 32;
        paused_ = value;
      }
    }
    /// <summary>Gets whether the "paused" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPaused {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "paused" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPaused() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "profiled" field.</summary>
    public const int ProfiledFieldNumber = 18;
    private readonly static bool ProfiledDefaultValue = false;

    private bool profiled_;
    /// <summary>
    /// Profiled is set when we want to create model profile.
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Profiled {
      get { if ((_hasBits0 & 64) != 0) { return profiled_; } else { return ProfiledDefaultValue; } }
      set {
        _hasBits0 |= 64;
        profiled_ = value;
      }
    }
    /// <summary>Gets whether the "profiled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProfiled {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "profiled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProfiled() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "archived" field.</summary>
    public const int ArchivedFieldNumber = 19;
    private readonly static bool ArchivedDefaultValue = false;

    private bool archived_;
    /// <summary>
    /// Archived is true when the model should be archived
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Archived {
      get { if ((_hasBits0 & 128) != 0) { return archived_; } else { return ArchivedDefaultValue; } }
      set {
        _hasBits0 |= 128;
        archived_ = value;
      }
    }
    /// <summary>Gets whether the "archived" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArchived {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "archived" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArchived() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "forecasted" field.</summary>
    public const int ForecastedFieldNumber = 20;
    private readonly static bool ForecastedDefaultValue = false;

    private bool forecasted_;
    /// <summary>
    /// Forecasted is true when the model should perform a forecast
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Forecasted {
      get { if ((_hasBits0 & 256) != 0) { return forecasted_; } else { return ForecastedDefaultValue; } }
      set {
        _hasBits0 |= 256;
        forecasted_ = value;
      }
    }
    /// <summary>Gets whether the "forecasted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasForecasted {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "forecasted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearForecasted() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 21;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation location_;
    /// <summary>
    /// Location is the location of the model artifacts (metadata, reports and estimators).
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "forecastingSpec" field.</summary>
    public const int ForecastingSpecFieldNumber = 22;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec forecastingSpec_;
    /// <summary>
    /// The specification for the forecasting algorithm if this is a forecast study.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec ForecastingSpec {
      get { return forecastingSpec_; }
      set {
        forecastingSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      if (VersionName != other.VersionName) return false;
      if (StudyName != other.StudyName) return false;
      if (DatasetName != other.DatasetName) return false;
      if (Task != other.Task) return false;
      if (Objective != other.Objective) return false;
      if (!object.Equals(Preprocessing, other.Preprocessing)) return false;
      if (!object.Equals(Estimator, other.Estimator)) return false;
      if (!object.Equals(Dnn, other.Dnn)) return false;
      if (!object.Equals(Ensemble, other.Ensemble)) return false;
      if (!object.Equals(Training, other.Training)) return false;
      if (Tested != other.Tested) return false;
      if (Aborted != other.Aborted) return false;
      if (Published != other.Published) return false;
      if (Pushed != other.Pushed) return false;
      if (Reported != other.Reported) return false;
      if (Paused != other.Paused) return false;
      if (Profiled != other.Profiled) return false;
      if (Archived != other.Archived) return false;
      if (Forecasted != other.Forecasted) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(ForecastingSpec, other.ForecastingSpec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOwner) hash ^= Owner.GetHashCode();
      if (HasVersionName) hash ^= VersionName.GetHashCode();
      if (HasStudyName) hash ^= StudyName.GetHashCode();
      if (HasDatasetName) hash ^= DatasetName.GetHashCode();
      if (HasTask) hash ^= Task.GetHashCode();
      if (HasObjective) hash ^= Objective.GetHashCode();
      if (preprocessing_ != null) hash ^= Preprocessing.GetHashCode();
      if (estimator_ != null) hash ^= Estimator.GetHashCode();
      if (dnn_ != null) hash ^= Dnn.GetHashCode();
      if (ensemble_ != null) hash ^= Ensemble.GetHashCode();
      if (training_ != null) hash ^= Training.GetHashCode();
      if (HasTested) hash ^= Tested.GetHashCode();
      if (HasAborted) hash ^= Aborted.GetHashCode();
      if (HasPublished) hash ^= Published.GetHashCode();
      if (HasPushed) hash ^= Pushed.GetHashCode();
      if (HasReported) hash ^= Reported.GetHashCode();
      if (HasPaused) hash ^= Paused.GetHashCode();
      if (HasProfiled) hash ^= Profiled.GetHashCode();
      if (HasArchived) hash ^= Archived.GetHashCode();
      if (HasForecasted) hash ^= Forecasted.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (forecastingSpec_ != null) hash ^= ForecastingSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOwner) {
        output.WriteRawTag(10);
        output.WriteString(Owner);
      }
      if (HasVersionName) {
        output.WriteRawTag(18);
        output.WriteString(VersionName);
      }
      if (HasStudyName) {
        output.WriteRawTag(26);
        output.WriteString(StudyName);
      }
      if (HasDatasetName) {
        output.WriteRawTag(34);
        output.WriteString(DatasetName);
      }
      if (HasTask) {
        output.WriteRawTag(42);
        output.WriteString(Task);
      }
      if (HasObjective) {
        output.WriteRawTag(50);
        output.WriteString(Objective);
      }
      if (preprocessing_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Preprocessing);
      }
      if (estimator_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Estimator);
      }
      if (dnn_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dnn);
      }
      if (ensemble_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Ensemble);
      }
      if (training_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Training);
      }
      if (HasTested) {
        output.WriteRawTag(96);
        output.WriteBool(Tested);
      }
      if (HasAborted) {
        output.WriteRawTag(104);
        output.WriteBool(Aborted);
      }
      if (HasPublished) {
        output.WriteRawTag(112);
        output.WriteBool(Published);
      }
      if (HasPushed) {
        output.WriteRawTag(120);
        output.WriteBool(Pushed);
      }
      if (HasReported) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Reported);
      }
      if (HasPaused) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Paused);
      }
      if (HasProfiled) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Profiled);
      }
      if (HasArchived) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Archived);
      }
      if (HasForecasted) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Forecasted);
      }
      if (location_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Location);
      }
      if (forecastingSpec_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(ForecastingSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOwner) {
        output.WriteRawTag(10);
        output.WriteString(Owner);
      }
      if (HasVersionName) {
        output.WriteRawTag(18);
        output.WriteString(VersionName);
      }
      if (HasStudyName) {
        output.WriteRawTag(26);
        output.WriteString(StudyName);
      }
      if (HasDatasetName) {
        output.WriteRawTag(34);
        output.WriteString(DatasetName);
      }
      if (HasTask) {
        output.WriteRawTag(42);
        output.WriteString(Task);
      }
      if (HasObjective) {
        output.WriteRawTag(50);
        output.WriteString(Objective);
      }
      if (preprocessing_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Preprocessing);
      }
      if (estimator_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Estimator);
      }
      if (dnn_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dnn);
      }
      if (ensemble_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Ensemble);
      }
      if (training_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Training);
      }
      if (HasTested) {
        output.WriteRawTag(96);
        output.WriteBool(Tested);
      }
      if (HasAborted) {
        output.WriteRawTag(104);
        output.WriteBool(Aborted);
      }
      if (HasPublished) {
        output.WriteRawTag(112);
        output.WriteBool(Published);
      }
      if (HasPushed) {
        output.WriteRawTag(120);
        output.WriteBool(Pushed);
      }
      if (HasReported) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Reported);
      }
      if (HasPaused) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Paused);
      }
      if (HasProfiled) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Profiled);
      }
      if (HasArchived) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Archived);
      }
      if (HasForecasted) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Forecasted);
      }
      if (location_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Location);
      }
      if (forecastingSpec_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(ForecastingSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOwner) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (HasVersionName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionName);
      }
      if (HasStudyName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StudyName);
      }
      if (HasDatasetName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetName);
      }
      if (HasTask) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Task);
      }
      if (HasObjective) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Objective);
      }
      if (preprocessing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Preprocessing);
      }
      if (estimator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Estimator);
      }
      if (dnn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dnn);
      }
      if (ensemble_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ensemble);
      }
      if (training_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Training);
      }
      if (HasTested) {
        size += 1 + 1;
      }
      if (HasAborted) {
        size += 1 + 1;
      }
      if (HasPublished) {
        size += 1 + 1;
      }
      if (HasPushed) {
        size += 1 + 1;
      }
      if (HasReported) {
        size += 2 + 1;
      }
      if (HasPaused) {
        size += 2 + 1;
      }
      if (HasProfiled) {
        size += 2 + 1;
      }
      if (HasArchived) {
        size += 2 + 1;
      }
      if (HasForecasted) {
        size += 2 + 1;
      }
      if (location_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (forecastingSpec_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ForecastingSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasOwner) {
        Owner = other.Owner;
      }
      if (other.HasVersionName) {
        VersionName = other.VersionName;
      }
      if (other.HasStudyName) {
        StudyName = other.StudyName;
      }
      if (other.HasDatasetName) {
        DatasetName = other.DatasetName;
      }
      if (other.HasTask) {
        Task = other.Task;
      }
      if (other.HasObjective) {
        Objective = other.Objective;
      }
      if (other.preprocessing_ != null) {
        if (preprocessing_ == null) {
          Preprocessing = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec();
        }
        Preprocessing.MergeFrom(other.Preprocessing);
      }
      if (other.estimator_ != null) {
        if (estimator_ == null) {
          Estimator = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec();
        }
        Estimator.MergeFrom(other.Estimator);
      }
      if (other.dnn_ != null) {
        if (dnn_ == null) {
          Dnn = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorSpec();
        }
        Dnn.MergeFrom(other.Dnn);
      }
      if (other.ensemble_ != null) {
        if (ensemble_ == null) {
          Ensemble = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.EnsembleSpec();
        }
        Ensemble.MergeFrom(other.Ensemble);
      }
      if (other.training_ != null) {
        if (training_ == null) {
          Training = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec();
        }
        Training.MergeFrom(other.Training);
      }
      if (other.HasTested) {
        Tested = other.Tested;
      }
      if (other.HasAborted) {
        Aborted = other.Aborted;
      }
      if (other.HasPublished) {
        Published = other.Published;
      }
      if (other.HasPushed) {
        Pushed = other.Pushed;
      }
      if (other.HasReported) {
        Reported = other.Reported;
      }
      if (other.HasPaused) {
        Paused = other.Paused;
      }
      if (other.HasProfiled) {
        Profiled = other.Profiled;
      }
      if (other.HasArchived) {
        Archived = other.Archived;
      }
      if (other.HasForecasted) {
        Forecasted = other.Forecasted;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.forecastingSpec_ != null) {
        if (forecastingSpec_ == null) {
          ForecastingSpec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec();
        }
        ForecastingSpec.MergeFrom(other.ForecastingSpec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Owner = input.ReadString();
            break;
          }
          case 18: {
            VersionName = input.ReadString();
            break;
          }
          case 26: {
            StudyName = input.ReadString();
            break;
          }
          case 34: {
            DatasetName = input.ReadString();
            break;
          }
          case 42: {
            Task = input.ReadString();
            break;
          }
          case 50: {
            Objective = input.ReadString();
            break;
          }
          case 58: {
            if (preprocessing_ == null) {
              Preprocessing = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec();
            }
            input.ReadMessage(Preprocessing);
            break;
          }
          case 66: {
            if (estimator_ == null) {
              Estimator = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec();
            }
            input.ReadMessage(Estimator);
            break;
          }
          case 74: {
            if (dnn_ == null) {
              Dnn = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorSpec();
            }
            input.ReadMessage(Dnn);
            break;
          }
          case 82: {
            if (ensemble_ == null) {
              Ensemble = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.EnsembleSpec();
            }
            input.ReadMessage(Ensemble);
            break;
          }
          case 90: {
            if (training_ == null) {
              Training = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec();
            }
            input.ReadMessage(Training);
            break;
          }
          case 96: {
            Tested = input.ReadBool();
            break;
          }
          case 104: {
            Aborted = input.ReadBool();
            break;
          }
          case 112: {
            Published = input.ReadBool();
            break;
          }
          case 120: {
            Pushed = input.ReadBool();
            break;
          }
          case 128: {
            Reported = input.ReadBool();
            break;
          }
          case 136: {
            Paused = input.ReadBool();
            break;
          }
          case 144: {
            Profiled = input.ReadBool();
            break;
          }
          case 152: {
            Archived = input.ReadBool();
            break;
          }
          case 160: {
            Forecasted = input.ReadBool();
            break;
          }
          case 170: {
            if (location_ == null) {
              Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
            }
            input.ReadMessage(Location);
            break;
          }
          case 178: {
            if (forecastingSpec_ == null) {
              ForecastingSpec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec();
            }
            input.ReadMessage(ForecastingSpec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Owner = input.ReadString();
            break;
          }
          case 18: {
            VersionName = input.ReadString();
            break;
          }
          case 26: {
            StudyName = input.ReadString();
            break;
          }
          case 34: {
            DatasetName = input.ReadString();
            break;
          }
          case 42: {
            Task = input.ReadString();
            break;
          }
          case 50: {
            Objective = input.ReadString();
            break;
          }
          case 58: {
            if (preprocessing_ == null) {
              Preprocessing = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec();
            }
            input.ReadMessage(Preprocessing);
            break;
          }
          case 66: {
            if (estimator_ == null) {
              Estimator = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ClassicalEstimatorSpec();
            }
            input.ReadMessage(Estimator);
            break;
          }
          case 74: {
            if (dnn_ == null) {
              Dnn = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DeepEstimatorSpec();
            }
            input.ReadMessage(Dnn);
            break;
          }
          case 82: {
            if (ensemble_ == null) {
              Ensemble = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.EnsembleSpec();
            }
            input.ReadMessage(Ensemble);
            break;
          }
          case 90: {
            if (training_ == null) {
              Training = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec();
            }
            input.ReadMessage(Training);
            break;
          }
          case 96: {
            Tested = input.ReadBool();
            break;
          }
          case 104: {
            Aborted = input.ReadBool();
            break;
          }
          case 112: {
            Published = input.ReadBool();
            break;
          }
          case 120: {
            Pushed = input.ReadBool();
            break;
          }
          case 128: {
            Reported = input.ReadBool();
            break;
          }
          case 136: {
            Paused = input.ReadBool();
            break;
          }
          case 144: {
            Profiled = input.ReadBool();
            break;
          }
          case 152: {
            Archived = input.ReadBool();
            break;
          }
          case 160: {
            Forecasted = input.ReadBool();
            break;
          }
          case 170: {
            if (location_ == null) {
              Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
            }
            input.ReadMessage(Location);
            break;
          }
          case 178: {
            if (forecastingSpec_ == null) {
              ForecastingSpec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec();
            }
            input.ReadMessage(ForecastingSpec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ModelStatus defines the observed state of the Model
  /// </summary>
  public sealed partial class ModelStatus : pb::IMessage<ModelStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelStatus> _parser = new pb::MessageParser<ModelStatus>(() => new ModelStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelStatus(ModelStatus other) : this() {
      _hasBits0 = other._hasBits0;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      trainStartTime_ = other.trainStartTime_ != null ? other.trainStartTime_.Clone() : null;
      trainCompletionTime_ = other.trainCompletionTime_ != null ? other.trainCompletionTime_.Clone() : null;
      testStartTime_ = other.testStartTime_ != null ? other.testStartTime_.Clone() : null;
      testCompletionTime_ = other.testCompletionTime_ != null ? other.testCompletionTime_.Clone() : null;
      completionTime_ = other.completionTime_ != null ? other.completionTime_.Clone() : null;
      cvScore_ = other.cvScore_;
      trainScore_ = other.trainScore_;
      testScore_ = other.testScore_;
      cost_ = other.cost_;
      best_ = other.best_;
      trainResult_ = other.trainResult_.Clone();
      testResult_ = other.testResult_.Clone();
      phase_ = other.phase_;
      reportName_ = other.reportName_;
      manifestUri_ = other.manifestUri_;
      weightsUri_ = other.weightsUri_;
      labelsEncoderUri_ = other.labelsEncoderUri_;
      logsUri_ = other.logsUri_;
      profileUri_ = other.profileUri_;
      misclassUri_ = other.misclassUri_;
      imageName_ = other.imageName_;
      forecastUri_ = other.forecastUri_;
      conditions_ = other.conditions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelStatus Clone() {
      return new ModelStatus(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time startTime_;
    /// <summary>
    /// StartTime represents time when the model is first handled by the model controller
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "trainStartTime" field.</summary>
    public const int TrainStartTimeFieldNumber = 2;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time trainStartTime_;
    /// <summary>
    /// TrainStartTime represents time when the model started training.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time TrainStartTime {
      get { return trainStartTime_; }
      set {
        trainStartTime_ = value;
      }
    }

    /// <summary>Field number for the "trainCompletionTime" field.</summary>
    public const int TrainCompletionTimeFieldNumber = 3;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time trainCompletionTime_;
    /// <summary>
    /// TrainCompletionTime represents time when the model ended training
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time TrainCompletionTime {
      get { return trainCompletionTime_; }
      set {
        trainCompletionTime_ = value;
      }
    }

    /// <summary>Field number for the "testStartTime" field.</summary>
    public const int TestStartTimeFieldNumber = 4;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time testStartTime_;
    /// <summary>
    /// TestStartTime represents time when the model started test on a trainer
    /// It is not guaranteed to be set in happens-before order across separate operations.
    /// It is represented in RFC3339 form and is in UTC.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time TestStartTime {
      get { return testStartTime_; }
      set {
        testStartTime_ = value;
      }
    }

    /// <summary>Field number for the "testCompletionTime" field.</summary>
    public const int TestCompletionTimeFieldNumber = 5;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time testCompletionTime_;
    /// <summary>
    /// TestCompletionTime represents time when the model ended testing
    /// be set in happens-before order across separate operations.
    /// It is represented in RFC3339 form and is in UTC.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time TestCompletionTime {
      get { return testCompletionTime_; }
      set {
        testCompletionTime_ = value;
      }
    }

    /// <summary>Field number for the "completionTime" field.</summary>
    public const int CompletionTimeFieldNumber = 6;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time completionTime_;
    /// <summary>
    /// CompletionTime represent the time that the model is marked as ready
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time CompletionTime {
      get { return completionTime_; }
      set {
        completionTime_ = value;
      }
    }

    /// <summary>Field number for the "cvScore" field.</summary>
    public const int CvScoreFieldNumber = 7;
    private readonly static double CvScoreDefaultValue = 0D;

    private double cvScore_;
    /// <summary>
    /// CVScrore is the score using on the training set.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CvScore {
      get { if ((_hasBits0 & 1) != 0) { return cvScore_; } else { return CvScoreDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cvScore_ = value;
      }
    }
    /// <summary>Gets whether the "cvScore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCvScore {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cvScore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCvScore() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "trainScore" field.</summary>
    public const int TrainScoreFieldNumber = 8;
    private readonly static double TrainScoreDefaultValue = 0D;

    private double trainScore_;
    /// <summary>
    /// TrainScore is the score on the full training set, Evaluating on the training set
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TrainScore {
      get { if ((_hasBits0 & 2) != 0) { return trainScore_; } else { return TrainScoreDefaultValue; } }
      set {
        _hasBits0 |= 2;
        trainScore_ = value;
      }
    }
    /// <summary>Gets whether the "trainScore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrainScore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "trainScore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrainScore() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "testScore" field.</summary>
    public const int TestScoreFieldNumber = 9;
    private readonly static double TestScoreDefaultValue = 0D;

    private double testScore_;
    /// <summary>
    /// TestScore is the score
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TestScore {
      get { if ((_hasBits0 & 4) != 0) { return testScore_; } else { return TestScoreDefaultValue; } }
      set {
        _hasBits0 |= 4;
        testScore_ = value;
      }
    }
    /// <summary>Gets whether the "testScore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTestScore {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "testScore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTestScore() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 10;
    private readonly static double CostDefaultValue = 0D;

    private double cost_;
    /// <summary>
    /// Cost is the cost of training the model
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cost {
      get { if ((_hasBits0 & 8) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCost {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCost() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "best" field.</summary>
    public const int BestFieldNumber = 11;
    private readonly static bool BestDefaultValue = false;

    private bool best_;
    /// <summary>
    /// Best is true if this is the best model
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Best {
      get { if ((_hasBits0 & 16) != 0) { return best_; } else { return BestDefaultValue; } }
      set {
        _hasBits0 |= 16;
        best_ = value;
      }
    }
    /// <summary>Gets whether the "best" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBest {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "best" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBest() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "trainResult" field.</summary>
    public const int TrainResultFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement> _repeated_trainResult_codec
        = pb::FieldCodec.ForMessage(98, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement> trainResult_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement>();
    /// <summary>
    /// TrainResult is the results of training the model (pipeline) on the full training set, and test it on the training set
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement> TrainResult {
      get { return trainResult_; }
    }

    /// <summary>Field number for the "testResult" field.</summary>
    public const int TestResultFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement> _repeated_testResult_codec
        = pb::FieldCodec.ForMessage(106, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement> testResult_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement>();
    /// <summary>
    /// TestResult is the results of training the model (pipeline) on the full training set, and test it on the test set
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Measurement> TestResult {
      get { return testResult_; }
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 14;
    private readonly static string PhaseDefaultValue = "";

    private string phase_;
    /// <summary>
    /// Phase is the phase of the model
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phase {
      get { return phase_ ?? PhaseDefaultValue; }
      set {
        phase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "phase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhase {
      get { return phase_ != null; }
    }
    /// <summary>Clears the value of the "phase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhase() {
      phase_ = null;
    }

    /// <summary>Field number for the "reportName" field.</summary>
    public const int ReportNameFieldNumber = 15;
    private readonly static string ReportNameDefaultValue = "";

    private string reportName_;
    /// <summary>
    /// ReportName is a reference to the model report
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReportName {
      get { return reportName_ ?? ReportNameDefaultValue; }
      set {
        reportName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reportName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReportName {
      get { return reportName_ != null; }
    }
    /// <summary>Clears the value of the "reportName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReportName() {
      reportName_ = null;
    }

    /// <summary>Field number for the "manifestUri" field.</summary>
    public const int ManifestUriFieldNumber = 16;
    private readonly static string ManifestUriDefaultValue = "";

    private string manifestUri_;
    /// <summary>
    /// ManifestUri is the URI of the manifest in the product bucket.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ManifestUri {
      get { return manifestUri_ ?? ManifestUriDefaultValue; }
      set {
        manifestUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "manifestUri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasManifestUri {
      get { return manifestUri_ != null; }
    }
    /// <summary>Clears the value of the "manifestUri" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearManifestUri() {
      manifestUri_ = null;
    }

    /// <summary>Field number for the "weightsUri" field.</summary>
    public const int WeightsUriFieldNumber = 17;
    private readonly static string WeightsUriDefaultValue = "";

    private string weightsUri_;
    /// <summary>
    /// WeightsUri is the URI of the model binary file.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeightsUri {
      get { return weightsUri_ ?? WeightsUriDefaultValue; }
      set {
        weightsUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "weightsUri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWeightsUri {
      get { return weightsUri_ != null; }
    }
    /// <summary>Clears the value of the "weightsUri" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWeightsUri() {
      weightsUri_ = null;
    }

    /// <summary>Field number for the "labelsEncoderUri" field.</summary>
    public const int LabelsEncoderUriFieldNumber = 18;
    private readonly static string LabelsEncoderUriDefaultValue = "";

    private string labelsEncoderUri_;
    /// <summary>
    /// LabelEncoderUri is the URI of the label encoder binary file, if there is one.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabelsEncoderUri {
      get { return labelsEncoderUri_ ?? LabelsEncoderUriDefaultValue; }
      set {
        labelsEncoderUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "labelsEncoderUri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLabelsEncoderUri {
      get { return labelsEncoderUri_ != null; }
    }
    /// <summary>Clears the value of the "labelsEncoderUri" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLabelsEncoderUri() {
      labelsEncoderUri_ = null;
    }

    /// <summary>Field number for the "logsUri" field.</summary>
    public const int LogsUriFieldNumber = 19;
    private readonly static string LogsUriDefaultValue = "";

    private string logsUri_;
    /// <summary>
    /// LogsUri is the URI of the log file
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogsUri {
      get { return logsUri_ ?? LogsUriDefaultValue; }
      set {
        logsUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "logsUri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLogsUri {
      get { return logsUri_ != null; }
    }
    /// <summary>Clears the value of the "logsUri" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLogsUri() {
      logsUri_ = null;
    }

    /// <summary>Field number for the "profileUri" field.</summary>
    public const int ProfileUriFieldNumber = 20;
    private readonly static string ProfileUriDefaultValue = "";

    private string profileUri_;
    /// <summary>
    /// ProfileUri is a reference to the visualization uri which were produce during processing
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfileUri {
      get { return profileUri_ ?? ProfileUriDefaultValue; }
      set {
        profileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "profileUri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProfileUri {
      get { return profileUri_ != null; }
    }
    /// <summary>Clears the value of the "profileUri" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProfileUri() {
      profileUri_ = null;
    }

    /// <summary>Field number for the "misclassUri" field.</summary>
    public const int MisclassUriFieldNumber = 21;
    private readonly static string MisclassUriDefaultValue = "";

    private string misclassUri_;
    /// <summary>
    /// MisclassUri is a reference to the mis-classification file which were produce during processing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MisclassUri {
      get { return misclassUri_ ?? MisclassUriDefaultValue; }
      set {
        misclassUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "misclassUri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMisclassUri {
      get { return misclassUri_ != null; }
    }
    /// <summary>Clears the value of the "misclassUri" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMisclassUri() {
      misclassUri_ = null;
    }

    /// <summary>Field number for the "imageName" field.</summary>
    public const int ImageNameFieldNumber = 22;
    private readonly static string ImageNameDefaultValue = "";

    private string imageName_;
    /// <summary>
    /// ImageName is the image name of the model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_ ?? ImageNameDefaultValue; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "imageName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImageName {
      get { return imageName_ != null; }
    }
    /// <summary>Clears the value of the "imageName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageName() {
      imageName_ = null;
    }

    /// <summary>Field number for the "forecastUri" field.</summary>
    public const int ForecastUriFieldNumber = 23;
    private readonly static string ForecastUriDefaultValue = "";

    private string forecastUri_;
    /// <summary>
    /// ForecastUri is the uri of the forecast
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ForecastUri {
      get { return forecastUri_ ?? ForecastUriDefaultValue; }
      set {
        forecastUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "forecastUri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasForecastUri {
      get { return forecastUri_ != null; }
    }
    /// <summary>Clears the value of the "forecastUri" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearForecastUri() {
      forecastUri_ = null;
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 24;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(194, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelCondition.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelCondition> conditions_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelCondition>();
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// +patchMergeKey=type
    /// +patchStrategy=merge
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelCondition> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(TrainStartTime, other.TrainStartTime)) return false;
      if (!object.Equals(TrainCompletionTime, other.TrainCompletionTime)) return false;
      if (!object.Equals(TestStartTime, other.TestStartTime)) return false;
      if (!object.Equals(TestCompletionTime, other.TestCompletionTime)) return false;
      if (!object.Equals(CompletionTime, other.CompletionTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CvScore, other.CvScore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TrainScore, other.TrainScore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TestScore, other.TestScore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Cost, other.Cost)) return false;
      if (Best != other.Best) return false;
      if(!trainResult_.Equals(other.trainResult_)) return false;
      if(!testResult_.Equals(other.testResult_)) return false;
      if (Phase != other.Phase) return false;
      if (ReportName != other.ReportName) return false;
      if (ManifestUri != other.ManifestUri) return false;
      if (WeightsUri != other.WeightsUri) return false;
      if (LabelsEncoderUri != other.LabelsEncoderUri) return false;
      if (LogsUri != other.LogsUri) return false;
      if (ProfileUri != other.ProfileUri) return false;
      if (MisclassUri != other.MisclassUri) return false;
      if (ImageName != other.ImageName) return false;
      if (ForecastUri != other.ForecastUri) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (trainStartTime_ != null) hash ^= TrainStartTime.GetHashCode();
      if (trainCompletionTime_ != null) hash ^= TrainCompletionTime.GetHashCode();
      if (testStartTime_ != null) hash ^= TestStartTime.GetHashCode();
      if (testCompletionTime_ != null) hash ^= TestCompletionTime.GetHashCode();
      if (completionTime_ != null) hash ^= CompletionTime.GetHashCode();
      if (HasCvScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CvScore);
      if (HasTrainScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TrainScore);
      if (HasTestScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TestScore);
      if (HasCost) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Cost);
      if (HasBest) hash ^= Best.GetHashCode();
      hash ^= trainResult_.GetHashCode();
      hash ^= testResult_.GetHashCode();
      if (HasPhase) hash ^= Phase.GetHashCode();
      if (HasReportName) hash ^= ReportName.GetHashCode();
      if (HasManifestUri) hash ^= ManifestUri.GetHashCode();
      if (HasWeightsUri) hash ^= WeightsUri.GetHashCode();
      if (HasLabelsEncoderUri) hash ^= LabelsEncoderUri.GetHashCode();
      if (HasLogsUri) hash ^= LogsUri.GetHashCode();
      if (HasProfileUri) hash ^= ProfileUri.GetHashCode();
      if (HasMisclassUri) hash ^= MisclassUri.GetHashCode();
      if (HasImageName) hash ^= ImageName.GetHashCode();
      if (HasForecastUri) hash ^= ForecastUri.GetHashCode();
      hash ^= conditions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (trainStartTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TrainStartTime);
      }
      if (trainCompletionTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TrainCompletionTime);
      }
      if (testStartTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TestStartTime);
      }
      if (testCompletionTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TestCompletionTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CompletionTime);
      }
      if (HasCvScore) {
        output.WriteRawTag(57);
        output.WriteDouble(CvScore);
      }
      if (HasTrainScore) {
        output.WriteRawTag(65);
        output.WriteDouble(TrainScore);
      }
      if (HasTestScore) {
        output.WriteRawTag(73);
        output.WriteDouble(TestScore);
      }
      if (HasCost) {
        output.WriteRawTag(81);
        output.WriteDouble(Cost);
      }
      if (HasBest) {
        output.WriteRawTag(88);
        output.WriteBool(Best);
      }
      trainResult_.WriteTo(output, _repeated_trainResult_codec);
      testResult_.WriteTo(output, _repeated_testResult_codec);
      if (HasPhase) {
        output.WriteRawTag(114);
        output.WriteString(Phase);
      }
      if (HasReportName) {
        output.WriteRawTag(122);
        output.WriteString(ReportName);
      }
      if (HasManifestUri) {
        output.WriteRawTag(130, 1);
        output.WriteString(ManifestUri);
      }
      if (HasWeightsUri) {
        output.WriteRawTag(138, 1);
        output.WriteString(WeightsUri);
      }
      if (HasLabelsEncoderUri) {
        output.WriteRawTag(146, 1);
        output.WriteString(LabelsEncoderUri);
      }
      if (HasLogsUri) {
        output.WriteRawTag(154, 1);
        output.WriteString(LogsUri);
      }
      if (HasProfileUri) {
        output.WriteRawTag(162, 1);
        output.WriteString(ProfileUri);
      }
      if (HasMisclassUri) {
        output.WriteRawTag(170, 1);
        output.WriteString(MisclassUri);
      }
      if (HasImageName) {
        output.WriteRawTag(178, 1);
        output.WriteString(ImageName);
      }
      if (HasForecastUri) {
        output.WriteRawTag(186, 1);
        output.WriteString(ForecastUri);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (trainStartTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TrainStartTime);
      }
      if (trainCompletionTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TrainCompletionTime);
      }
      if (testStartTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TestStartTime);
      }
      if (testCompletionTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TestCompletionTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CompletionTime);
      }
      if (HasCvScore) {
        output.WriteRawTag(57);
        output.WriteDouble(CvScore);
      }
      if (HasTrainScore) {
        output.WriteRawTag(65);
        output.WriteDouble(TrainScore);
      }
      if (HasTestScore) {
        output.WriteRawTag(73);
        output.WriteDouble(TestScore);
      }
      if (HasCost) {
        output.WriteRawTag(81);
        output.WriteDouble(Cost);
      }
      if (HasBest) {
        output.WriteRawTag(88);
        output.WriteBool(Best);
      }
      trainResult_.WriteTo(ref output, _repeated_trainResult_codec);
      testResult_.WriteTo(ref output, _repeated_testResult_codec);
      if (HasPhase) {
        output.WriteRawTag(114);
        output.WriteString(Phase);
      }
      if (HasReportName) {
        output.WriteRawTag(122);
        output.WriteString(ReportName);
      }
      if (HasManifestUri) {
        output.WriteRawTag(130, 1);
        output.WriteString(ManifestUri);
      }
      if (HasWeightsUri) {
        output.WriteRawTag(138, 1);
        output.WriteString(WeightsUri);
      }
      if (HasLabelsEncoderUri) {
        output.WriteRawTag(146, 1);
        output.WriteString(LabelsEncoderUri);
      }
      if (HasLogsUri) {
        output.WriteRawTag(154, 1);
        output.WriteString(LogsUri);
      }
      if (HasProfileUri) {
        output.WriteRawTag(162, 1);
        output.WriteString(ProfileUri);
      }
      if (HasMisclassUri) {
        output.WriteRawTag(170, 1);
        output.WriteString(MisclassUri);
      }
      if (HasImageName) {
        output.WriteRawTag(178, 1);
        output.WriteString(ImageName);
      }
      if (HasForecastUri) {
        output.WriteRawTag(186, 1);
        output.WriteString(ForecastUri);
      }
      conditions_.WriteTo(ref output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (trainStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainStartTime);
      }
      if (trainCompletionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainCompletionTime);
      }
      if (testStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestStartTime);
      }
      if (testCompletionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestCompletionTime);
      }
      if (completionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompletionTime);
      }
      if (HasCvScore) {
        size += 1 + 8;
      }
      if (HasTrainScore) {
        size += 1 + 8;
      }
      if (HasTestScore) {
        size += 1 + 8;
      }
      if (HasCost) {
        size += 1 + 8;
      }
      if (HasBest) {
        size += 1 + 1;
      }
      size += trainResult_.CalculateSize(_repeated_trainResult_codec);
      size += testResult_.CalculateSize(_repeated_testResult_codec);
      if (HasPhase) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phase);
      }
      if (HasReportName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportName);
      }
      if (HasManifestUri) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ManifestUri);
      }
      if (HasWeightsUri) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeightsUri);
      }
      if (HasLabelsEncoderUri) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LabelsEncoderUri);
      }
      if (HasLogsUri) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LogsUri);
      }
      if (HasProfileUri) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProfileUri);
      }
      if (HasMisclassUri) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MisclassUri);
      }
      if (HasImageName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      if (HasForecastUri) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ForecastUri);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelStatus other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.trainStartTime_ != null) {
        if (trainStartTime_ == null) {
          TrainStartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        TrainStartTime.MergeFrom(other.TrainStartTime);
      }
      if (other.trainCompletionTime_ != null) {
        if (trainCompletionTime_ == null) {
          TrainCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        TrainCompletionTime.MergeFrom(other.TrainCompletionTime);
      }
      if (other.testStartTime_ != null) {
        if (testStartTime_ == null) {
          TestStartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        TestStartTime.MergeFrom(other.TestStartTime);
      }
      if (other.testCompletionTime_ != null) {
        if (testCompletionTime_ == null) {
          TestCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        TestCompletionTime.MergeFrom(other.TestCompletionTime);
      }
      if (other.completionTime_ != null) {
        if (completionTime_ == null) {
          CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        CompletionTime.MergeFrom(other.CompletionTime);
      }
      if (other.HasCvScore) {
        CvScore = other.CvScore;
      }
      if (other.HasTrainScore) {
        TrainScore = other.TrainScore;
      }
      if (other.HasTestScore) {
        TestScore = other.TestScore;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      if (other.HasBest) {
        Best = other.Best;
      }
      trainResult_.Add(other.trainResult_);
      testResult_.Add(other.testResult_);
      if (other.HasPhase) {
        Phase = other.Phase;
      }
      if (other.HasReportName) {
        ReportName = other.ReportName;
      }
      if (other.HasManifestUri) {
        ManifestUri = other.ManifestUri;
      }
      if (other.HasWeightsUri) {
        WeightsUri = other.WeightsUri;
      }
      if (other.HasLabelsEncoderUri) {
        LabelsEncoderUri = other.LabelsEncoderUri;
      }
      if (other.HasLogsUri) {
        LogsUri = other.LogsUri;
      }
      if (other.HasProfileUri) {
        ProfileUri = other.ProfileUri;
      }
      if (other.HasMisclassUri) {
        MisclassUri = other.MisclassUri;
      }
      if (other.HasImageName) {
        ImageName = other.ImageName;
      }
      if (other.HasForecastUri) {
        ForecastUri = other.ForecastUri;
      }
      conditions_.Add(other.conditions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (trainStartTime_ == null) {
              TrainStartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TrainStartTime);
            break;
          }
          case 26: {
            if (trainCompletionTime_ == null) {
              TrainCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TrainCompletionTime);
            break;
          }
          case 34: {
            if (testStartTime_ == null) {
              TestStartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TestStartTime);
            break;
          }
          case 42: {
            if (testCompletionTime_ == null) {
              TestCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TestCompletionTime);
            break;
          }
          case 50: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 57: {
            CvScore = input.ReadDouble();
            break;
          }
          case 65: {
            TrainScore = input.ReadDouble();
            break;
          }
          case 73: {
            TestScore = input.ReadDouble();
            break;
          }
          case 81: {
            Cost = input.ReadDouble();
            break;
          }
          case 88: {
            Best = input.ReadBool();
            break;
          }
          case 98: {
            trainResult_.AddEntriesFrom(input, _repeated_trainResult_codec);
            break;
          }
          case 106: {
            testResult_.AddEntriesFrom(input, _repeated_testResult_codec);
            break;
          }
          case 114: {
            Phase = input.ReadString();
            break;
          }
          case 122: {
            ReportName = input.ReadString();
            break;
          }
          case 130: {
            ManifestUri = input.ReadString();
            break;
          }
          case 138: {
            WeightsUri = input.ReadString();
            break;
          }
          case 146: {
            LabelsEncoderUri = input.ReadString();
            break;
          }
          case 154: {
            LogsUri = input.ReadString();
            break;
          }
          case 162: {
            ProfileUri = input.ReadString();
            break;
          }
          case 170: {
            MisclassUri = input.ReadString();
            break;
          }
          case 178: {
            ImageName = input.ReadString();
            break;
          }
          case 186: {
            ForecastUri = input.ReadString();
            break;
          }
          case 194: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (trainStartTime_ == null) {
              TrainStartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TrainStartTime);
            break;
          }
          case 26: {
            if (trainCompletionTime_ == null) {
              TrainCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TrainCompletionTime);
            break;
          }
          case 34: {
            if (testStartTime_ == null) {
              TestStartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TestStartTime);
            break;
          }
          case 42: {
            if (testCompletionTime_ == null) {
              TestCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TestCompletionTime);
            break;
          }
          case 50: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 57: {
            CvScore = input.ReadDouble();
            break;
          }
          case 65: {
            TrainScore = input.ReadDouble();
            break;
          }
          case 73: {
            TestScore = input.ReadDouble();
            break;
          }
          case 81: {
            Cost = input.ReadDouble();
            break;
          }
          case 88: {
            Best = input.ReadBool();
            break;
          }
          case 98: {
            trainResult_.AddEntriesFrom(ref input, _repeated_trainResult_codec);
            break;
          }
          case 106: {
            testResult_.AddEntriesFrom(ref input, _repeated_testResult_codec);
            break;
          }
          case 114: {
            Phase = input.ReadString();
            break;
          }
          case 122: {
            ReportName = input.ReadString();
            break;
          }
          case 130: {
            ManifestUri = input.ReadString();
            break;
          }
          case 138: {
            WeightsUri = input.ReadString();
            break;
          }
          case 146: {
            LabelsEncoderUri = input.ReadString();
            break;
          }
          case 154: {
            LogsUri = input.ReadString();
            break;
          }
          case 162: {
            ProfileUri = input.ReadString();
            break;
          }
          case 170: {
            MisclassUri = input.ReadString();
            break;
          }
          case 178: {
            ImageName = input.ReadString();
            break;
          }
          case 186: {
            ForecastUri = input.ReadString();
            break;
          }
          case 194: {
            conditions_.AddEntriesFrom(ref input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NNLayerParameter : pb::IMessage<NNLayerParameter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NNLayerParameter> _parser = new pb::MessageParser<NNLayerParameter>(() => new NNLayerParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NNLayerParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNLayerParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNLayerParameter(NNLayerParameter other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNLayerParameter Clone() {
      return new NNLayerParameter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NNLayerParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NNLayerParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NNLayerParameter other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
  /// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
  /// +kubebuilder:subresource:status
  /// +kubebuilder:resource:path=notebooks,singular=notebook,shortName=nb,categories={training,modela,all}
  /// Notebook represent a notebook object which specify a single notebook execution
  /// </summary>
  public sealed partial class Notebook : pb::IMessage<Notebook>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Notebook> _parser = new pb::MessageParser<Notebook>(() => new Notebook());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notebook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notebook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notebook(Notebook other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      spec_ = other.spec_ != null ? other.spec_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notebook Clone() {
      return new Notebook(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 2;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notebook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notebook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Spec, other.Spec)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (spec_ != null) hash ^= Spec.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notebook other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.spec_ != null) {
        if (spec_ == null) {
          Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookSpec();
        }
        Spec.MergeFrom(other.Spec);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// NotebookCondition describes the state of a notebook at a certain point.
  /// </summary>
  public sealed partial class NotebookCondition : pb::IMessage<NotebookCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotebookCondition> _parser = new pb::MessageParser<NotebookCondition>(() => new NotebookCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotebookCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookCondition(NotebookCondition other) : this() {
      type_ = other.type_;
      status_ = other.status_;
      lastTransitionTime_ = other.lastTransitionTime_ != null ? other.lastTransitionTime_.Clone() : null;
      reason_ = other.reason_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookCondition Clone() {
      return new NotebookCondition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// Type of account condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private readonly static string StatusDefaultValue = "";

    private string status_;
    /// <summary>
    /// Status of the condition, one of True, False, Unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_ ?? StatusDefaultValue; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return status_ != null; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      status_ = null;
    }

    /// <summary>Field number for the "lastTransitionTime" field.</summary>
    public const int LastTransitionTimeFieldNumber = 4;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time lastTransitionTime_;
    /// <summary>
    /// Last time the condition transitioned from one status to another.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time LastTransitionTime {
      get { return lastTransitionTime_; }
      set {
        lastTransitionTime_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    /// <summary>
    /// The reason for the condition's last transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    /// <summary>
    /// A human readable message indicating details about the transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotebookCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotebookCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LastTransitionTime, other.LastTransitionTime)) return false;
      if (Reason != other.Reason) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (lastTransitionTime_ != null) hash ^= LastTransitionTime.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (lastTransitionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastTransitionTime);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotebookCondition other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.lastTransitionTime_ != null) {
        if (lastTransitionTime_ == null) {
          LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        LastTransitionTime.MergeFrom(other.LastTransitionTime);
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// NotebookList represent list of notebooks
  /// </summary>
  public sealed partial class NotebookList : pb::IMessage<NotebookList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotebookList> _parser = new pb::MessageParser<NotebookList>(() => new NotebookList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotebookList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookList(NotebookList other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookList Clone() {
      return new NotebookList(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Notebook> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Notebook.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Notebook> items_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Notebook>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Notebook> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotebookList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotebookList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotebookList other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// +kubebuilder:subresource:status
  /// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
  /// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
  /// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
  /// +kubebuilder:resource:path=notebookruns,singular=notebookrun,shortName=nbr,categories={training,modela,all}
  /// NotebookRun represent a single execution of a notebook with a specific env variables
  /// </summary>
  public sealed partial class NotebookRun : pb::IMessage<NotebookRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotebookRun> _parser = new pb::MessageParser<NotebookRun>(() => new NotebookRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotebookRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRun(NotebookRun other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      spec_ = other.spec_ != null ? other.spec_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRun Clone() {
      return new NotebookRun(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 2;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotebookRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotebookRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Spec, other.Spec)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (spec_ != null) hash ^= Spec.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotebookRun other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.spec_ != null) {
        if (spec_ == null) {
          Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunSpec();
        }
        Spec.MergeFrom(other.Spec);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// NotebookRunCondition describes the state of a notebook run.
  /// </summary>
  public sealed partial class NotebookRunCondition : pb::IMessage<NotebookRunCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotebookRunCondition> _parser = new pb::MessageParser<NotebookRunCondition>(() => new NotebookRunCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotebookRunCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunCondition(NotebookRunCondition other) : this() {
      type_ = other.type_;
      status_ = other.status_;
      lastTransitionTime_ = other.lastTransitionTime_ != null ? other.lastTransitionTime_.Clone() : null;
      reason_ = other.reason_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunCondition Clone() {
      return new NotebookRunCondition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// Type of account condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private readonly static string StatusDefaultValue = "";

    private string status_;
    /// <summary>
    /// Status of the condition, one of True, False, Unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_ ?? StatusDefaultValue; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return status_ != null; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      status_ = null;
    }

    /// <summary>Field number for the "lastTransitionTime" field.</summary>
    public const int LastTransitionTimeFieldNumber = 4;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time lastTransitionTime_;
    /// <summary>
    /// Last time the condition transitioned from one status to another.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time LastTransitionTime {
      get { return lastTransitionTime_; }
      set {
        lastTransitionTime_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    /// <summary>
    /// The reason for the condition's last transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    /// <summary>
    /// A human readable message indicating details about the transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotebookRunCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotebookRunCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LastTransitionTime, other.LastTransitionTime)) return false;
      if (Reason != other.Reason) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (lastTransitionTime_ != null) hash ^= LastTransitionTime.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (lastTransitionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastTransitionTime);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotebookRunCondition other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.lastTransitionTime_ != null) {
        if (lastTransitionTime_ == null) {
          LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        LastTransitionTime.MergeFrom(other.LastTransitionTime);
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// NotebookRunList is a list of notebook runs
  /// </summary>
  public sealed partial class NotebookRunList : pb::IMessage<NotebookRunList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotebookRunList> _parser = new pb::MessageParser<NotebookRunList>(() => new NotebookRunList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotebookRunList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunList(NotebookRunList other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunList Clone() {
      return new NotebookRunList(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRun> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRun.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRun> items_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRun>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRun> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotebookRunList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotebookRunList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotebookRunList other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// NotebookRunSpec defines the desired state of the NotebookRun resource
  /// </summary>
  public sealed partial class NotebookRunSpec : pb::IMessage<NotebookRunSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotebookRunSpec> _parser = new pb::MessageParser<NotebookRunSpec>(() => new NotebookRunSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotebookRunSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunSpec(NotebookRunSpec other) : this() {
      versionName_ = other.versionName_;
      notebookName_ = other.notebookName_;
      values_ = other.values_.Clone();
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunSpec Clone() {
      return new NotebookRunSpec(this);
    }

    /// <summary>Field number for the "versionName" field.</summary>
    public const int VersionNameFieldNumber = 1;
    private readonly static string VersionNameDefaultValue = "";

    private string versionName_;
    /// <summary>
    /// VersionName of the data product for this notebook
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionName {
      get { return versionName_ ?? VersionNameDefaultValue; }
      set {
        versionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "versionName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersionName {
      get { return versionName_ != null; }
    }
    /// <summary>Clears the value of the "versionName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionName() {
      versionName_ = null;
    }

    /// <summary>Field number for the "notebookName" field.</summary>
    public const int NotebookNameFieldNumber = 2;
    private readonly static string NotebookNameDefaultValue = "";

    private string notebookName_;
    /// <summary>
    /// NotebookName of the notebook for this run
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NotebookName {
      get { return notebookName_ ?? NotebookNameDefaultValue; }
      set {
        notebookName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "notebookName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNotebookName {
      get { return notebookName_ != null; }
    }
    /// <summary>Clears the value of the "notebookName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNotebookName() {
      notebookName_ = null;
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookVarValue> _repeated_values_codec
        = pb::FieldCodec.ForMessage(26, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookVarValue.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookVarValue> values_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookVarValue>();
    /// <summary>
    /// Values to pass to the notebook during execution
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookVarValue> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private readonly static string OwnerDefaultValue = "";

    private string owner_;
    /// <summary>
    /// Owner account name
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_ ?? OwnerDefaultValue; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwner {
      get { return owner_ != null; }
    }
    /// <summary>Clears the value of the "owner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwner() {
      owner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotebookRunSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotebookRunSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionName != other.VersionName) return false;
      if (NotebookName != other.NotebookName) return false;
      if(!values_.Equals(other.values_)) return false;
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVersionName) hash ^= VersionName.GetHashCode();
      if (HasNotebookName) hash ^= NotebookName.GetHashCode();
      hash ^= values_.GetHashCode();
      if (HasOwner) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (HasNotebookName) {
        output.WriteRawTag(18);
        output.WriteString(NotebookName);
      }
      values_.WriteTo(output, _repeated_values_codec);
      if (HasOwner) {
        output.WriteRawTag(34);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (HasNotebookName) {
        output.WriteRawTag(18);
        output.WriteString(NotebookName);
      }
      values_.WriteTo(ref output, _repeated_values_codec);
      if (HasOwner) {
        output.WriteRawTag(34);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVersionName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionName);
      }
      if (HasNotebookName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NotebookName);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      if (HasOwner) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotebookRunSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasVersionName) {
        VersionName = other.VersionName;
      }
      if (other.HasNotebookName) {
        NotebookName = other.NotebookName;
      }
      values_.Add(other.values_);
      if (other.HasOwner) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            NotebookName = input.ReadString();
            break;
          }
          case 26: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 34: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            NotebookName = input.ReadString();
            break;
          }
          case 26: {
            values_.AddEntriesFrom(ref input, _repeated_values_codec);
            break;
          }
          case 34: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// NotebookRunStatus define that observed state of NotebookRun resource
  /// </summary>
  public sealed partial class NotebookRunStatus : pb::IMessage<NotebookRunStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotebookRunStatus> _parser = new pb::MessageParser<NotebookRunStatus>(() => new NotebookRunStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotebookRunStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunStatus(NotebookRunStatus other) : this() {
      phase_ = other.phase_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      completionTime_ = other.completionTime_ != null ? other.completionTime_.Clone() : null;
      conditions_ = other.conditions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookRunStatus Clone() {
      return new NotebookRunStatus(this);
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private readonly static string PhaseDefaultValue = "";

    private string phase_;
    /// <summary>
    /// The phase of the notebook
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phase {
      get { return phase_ ?? PhaseDefaultValue; }
      set {
        phase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "phase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhase {
      get { return phase_ != null; }
    }
    /// <summary>Clears the value of the "phase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhase() {
      phase_ = null;
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time startTime_;
    /// <summary>
    /// StartTime is the times that this prediction job started
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "completionTime" field.</summary>
    public const int CompletionTimeFieldNumber = 3;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time completionTime_;
    /// <summary>
    /// CompletionTime is the time that this prediction job finished
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time CompletionTime {
      get { return completionTime_; }
      set {
        completionTime_ = value;
      }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(34, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunCondition.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunCondition> conditions_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunCondition>();
    /// <summary>
    /// Represents the latest available observations of a notebook run state.
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookRunCondition> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotebookRunStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotebookRunStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phase != other.Phase) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(CompletionTime, other.CompletionTime)) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPhase) hash ^= Phase.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (completionTime_ != null) hash ^= CompletionTime.GetHashCode();
      hash ^= conditions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPhase) {
        output.WriteRawTag(10);
        output.WriteString(Phase);
      }
      if (startTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CompletionTime);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPhase) {
        output.WriteRawTag(10);
        output.WriteString(Phase);
      }
      if (startTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CompletionTime);
      }
      conditions_.WriteTo(ref output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPhase) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phase);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (completionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompletionTime);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotebookRunStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasPhase) {
        Phase = other.Phase;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.completionTime_ != null) {
        if (completionTime_ == null) {
          CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        CompletionTime.MergeFrom(other.CompletionTime);
      }
      conditions_.Add(other.conditions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Phase = input.ReadString();
            break;
          }
          case 18: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 26: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 34: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Phase = input.ReadString();
            break;
          }
          case 18: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 26: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 34: {
            conditions_.AddEntriesFrom(ref input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// NotebookSpec is the desired state of the notebook resource.
  /// </summary>
  public sealed partial class NotebookSpec : pb::IMessage<NotebookSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotebookSpec> _parser = new pb::MessageParser<NotebookSpec>(() => new NotebookSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotebookSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookSpec(NotebookSpec other) : this() {
      versionName_ = other.versionName_;
      description_ = other.description_;
      schemaRef_ = other.schemaRef_ != null ? other.schemaRef_.Clone() : null;
      imageName_ = other.imageName_;
      requirements_ = other.requirements_;
      debPackages_ = other.debPackages_;
      vars_ = other.vars_.Clone();
      location_ = other.location_ != null ? other.location_.Clone() : null;
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookSpec Clone() {
      return new NotebookSpec(this);
    }

    /// <summary>Field number for the "versionName" field.</summary>
    public const int VersionNameFieldNumber = 1;
    private readonly static string VersionNameDefaultValue = "";

    private string versionName_;
    /// <summary>
    /// The version of the notebook
    /// +kubebuilder:default:="latest"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionName {
      get { return versionName_ ?? VersionNameDefaultValue; }
      set {
        versionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "versionName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersionName {
      get { return versionName_ != null; }
    }
    /// <summary>Clears the value of the "versionName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionName() {
      versionName_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// User provided description
    /// +kubebuilder:default:=""
    /// +kubebuilder:validation:Optional
    /// +kubebuilder:validation:MaxLength=512
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "schemaRef" field.</summary>
    public const int SchemaRefFieldNumber = 3;
    private global::K8S.Io.Api.Core.V1.ObjectReference schemaRef_;
    /// <summary>
    /// SchemaName relate a notebook to a schema.
    /// The schema object will be accessible from the notebook
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Api.Core.V1.ObjectReference SchemaRef {
      get { return schemaRef_; }
      set {
        schemaRef_ = value;
      }
    }

    /// <summary>Field number for the "imageName" field.</summary>
    public const int ImageNameFieldNumber = 4;
    private readonly static string ImageNameDefaultValue = "";

    private string imageName_;
    /// <summary>
    /// A reference to the container image repository for this notebook.
    /// +kubebuilder:default:=""
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_ ?? ImageNameDefaultValue; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "imageName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImageName {
      get { return imageName_ != null; }
    }
    /// <summary>Clears the value of the "imageName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageName() {
      imageName_ = null;
    }

    /// <summary>Field number for the "requirements" field.</summary>
    public const int RequirementsFieldNumber = 5;
    private readonly static string RequirementsDefaultValue = "";

    private string requirements_;
    /// <summary>
    /// Requirements python file
    /// +kubebuilder:default:=""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Requirements {
      get { return requirements_ ?? RequirementsDefaultValue; }
      set {
        requirements_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "requirements" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequirements {
      get { return requirements_ != null; }
    }
    /// <summary>Clears the value of the "requirements" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequirements() {
      requirements_ = null;
    }

    /// <summary>Field number for the "debPackages" field.</summary>
    public const int DebPackagesFieldNumber = 6;
    private readonly static string DebPackagesDefaultValue = "";

    private string debPackages_;
    /// <summary>
    /// DebPackages is a list of deb package to install
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebPackages {
      get { return debPackages_ ?? DebPackagesDefaultValue; }
      set {
        debPackages_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "debPackages" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDebPackages {
      get { return debPackages_ != null; }
    }
    /// <summary>Clears the value of the "debPackages" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDebPackages() {
      debPackages_ = null;
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_vars_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> vars_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// vars to pass to the notebook
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Vars {
      get { return vars_; }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 8;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation location_;
    /// <summary>
    /// Location is the location of the notebook file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 9;
    private readonly static string OwnerDefaultValue = "";

    private string owner_;
    /// <summary>
    /// The owner account name
    /// +kubebuilder:default:="no-one"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_ ?? OwnerDefaultValue; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwner {
      get { return owner_ != null; }
    }
    /// <summary>Clears the value of the "owner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwner() {
      owner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotebookSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotebookSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionName != other.VersionName) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(SchemaRef, other.SchemaRef)) return false;
      if (ImageName != other.ImageName) return false;
      if (Requirements != other.Requirements) return false;
      if (DebPackages != other.DebPackages) return false;
      if(!vars_.Equals(other.vars_)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVersionName) hash ^= VersionName.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (schemaRef_ != null) hash ^= SchemaRef.GetHashCode();
      if (HasImageName) hash ^= ImageName.GetHashCode();
      if (HasRequirements) hash ^= Requirements.GetHashCode();
      if (HasDebPackages) hash ^= DebPackages.GetHashCode();
      hash ^= vars_.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (HasOwner) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (schemaRef_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SchemaRef);
      }
      if (HasImageName) {
        output.WriteRawTag(34);
        output.WriteString(ImageName);
      }
      if (HasRequirements) {
        output.WriteRawTag(42);
        output.WriteString(Requirements);
      }
      if (HasDebPackages) {
        output.WriteRawTag(50);
        output.WriteString(DebPackages);
      }
      vars_.WriteTo(output, _repeated_vars_codec);
      if (location_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Location);
      }
      if (HasOwner) {
        output.WriteRawTag(74);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (schemaRef_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SchemaRef);
      }
      if (HasImageName) {
        output.WriteRawTag(34);
        output.WriteString(ImageName);
      }
      if (HasRequirements) {
        output.WriteRawTag(42);
        output.WriteString(Requirements);
      }
      if (HasDebPackages) {
        output.WriteRawTag(50);
        output.WriteString(DebPackages);
      }
      vars_.WriteTo(ref output, _repeated_vars_codec);
      if (location_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Location);
      }
      if (HasOwner) {
        output.WriteRawTag(74);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVersionName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionName);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (schemaRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemaRef);
      }
      if (HasImageName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      if (HasRequirements) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Requirements);
      }
      if (HasDebPackages) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebPackages);
      }
      size += vars_.CalculateSize(_repeated_vars_codec);
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (HasOwner) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotebookSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasVersionName) {
        VersionName = other.VersionName;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.schemaRef_ != null) {
        if (schemaRef_ == null) {
          SchemaRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
        }
        SchemaRef.MergeFrom(other.SchemaRef);
      }
      if (other.HasImageName) {
        ImageName = other.ImageName;
      }
      if (other.HasRequirements) {
        Requirements = other.Requirements;
      }
      if (other.HasDebPackages) {
        DebPackages = other.DebPackages;
      }
      vars_.Add(other.vars_);
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.HasOwner) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (schemaRef_ == null) {
              SchemaRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
            }
            input.ReadMessage(SchemaRef);
            break;
          }
          case 34: {
            ImageName = input.ReadString();
            break;
          }
          case 42: {
            Requirements = input.ReadString();
            break;
          }
          case 50: {
            DebPackages = input.ReadString();
            break;
          }
          case 58: {
            vars_.AddEntriesFrom(input, _repeated_vars_codec);
            break;
          }
          case 66: {
            if (location_ == null) {
              Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
            }
            input.ReadMessage(Location);
            break;
          }
          case 74: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (schemaRef_ == null) {
              SchemaRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
            }
            input.ReadMessage(SchemaRef);
            break;
          }
          case 34: {
            ImageName = input.ReadString();
            break;
          }
          case 42: {
            Requirements = input.ReadString();
            break;
          }
          case 50: {
            DebPackages = input.ReadString();
            break;
          }
          case 58: {
            vars_.AddEntriesFrom(ref input, _repeated_vars_codec);
            break;
          }
          case 66: {
            if (location_ == null) {
              Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
            }
            input.ReadMessage(Location);
            break;
          }
          case 74: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// NotebookStatus is the observed state of the notebook resource
  /// </summary>
  public sealed partial class NotebookStatus : pb::IMessage<NotebookStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotebookStatus> _parser = new pb::MessageParser<NotebookStatus>(() => new NotebookStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotebookStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookStatus(NotebookStatus other) : this() {
      image_ = other.image_;
      uri_ = other.uri_;
      conditions_ = other.conditions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookStatus Clone() {
      return new NotebookStatus(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private readonly static string ImageDefaultValue = "";

    private string image_;
    /// <summary>
    /// Image is the name of the image after publication
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_ ?? ImageDefaultValue; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "image" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImage {
      get { return image_ != null; }
    }
    /// <summary>Clears the value of the "image" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImage() {
      image_ = null;
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 2;
    private readonly static string UriDefaultValue = "";

    private string uri_;
    /// <summary>
    /// The URI of the notebook in the bucket.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_ ?? UriDefaultValue; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUri {
      get { return uri_ != null; }
    }
    /// <summary>Clears the value of the "uri" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUri() {
      uri_ = null;
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(26, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookCondition.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookCondition> conditions_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookCondition>();
    /// <summary>
    /// Represents the latest available observations of a notebook state.
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NotebookCondition> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotebookStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotebookStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Image != other.Image) return false;
      if (Uri != other.Uri) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasImage) hash ^= Image.GetHashCode();
      if (HasUri) hash ^= Uri.GetHashCode();
      hash ^= conditions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasImage) {
        output.WriteRawTag(10);
        output.WriteString(Image);
      }
      if (HasUri) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasImage) {
        output.WriteRawTag(10);
        output.WriteString(Image);
      }
      if (HasUri) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      conditions_.WriteTo(ref output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasImage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (HasUri) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotebookStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasImage) {
        Image = other.Image;
      }
      if (other.HasUri) {
        Uri = other.Uri;
      }
      conditions_.Add(other.conditions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Image = input.ReadString();
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 26: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Image = input.ReadString();
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 26: {
            conditions_.AddEntriesFrom(ref input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// NotebookVarValue is an assignment of value to the notebook var
  /// </summary>
  public sealed partial class NotebookVarValue : pb::IMessage<NotebookVarValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotebookVarValue> _parser = new pb::MessageParser<NotebookVarValue>(() => new NotebookVarValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotebookVarValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookVarValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookVarValue(NotebookVarValue other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotebookVarValue Clone() {
      return new NotebookVarValue(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotebookVarValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotebookVarValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotebookVarValue other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// NumericPipelineSpec is the specification for preprocessing numerical columns
  /// </summary>
  public sealed partial class NumericPipelineSpec : pb::IMessage<NumericPipelineSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NumericPipelineSpec> _parser = new pb::MessageParser<NumericPipelineSpec>(() => new NumericPipelineSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NumericPipelineSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumericPipelineSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumericPipelineSpec(NumericPipelineSpec other) : this() {
      columns_ = other.columns_.Clone();
      imputer_ = other.imputer_;
      scaler_ = other.scaler_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumericPipelineSpec Clone() {
      return new NumericPipelineSpec(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "imputer" field.</summary>
    public const int ImputerFieldNumber = 2;
    private readonly static string ImputerDefaultValue = "";

    private string imputer_;
    /// <summary>
    /// Numerical var imputer
    /// +kubebuilder:default:=auto
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Imputer {
      get { return imputer_ ?? ImputerDefaultValue; }
      set {
        imputer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "imputer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImputer {
      get { return imputer_ != null; }
    }
    /// <summary>Clears the value of the "imputer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImputer() {
      imputer_ = null;
    }

    /// <summary>Field number for the "scaler" field.</summary>
    public const int ScalerFieldNumber = 3;
    private readonly static string ScalerDefaultValue = "";

    private string scaler_;
    /// <summary>
    /// Numeric var scaler
    /// +kubebuilder:default:=auto
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Scaler {
      get { return scaler_ ?? ScalerDefaultValue; }
      set {
        scaler_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "scaler" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaler {
      get { return scaler_ != null; }
    }
    /// <summary>Clears the value of the "scaler" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaler() {
      scaler_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NumericPipelineSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NumericPipelineSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if (Imputer != other.Imputer) return false;
      if (Scaler != other.Scaler) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      if (HasImputer) hash ^= Imputer.GetHashCode();
      if (HasScaler) hash ^= Scaler.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      columns_.WriteTo(output, _repeated_columns_codec);
      if (HasImputer) {
        output.WriteRawTag(18);
        output.WriteString(Imputer);
      }
      if (HasScaler) {
        output.WriteRawTag(26);
        output.WriteString(Scaler);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (HasImputer) {
        output.WriteRawTag(18);
        output.WriteString(Imputer);
      }
      if (HasScaler) {
        output.WriteRawTag(26);
        output.WriteString(Scaler);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (HasImputer) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imputer);
      }
      if (HasScaler) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Scaler);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NumericPipelineSpec other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      if (other.HasImputer) {
        Imputer = other.Imputer;
      }
      if (other.HasScaler) {
        Scaler = other.Scaler;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Imputer = input.ReadString();
            break;
          }
          case 26: {
            Scaler = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Imputer = input.ReadString();
            break;
          }
          case 26: {
            Scaler = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PipelineTrigger : pb::IMessage<PipelineTrigger>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PipelineTrigger> _parser = new pb::MessageParser<PipelineTrigger>(() => new PipelineTrigger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PipelineTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PipelineTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PipelineTrigger(PipelineTrigger other) : this() {
      schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
      githubEvents_ = other.githubEvents_ != null ? other.githubEvents_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PipelineTrigger Clone() {
      return new PipelineTrigger(this);
    }

    /// <summary>Field number for the "schedule" field.</summary>
    public const int ScheduleFieldNumber = 1;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TriggerSchedule schedule_;
    /// <summary>
    /// Spec for a schedule in case that the trigger
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TriggerSchedule Schedule {
      get { return schedule_; }
      set {
        schedule_ = value;
      }
    }

    /// <summary>Field number for the "githubEvents" field.</summary>
    public const int GithubEventsFieldNumber = 2;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GithubEvents githubEvents_;
    /// <summary>
    /// Definition of git hub events
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GithubEvents GithubEvents {
      get { return githubEvents_; }
      set {
        githubEvents_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PipelineTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PipelineTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Schedule, other.Schedule)) return false;
      if (!object.Equals(GithubEvents, other.GithubEvents)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schedule_ != null) hash ^= Schedule.GetHashCode();
      if (githubEvents_ != null) hash ^= GithubEvents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (schedule_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Schedule);
      }
      if (githubEvents_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GithubEvents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (schedule_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Schedule);
      }
      if (githubEvents_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GithubEvents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schedule_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
      }
      if (githubEvents_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GithubEvents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PipelineTrigger other) {
      if (other == null) {
        return;
      }
      if (other.schedule_ != null) {
        if (schedule_ == null) {
          Schedule = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TriggerSchedule();
        }
        Schedule.MergeFrom(other.Schedule);
      }
      if (other.githubEvents_ != null) {
        if (githubEvents_ == null) {
          GithubEvents = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GithubEvents();
        }
        GithubEvents.MergeFrom(other.GithubEvents);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schedule_ == null) {
              Schedule = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TriggerSchedule();
            }
            input.ReadMessage(Schedule);
            break;
          }
          case 18: {
            if (githubEvents_ == null) {
              GithubEvents = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GithubEvents();
            }
            input.ReadMessage(GithubEvents);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (schedule_ == null) {
              Schedule = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TriggerSchedule();
            }
            input.ReadMessage(Schedule);
            break;
          }
          case 18: {
            if (githubEvents_ == null) {
              GithubEvents = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GithubEvents();
            }
            input.ReadMessage(GithubEvents);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// PreprocessingSpec of the pre processing pipeline
  /// </summary>
  public sealed partial class PreprocessingSpec : pb::IMessage<PreprocessingSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PreprocessingSpec> _parser = new pb::MessageParser<PreprocessingSpec>(() => new PreprocessingSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreprocessingSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreprocessingSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreprocessingSpec(PreprocessingSpec other) : this() {
      _hasBits0 = other._hasBits0;
      categorical_ = other.categorical_ != null ? other.categorical_.Clone() : null;
      numeric_ = other.numeric_ != null ? other.numeric_.Clone() : null;
      text_ = other.text_ != null ? other.text_.Clone() : null;
      image_ = other.image_ != null ? other.image_.Clone() : null;
      audio_ = other.audio_ != null ? other.audio_.Clone() : null;
      video_ = other.video_ != null ? other.video_.Clone() : null;
      datetime_ = other.datetime_ != null ? other.datetime_.Clone() : null;
      featureSelector_ = other.featureSelector_;
      reducer_ = other.reducer_;
      imbalanced_ = other.imbalanced_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreprocessingSpec Clone() {
      return new PreprocessingSpec(this);
    }

    /// <summary>Field number for the "categorical" field.</summary>
    public const int CategoricalFieldNumber = 1;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CategoricalPipelineSpec categorical_;
    /// <summary>
    /// One or more categorical pipelines.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CategoricalPipelineSpec Categorical {
      get { return categorical_; }
      set {
        categorical_ = value;
      }
    }

    /// <summary>Field number for the "numeric" field.</summary>
    public const int NumericFieldNumber = 2;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NumericPipelineSpec numeric_;
    /// <summary>
    /// Numeric specify the column transformation for numeric columns
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NumericPipelineSpec Numeric {
      get { return numeric_; }
      set {
        numeric_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TextPipelineSpec text_;
    /// <summary>
    /// Text specify the column transformation for text columns
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TextPipelineSpec Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 4;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ImagePipelineSpec image_;
    /// <summary>
    /// Image specify the pipeline for images. Not supported in this release
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ImagePipelineSpec Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "audio" field.</summary>
    public const int AudioFieldNumber = 5;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AudioPipelineSpec audio_;
    /// <summary>
    /// Audio specify the pipeline for audio. Not supported in this release
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AudioPipelineSpec Audio {
      get { return audio_; }
      set {
        audio_ = value;
      }
    }

    /// <summary>Field number for the "video" field.</summary>
    public const int VideoFieldNumber = 6;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.VideoPipelineSpec video_;
    /// <summary>
    /// Video specify the pipeline for video. Not supported in this release
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.VideoPipelineSpec Video {
      get { return video_; }
      set {
        video_ = value;
      }
    }

    /// <summary>Field number for the "datetime" field.</summary>
    public const int DatetimeFieldNumber = 7;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DateTimePipelineSpec datetime_;
    /// <summary>
    /// DataTime specify the column transformation for datetime columns
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DateTimePipelineSpec Datetime {
      get { return datetime_; }
      set {
        datetime_ = value;
      }
    }

    /// <summary>Field number for the "featureSelector" field.</summary>
    public const int FeatureSelectorFieldNumber = 8;
    private readonly static string FeatureSelectorDefaultValue = "";

    private string featureSelector_;
    /// <summary>
    /// FeaturePipeline selector
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureSelector {
      get { return featureSelector_ ?? FeatureSelectorDefaultValue; }
      set {
        featureSelector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "featureSelector" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFeatureSelector {
      get { return featureSelector_ != null; }
    }
    /// <summary>Clears the value of the "featureSelector" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFeatureSelector() {
      featureSelector_ = null;
    }

    /// <summary>Field number for the "reducer" field.</summary>
    public const int ReducerFieldNumber = 9;
    private readonly static string ReducerDefaultValue = "";

    private string reducer_;
    /// <summary>
    /// Dim reducer
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reducer {
      get { return reducer_ ?? ReducerDefaultValue; }
      set {
        reducer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reducer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReducer {
      get { return reducer_ != null; }
    }
    /// <summary>Clears the value of the "reducer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReducer() {
      reducer_ = null;
    }

    /// <summary>Field number for the "imbalanced" field.</summary>
    public const int ImbalancedFieldNumber = 10;
    private readonly static bool ImbalancedDefaultValue = false;

    private bool imbalanced_;
    /// <summary>
    /// Imbalance flag instruct the designer to create an imbalanced pipeline. Default is false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Imbalanced {
      get { if ((_hasBits0 & 1) != 0) { return imbalanced_; } else { return ImbalancedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        imbalanced_ = value;
      }
    }
    /// <summary>Gets whether the "imbalanced" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImbalanced {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "imbalanced" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImbalanced() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreprocessingSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreprocessingSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Categorical, other.Categorical)) return false;
      if (!object.Equals(Numeric, other.Numeric)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(Audio, other.Audio)) return false;
      if (!object.Equals(Video, other.Video)) return false;
      if (!object.Equals(Datetime, other.Datetime)) return false;
      if (FeatureSelector != other.FeatureSelector) return false;
      if (Reducer != other.Reducer) return false;
      if (Imbalanced != other.Imbalanced) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (categorical_ != null) hash ^= Categorical.GetHashCode();
      if (numeric_ != null) hash ^= Numeric.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      if (audio_ != null) hash ^= Audio.GetHashCode();
      if (video_ != null) hash ^= Video.GetHashCode();
      if (datetime_ != null) hash ^= Datetime.GetHashCode();
      if (HasFeatureSelector) hash ^= FeatureSelector.GetHashCode();
      if (HasReducer) hash ^= Reducer.GetHashCode();
      if (HasImbalanced) hash ^= Imbalanced.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (categorical_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Categorical);
      }
      if (numeric_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Numeric);
      }
      if (text_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Text);
      }
      if (image_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Image);
      }
      if (audio_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Audio);
      }
      if (video_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Video);
      }
      if (datetime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Datetime);
      }
      if (HasFeatureSelector) {
        output.WriteRawTag(66);
        output.WriteString(FeatureSelector);
      }
      if (HasReducer) {
        output.WriteRawTag(74);
        output.WriteString(Reducer);
      }
      if (HasImbalanced) {
        output.WriteRawTag(80);
        output.WriteBool(Imbalanced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (categorical_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Categorical);
      }
      if (numeric_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Numeric);
      }
      if (text_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Text);
      }
      if (image_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Image);
      }
      if (audio_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Audio);
      }
      if (video_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Video);
      }
      if (datetime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Datetime);
      }
      if (HasFeatureSelector) {
        output.WriteRawTag(66);
        output.WriteString(FeatureSelector);
      }
      if (HasReducer) {
        output.WriteRawTag(74);
        output.WriteString(Reducer);
      }
      if (HasImbalanced) {
        output.WriteRawTag(80);
        output.WriteBool(Imbalanced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (categorical_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Categorical);
      }
      if (numeric_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Numeric);
      }
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (audio_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Audio);
      }
      if (video_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Video);
      }
      if (datetime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Datetime);
      }
      if (HasFeatureSelector) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureSelector);
      }
      if (HasReducer) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reducer);
      }
      if (HasImbalanced) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreprocessingSpec other) {
      if (other == null) {
        return;
      }
      if (other.categorical_ != null) {
        if (categorical_ == null) {
          Categorical = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CategoricalPipelineSpec();
        }
        Categorical.MergeFrom(other.Categorical);
      }
      if (other.numeric_ != null) {
        if (numeric_ == null) {
          Numeric = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NumericPipelineSpec();
        }
        Numeric.MergeFrom(other.Numeric);
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TextPipelineSpec();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ImagePipelineSpec();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.audio_ != null) {
        if (audio_ == null) {
          Audio = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AudioPipelineSpec();
        }
        Audio.MergeFrom(other.Audio);
      }
      if (other.video_ != null) {
        if (video_ == null) {
          Video = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.VideoPipelineSpec();
        }
        Video.MergeFrom(other.Video);
      }
      if (other.datetime_ != null) {
        if (datetime_ == null) {
          Datetime = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DateTimePipelineSpec();
        }
        Datetime.MergeFrom(other.Datetime);
      }
      if (other.HasFeatureSelector) {
        FeatureSelector = other.FeatureSelector;
      }
      if (other.HasReducer) {
        Reducer = other.Reducer;
      }
      if (other.HasImbalanced) {
        Imbalanced = other.Imbalanced;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (categorical_ == null) {
              Categorical = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CategoricalPipelineSpec();
            }
            input.ReadMessage(Categorical);
            break;
          }
          case 18: {
            if (numeric_ == null) {
              Numeric = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NumericPipelineSpec();
            }
            input.ReadMessage(Numeric);
            break;
          }
          case 26: {
            if (text_ == null) {
              Text = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TextPipelineSpec();
            }
            input.ReadMessage(Text);
            break;
          }
          case 34: {
            if (image_ == null) {
              Image = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ImagePipelineSpec();
            }
            input.ReadMessage(Image);
            break;
          }
          case 42: {
            if (audio_ == null) {
              Audio = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AudioPipelineSpec();
            }
            input.ReadMessage(Audio);
            break;
          }
          case 50: {
            if (video_ == null) {
              Video = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.VideoPipelineSpec();
            }
            input.ReadMessage(Video);
            break;
          }
          case 58: {
            if (datetime_ == null) {
              Datetime = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DateTimePipelineSpec();
            }
            input.ReadMessage(Datetime);
            break;
          }
          case 66: {
            FeatureSelector = input.ReadString();
            break;
          }
          case 74: {
            Reducer = input.ReadString();
            break;
          }
          case 80: {
            Imbalanced = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (categorical_ == null) {
              Categorical = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.CategoricalPipelineSpec();
            }
            input.ReadMessage(Categorical);
            break;
          }
          case 18: {
            if (numeric_ == null) {
              Numeric = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.NumericPipelineSpec();
            }
            input.ReadMessage(Numeric);
            break;
          }
          case 26: {
            if (text_ == null) {
              Text = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TextPipelineSpec();
            }
            input.ReadMessage(Text);
            break;
          }
          case 34: {
            if (image_ == null) {
              Image = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ImagePipelineSpec();
            }
            input.ReadMessage(Image);
            break;
          }
          case 42: {
            if (audio_ == null) {
              Audio = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.AudioPipelineSpec();
            }
            input.ReadMessage(Audio);
            break;
          }
          case 50: {
            if (video_ == null) {
              Video = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.VideoPipelineSpec();
            }
            input.ReadMessage(Video);
            break;
          }
          case 58: {
            if (datetime_ == null) {
              Datetime = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DateTimePipelineSpec();
            }
            input.ReadMessage(Datetime);
            break;
          }
          case 66: {
            FeatureSelector = input.ReadString();
            break;
          }
          case 74: {
            Reducer = input.ReadString();
            break;
          }
          case 80: {
            Imbalanced = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ReleaseStageSpec is the predictor name that would host the model
  /// </summary>
  public sealed partial class ReleaseStageSpec : pb::IMessage<ReleaseStageSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReleaseStageSpec> _parser = new pb::MessageParser<ReleaseStageSpec>(() => new ReleaseStageSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReleaseStageSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseStageSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseStageSpec(ReleaseStageSpec other) : this() {
      predictorName_ = other.predictorName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseStageSpec Clone() {
      return new ReleaseStageSpec(this);
    }

    /// <summary>Field number for the "predictorName" field.</summary>
    public const int PredictorNameFieldNumber = 1;
    private readonly static string PredictorNameDefaultValue = "";

    private string predictorName_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PredictorName {
      get { return predictorName_ ?? PredictorNameDefaultValue; }
      set {
        predictorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "predictorName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPredictorName {
      get { return predictorName_ != null; }
    }
    /// <summary>Clears the value of the "predictorName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPredictorName() {
      predictorName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReleaseStageSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReleaseStageSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PredictorName != other.PredictorName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPredictorName) hash ^= PredictorName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPredictorName) {
        output.WriteRawTag(10);
        output.WriteString(PredictorName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPredictorName) {
        output.WriteRawTag(10);
        output.WriteString(PredictorName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPredictorName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PredictorName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReleaseStageSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasPredictorName) {
        PredictorName = other.PredictorName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PredictorName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PredictorName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// +kubebuilder:subresource:status
  /// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
  /// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
  /// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.reportType"
  /// +kubebuilder:printcolumn:name="Uri",type="string",JSONPath=".status.uri"
  /// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
  /// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
  /// +kubebuilder:resource:path=reports,singular=report,categories={training,modela,all}
  /// ReportName represent a report object. A report is a pdf report which contain images and tables about another
  /// object
  /// </summary>
  public sealed partial class Report : pb::IMessage<Report>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Report> _parser = new pb::MessageParser<Report>(() => new Report());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Report> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report(Report other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      spec_ = other.spec_ != null ? other.spec_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report Clone() {
      return new Report(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 2;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Report);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Report other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Spec, other.Spec)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (spec_ != null) hash ^= Spec.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Report other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.spec_ != null) {
        if (spec_ == null) {
          Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportSpec();
        }
        Spec.MergeFrom(other.Spec);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportSpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ReportCondition describes the state of a ReportName at a certain point.
  /// </summary>
  public sealed partial class ReportCondition : pb::IMessage<ReportCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReportCondition> _parser = new pb::MessageParser<ReportCondition>(() => new ReportCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportCondition(ReportCondition other) : this() {
      type_ = other.type_;
      status_ = other.status_;
      lastTransitionTime_ = other.lastTransitionTime_ != null ? other.lastTransitionTime_.Clone() : null;
      reason_ = other.reason_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportCondition Clone() {
      return new ReportCondition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// Type of condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private readonly static string StatusDefaultValue = "";

    private string status_;
    /// <summary>
    /// Status of the condition, one of True, False, Unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_ ?? StatusDefaultValue; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return status_ != null; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      status_ = null;
    }

    /// <summary>Field number for the "lastTransitionTime" field.</summary>
    public const int LastTransitionTimeFieldNumber = 4;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time lastTransitionTime_;
    /// <summary>
    /// Last time the condition transitioned from one status to another.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time LastTransitionTime {
      get { return lastTransitionTime_; }
      set {
        lastTransitionTime_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    /// <summary>
    /// The reason for the condition's last transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    /// <summary>
    /// A human readable message indicating details about the transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LastTransitionTime, other.LastTransitionTime)) return false;
      if (Reason != other.Reason) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (lastTransitionTime_ != null) hash ^= LastTransitionTime.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (lastTransitionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastTransitionTime);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportCondition other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.lastTransitionTime_ != null) {
        if (lastTransitionTime_ == null) {
          LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        LastTransitionTime.MergeFrom(other.LastTransitionTime);
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// ReportList is a list of reports
  /// </summary>
  public sealed partial class ReportList : pb::IMessage<ReportList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReportList> _parser = new pb::MessageParser<ReportList>(() => new ReportList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportList(ReportList other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportList Clone() {
      return new ReportList(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Report> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Report.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Report> items_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Report>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Report> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportList other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ReportSpec specifies the desired state of the ReportName resource
  /// </summary>
  public sealed partial class ReportSpec : pb::IMessage<ReportSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReportSpec> _parser = new pb::MessageParser<ReportSpec>(() => new ReportSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportSpec(ReportSpec other) : this() {
      versionName_ = other.versionName_;
      entityRef_ = other.entityRef_ != null ? other.entityRef_.Clone() : null;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      reportType_ = other.reportType_;
      format_ = other.format_;
      description_ = other.description_;
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportSpec Clone() {
      return new ReportSpec(this);
    }

    /// <summary>Field number for the "versionName" field.</summary>
    public const int VersionNameFieldNumber = 1;
    private readonly static string VersionNameDefaultValue = "";

    private string versionName_;
    /// <summary>
    /// VersionName is the data product version name for this report.
    /// +kubebuilder:default:="latest"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionName {
      get { return versionName_ ?? VersionNameDefaultValue; }
      set {
        versionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "versionName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersionName {
      get { return versionName_ != null; }
    }
    /// <summary>Clears the value of the "versionName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionName() {
      versionName_ = null;
    }

    /// <summary>Field number for the "entityRef" field.</summary>
    public const int EntityRefFieldNumber = 2;
    private global::K8S.Io.Api.Core.V1.ObjectReference entityRef_;
    /// <summary>
    /// EntityRef specify the entity being report. Currently entities can be dataset,model or study
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Api.Core.V1.ObjectReference EntityRef {
      get { return entityRef_; }
      set {
        entityRef_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 4;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation location_;
    /// <summary>
    /// Location is the report location in storage.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "reportType" field.</summary>
    public const int ReportTypeFieldNumber = 5;
    private readonly static string ReportTypeDefaultValue = "";

    private string reportType_;
    /// <summary>
    /// ReportType specify the report type (e.g. classification / regression)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReportType {
      get { return reportType_ ?? ReportTypeDefaultValue; }
      set {
        reportType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reportType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReportType {
      get { return reportType_ != null; }
    }
    /// <summary>Clears the value of the "reportType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReportType() {
      reportType_ = null;
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 6;
    private readonly static string FormatDefaultValue = "";

    private string format_;
    /// <summary>
    /// Format specify the report format. default is pdf
    /// +kubebuilder:default:=pdf
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_ ?? FormatDefaultValue; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "format" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFormat {
      get { return format_ != null; }
    }
    /// <summary>Clears the value of the "format" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFormat() {
      format_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 7;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// NotifierRef is areference to the notifier that is used to send the report
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 8;
    private readonly static string OwnerDefaultValue = "";

    private string owner_;
    /// <summary>
    /// The owner account name
    /// +kubebuilder:default:="no-one"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_ ?? OwnerDefaultValue; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwner {
      get { return owner_ != null; }
    }
    /// <summary>Clears the value of the "owner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwner() {
      owner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionName != other.VersionName) return false;
      if (!object.Equals(EntityRef, other.EntityRef)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (ReportType != other.ReportType) return false;
      if (Format != other.Format) return false;
      if (Description != other.Description) return false;
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVersionName) hash ^= VersionName.GetHashCode();
      if (entityRef_ != null) hash ^= EntityRef.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (HasReportType) hash ^= ReportType.GetHashCode();
      if (HasFormat) hash ^= Format.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasOwner) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (entityRef_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EntityRef);
      }
      if (location_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Location);
      }
      if (HasReportType) {
        output.WriteRawTag(42);
        output.WriteString(ReportType);
      }
      if (HasFormat) {
        output.WriteRawTag(50);
        output.WriteString(Format);
      }
      if (HasDescription) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (HasOwner) {
        output.WriteRawTag(66);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (entityRef_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EntityRef);
      }
      if (location_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Location);
      }
      if (HasReportType) {
        output.WriteRawTag(42);
        output.WriteString(ReportType);
      }
      if (HasFormat) {
        output.WriteRawTag(50);
        output.WriteString(Format);
      }
      if (HasDescription) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (HasOwner) {
        output.WriteRawTag(66);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVersionName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionName);
      }
      if (entityRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityRef);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (HasReportType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportType);
      }
      if (HasFormat) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasOwner) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasVersionName) {
        VersionName = other.VersionName;
      }
      if (other.entityRef_ != null) {
        if (entityRef_ == null) {
          EntityRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
        }
        EntityRef.MergeFrom(other.EntityRef);
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.HasReportType) {
        ReportType = other.ReportType;
      }
      if (other.HasFormat) {
        Format = other.Format;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasOwner) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            if (entityRef_ == null) {
              EntityRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
            }
            input.ReadMessage(EntityRef);
            break;
          }
          case 34: {
            if (location_ == null) {
              Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
            }
            input.ReadMessage(Location);
            break;
          }
          case 42: {
            ReportType = input.ReadString();
            break;
          }
          case 50: {
            Format = input.ReadString();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
          case 66: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            if (entityRef_ == null) {
              EntityRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
            }
            input.ReadMessage(EntityRef);
            break;
          }
          case 34: {
            if (location_ == null) {
              Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
            }
            input.ReadMessage(Location);
            break;
          }
          case 42: {
            ReportType = input.ReadString();
            break;
          }
          case 50: {
            Format = input.ReadString();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
          case 66: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ReportStatus defines the observed state of the report.
  /// </summary>
  public sealed partial class ReportStatus : pb::IMessage<ReportStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReportStatus> _parser = new pb::MessageParser<ReportStatus>(() => new ReportStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStatus(ReportStatus other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      completionTime_ = other.completionTime_ != null ? other.completionTime_.Clone() : null;
      phase_ = other.phase_;
      uri_ = other.uri_;
      conditions_ = other.conditions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStatus Clone() {
      return new ReportStatus(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time startTime_;
    /// <summary>
    /// StartTime is the start time of the report was sent for generation
    /// It is not guaranteed to be set in happens-before order across separate operations.
    /// It is represented in RFC3339 form and is in UTC.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "completionTime" field.</summary>
    public const int CompletionTimeFieldNumber = 3;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time completionTime_;
    /// <summary>
    /// CompletionTime is the time when the report ended generation and was uploaded to storage
    /// be set in happens-before order across separate operations.
    /// It is represented in RFC3339 form and is in UTC.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time CompletionTime {
      get { return completionTime_; }
      set {
        completionTime_ = value;
      }
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 4;
    private readonly static string PhaseDefaultValue = "";

    private string phase_;
    /// <summary>
    /// Phase is the phase of the report
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phase {
      get { return phase_ ?? PhaseDefaultValue; }
      set {
        phase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "phase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhase {
      get { return phase_ != null; }
    }
    /// <summary>Clears the value of the "phase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhase() {
      phase_ = null;
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 5;
    private readonly static string UriDefaultValue = "";

    private string uri_;
    /// <summary>
    /// URI is the report uri in the bucket
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_ ?? UriDefaultValue; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUri {
      get { return uri_ != null; }
    }
    /// <summary>Clears the value of the "uri" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUri() {
      uri_ = null;
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(50, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportCondition.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportCondition> conditions_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportCondition>();
    /// <summary>
    /// +optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ReportCondition> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(CompletionTime, other.CompletionTime)) return false;
      if (Phase != other.Phase) return false;
      if (Uri != other.Uri) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (completionTime_ != null) hash ^= CompletionTime.GetHashCode();
      if (HasPhase) hash ^= Phase.GetHashCode();
      if (HasUri) hash ^= Uri.GetHashCode();
      hash ^= conditions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CompletionTime);
      }
      if (HasPhase) {
        output.WriteRawTag(34);
        output.WriteString(Phase);
      }
      if (HasUri) {
        output.WriteRawTag(42);
        output.WriteString(Uri);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CompletionTime);
      }
      if (HasPhase) {
        output.WriteRawTag(34);
        output.WriteString(Phase);
      }
      if (HasUri) {
        output.WriteRawTag(42);
        output.WriteString(Uri);
      }
      conditions_.WriteTo(ref output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (completionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompletionTime);
      }
      if (HasPhase) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phase);
      }
      if (HasUri) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportStatus other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.completionTime_ != null) {
        if (completionTime_ == null) {
          CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        CompletionTime.MergeFrom(other.CompletionTime);
      }
      if (other.HasPhase) {
        Phase = other.Phase;
      }
      if (other.HasUri) {
        Uri = other.Uri;
      }
      conditions_.Add(other.conditions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 26: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 34: {
            Phase = input.ReadString();
            break;
          }
          case 42: {
            Uri = input.ReadString();
            break;
          }
          case 50: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 26: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 34: {
            Phase = input.ReadString();
            break;
          }
          case 42: {
            Uri = input.ReadString();
            break;
          }
          case 50: {
            conditions_.AddEntriesFrom(ref input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:subresource:status
  /// +kubebuilder:object:root=true
  /// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status"
  /// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
  /// +kubebuilder:printcolumn:name="Dataset",type="string",JSONPath=".spec.datasetName"
  /// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task"
  /// +kubebuilder:printcolumn:name="Objective",type="string",JSONPath=".spec.objective"
  /// +kubebuilder:printcolumn:name="Score",type="number",JSONPath=".status.bestModelScore"
  /// +kubebuilder:printcolumn:name="Best model",type="string",JSONPath=".status.bestModel"
  /// +kubebuilder:printcolumn:name="TotalTrainers",type="string",JSONPath=".status.totalTrainers"
  /// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
  /// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
  /// +kubebuilder:resource:path=studies,singular=study,shortName=sd,categories={training,modela}
  /// Study represent a search for the best machine learning model using automl.
  /// </summary>
  public sealed partial class Study : pb::IMessage<Study>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Study> _parser = new pb::MessageParser<Study>(() => new Study());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Study> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Study() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Study(Study other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      spec_ = other.spec_ != null ? other.spec_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Study Clone() {
      return new Study(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 2;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudySpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudySpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Study);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Study other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Spec, other.Spec)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (spec_ != null) hash ^= Spec.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Study other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.spec_ != null) {
        if (spec_ == null) {
          Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudySpec();
        }
        Spec.MergeFrom(other.Spec);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudySpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ObjectMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudySpec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// StudyCondition describes the state of a StudyName.
  /// </summary>
  public sealed partial class StudyCondition : pb::IMessage<StudyCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StudyCondition> _parser = new pb::MessageParser<StudyCondition>(() => new StudyCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StudyCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyCondition(StudyCondition other) : this() {
      type_ = other.type_;
      status_ = other.status_;
      lastTransitionTime_ = other.lastTransitionTime_ != null ? other.lastTransitionTime_.Clone() : null;
      reason_ = other.reason_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyCondition Clone() {
      return new StudyCondition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// Type of study condition.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private readonly static string StatusDefaultValue = "";

    private string status_;
    /// <summary>
    /// Status of the condition, one of True, False, AutoScaler.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_ ?? StatusDefaultValue; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return status_ != null; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      status_ = null;
    }

    /// <summary>Field number for the "lastTransitionTime" field.</summary>
    public const int LastTransitionTimeFieldNumber = 4;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time lastTransitionTime_;
    /// <summary>
    /// Last time the condition transitioned from one status to another.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time LastTransitionTime {
      get { return lastTransitionTime_; }
      set {
        lastTransitionTime_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    /// <summary>
    /// The reason for the condition's last transition.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    /// <summary>
    /// A human readable message indicating details about the transition.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StudyCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StudyCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LastTransitionTime, other.LastTransitionTime)) return false;
      if (Reason != other.Reason) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (lastTransitionTime_ != null) hash ^= LastTransitionTime.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasStatus) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTransitionTime);
      }
      if (HasReason) {
        output.WriteRawTag(42);
        output.WriteString(Reason);
      }
      if (HasMessage) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (lastTransitionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastTransitionTime);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StudyCondition other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.lastTransitionTime_ != null) {
        if (lastTransitionTime_ == null) {
          LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        LastTransitionTime.MergeFrom(other.LastTransitionTime);
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
          case 42: {
            Reason = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// +kubebuilder:object:root=true
  /// StudyList is a list of Study
  /// </summary>
  public sealed partial class StudyList : pb::IMessage<StudyList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StudyList> _parser = new pb::MessageParser<StudyList>(() => new StudyList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StudyList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyList(StudyList other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyList Clone() {
      return new StudyList(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Study> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Study.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Study> items_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Study>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Study> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StudyList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StudyList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StudyList other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.ListMeta();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// StudySpec defines the desired state of the study
  /// </summary>
  public sealed partial class StudySpec : pb::IMessage<StudySpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StudySpec> _parser = new pb::MessageParser<StudySpec>(() => new StudySpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StudySpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudySpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudySpec(StudySpec other) : this() {
      _hasBits0 = other._hasBits0;
      versionName_ = other.versionName_;
      description_ = other.description_;
      labRef_ = other.labRef_ != null ? other.labRef_.Clone() : null;
      datasetName_ = other.datasetName_;
      task_ = other.task_;
      objective_ = other.objective_;
      search_ = other.search_ != null ? other.search_.Clone() : null;
      preprocessing_ = other.preprocessing_ != null ? other.preprocessing_.Clone() : null;
      training_ = other.training_ != null ? other.training_.Clone() : null;
      trainerClassRef_ = other.trainerClassRef_ != null ? other.trainerClassRef_.Clone() : null;
      split_ = other.split_ != null ? other.split_.Clone() : null;
      aborted_ = other.aborted_;
      reported_ = other.reported_;
      paused_ = other.paused_;
      profiled_ = other.profiled_;
      modelPublished_ = other.modelPublished_;
      modelImagePushed_ = other.modelImagePushed_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      hierarchy_ = other.hierarchy_ != null ? other.hierarchy_.Clone() : null;
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudySpec Clone() {
      return new StudySpec(this);
    }

    /// <summary>Field number for the "versionName" field.</summary>
    public const int VersionNameFieldNumber = 1;
    private readonly static string VersionNameDefaultValue = "";

    private string versionName_;
    /// <summary>
    /// VersionName is the data product version of the study
    /// +kubebuilder:validation:MaxLength=63
    /// +kubebuilder:validation:MinLength=1
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionName {
      get { return versionName_ ?? VersionNameDefaultValue; }
      set {
        versionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "versionName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersionName {
      get { return versionName_ != null; }
    }
    /// <summary>Clears the value of the "versionName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionName() {
      versionName_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Description is user provided description
    /// +kubebuilder:default:=""
    /// +kubebuilder:validation:MaxLength=512
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "labRef" field.</summary>
    public const int LabRefFieldNumber = 3;
    private global::K8S.Io.Api.Core.V1.ObjectReference labRef_;
    /// <summary>
    /// LabRef is a reference to the lab where the trainers for this study run.
    /// If no value is provided, the lab is taken from the
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Api.Core.V1.ObjectReference LabRef {
      get { return labRef_; }
      set {
        labRef_ = value;
      }
    }

    /// <summary>Field number for the "datasetName" field.</summary>
    public const int DatasetNameFieldNumber = 4;
    private readonly static string DatasetNameDefaultValue = "";

    private string datasetName_;
    /// <summary>
    /// DatasetName refer to the dataset object for which the study is for.
    /// +kubebuilder:default:=""
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetName {
      get { return datasetName_ ?? DatasetNameDefaultValue; }
      set {
        datasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "datasetName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDatasetName {
      get { return datasetName_ != null; }
    }
    /// <summary>Clears the value of the "datasetName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDatasetName() {
      datasetName_ = null;
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 5;
    private readonly static string TaskDefaultValue = "";

    private string task_;
    /// <summary>
    /// Task specify the machine learning task (e.g classification).
    /// This must match the task of the data product.
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Task {
      get { return task_ ?? TaskDefaultValue; }
      set {
        task_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "task" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTask {
      get { return task_ != null; }
    }
    /// <summary>Clears the value of the "task" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTask() {
      task_ = null;
    }

    /// <summary>Field number for the "objective" field.</summary>
    public const int ObjectiveFieldNumber = 6;
    private readonly static string ObjectiveDefaultValue = "";

    private string objective_;
    /// <summary>
    /// Objective is the objective defined how the study controller will compare model performance.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Objective {
      get { return objective_ ?? ObjectiveDefaultValue; }
      set {
        objective_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "objective" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObjective {
      get { return objective_ != null; }
    }
    /// <summary>Clears the value of the "objective" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObjective() {
      objective_ = null;
    }

    /// <summary>Field number for the "search" field.</summary>
    public const int SearchFieldNumber = 8;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSearchSpec search_;
    /// <summary>
    /// Search defines the model search
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSearchSpec Search {
      get { return search_; }
      set {
        search_ = value;
      }
    }

    /// <summary>Field number for the "preprocessing" field.</summary>
    public const int PreprocessingFieldNumber = 9;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec preprocessing_;
    /// <summary>
    /// Preprocessing is template for preprocessors for this study
    /// Default: all preprocessing is set to auto.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec Preprocessing {
      get { return preprocessing_; }
      set {
        preprocessing_ = value;
      }
    }

    /// <summary>Field number for the "training" field.</summary>
    public const int TrainingFieldNumber = 10;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec training_;
    /// <summary>
    /// Training template contain the desired training parameter for the models.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec Training {
      get { return training_; }
      set {
        training_ = value;
      }
    }

    /// <summary>Field number for the "trainerClassRef" field.</summary>
    public const int TrainerClassRefFieldNumber = 11;
    private global::K8S.Io.Api.Core.V1.ObjectReference trainerClassRef_;
    /// <summary>
    /// WorkloadClassRef is a reference to the workload class object from the catalog.
    /// Default : scikit learn trainer.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Api.Core.V1.ObjectReference TrainerClassRef {
      get { return trainerClassRef_; }
      set {
        trainerClassRef_ = value;
      }
    }

    /// <summary>Field number for the "split" field.</summary>
    public const int SplitFieldNumber = 12;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataSplit split_;
    /// <summary>
    /// Split is reference to the split specification
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataSplit Split {
      get { return split_; }
      set {
        split_ = value;
      }
    }

    /// <summary>Field number for the "aborted" field.</summary>
    public const int AbortedFieldNumber = 13;
    private readonly static bool AbortedDefaultValue = false;

    private bool aborted_;
    /// <summary>
    /// Aborted is set when we want to abort the training
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Aborted {
      get { if ((_hasBits0 & 1) != 0) { return aborted_; } else { return AbortedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        aborted_ = value;
      }
    }
    /// <summary>Gets whether the "aborted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAborted {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "aborted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAborted() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reported" field.</summary>
    public const int ReportedFieldNumber = 14;
    private readonly static bool ReportedDefaultValue = false;

    private bool reported_;
    /// <summary>
    /// Reported is set when we want to create model report
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reported {
      get { if ((_hasBits0 & 2) != 0) { return reported_; } else { return ReportedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reported_ = value;
      }
    }
    /// <summary>Gets whether the "reported" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReported {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reported" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReported() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "paused" field.</summary>
    public const int PausedFieldNumber = 15;
    private readonly static bool PausedDefaultValue = false;

    private bool paused_;
    /// <summary>
    /// Paused is set when we want to pause the training
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Paused {
      get { if ((_hasBits0 & 4) != 0) { return paused_; } else { return PausedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        paused_ = value;
      }
    }
    /// <summary>Gets whether the "paused" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPaused {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "paused" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPaused() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "profiled" field.</summary>
    public const int ProfiledFieldNumber = 16;
    private readonly static bool ProfiledDefaultValue = false;

    private bool profiled_;
    /// <summary>
    /// Profiled is set when we want to create model profile and study profile.
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Profiled {
      get { if ((_hasBits0 & 8) != 0) { return profiled_; } else { return ProfiledDefaultValue; } }
      set {
        _hasBits0 |= 8;
        profiled_ = value;
      }
    }
    /// <summary>Gets whether the "profiled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProfiled {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "profiled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProfiled() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "modelPublished" field.</summary>
    public const int ModelPublishedFieldNumber = 17;
    private readonly static bool ModelPublishedDefaultValue = false;

    private bool modelPublished_;
    /// <summary>
    /// Set to true if you want the system to create a docker model image, at the end of training.
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ModelPublished {
      get { if ((_hasBits0 & 16) != 0) { return modelPublished_; } else { return ModelPublishedDefaultValue; } }
      set {
        _hasBits0 |= 16;
        modelPublished_ = value;
      }
    }
    /// <summary>Gets whether the "modelPublished" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModelPublished {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "modelPublished" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModelPublished() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "modelImagePushed" field.</summary>
    public const int ModelImagePushedFieldNumber = 18;
    private readonly static bool ModelImagePushedDefaultValue = false;

    private bool modelImagePushed_;
    /// <summary>
    /// Set to true if you want the system to push model image to remote docker registry
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ModelImagePushed {
      get { if ((_hasBits0 & 32) != 0) { return modelImagePushed_; } else { return ModelImagePushedDefaultValue; } }
      set {
        _hasBits0 |= 32;
        modelImagePushed_ = value;
      }
    }
    /// <summary>Gets whether the "modelImagePushed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModelImagePushed {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "modelImagePushed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModelImagePushed() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 19;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation location_;
    /// <summary>
    /// The location of the study artifacts
    /// By default the bucket is the data product bucket.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "hierarchy" field.</summary>
    public const int HierarchyFieldNumber = 21;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Hierarchy hierarchy_;
    /// <summary>
    /// The group hierarchy
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Hierarchy Hierarchy {
      get { return hierarchy_; }
      set {
        hierarchy_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 22;
    private readonly static string OwnerDefaultValue = "";

    private string owner_;
    /// <summary>
    /// The owner account name
    /// +kubebuilder:default:=""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_ ?? OwnerDefaultValue; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwner {
      get { return owner_ != null; }
    }
    /// <summary>Clears the value of the "owner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwner() {
      owner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StudySpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StudySpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionName != other.VersionName) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(LabRef, other.LabRef)) return false;
      if (DatasetName != other.DatasetName) return false;
      if (Task != other.Task) return false;
      if (Objective != other.Objective) return false;
      if (!object.Equals(Search, other.Search)) return false;
      if (!object.Equals(Preprocessing, other.Preprocessing)) return false;
      if (!object.Equals(Training, other.Training)) return false;
      if (!object.Equals(TrainerClassRef, other.TrainerClassRef)) return false;
      if (!object.Equals(Split, other.Split)) return false;
      if (Aborted != other.Aborted) return false;
      if (Reported != other.Reported) return false;
      if (Paused != other.Paused) return false;
      if (Profiled != other.Profiled) return false;
      if (ModelPublished != other.ModelPublished) return false;
      if (ModelImagePushed != other.ModelImagePushed) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(Hierarchy, other.Hierarchy)) return false;
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVersionName) hash ^= VersionName.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (labRef_ != null) hash ^= LabRef.GetHashCode();
      if (HasDatasetName) hash ^= DatasetName.GetHashCode();
      if (HasTask) hash ^= Task.GetHashCode();
      if (HasObjective) hash ^= Objective.GetHashCode();
      if (search_ != null) hash ^= Search.GetHashCode();
      if (preprocessing_ != null) hash ^= Preprocessing.GetHashCode();
      if (training_ != null) hash ^= Training.GetHashCode();
      if (trainerClassRef_ != null) hash ^= TrainerClassRef.GetHashCode();
      if (split_ != null) hash ^= Split.GetHashCode();
      if (HasAborted) hash ^= Aborted.GetHashCode();
      if (HasReported) hash ^= Reported.GetHashCode();
      if (HasPaused) hash ^= Paused.GetHashCode();
      if (HasProfiled) hash ^= Profiled.GetHashCode();
      if (HasModelPublished) hash ^= ModelPublished.GetHashCode();
      if (HasModelImagePushed) hash ^= ModelImagePushed.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (hierarchy_ != null) hash ^= Hierarchy.GetHashCode();
      if (HasOwner) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (labRef_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LabRef);
      }
      if (HasDatasetName) {
        output.WriteRawTag(34);
        output.WriteString(DatasetName);
      }
      if (HasTask) {
        output.WriteRawTag(42);
        output.WriteString(Task);
      }
      if (HasObjective) {
        output.WriteRawTag(50);
        output.WriteString(Objective);
      }
      if (search_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Search);
      }
      if (preprocessing_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Preprocessing);
      }
      if (training_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Training);
      }
      if (trainerClassRef_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(TrainerClassRef);
      }
      if (split_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Split);
      }
      if (HasAborted) {
        output.WriteRawTag(104);
        output.WriteBool(Aborted);
      }
      if (HasReported) {
        output.WriteRawTag(112);
        output.WriteBool(Reported);
      }
      if (HasPaused) {
        output.WriteRawTag(120);
        output.WriteBool(Paused);
      }
      if (HasProfiled) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Profiled);
      }
      if (HasModelPublished) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ModelPublished);
      }
      if (HasModelImagePushed) {
        output.WriteRawTag(144, 1);
        output.WriteBool(ModelImagePushed);
      }
      if (location_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Location);
      }
      if (hierarchy_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Hierarchy);
      }
      if (HasOwner) {
        output.WriteRawTag(178, 1);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVersionName) {
        output.WriteRawTag(10);
        output.WriteString(VersionName);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (labRef_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LabRef);
      }
      if (HasDatasetName) {
        output.WriteRawTag(34);
        output.WriteString(DatasetName);
      }
      if (HasTask) {
        output.WriteRawTag(42);
        output.WriteString(Task);
      }
      if (HasObjective) {
        output.WriteRawTag(50);
        output.WriteString(Objective);
      }
      if (search_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Search);
      }
      if (preprocessing_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Preprocessing);
      }
      if (training_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Training);
      }
      if (trainerClassRef_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(TrainerClassRef);
      }
      if (split_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Split);
      }
      if (HasAborted) {
        output.WriteRawTag(104);
        output.WriteBool(Aborted);
      }
      if (HasReported) {
        output.WriteRawTag(112);
        output.WriteBool(Reported);
      }
      if (HasPaused) {
        output.WriteRawTag(120);
        output.WriteBool(Paused);
      }
      if (HasProfiled) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Profiled);
      }
      if (HasModelPublished) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ModelPublished);
      }
      if (HasModelImagePushed) {
        output.WriteRawTag(144, 1);
        output.WriteBool(ModelImagePushed);
      }
      if (location_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Location);
      }
      if (hierarchy_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Hierarchy);
      }
      if (HasOwner) {
        output.WriteRawTag(178, 1);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVersionName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionName);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (labRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LabRef);
      }
      if (HasDatasetName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetName);
      }
      if (HasTask) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Task);
      }
      if (HasObjective) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Objective);
      }
      if (search_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Search);
      }
      if (preprocessing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Preprocessing);
      }
      if (training_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Training);
      }
      if (trainerClassRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainerClassRef);
      }
      if (split_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Split);
      }
      if (HasAborted) {
        size += 1 + 1;
      }
      if (HasReported) {
        size += 1 + 1;
      }
      if (HasPaused) {
        size += 1 + 1;
      }
      if (HasProfiled) {
        size += 2 + 1;
      }
      if (HasModelPublished) {
        size += 2 + 1;
      }
      if (HasModelImagePushed) {
        size += 2 + 1;
      }
      if (location_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (hierarchy_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hierarchy);
      }
      if (HasOwner) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StudySpec other) {
      if (other == null) {
        return;
      }
      if (other.HasVersionName) {
        VersionName = other.VersionName;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.labRef_ != null) {
        if (labRef_ == null) {
          LabRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
        }
        LabRef.MergeFrom(other.LabRef);
      }
      if (other.HasDatasetName) {
        DatasetName = other.DatasetName;
      }
      if (other.HasTask) {
        Task = other.Task;
      }
      if (other.HasObjective) {
        Objective = other.Objective;
      }
      if (other.search_ != null) {
        if (search_ == null) {
          Search = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSearchSpec();
        }
        Search.MergeFrom(other.Search);
      }
      if (other.preprocessing_ != null) {
        if (preprocessing_ == null) {
          Preprocessing = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec();
        }
        Preprocessing.MergeFrom(other.Preprocessing);
      }
      if (other.training_ != null) {
        if (training_ == null) {
          Training = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec();
        }
        Training.MergeFrom(other.Training);
      }
      if (other.trainerClassRef_ != null) {
        if (trainerClassRef_ == null) {
          TrainerClassRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
        }
        TrainerClassRef.MergeFrom(other.TrainerClassRef);
      }
      if (other.split_ != null) {
        if (split_ == null) {
          Split = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataSplit();
        }
        Split.MergeFrom(other.Split);
      }
      if (other.HasAborted) {
        Aborted = other.Aborted;
      }
      if (other.HasReported) {
        Reported = other.Reported;
      }
      if (other.HasPaused) {
        Paused = other.Paused;
      }
      if (other.HasProfiled) {
        Profiled = other.Profiled;
      }
      if (other.HasModelPublished) {
        ModelPublished = other.ModelPublished;
      }
      if (other.HasModelImagePushed) {
        ModelImagePushed = other.ModelImagePushed;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.hierarchy_ != null) {
        if (hierarchy_ == null) {
          Hierarchy = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Hierarchy();
        }
        Hierarchy.MergeFrom(other.Hierarchy);
      }
      if (other.HasOwner) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (labRef_ == null) {
              LabRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
            }
            input.ReadMessage(LabRef);
            break;
          }
          case 34: {
            DatasetName = input.ReadString();
            break;
          }
          case 42: {
            Task = input.ReadString();
            break;
          }
          case 50: {
            Objective = input.ReadString();
            break;
          }
          case 66: {
            if (search_ == null) {
              Search = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSearchSpec();
            }
            input.ReadMessage(Search);
            break;
          }
          case 74: {
            if (preprocessing_ == null) {
              Preprocessing = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec();
            }
            input.ReadMessage(Preprocessing);
            break;
          }
          case 82: {
            if (training_ == null) {
              Training = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec();
            }
            input.ReadMessage(Training);
            break;
          }
          case 90: {
            if (trainerClassRef_ == null) {
              TrainerClassRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
            }
            input.ReadMessage(TrainerClassRef);
            break;
          }
          case 98: {
            if (split_ == null) {
              Split = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataSplit();
            }
            input.ReadMessage(Split);
            break;
          }
          case 104: {
            Aborted = input.ReadBool();
            break;
          }
          case 112: {
            Reported = input.ReadBool();
            break;
          }
          case 120: {
            Paused = input.ReadBool();
            break;
          }
          case 128: {
            Profiled = input.ReadBool();
            break;
          }
          case 136: {
            ModelPublished = input.ReadBool();
            break;
          }
          case 144: {
            ModelImagePushed = input.ReadBool();
            break;
          }
          case 154: {
            if (location_ == null) {
              Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
            }
            input.ReadMessage(Location);
            break;
          }
          case 170: {
            if (hierarchy_ == null) {
              Hierarchy = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Hierarchy();
            }
            input.ReadMessage(Hierarchy);
            break;
          }
          case 178: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            VersionName = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (labRef_ == null) {
              LabRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
            }
            input.ReadMessage(LabRef);
            break;
          }
          case 34: {
            DatasetName = input.ReadString();
            break;
          }
          case 42: {
            Task = input.ReadString();
            break;
          }
          case 50: {
            Objective = input.ReadString();
            break;
          }
          case 66: {
            if (search_ == null) {
              Search = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ModelSearchSpec();
            }
            input.ReadMessage(Search);
            break;
          }
          case 74: {
            if (preprocessing_ == null) {
              Preprocessing = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.PreprocessingSpec();
            }
            input.ReadMessage(Preprocessing);
            break;
          }
          case 82: {
            if (training_ == null) {
              Training = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.TrainingSpec();
            }
            input.ReadMessage(Training);
            break;
          }
          case 90: {
            if (trainerClassRef_ == null) {
              TrainerClassRef = new global::K8S.Io.Api.Core.V1.ObjectReference();
            }
            input.ReadMessage(TrainerClassRef);
            break;
          }
          case 98: {
            if (split_ == null) {
              Split = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.DataSplit();
            }
            input.ReadMessage(Split);
            break;
          }
          case 104: {
            Aborted = input.ReadBool();
            break;
          }
          case 112: {
            Reported = input.ReadBool();
            break;
          }
          case 120: {
            Paused = input.ReadBool();
            break;
          }
          case 128: {
            Profiled = input.ReadBool();
            break;
          }
          case 136: {
            ModelPublished = input.ReadBool();
            break;
          }
          case 144: {
            ModelImagePushed = input.ReadBool();
            break;
          }
          case 154: {
            if (location_ == null) {
              Location = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Data.V1Alpha1.DataLocation();
            }
            input.ReadMessage(Location);
            break;
          }
          case 170: {
            if (hierarchy_ == null) {
              Hierarchy = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.Hierarchy();
            }
            input.ReadMessage(Hierarchy);
            break;
          }
          case 178: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// StudyStatus defines the observed state of the Study
  /// </summary>
  public sealed partial class StudyStatus : pb::IMessage<StudyStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StudyStatus> _parser = new pb::MessageParser<StudyStatus>(() => new StudyStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StudyStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyStatus(StudyStatus other) : this() {
      _hasBits0 = other._hasBits0;
      models_ = other.models_;
      waitingToTrain_ = other.waitingToTrain_;
      trainingModels_ = other.trainingModels_;
      failedTrainingModels_ = other.failedTrainingModels_;
      trainedModels_ = other.trainedModels_;
      waitingToTestModels_ = other.waitingToTestModels_;
      testingModels_ = other.testingModels_;
      failedTestingModels_ = other.failedTestingModels_;
      testedModels_ = other.testedModels_;
      trainers_ = other.trainers_;
      freeTrainers_ = other.freeTrainers_;
      budyTrainers_ = other.budyTrainers_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      trainingStartTime_ = other.trainingStartTime_ != null ? other.trainingStartTime_.Clone() : null;
      trainingCompletionTime_ = other.trainingCompletionTime_ != null ? other.trainingCompletionTime_.Clone() : null;
      testingStarted_ = other.testingStarted_ != null ? other.testingStarted_.Clone() : null;
      testingCompletionTime_ = other.testingCompletionTime_ != null ? other.testingCompletionTime_.Clone() : null;
      completionTime_ = other.completionTime_ != null ? other.completionTime_.Clone() : null;
      bestModel_ = other.bestModel_;
      bestModelScore_ = other.bestModelScore_;
      profileUri_ = other.profileUri_;
      reportName_ = other.reportName_;
      phase_ = other.phase_;
      conditions_ = other.conditions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StudyStatus Clone() {
      return new StudyStatus(this);
    }

    /// <summary>Field number for the "models" field.</summary>
    public const int ModelsFieldNumber = 1;
    private readonly static int ModelsDefaultValue = 0;

    private int models_;
    /// <summary>
    /// Total models created for the study
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Models {
      get { if ((_hasBits0 & 1) != 0) { return models_; } else { return ModelsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        models_ = value;
      }
    }
    /// <summary>Gets whether the "models" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModels {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "models" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModels() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "waitingToTrain" field.</summary>
    public const int WaitingToTrainFieldNumber = 2;
    private readonly static int WaitingToTrainDefaultValue = 0;

    private int waitingToTrain_;
    /// <summary>
    /// models waiting for a trainer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitingToTrain {
      get { if ((_hasBits0 & 2) != 0) { return waitingToTrain_; } else { return WaitingToTrainDefaultValue; } }
      set {
        _hasBits0 |= 2;
        waitingToTrain_ = value;
      }
    }
    /// <summary>Gets whether the "waitingToTrain" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWaitingToTrain {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "waitingToTrain" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWaitingToTrain() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "trainingModels" field.</summary>
    public const int TrainingModelsFieldNumber = 3;
    private readonly static int TrainingModelsDefaultValue = 0;

    private int trainingModels_;
    /// <summary>
    /// models which are currently training or testing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrainingModels {
      get { if ((_hasBits0 & 4) != 0) { return trainingModels_; } else { return TrainingModelsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        trainingModels_ = value;
      }
    }
    /// <summary>Gets whether the "trainingModels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrainingModels {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "trainingModels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrainingModels() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "failedTrainingModels" field.</summary>
    public const int FailedTrainingModelsFieldNumber = 4;
    private readonly static int FailedTrainingModelsDefaultValue = 0;

    private int failedTrainingModels_;
    /// <summary>
    /// models that failed during training.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FailedTrainingModels {
      get { if ((_hasBits0 & 8) != 0) { return failedTrainingModels_; } else { return FailedTrainingModelsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        failedTrainingModels_ = value;
      }
    }
    /// <summary>Gets whether the "failedTrainingModels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFailedTrainingModels {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "failedTrainingModels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFailedTrainingModels() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "trainedModels" field.</summary>
    public const int TrainedModelsFieldNumber = 5;
    private readonly static int TrainedModelsDefaultValue = 0;

    private int trainedModels_;
    /// <summary>
    /// models that were successful during training
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrainedModels {
      get { if ((_hasBits0 & 16) != 0) { return trainedModels_; } else { return TrainedModelsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        trainedModels_ = value;
      }
    }
    /// <summary>Gets whether the "trainedModels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrainedModels {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "trainedModels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrainedModels() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "waitingToTestModels" field.</summary>
    public const int WaitingToTestModelsFieldNumber = 6;
    private readonly static int WaitingToTestModelsDefaultValue = 0;

    private int waitingToTestModels_;
    /// <summary>
    /// models waiting testing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitingToTestModels {
      get { if ((_hasBits0 & 32) != 0) { return waitingToTestModels_; } else { return WaitingToTestModelsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        waitingToTestModels_ = value;
      }
    }
    /// <summary>Gets whether the "waitingToTestModels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWaitingToTestModels {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "waitingToTestModels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWaitingToTestModels() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "testingModels" field.</summary>
    public const int TestingModelsFieldNumber = 7;
    private readonly static int TestingModelsDefaultValue = 0;

    private int testingModels_;
    /// <summary>
    /// models in testing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestingModels {
      get { if ((_hasBits0 & 64) != 0) { return testingModels_; } else { return TestingModelsDefaultValue; } }
      set {
        _hasBits0 |= 64;
        testingModels_ = value;
      }
    }
    /// <summary>Gets whether the "testingModels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTestingModels {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "testingModels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTestingModels() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "failedTestingModels" field.</summary>
    public const int FailedTestingModelsFieldNumber = 8;
    private readonly static int FailedTestingModelsDefaultValue = 0;

    private int failedTestingModels_;
    /// <summary>
    /// models failed testing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FailedTestingModels {
      get { if ((_hasBits0 & 128) != 0) { return failedTestingModels_; } else { return FailedTestingModelsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        failedTestingModels_ = value;
      }
    }
    /// <summary>Gets whether the "failedTestingModels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFailedTestingModels {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "failedTestingModels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFailedTestingModels() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "testedModels" field.</summary>
    public const int TestedModelsFieldNumber = 9;
    private readonly static int TestedModelsDefaultValue = 0;

    private int testedModels_;
    /// <summary>
    /// Tested models
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestedModels {
      get { if ((_hasBits0 & 256) != 0) { return testedModels_; } else { return TestedModelsDefaultValue; } }
      set {
        _hasBits0 |= 256;
        testedModels_ = value;
      }
    }
    /// <summary>Gets whether the "testedModels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTestedModels {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "testedModels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTestedModels() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "trainers" field.</summary>
    public const int TrainersFieldNumber = 10;
    private readonly static int TrainersDefaultValue = 0;

    private int trainers_;
    /// <summary>
    /// Total number of trainers in this study
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Trainers {
      get { if ((_hasBits0 & 512) != 0) { return trainers_; } else { return TrainersDefaultValue; } }
      set {
        _hasBits0 |= 512;
        trainers_ = value;
      }
    }
    /// <summary>Gets whether the "trainers" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrainers {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "trainers" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrainers() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "freeTrainers" field.</summary>
    public const int FreeTrainersFieldNumber = 11;
    private readonly static int FreeTrainersDefaultValue = 0;

    private int freeTrainers_;
    /// <summary>
    /// Free trainers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTrainers {
      get { if ((_hasBits0 & 1024) != 0) { return freeTrainers_; } else { return FreeTrainersDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        freeTrainers_ = value;
      }
    }
    /// <summary>Gets whether the "freeTrainers" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFreeTrainers {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "freeTrainers" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFreeTrainers() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "budyTrainers" field.</summary>
    public const int BudyTrainersFieldNumber = 12;
    private readonly static int BudyTrainersDefaultValue = 0;

    private int budyTrainers_;
    /// <summary>
    /// TotalTrainers training
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BudyTrainers {
      get { if ((_hasBits0 & 2048) != 0) { return budyTrainers_; } else { return BudyTrainersDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        budyTrainers_ = value;
      }
    }
    /// <summary>Gets whether the "budyTrainers" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBudyTrainers {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "budyTrainers" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBudyTrainers() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 13;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time startTime_;
    /// <summary>
    /// Study start time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "trainingStartTime" field.</summary>
    public const int TrainingStartTimeFieldNumber = 14;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time trainingStartTime_;
    /// <summary>
    /// Start of the training phase
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time TrainingStartTime {
      get { return trainingStartTime_; }
      set {
        trainingStartTime_ = value;
      }
    }

    /// <summary>Field number for the "trainingCompletionTime" field.</summary>
    public const int TrainingCompletionTimeFieldNumber = 15;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time trainingCompletionTime_;
    /// <summary>
    /// End of the training phase.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time TrainingCompletionTime {
      get { return trainingCompletionTime_; }
      set {
        trainingCompletionTime_ = value;
      }
    }

    /// <summary>Field number for the "testingStarted" field.</summary>
    public const int TestingStartedFieldNumber = 16;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time testingStarted_;
    /// <summary>
    /// Start of the testing phase
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time TestingStarted {
      get { return testingStarted_; }
      set {
        testingStarted_ = value;
      }
    }

    /// <summary>Field number for the "testingCompletionTime" field.</summary>
    public const int TestingCompletionTimeFieldNumber = 17;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time testingCompletionTime_;
    /// <summary>
    /// Represents time when the study reached a successful complete or failure phase. It is not guaranteed to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time TestingCompletionTime {
      get { return testingCompletionTime_; }
      set {
        testingCompletionTime_ = value;
      }
    }

    /// <summary>Field number for the "completionTime" field.</summary>
    public const int CompletionTimeFieldNumber = 18;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time completionTime_;
    /// <summary>
    /// The study end time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time CompletionTime {
      get { return completionTime_; }
      set {
        completionTime_ = value;
      }
    }

    /// <summary>Field number for the "bestModel" field.</summary>
    public const int BestModelFieldNumber = 20;
    private readonly static string BestmodelaefaultValue = "";

    private string bestModel_;
    /// <summary>
    /// The Best model name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BestModel {
      get { return bestModel_ ?? BestmodelaefaultValue; }
      set {
        bestModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "bestModel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBestModel {
      get { return bestModel_ != null; }
    }
    /// <summary>Clears the value of the "bestModel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBestModel() {
      bestModel_ = null;
    }

    /// <summary>Field number for the "bestModelScore" field.</summary>
    public const int BestModelScoreFieldNumber = 21;
    private readonly static double BestModelScoreDefaultValue = 0D;

    private double bestModelScore_;
    /// <summary>
    /// The Best model score, so far.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BestModelScore {
      get { if ((_hasBits0 & 4096) != 0) { return bestModelScore_; } else { return BestModelScoreDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        bestModelScore_ = value;
      }
    }
    /// <summary>Gets whether the "bestModelScore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBestModelScore {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "bestModelScore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBestModelScore() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "profileUri" field.</summary>
    public const int ProfileUriFieldNumber = 22;
    private readonly static string ProfileUriDefaultValue = "";

    private string profileUri_;
    /// <summary>
    /// A reference to the profile uri which were produce during processing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfileUri {
      get { return profileUri_ ?? ProfileUriDefaultValue; }
      set {
        profileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "profileUri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProfileUri {
      get { return profileUri_ != null; }
    }
    /// <summary>Clears the value of the "profileUri" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProfileUri() {
      profileUri_ = null;
    }

    /// <summary>Field number for the "reportName" field.</summary>
    public const int ReportNameFieldNumber = 23;
    private readonly static string ReportNameDefaultValue = "";

    private string reportName_;
    /// <summary>
    /// The study report name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReportName {
      get { return reportName_ ?? ReportNameDefaultValue; }
      set {
        reportName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reportName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReportName {
      get { return reportName_ != null; }
    }
    /// <summary>Clears the value of the "reportName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReportName() {
      reportName_ = null;
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 24;
    private readonly static string PhaseDefaultValue = "";

    private string phase_;
    /// <summary>
    /// The phase of the study
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phase {
      get { return phase_ ?? PhaseDefaultValue; }
      set {
        phase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "phase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhase {
      get { return phase_ != null; }
    }
    /// <summary>Clears the value of the "phase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhase() {
      phase_ = null;
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 25;
    private static readonly pb::FieldCodec<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(202, global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyCondition.Parser);
    private readonly pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyCondition> conditions_ = new pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyCondition>();
    /// <summary>
    /// This is the set of partition levels
    /// Represents the latest available observations of a study state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.StudyCondition> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StudyStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StudyStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Models != other.Models) return false;
      if (WaitingToTrain != other.WaitingToTrain) return false;
      if (TrainingModels != other.TrainingModels) return false;
      if (FailedTrainingModels != other.FailedTrainingModels) return false;
      if (TrainedModels != other.TrainedModels) return false;
      if (WaitingToTestModels != other.WaitingToTestModels) return false;
      if (TestingModels != other.TestingModels) return false;
      if (FailedTestingModels != other.FailedTestingModels) return false;
      if (TestedModels != other.TestedModels) return false;
      if (Trainers != other.Trainers) return false;
      if (FreeTrainers != other.FreeTrainers) return false;
      if (BudyTrainers != other.BudyTrainers) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(TrainingStartTime, other.TrainingStartTime)) return false;
      if (!object.Equals(TrainingCompletionTime, other.TrainingCompletionTime)) return false;
      if (!object.Equals(TestingStarted, other.TestingStarted)) return false;
      if (!object.Equals(TestingCompletionTime, other.TestingCompletionTime)) return false;
      if (!object.Equals(CompletionTime, other.CompletionTime)) return false;
      if (BestModel != other.BestModel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BestModelScore, other.BestModelScore)) return false;
      if (ProfileUri != other.ProfileUri) return false;
      if (ReportName != other.ReportName) return false;
      if (Phase != other.Phase) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasModels) hash ^= Models.GetHashCode();
      if (HasWaitingToTrain) hash ^= WaitingToTrain.GetHashCode();
      if (HasTrainingModels) hash ^= TrainingModels.GetHashCode();
      if (HasFailedTrainingModels) hash ^= FailedTrainingModels.GetHashCode();
      if (HasTrainedModels) hash ^= TrainedModels.GetHashCode();
      if (HasWaitingToTestModels) hash ^= WaitingToTestModels.GetHashCode();
      if (HasTestingModels) hash ^= TestingModels.GetHashCode();
      if (HasFailedTestingModels) hash ^= FailedTestingModels.GetHashCode();
      if (HasTestedModels) hash ^= TestedModels.GetHashCode();
      if (HasTrainers) hash ^= Trainers.GetHashCode();
      if (HasFreeTrainers) hash ^= FreeTrainers.GetHashCode();
      if (HasBudyTrainers) hash ^= BudyTrainers.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (trainingStartTime_ != null) hash ^= TrainingStartTime.GetHashCode();
      if (trainingCompletionTime_ != null) hash ^= TrainingCompletionTime.GetHashCode();
      if (testingStarted_ != null) hash ^= TestingStarted.GetHashCode();
      if (testingCompletionTime_ != null) hash ^= TestingCompletionTime.GetHashCode();
      if (completionTime_ != null) hash ^= CompletionTime.GetHashCode();
      if (HasBestModel) hash ^= BestModel.GetHashCode();
      if (HasBestModelScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BestModelScore);
      if (HasProfileUri) hash ^= ProfileUri.GetHashCode();
      if (HasReportName) hash ^= ReportName.GetHashCode();
      if (HasPhase) hash ^= Phase.GetHashCode();
      hash ^= conditions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasModels) {
        output.WriteRawTag(8);
        output.WriteInt32(Models);
      }
      if (HasWaitingToTrain) {
        output.WriteRawTag(16);
        output.WriteInt32(WaitingToTrain);
      }
      if (HasTrainingModels) {
        output.WriteRawTag(24);
        output.WriteInt32(TrainingModels);
      }
      if (HasFailedTrainingModels) {
        output.WriteRawTag(32);
        output.WriteInt32(FailedTrainingModels);
      }
      if (HasTrainedModels) {
        output.WriteRawTag(40);
        output.WriteInt32(TrainedModels);
      }
      if (HasWaitingToTestModels) {
        output.WriteRawTag(48);
        output.WriteInt32(WaitingToTestModels);
      }
      if (HasTestingModels) {
        output.WriteRawTag(56);
        output.WriteInt32(TestingModels);
      }
      if (HasFailedTestingModels) {
        output.WriteRawTag(64);
        output.WriteInt32(FailedTestingModels);
      }
      if (HasTestedModels) {
        output.WriteRawTag(72);
        output.WriteInt32(TestedModels);
      }
      if (HasTrainers) {
        output.WriteRawTag(80);
        output.WriteInt32(Trainers);
      }
      if (HasFreeTrainers) {
        output.WriteRawTag(88);
        output.WriteInt32(FreeTrainers);
      }
      if (HasBudyTrainers) {
        output.WriteRawTag(96);
        output.WriteInt32(BudyTrainers);
      }
      if (startTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(StartTime);
      }
      if (trainingStartTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TrainingStartTime);
      }
      if (trainingCompletionTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(TrainingCompletionTime);
      }
      if (testingStarted_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(TestingStarted);
      }
      if (testingCompletionTime_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TestingCompletionTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CompletionTime);
      }
      if (HasBestModel) {
        output.WriteRawTag(162, 1);
        output.WriteString(BestModel);
      }
      if (HasBestModelScore) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(BestModelScore);
      }
      if (HasProfileUri) {
        output.WriteRawTag(178, 1);
        output.WriteString(ProfileUri);
      }
      if (HasReportName) {
        output.WriteRawTag(186, 1);
        output.WriteString(ReportName);
      }
      if (HasPhase) {
        output.WriteRawTag(194, 1);
        output.WriteString(Phase);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasModels) {
        output.WriteRawTag(8);
        output.WriteInt32(Models);
      }
      if (HasWaitingToTrain) {
        output.WriteRawTag(16);
        output.WriteInt32(WaitingToTrain);
      }
      if (HasTrainingModels) {
        output.WriteRawTag(24);
        output.WriteInt32(TrainingModels);
      }
      if (HasFailedTrainingModels) {
        output.WriteRawTag(32);
        output.WriteInt32(FailedTrainingModels);
      }
      if (HasTrainedModels) {
        output.WriteRawTag(40);
        output.WriteInt32(TrainedModels);
      }
      if (HasWaitingToTestModels) {
        output.WriteRawTag(48);
        output.WriteInt32(WaitingToTestModels);
      }
      if (HasTestingModels) {
        output.WriteRawTag(56);
        output.WriteInt32(TestingModels);
      }
      if (HasFailedTestingModels) {
        output.WriteRawTag(64);
        output.WriteInt32(FailedTestingModels);
      }
      if (HasTestedModels) {
        output.WriteRawTag(72);
        output.WriteInt32(TestedModels);
      }
      if (HasTrainers) {
        output.WriteRawTag(80);
        output.WriteInt32(Trainers);
      }
      if (HasFreeTrainers) {
        output.WriteRawTag(88);
        output.WriteInt32(FreeTrainers);
      }
      if (HasBudyTrainers) {
        output.WriteRawTag(96);
        output.WriteInt32(BudyTrainers);
      }
      if (startTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(StartTime);
      }
      if (trainingStartTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TrainingStartTime);
      }
      if (trainingCompletionTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(TrainingCompletionTime);
      }
      if (testingStarted_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(TestingStarted);
      }
      if (testingCompletionTime_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TestingCompletionTime);
      }
      if (completionTime_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CompletionTime);
      }
      if (HasBestModel) {
        output.WriteRawTag(162, 1);
        output.WriteString(BestModel);
      }
      if (HasBestModelScore) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(BestModelScore);
      }
      if (HasProfileUri) {
        output.WriteRawTag(178, 1);
        output.WriteString(ProfileUri);
      }
      if (HasReportName) {
        output.WriteRawTag(186, 1);
        output.WriteString(ReportName);
      }
      if (HasPhase) {
        output.WriteRawTag(194, 1);
        output.WriteString(Phase);
      }
      conditions_.WriteTo(ref output, _repeated_conditions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Models);
      }
      if (HasWaitingToTrain) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitingToTrain);
      }
      if (HasTrainingModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrainingModels);
      }
      if (HasFailedTrainingModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailedTrainingModels);
      }
      if (HasTrainedModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrainedModels);
      }
      if (HasWaitingToTestModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitingToTestModels);
      }
      if (HasTestingModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestingModels);
      }
      if (HasFailedTestingModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailedTestingModels);
      }
      if (HasTestedModels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestedModels);
      }
      if (HasTrainers) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Trainers);
      }
      if (HasFreeTrainers) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTrainers);
      }
      if (HasBudyTrainers) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BudyTrainers);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (trainingStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainingStartTime);
      }
      if (trainingCompletionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainingCompletionTime);
      }
      if (testingStarted_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TestingStarted);
      }
      if (testingCompletionTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TestingCompletionTime);
      }
      if (completionTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CompletionTime);
      }
      if (HasBestModel) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BestModel);
      }
      if (HasBestModelScore) {
        size += 2 + 8;
      }
      if (HasProfileUri) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProfileUri);
      }
      if (HasReportName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReportName);
      }
      if (HasPhase) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Phase);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StudyStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasModels) {
        Models = other.Models;
      }
      if (other.HasWaitingToTrain) {
        WaitingToTrain = other.WaitingToTrain;
      }
      if (other.HasTrainingModels) {
        TrainingModels = other.TrainingModels;
      }
      if (other.HasFailedTrainingModels) {
        FailedTrainingModels = other.FailedTrainingModels;
      }
      if (other.HasTrainedModels) {
        TrainedModels = other.TrainedModels;
      }
      if (other.HasWaitingToTestModels) {
        WaitingToTestModels = other.WaitingToTestModels;
      }
      if (other.HasTestingModels) {
        TestingModels = other.TestingModels;
      }
      if (other.HasFailedTestingModels) {
        FailedTestingModels = other.FailedTestingModels;
      }
      if (other.HasTestedModels) {
        TestedModels = other.TestedModels;
      }
      if (other.HasTrainers) {
        Trainers = other.Trainers;
      }
      if (other.HasFreeTrainers) {
        FreeTrainers = other.FreeTrainers;
      }
      if (other.HasBudyTrainers) {
        BudyTrainers = other.BudyTrainers;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.trainingStartTime_ != null) {
        if (trainingStartTime_ == null) {
          TrainingStartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        TrainingStartTime.MergeFrom(other.TrainingStartTime);
      }
      if (other.trainingCompletionTime_ != null) {
        if (trainingCompletionTime_ == null) {
          TrainingCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        TrainingCompletionTime.MergeFrom(other.TrainingCompletionTime);
      }
      if (other.testingStarted_ != null) {
        if (testingStarted_ == null) {
          TestingStarted = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        TestingStarted.MergeFrom(other.TestingStarted);
      }
      if (other.testingCompletionTime_ != null) {
        if (testingCompletionTime_ == null) {
          TestingCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        TestingCompletionTime.MergeFrom(other.TestingCompletionTime);
      }
      if (other.completionTime_ != null) {
        if (completionTime_ == null) {
          CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        CompletionTime.MergeFrom(other.CompletionTime);
      }
      if (other.HasBestModel) {
        BestModel = other.BestModel;
      }
      if (other.HasBestModelScore) {
        BestModelScore = other.BestModelScore;
      }
      if (other.HasProfileUri) {
        ProfileUri = other.ProfileUri;
      }
      if (other.HasReportName) {
        ReportName = other.ReportName;
      }
      if (other.HasPhase) {
        Phase = other.Phase;
      }
      conditions_.Add(other.conditions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Models = input.ReadInt32();
            break;
          }
          case 16: {
            WaitingToTrain = input.ReadInt32();
            break;
          }
          case 24: {
            TrainingModels = input.ReadInt32();
            break;
          }
          case 32: {
            FailedTrainingModels = input.ReadInt32();
            break;
          }
          case 40: {
            TrainedModels = input.ReadInt32();
            break;
          }
          case 48: {
            WaitingToTestModels = input.ReadInt32();
            break;
          }
          case 56: {
            TestingModels = input.ReadInt32();
            break;
          }
          case 64: {
            FailedTestingModels = input.ReadInt32();
            break;
          }
          case 72: {
            TestedModels = input.ReadInt32();
            break;
          }
          case 80: {
            Trainers = input.ReadInt32();
            break;
          }
          case 88: {
            FreeTrainers = input.ReadInt32();
            break;
          }
          case 96: {
            BudyTrainers = input.ReadInt32();
            break;
          }
          case 106: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 114: {
            if (trainingStartTime_ == null) {
              TrainingStartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TrainingStartTime);
            break;
          }
          case 122: {
            if (trainingCompletionTime_ == null) {
              TrainingCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TrainingCompletionTime);
            break;
          }
          case 130: {
            if (testingStarted_ == null) {
              TestingStarted = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TestingStarted);
            break;
          }
          case 138: {
            if (testingCompletionTime_ == null) {
              TestingCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TestingCompletionTime);
            break;
          }
          case 146: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 162: {
            BestModel = input.ReadString();
            break;
          }
          case 169: {
            BestModelScore = input.ReadDouble();
            break;
          }
          case 178: {
            ProfileUri = input.ReadString();
            break;
          }
          case 186: {
            ReportName = input.ReadString();
            break;
          }
          case 194: {
            Phase = input.ReadString();
            break;
          }
          case 202: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Models = input.ReadInt32();
            break;
          }
          case 16: {
            WaitingToTrain = input.ReadInt32();
            break;
          }
          case 24: {
            TrainingModels = input.ReadInt32();
            break;
          }
          case 32: {
            FailedTrainingModels = input.ReadInt32();
            break;
          }
          case 40: {
            TrainedModels = input.ReadInt32();
            break;
          }
          case 48: {
            WaitingToTestModels = input.ReadInt32();
            break;
          }
          case 56: {
            TestingModels = input.ReadInt32();
            break;
          }
          case 64: {
            FailedTestingModels = input.ReadInt32();
            break;
          }
          case 72: {
            TestedModels = input.ReadInt32();
            break;
          }
          case 80: {
            Trainers = input.ReadInt32();
            break;
          }
          case 88: {
            FreeTrainers = input.ReadInt32();
            break;
          }
          case 96: {
            BudyTrainers = input.ReadInt32();
            break;
          }
          case 106: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 114: {
            if (trainingStartTime_ == null) {
              TrainingStartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TrainingStartTime);
            break;
          }
          case 122: {
            if (trainingCompletionTime_ == null) {
              TrainingCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TrainingCompletionTime);
            break;
          }
          case 130: {
            if (testingStarted_ == null) {
              TestingStarted = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TestingStarted);
            break;
          }
          case 138: {
            if (testingCompletionTime_ == null) {
              TestingCompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(TestingCompletionTime);
            break;
          }
          case 146: {
            if (completionTime_ == null) {
              CompletionTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(CompletionTime);
            break;
          }
          case 162: {
            BestModel = input.ReadString();
            break;
          }
          case 169: {
            BestModelScore = input.ReadDouble();
            break;
          }
          case 178: {
            ProfileUri = input.ReadString();
            break;
          }
          case 186: {
            ReportName = input.ReadString();
            break;
          }
          case 194: {
            Phase = input.ReadString();
            break;
          }
          case 202: {
            conditions_.AddEntriesFrom(ref input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// SuccessiveHalvingOptions define the parameters for the successive halving algorithm
  /// </summary>
  public sealed partial class SuccessiveHalvingOptions : pb::IMessage<SuccessiveHalvingOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SuccessiveHalvingOptions> _parser = new pb::MessageParser<SuccessiveHalvingOptions>(() => new SuccessiveHalvingOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuccessiveHalvingOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuccessiveHalvingOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuccessiveHalvingOptions(SuccessiveHalvingOptions other) : this() {
      _hasBits0 = other._hasBits0;
      maxBudget_ = other.maxBudget_;
      eliminationRate_ = other.eliminationRate_;
      modality_ = other.modality_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuccessiveHalvingOptions Clone() {
      return new SuccessiveHalvingOptions(this);
    }

    /// <summary>Field number for the "maxBudget" field.</summary>
    public const int MaxBudgetFieldNumber = 6;
    private readonly static int MaxBudgetDefaultValue = 0;

    private int maxBudget_;
    /// <summary>
    /// The maximum budget allocated to each model during SH search.
    /// The default max budget is 81
    /// +kubebuilder:default:=81
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBudget {
      get { if ((_hasBits0 & 1) != 0) { return maxBudget_; } else { return MaxBudgetDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maxBudget_ = value;
      }
    }
    /// <summary>Gets whether the "maxBudget" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxBudget {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "maxBudget" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxBudget() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "eliminationRate" field.</summary>
    public const int EliminationRateFieldNumber = 7;
    private readonly static int EliminationRateDefaultValue = 0;

    private int eliminationRate_;
    /// <summary>
    /// The rate of elimination during SH search, such that only 1/rate of models are promoted to the
    /// next half
    /// +kubebuilder:default:=3
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EliminationRate {
      get { if ((_hasBits0 & 2) != 0) { return eliminationRate_; } else { return EliminationRateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        eliminationRate_ = value;
      }
    }
    /// <summary>Gets whether the "eliminationRate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEliminationRate {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "eliminationRate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEliminationRate() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "modality" field.</summary>
    public const int ModalityFieldNumber = 8;
    private readonly static string ModalityDefaultValue = "";

    private string modality_;
    /// <summary>
    /// The modality type. The default modality is based on the type of models
    /// For deep models - we use epocs.
    /// For classical models - we use data
    /// +kubebuilder:default:=epochs
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Modality {
      get { return modality_ ?? ModalityDefaultValue; }
      set {
        modality_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "modality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModality {
      get { return modality_ != null; }
    }
    /// <summary>Clears the value of the "modality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModality() {
      modality_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuccessiveHalvingOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuccessiveHalvingOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxBudget != other.MaxBudget) return false;
      if (EliminationRate != other.EliminationRate) return false;
      if (Modality != other.Modality) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMaxBudget) hash ^= MaxBudget.GetHashCode();
      if (HasEliminationRate) hash ^= EliminationRate.GetHashCode();
      if (HasModality) hash ^= Modality.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMaxBudget) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxBudget);
      }
      if (HasEliminationRate) {
        output.WriteRawTag(56);
        output.WriteInt32(EliminationRate);
      }
      if (HasModality) {
        output.WriteRawTag(66);
        output.WriteString(Modality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMaxBudget) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxBudget);
      }
      if (HasEliminationRate) {
        output.WriteRawTag(56);
        output.WriteInt32(EliminationRate);
      }
      if (HasModality) {
        output.WriteRawTag(66);
        output.WriteString(Modality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMaxBudget) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBudget);
      }
      if (HasEliminationRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EliminationRate);
      }
      if (HasModality) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Modality);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuccessiveHalvingOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasMaxBudget) {
        MaxBudget = other.MaxBudget;
      }
      if (other.HasEliminationRate) {
        EliminationRate = other.EliminationRate;
      }
      if (other.HasModality) {
        Modality = other.Modality;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 48: {
            MaxBudget = input.ReadInt32();
            break;
          }
          case 56: {
            EliminationRate = input.ReadInt32();
            break;
          }
          case 66: {
            Modality = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 48: {
            MaxBudget = input.ReadInt32();
            break;
          }
          case 56: {
            EliminationRate = input.ReadInt32();
            break;
          }
          case 66: {
            Modality = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SuccessiveHalvingSpec : pb::IMessage<SuccessiveHalvingSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SuccessiveHalvingSpec> _parser = new pb::MessageParser<SuccessiveHalvingSpec>(() => new SuccessiveHalvingSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuccessiveHalvingSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuccessiveHalvingSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuccessiveHalvingSpec(SuccessiveHalvingSpec other) : this() {
      _hasBits0 = other._hasBits0;
      budget_ = other.budget_;
      bracket_ = other.bracket_;
      rung_ = other.rung_;
      confID_ = other.confID_;
      modality_ = other.modality_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuccessiveHalvingSpec Clone() {
      return new SuccessiveHalvingSpec(this);
    }

    /// <summary>Field number for the "budget" field.</summary>
    public const int BudgetFieldNumber = 1;
    private readonly static int BudgetDefaultValue = 0;

    private int budget_;
    /// <summary>
    /// The budget is used in multi fidelity search.
    /// This is the percent of fidelity of the model. The meaning is based on the model configuration.
    /// For example fidelity is number of epochs in sgd alg
    /// Or can be percent of the data in non sgd algorithm.
    /// +kubebuilder:validation:Optional
    /// +kubebuilder:validation:Maximum=128
    /// +kubebuilder:validation:Minimum=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Budget {
      get { if ((_hasBits0 & 1) != 0) { return budget_; } else { return BudgetDefaultValue; } }
      set {
        _hasBits0 |= 1;
        budget_ = value;
      }
    }
    /// <summary>Gets whether the "budget" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBudget {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "budget" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBudget() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bracket" field.</summary>
    public const int BracketFieldNumber = 2;
    private readonly static int BracketDefaultValue = 0;

    private int bracket_;
    /// <summary>
    /// The bracket of the model when running multi fidelity search.
    /// +kubebuilder:validation:Optional
    /// +kubebuilder:validation:Maximum=128
    /// +kubebuilder:validation:Minimum=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bracket {
      get { if ((_hasBits0 & 2) != 0) { return bracket_; } else { return BracketDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bracket_ = value;
      }
    }
    /// <summary>Gets whether the "bracket" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBracket {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bracket" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBracket() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "rung" field.</summary>
    public const int RungFieldNumber = 3;
    private readonly static int RungDefaultValue = 0;

    private int rung_;
    /// <summary>
    /// The rung of the model
    /// +kubebuilder:validation:Optional
    /// +kubebuilder:validation:Maximum=128
    /// +kubebuilder:validation:Minimum=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rung {
      get { if ((_hasBits0 & 4) != 0) { return rung_; } else { return RungDefaultValue; } }
      set {
        _hasBits0 |= 4;
        rung_ = value;
      }
    }
    /// <summary>Gets whether the "rung" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRung {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "rung" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRung() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "confID" field.</summary>
    public const int ConfIDFieldNumber = 4;
    private readonly static int ConfIDDefaultValue = 0;

    private int confID_;
    /// <summary>
    /// The configuration id allocated to this model in rung 0
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfID {
      get { if ((_hasBits0 & 8) != 0) { return confID_; } else { return ConfIDDefaultValue; } }
      set {
        _hasBits0 |= 8;
        confID_ = value;
      }
    }
    /// <summary>Gets whether the "confID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConfID {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "confID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfID() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "modality" field.</summary>
    public const int ModalityFieldNumber = 26;
    private readonly static string ModalityDefaultValue = "";

    private string modality_;
    /// <summary>
    /// The modality type. The default modality is based on the type of models
    /// For deep models - we use epocs.
    /// For classical models - we use data
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Modality {
      get { return modality_ ?? ModalityDefaultValue; }
      set {
        modality_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "modality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModality {
      get { return modality_ != null; }
    }
    /// <summary>Clears the value of the "modality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModality() {
      modality_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuccessiveHalvingSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuccessiveHalvingSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Budget != other.Budget) return false;
      if (Bracket != other.Bracket) return false;
      if (Rung != other.Rung) return false;
      if (ConfID != other.ConfID) return false;
      if (Modality != other.Modality) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBudget) hash ^= Budget.GetHashCode();
      if (HasBracket) hash ^= Bracket.GetHashCode();
      if (HasRung) hash ^= Rung.GetHashCode();
      if (HasConfID) hash ^= ConfID.GetHashCode();
      if (HasModality) hash ^= Modality.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBudget) {
        output.WriteRawTag(8);
        output.WriteInt32(Budget);
      }
      if (HasBracket) {
        output.WriteRawTag(16);
        output.WriteInt32(Bracket);
      }
      if (HasRung) {
        output.WriteRawTag(24);
        output.WriteInt32(Rung);
      }
      if (HasConfID) {
        output.WriteRawTag(32);
        output.WriteInt32(ConfID);
      }
      if (HasModality) {
        output.WriteRawTag(210, 1);
        output.WriteString(Modality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBudget) {
        output.WriteRawTag(8);
        output.WriteInt32(Budget);
      }
      if (HasBracket) {
        output.WriteRawTag(16);
        output.WriteInt32(Bracket);
      }
      if (HasRung) {
        output.WriteRawTag(24);
        output.WriteInt32(Rung);
      }
      if (HasConfID) {
        output.WriteRawTag(32);
        output.WriteInt32(ConfID);
      }
      if (HasModality) {
        output.WriteRawTag(210, 1);
        output.WriteString(Modality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBudget) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Budget);
      }
      if (HasBracket) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bracket);
      }
      if (HasRung) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rung);
      }
      if (HasConfID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfID);
      }
      if (HasModality) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Modality);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuccessiveHalvingSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasBudget) {
        Budget = other.Budget;
      }
      if (other.HasBracket) {
        Bracket = other.Bracket;
      }
      if (other.HasRung) {
        Rung = other.Rung;
      }
      if (other.HasConfID) {
        ConfID = other.ConfID;
      }
      if (other.HasModality) {
        Modality = other.Modality;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Budget = input.ReadInt32();
            break;
          }
          case 16: {
            Bracket = input.ReadInt32();
            break;
          }
          case 24: {
            Rung = input.ReadInt32();
            break;
          }
          case 32: {
            ConfID = input.ReadInt32();
            break;
          }
          case 210: {
            Modality = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Budget = input.ReadInt32();
            break;
          }
          case 16: {
            Bracket = input.ReadInt32();
            break;
          }
          case 24: {
            Rung = input.ReadInt32();
            break;
          }
          case 32: {
            ConfID = input.ReadInt32();
            break;
          }
          case 210: {
            Modality = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// TextPipelineSpec is the specification for preprocessing of text columns
  /// </summary>
  public sealed partial class TextPipelineSpec : pb::IMessage<TextPipelineSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextPipelineSpec> _parser = new pb::MessageParser<TextPipelineSpec>(() => new TextPipelineSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextPipelineSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPipelineSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPipelineSpec(TextPipelineSpec other) : this() {
      _hasBits0 = other._hasBits0;
      columns_ = other.columns_.Clone();
      encoder_ = other.encoder_;
      tokenizer_ = other.tokenizer_;
      stopwords_ = other.stopwords_;
      pos_ = other.pos_;
      lemma_ = other.lemma_;
      stem_ = other.stem_;
      embedding_ = other.embedding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPipelineSpec Clone() {
      return new TextPipelineSpec(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of test columns
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "encoder" field.</summary>
    public const int EncoderFieldNumber = 2;
    private readonly static string EncoderDefaultValue = "";

    private string encoder_;
    /// <summary>
    /// The text encoder (e.g. tfidf)
    /// +kubebuilder:default:=auto
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Encoder {
      get { return encoder_ ?? EncoderDefaultValue; }
      set {
        encoder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "encoder" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncoder {
      get { return encoder_ != null; }
    }
    /// <summary>Clears the value of the "encoder" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncoder() {
      encoder_ = null;
    }

    /// <summary>Field number for the "tokenizer" field.</summary>
    public const int TokenizerFieldNumber = 3;
    private readonly static string TokenizerDefaultValue = "";

    private string tokenizer_;
    /// <summary>
    /// Text tokenizer
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tokenizer {
      get { return tokenizer_ ?? TokenizerDefaultValue; }
      set {
        tokenizer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tokenizer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTokenizer {
      get { return tokenizer_ != null; }
    }
    /// <summary>Clears the value of the "tokenizer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTokenizer() {
      tokenizer_ = null;
    }

    /// <summary>Field number for the "stopwords" field.</summary>
    public const int StopwordsFieldNumber = 4;
    private readonly static bool StopwordsDefaultValue = false;

    private bool stopwords_;
    /// <summary>
    /// If true, the controller will Add stop word handling to the text pipeline.
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Stopwords {
      get { if ((_hasBits0 & 1) != 0) { return stopwords_; } else { return StopwordsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        stopwords_ = value;
      }
    }
    /// <summary>Gets whether the "stopwords" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStopwords {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stopwords" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStopwords() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private readonly static bool PosDefaultValue = false;

    private bool pos_;
    /// <summary>
    /// If true, the controller will Add part of speech handling to the text pipeline.
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Pos {
      get { if ((_hasBits0 & 2) != 0) { return pos_; } else { return PosDefaultValue; } }
      set {
        _hasBits0 |= 2;
        pos_ = value;
      }
    }
    /// <summary>Gets whether the "pos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPos {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "pos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPos() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lemma" field.</summary>
    public const int LemmaFieldNumber = 6;
    private readonly static bool LemmaDefaultValue = false;

    private bool lemma_;
    /// <summary>
    /// If true, the controller will Add lemma handling to the text pipeline.
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Lemma {
      get { if ((_hasBits0 & 4) != 0) { return lemma_; } else { return LemmaDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lemma_ = value;
      }
    }
    /// <summary>Gets whether the "lemma" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLemma {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lemma" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLemma() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "stem" field.</summary>
    public const int StemFieldNumber = 7;
    private readonly static bool StemDefaultValue = false;

    private bool stem_;
    /// <summary>
    /// If true, the controller will Add stemmer handling to the text pipeline.
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Stem {
      get { if ((_hasBits0 & 8) != 0) { return stem_; } else { return StemDefaultValue; } }
      set {
        _hasBits0 |= 8;
        stem_ = value;
      }
    }
    /// <summary>Gets whether the "stem" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStem {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "stem" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStem() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "embedding" field.</summary>
    public const int EmbeddingFieldNumber = 8;
    private readonly static string EmbeddingDefaultValue = "";

    private string embedding_;
    /// <summary>
    /// If true, the controller will Add word embedding handling to the text pipeline.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Embedding {
      get { return embedding_ ?? EmbeddingDefaultValue; }
      set {
        embedding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "embedding" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEmbedding {
      get { return embedding_ != null; }
    }
    /// <summary>Clears the value of the "embedding" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEmbedding() {
      embedding_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextPipelineSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextPipelineSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if (Encoder != other.Encoder) return false;
      if (Tokenizer != other.Tokenizer) return false;
      if (Stopwords != other.Stopwords) return false;
      if (Pos != other.Pos) return false;
      if (Lemma != other.Lemma) return false;
      if (Stem != other.Stem) return false;
      if (Embedding != other.Embedding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      if (HasEncoder) hash ^= Encoder.GetHashCode();
      if (HasTokenizer) hash ^= Tokenizer.GetHashCode();
      if (HasStopwords) hash ^= Stopwords.GetHashCode();
      if (HasPos) hash ^= Pos.GetHashCode();
      if (HasLemma) hash ^= Lemma.GetHashCode();
      if (HasStem) hash ^= Stem.GetHashCode();
      if (HasEmbedding) hash ^= Embedding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      columns_.WriteTo(output, _repeated_columns_codec);
      if (HasEncoder) {
        output.WriteRawTag(18);
        output.WriteString(Encoder);
      }
      if (HasTokenizer) {
        output.WriteRawTag(26);
        output.WriteString(Tokenizer);
      }
      if (HasStopwords) {
        output.WriteRawTag(32);
        output.WriteBool(Stopwords);
      }
      if (HasPos) {
        output.WriteRawTag(40);
        output.WriteBool(Pos);
      }
      if (HasLemma) {
        output.WriteRawTag(48);
        output.WriteBool(Lemma);
      }
      if (HasStem) {
        output.WriteRawTag(56);
        output.WriteBool(Stem);
      }
      if (HasEmbedding) {
        output.WriteRawTag(66);
        output.WriteString(Embedding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (HasEncoder) {
        output.WriteRawTag(18);
        output.WriteString(Encoder);
      }
      if (HasTokenizer) {
        output.WriteRawTag(26);
        output.WriteString(Tokenizer);
      }
      if (HasStopwords) {
        output.WriteRawTag(32);
        output.WriteBool(Stopwords);
      }
      if (HasPos) {
        output.WriteRawTag(40);
        output.WriteBool(Pos);
      }
      if (HasLemma) {
        output.WriteRawTag(48);
        output.WriteBool(Lemma);
      }
      if (HasStem) {
        output.WriteRawTag(56);
        output.WriteBool(Stem);
      }
      if (HasEmbedding) {
        output.WriteRawTag(66);
        output.WriteString(Embedding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (HasEncoder) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Encoder);
      }
      if (HasTokenizer) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tokenizer);
      }
      if (HasStopwords) {
        size += 1 + 1;
      }
      if (HasPos) {
        size += 1 + 1;
      }
      if (HasLemma) {
        size += 1 + 1;
      }
      if (HasStem) {
        size += 1 + 1;
      }
      if (HasEmbedding) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Embedding);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextPipelineSpec other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      if (other.HasEncoder) {
        Encoder = other.Encoder;
      }
      if (other.HasTokenizer) {
        Tokenizer = other.Tokenizer;
      }
      if (other.HasStopwords) {
        Stopwords = other.Stopwords;
      }
      if (other.HasPos) {
        Pos = other.Pos;
      }
      if (other.HasLemma) {
        Lemma = other.Lemma;
      }
      if (other.HasStem) {
        Stem = other.Stem;
      }
      if (other.HasEmbedding) {
        Embedding = other.Embedding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Encoder = input.ReadString();
            break;
          }
          case 26: {
            Tokenizer = input.ReadString();
            break;
          }
          case 32: {
            Stopwords = input.ReadBool();
            break;
          }
          case 40: {
            Pos = input.ReadBool();
            break;
          }
          case 48: {
            Lemma = input.ReadBool();
            break;
          }
          case 56: {
            Stem = input.ReadBool();
            break;
          }
          case 66: {
            Embedding = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Encoder = input.ReadString();
            break;
          }
          case 26: {
            Tokenizer = input.ReadString();
            break;
          }
          case 32: {
            Stopwords = input.ReadBool();
            break;
          }
          case 40: {
            Pos = input.ReadBool();
            break;
          }
          case 48: {
            Lemma = input.ReadBool();
            break;
          }
          case 56: {
            Stem = input.ReadBool();
            break;
          }
          case 66: {
            Embedding = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// TrainingResourceRequest specify the desired resources for the training job
  /// </summary>
  public sealed partial class TrainingResourceRequest : pb::IMessage<TrainingResourceRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrainingResourceRequest> _parser = new pb::MessageParser<TrainingResourceRequest>(() => new TrainingResourceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainingResourceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingResourceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingResourceRequest(TrainingResourceRequest other) : this() {
      gpu_ = other.gpu_;
      cpu_ = other.cpu_;
      mem_ = other.mem_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingResourceRequest Clone() {
      return new TrainingResourceRequest(this);
    }

    /// <summary>Field number for the "gpu" field.</summary>
    public const int GpuFieldNumber = 1;
    private readonly static string GpuDefaultValue = "";

    private string gpu_;
    /// <summary>
    /// Gpu specify the desired gpu requirements.  will be compared
    /// +kubebuilder:default:="M"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gpu {
      get { return gpu_ ?? GpuDefaultValue; }
      set {
        gpu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "gpu" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGpu {
      get { return gpu_ != null; }
    }
    /// <summary>Clears the value of the "gpu" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGpu() {
      gpu_ = null;
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 2;
    private readonly static string CpuDefaultValue = "";

    private string cpu_;
    /// <summary>
    /// Cpu specify the cpu requirements will be compared
    /// +kubebuilder:default:="M"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cpu {
      get { return cpu_ ?? CpuDefaultValue; }
      set {
        cpu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cpu" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpu {
      get { return cpu_ != null; }
    }
    /// <summary>Clears the value of the "cpu" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpu() {
      cpu_ = null;
    }

    /// <summary>Field number for the "mem" field.</summary>
    public const int MemFieldNumber = 3;
    private readonly static string MemDefaultValue = "";

    private string mem_;
    /// <summary>
    /// Mem define the memory resource requirements will be compared
    /// +kubebuilder:default:="M"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mem {
      get { return mem_ ?? MemDefaultValue; }
      set {
        mem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mem" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMem {
      get { return mem_ != null; }
    }
    /// <summary>Clears the value of the "mem" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMem() {
      mem_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainingResourceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainingResourceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gpu != other.Gpu) return false;
      if (Cpu != other.Cpu) return false;
      if (Mem != other.Mem) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGpu) hash ^= Gpu.GetHashCode();
      if (HasCpu) hash ^= Cpu.GetHashCode();
      if (HasMem) hash ^= Mem.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGpu) {
        output.WriteRawTag(10);
        output.WriteString(Gpu);
      }
      if (HasCpu) {
        output.WriteRawTag(18);
        output.WriteString(Cpu);
      }
      if (HasMem) {
        output.WriteRawTag(26);
        output.WriteString(Mem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGpu) {
        output.WriteRawTag(10);
        output.WriteString(Gpu);
      }
      if (HasCpu) {
        output.WriteRawTag(18);
        output.WriteString(Cpu);
      }
      if (HasMem) {
        output.WriteRawTag(26);
        output.WriteString(Mem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGpu) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gpu);
      }
      if (HasCpu) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cpu);
      }
      if (HasMem) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mem);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainingResourceRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasGpu) {
        Gpu = other.Gpu;
      }
      if (other.HasCpu) {
        Cpu = other.Cpu;
      }
      if (other.HasMem) {
        Mem = other.Mem;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Gpu = input.ReadString();
            break;
          }
          case 18: {
            Cpu = input.ReadString();
            break;
          }
          case 26: {
            Mem = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Gpu = input.ReadString();
            break;
          }
          case 18: {
            Cpu = input.ReadString();
            break;
          }
          case 26: {
            Mem = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// TrainingSpec is the specification of the training process
  /// </summary>
  public sealed partial class TrainingSpec : pb::IMessage<TrainingSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrainingSpec> _parser = new pb::MessageParser<TrainingSpec>(() => new TrainingSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainingSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingSpec(TrainingSpec other) : this() {
      _hasBits0 = other._hasBits0;
      priority_ = other.priority_;
      cvtype_ = other.cvtype_;
      cv_ = other.cv_;
      folds_ = other.folds_;
      retry_ = other.retry_;
      evalMetrics_ = other.evalMetrics_.Clone();
      earlyStop_ = other.earlyStop_;
      checkpointInterval_ = other.checkpointInterval_;
      forecast_ = other.forecast_ != null ? other.forecast_.Clone() : null;
      sh_ = other.sh_ != null ? other.sh_.Clone() : null;
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingSpec Clone() {
      return new TrainingSpec(this);
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private readonly static int PriorityDefaultValue = 0;

    private int priority_;
    /// <summary>
    /// Priority specify the priority of the model in the training queue.
    /// +kubebuilder:validation:Optional
    /// +kubebuilder:default:=5
    /// +kubebuilder:validation:Maximum=10
    /// +kubebuilder:validation:Minimum=1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { if ((_hasBits0 & 1) != 0) { return priority_; } else { return PriorityDefaultValue; } }
      set {
        _hasBits0 |= 1;
        priority_ = value;
      }
    }
    /// <summary>Gets whether the "priority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPriority {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "priority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPriority() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cvtype" field.</summary>
    public const int CvtypeFieldNumber = 3;
    private readonly static string CvtypeDefaultValue = "";

    private string cvtype_;
    /// <summary>
    /// The  type of cross validation.
    /// if we have a validation set, we do not do cv.
    /// +kubebuilder:default:=kfold
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cvtype {
      get { return cvtype_ ?? CvtypeDefaultValue; }
      set {
        cvtype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cvtype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCvtype {
      get { return cvtype_ != null; }
    }
    /// <summary>Clears the value of the "cvtype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCvtype() {
      cvtype_ = null;
    }

    /// <summary>Field number for the "cv" field.</summary>
    public const int CvFieldNumber = 4;
    private readonly static bool CvDefaultValue = false;

    private bool cv_;
    /// <summary>
    /// If true, this is a cross validation using folds. If False, use the validation set.
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cv {
      get { if ((_hasBits0 & 2) != 0) { return cv_; } else { return CvDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cv_ = value;
      }
    }
    /// <summary>Gets whether the "cv" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCv {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cv" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCv() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "folds" field.</summary>
    public const int FoldsFieldNumber = 6;
    private readonly static int FoldsDefaultValue = 0;

    private int folds_;
    /// <summary>
    /// The number of folds during cross validation.
    /// +kubebuilder:default:=5
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Folds {
      get { if ((_hasBits0 & 4) != 0) { return folds_; } else { return FoldsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        folds_ = value;
      }
    }
    /// <summary>Gets whether the "folds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFolds {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "folds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFolds() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "retry" field.</summary>
    public const int RetryFieldNumber = 7;
    private readonly static int RetryDefaultValue = 0;

    private int retry_;
    /// <summary>
    /// Retry attempt is the number of training retry for this model,
    /// +kubebuilder:default:=5
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Retry {
      get { if ((_hasBits0 & 8) != 0) { return retry_; } else { return RetryDefaultValue; } }
      set {
        _hasBits0 |= 8;
        retry_ = value;
      }
    }
    /// <summary>Gets whether the "retry" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRetry {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "retry" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRetry() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "evalMetrics" field.</summary>
    public const int EvalMetricsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_evalMetrics_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> evalMetrics_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Evaluation metrics are the scores
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> EvalMetrics {
      get { return evalMetrics_; }
    }

    /// <summary>Field number for the "earlyStop" field.</summary>
    public const int EarlyStopFieldNumber = 9;
    private readonly static bool EarlyStopDefaultValue = false;

    private bool earlyStop_;
    /// <summary>
    /// Early stopping, stop the training after X models with no improvement.
    /// +kubebuilder:default:=false
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EarlyStop {
      get { if ((_hasBits0 & 16) != 0) { return earlyStop_; } else { return EarlyStopDefaultValue; } }
      set {
        _hasBits0 |= 16;
        earlyStop_ = value;
      }
    }
    /// <summary>Gets whether the "earlyStop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEarlyStop {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "earlyStop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEarlyStop() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "checkpointInterval" field.</summary>
    public const int CheckpointIntervalFieldNumber = 10;
    private readonly static int CheckpointIntervalDefaultValue = 0;

    private int checkpointInterval_;
    /// <summary>
    /// Add snapshot interval for long training time in minutes.
    /// This is used to checkpoint training model.
    /// +kubebuilder:validation:Optional
    /// +kubebuilder:default:=10
    /// +kubebuilder:validation:Minimum=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckpointInterval {
      get { if ((_hasBits0 & 32) != 0) { return checkpointInterval_; } else { return CheckpointIntervalDefaultValue; } }
      set {
        _hasBits0 |= 32;
        checkpointInterval_ = value;
      }
    }
    /// <summary>Gets whether the "checkpointInterval" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheckpointInterval {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "checkpointInterval" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCheckpointInterval() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "forecast" field.</summary>
    public const int ForecastFieldNumber = 11;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec forecast_;
    /// <summary>
    /// Define the forecast period for time series studies. This is only used in time series models.
    /// Default: Empty
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec Forecast {
      get { return forecast_; }
      set {
        forecast_ = value;
      }
    }

    /// <summary>Field number for the "sh" field.</summary>
    public const int ShFieldNumber = 12;
    private global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingSpec sh_;
    /// <summary>
    /// Successive halving represent the configuration for the model training, when running
    /// the SuccessiveHalvingSpec model search algorithm
    /// The metrics are evaluated using the final model, both on the training set
    /// and on the test set
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingSpec Sh {
      get { return sh_; }
      set {
        sh_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 13;
    private readonly static double SeedDefaultValue = 0D;

    private double seed_;
    /// <summary>
    /// Used as the random state for an estimator if needed (for example, in RandomForestClassifier)
    /// +kubebuilder:default:=42
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Seed {
      get { if ((_hasBits0 & 64) != 0) { return seed_; } else { return SeedDefaultValue; } }
      set {
        _hasBits0 |= 64;
        seed_ = value;
      }
    }
    /// <summary>Gets whether the "seed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeed {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "seed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeed() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainingSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainingSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Priority != other.Priority) return false;
      if (Cvtype != other.Cvtype) return false;
      if (Cv != other.Cv) return false;
      if (Folds != other.Folds) return false;
      if (Retry != other.Retry) return false;
      if(!evalMetrics_.Equals(other.evalMetrics_)) return false;
      if (EarlyStop != other.EarlyStop) return false;
      if (CheckpointInterval != other.CheckpointInterval) return false;
      if (!object.Equals(Forecast, other.Forecast)) return false;
      if (!object.Equals(Sh, other.Sh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Seed, other.Seed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPriority) hash ^= Priority.GetHashCode();
      if (HasCvtype) hash ^= Cvtype.GetHashCode();
      if (HasCv) hash ^= Cv.GetHashCode();
      if (HasFolds) hash ^= Folds.GetHashCode();
      if (HasRetry) hash ^= Retry.GetHashCode();
      hash ^= evalMetrics_.GetHashCode();
      if (HasEarlyStop) hash ^= EarlyStop.GetHashCode();
      if (HasCheckpointInterval) hash ^= CheckpointInterval.GetHashCode();
      if (forecast_ != null) hash ^= Forecast.GetHashCode();
      if (sh_ != null) hash ^= Sh.GetHashCode();
      if (HasSeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Seed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPriority) {
        output.WriteRawTag(16);
        output.WriteInt32(Priority);
      }
      if (HasCvtype) {
        output.WriteRawTag(26);
        output.WriteString(Cvtype);
      }
      if (HasCv) {
        output.WriteRawTag(32);
        output.WriteBool(Cv);
      }
      if (HasFolds) {
        output.WriteRawTag(48);
        output.WriteInt32(Folds);
      }
      if (HasRetry) {
        output.WriteRawTag(56);
        output.WriteInt32(Retry);
      }
      evalMetrics_.WriteTo(output, _repeated_evalMetrics_codec);
      if (HasEarlyStop) {
        output.WriteRawTag(72);
        output.WriteBool(EarlyStop);
      }
      if (HasCheckpointInterval) {
        output.WriteRawTag(80);
        output.WriteInt32(CheckpointInterval);
      }
      if (forecast_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Forecast);
      }
      if (sh_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Sh);
      }
      if (HasSeed) {
        output.WriteRawTag(105);
        output.WriteDouble(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPriority) {
        output.WriteRawTag(16);
        output.WriteInt32(Priority);
      }
      if (HasCvtype) {
        output.WriteRawTag(26);
        output.WriteString(Cvtype);
      }
      if (HasCv) {
        output.WriteRawTag(32);
        output.WriteBool(Cv);
      }
      if (HasFolds) {
        output.WriteRawTag(48);
        output.WriteInt32(Folds);
      }
      if (HasRetry) {
        output.WriteRawTag(56);
        output.WriteInt32(Retry);
      }
      evalMetrics_.WriteTo(ref output, _repeated_evalMetrics_codec);
      if (HasEarlyStop) {
        output.WriteRawTag(72);
        output.WriteBool(EarlyStop);
      }
      if (HasCheckpointInterval) {
        output.WriteRawTag(80);
        output.WriteInt32(CheckpointInterval);
      }
      if (forecast_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Forecast);
      }
      if (sh_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Sh);
      }
      if (HasSeed) {
        output.WriteRawTag(105);
        output.WriteDouble(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPriority) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (HasCvtype) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cvtype);
      }
      if (HasCv) {
        size += 1 + 1;
      }
      if (HasFolds) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Folds);
      }
      if (HasRetry) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Retry);
      }
      size += evalMetrics_.CalculateSize(_repeated_evalMetrics_codec);
      if (HasEarlyStop) {
        size += 1 + 1;
      }
      if (HasCheckpointInterval) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckpointInterval);
      }
      if (forecast_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forecast);
      }
      if (sh_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sh);
      }
      if (HasSeed) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainingSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasPriority) {
        Priority = other.Priority;
      }
      if (other.HasCvtype) {
        Cvtype = other.Cvtype;
      }
      if (other.HasCv) {
        Cv = other.Cv;
      }
      if (other.HasFolds) {
        Folds = other.Folds;
      }
      if (other.HasRetry) {
        Retry = other.Retry;
      }
      evalMetrics_.Add(other.evalMetrics_);
      if (other.HasEarlyStop) {
        EarlyStop = other.EarlyStop;
      }
      if (other.HasCheckpointInterval) {
        CheckpointInterval = other.CheckpointInterval;
      }
      if (other.forecast_ != null) {
        if (forecast_ == null) {
          Forecast = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec();
        }
        Forecast.MergeFrom(other.Forecast);
      }
      if (other.sh_ != null) {
        if (sh_ == null) {
          Sh = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingSpec();
        }
        Sh.MergeFrom(other.Sh);
      }
      if (other.HasSeed) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Priority = input.ReadInt32();
            break;
          }
          case 26: {
            Cvtype = input.ReadString();
            break;
          }
          case 32: {
            Cv = input.ReadBool();
            break;
          }
          case 48: {
            Folds = input.ReadInt32();
            break;
          }
          case 56: {
            Retry = input.ReadInt32();
            break;
          }
          case 66: {
            evalMetrics_.AddEntriesFrom(input, _repeated_evalMetrics_codec);
            break;
          }
          case 72: {
            EarlyStop = input.ReadBool();
            break;
          }
          case 80: {
            CheckpointInterval = input.ReadInt32();
            break;
          }
          case 90: {
            if (forecast_ == null) {
              Forecast = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec();
            }
            input.ReadMessage(Forecast);
            break;
          }
          case 98: {
            if (sh_ == null) {
              Sh = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingSpec();
            }
            input.ReadMessage(Sh);
            break;
          }
          case 105: {
            Seed = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            Priority = input.ReadInt32();
            break;
          }
          case 26: {
            Cvtype = input.ReadString();
            break;
          }
          case 32: {
            Cv = input.ReadBool();
            break;
          }
          case 48: {
            Folds = input.ReadInt32();
            break;
          }
          case 56: {
            Retry = input.ReadInt32();
            break;
          }
          case 66: {
            evalMetrics_.AddEntriesFrom(ref input, _repeated_evalMetrics_codec);
            break;
          }
          case 72: {
            EarlyStop = input.ReadBool();
            break;
          }
          case 80: {
            CheckpointInterval = input.ReadInt32();
            break;
          }
          case 90: {
            if (forecast_ == null) {
              Forecast = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.ForecastingSpec();
            }
            input.ReadMessage(Forecast);
            break;
          }
          case 98: {
            if (sh_ == null) {
              Sh = new global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.SuccessiveHalvingSpec();
            }
            input.ReadMessage(Sh);
            break;
          }
          case 105: {
            Seed = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// TrainingStageSpec is the desired state of the training step of the pipeline
  /// </summary>
  public sealed partial class TrainingStageSpec : pb::IMessage<TrainingStageSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrainingStageSpec> _parser = new pb::MessageParser<TrainingStageSpec>(() => new TrainingStageSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainingStageSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingStageSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingStageSpec(TrainingStageSpec other) : this() {
      _hasBits0 = other._hasBits0;
      notebookName_ = other.notebookName_;
      labName_ = other.labName_;
      studyName_ = other.studyName_;
      auto_ = other.auto_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainingStageSpec Clone() {
      return new TrainingStageSpec(this);
    }

    /// <summary>Field number for the "notebookName" field.</summary>
    public const int NotebookNameFieldNumber = 1;
    private readonly static string NotebookNameDefaultValue = "";

    private string notebookName_;
    /// <summary>
    /// NotebookName template specify the notebook
    /// +kubebuilder:default =""
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NotebookName {
      get { return notebookName_ ?? NotebookNameDefaultValue; }
      set {
        notebookName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "notebookName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNotebookName {
      get { return notebookName_ != null; }
    }
    /// <summary>Clears the value of the "notebookName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNotebookName() {
      notebookName_ = null;
    }

    /// <summary>Field number for the "labName" field.</summary>
    public const int LabNameFieldNumber = 2;
    private readonly static string LabNameDefaultValue = "";

    private string labName_;
    /// <summary>
    /// LabName is the name of the lab used for training
    /// +kubebuilder:default =""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LabName {
      get { return labName_ ?? LabNameDefaultValue; }
      set {
        labName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "labName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLabName {
      get { return labName_ != null; }
    }
    /// <summary>Clears the value of the "labName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLabName() {
      labName_ = null;
    }

    /// <summary>Field number for the "studyName" field.</summary>
    public const int StudyNameFieldNumber = 3;
    private readonly static string StudyNameDefaultValue = "";

    private string studyName_;
    /// <summary>
    /// Study FileName is a name of a study which will be cloned for this stage.
    /// +kubebuilder:default =""
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StudyName {
      get { return studyName_ ?? StudyNameDefaultValue; }
      set {
        studyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "studyName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStudyName {
      get { return studyName_ != null; }
    }
    /// <summary>Clears the value of the "studyName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStudyName() {
      studyName_ = null;
    }

    /// <summary>Field number for the "auto" field.</summary>
    public const int AutoFieldNumber = 4;
    private readonly static bool AutoDefaultValue = false;

    private bool auto_;
    /// <summary>
    /// Auto defines if we move from stage to stage automatically.
    /// +kubebuilder:default:=true
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Auto {
      get { if ((_hasBits0 & 1) != 0) { return auto_; } else { return AutoDefaultValue; } }
      set {
        _hasBits0 |= 1;
        auto_ = value;
      }
    }
    /// <summary>Gets whether the "auto" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuto {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "auto" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuto() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainingStageSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainingStageSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NotebookName != other.NotebookName) return false;
      if (LabName != other.LabName) return false;
      if (StudyName != other.StudyName) return false;
      if (Auto != other.Auto) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNotebookName) hash ^= NotebookName.GetHashCode();
      if (HasLabName) hash ^= LabName.GetHashCode();
      if (HasStudyName) hash ^= StudyName.GetHashCode();
      if (HasAuto) hash ^= Auto.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNotebookName) {
        output.WriteRawTag(10);
        output.WriteString(NotebookName);
      }
      if (HasLabName) {
        output.WriteRawTag(18);
        output.WriteString(LabName);
      }
      if (HasStudyName) {
        output.WriteRawTag(26);
        output.WriteString(StudyName);
      }
      if (HasAuto) {
        output.WriteRawTag(32);
        output.WriteBool(Auto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNotebookName) {
        output.WriteRawTag(10);
        output.WriteString(NotebookName);
      }
      if (HasLabName) {
        output.WriteRawTag(18);
        output.WriteString(LabName);
      }
      if (HasStudyName) {
        output.WriteRawTag(26);
        output.WriteString(StudyName);
      }
      if (HasAuto) {
        output.WriteRawTag(32);
        output.WriteBool(Auto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNotebookName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NotebookName);
      }
      if (HasLabName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LabName);
      }
      if (HasStudyName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StudyName);
      }
      if (HasAuto) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainingStageSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasNotebookName) {
        NotebookName = other.NotebookName;
      }
      if (other.HasLabName) {
        LabName = other.LabName;
      }
      if (other.HasStudyName) {
        StudyName = other.StudyName;
      }
      if (other.HasAuto) {
        Auto = other.Auto;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NotebookName = input.ReadString();
            break;
          }
          case 18: {
            LabName = input.ReadString();
            break;
          }
          case 26: {
            StudyName = input.ReadString();
            break;
          }
          case 32: {
            Auto = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            NotebookName = input.ReadString();
            break;
          }
          case 18: {
            LabName = input.ReadString();
            break;
          }
          case 26: {
            StudyName = input.ReadString();
            break;
          }
          case 32: {
            Auto = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// TriggerSchedule specify a cron schedule
  /// </summary>
  public sealed partial class TriggerSchedule : pb::IMessage<TriggerSchedule>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerSchedule> _parser = new pb::MessageParser<TriggerSchedule>(() => new TriggerSchedule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerSchedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerSchedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerSchedule(TriggerSchedule other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      startDay_ = other.startDay_ != null ? other.startDay_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      endDay_ = other.endDay_ != null ? other.endDay_.Clone() : null;
      cron_ = other.cron_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerSchedule Clone() {
      return new TriggerSchedule(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time startTime_;
    /// <summary>
    /// The start time of the schedule
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "startDay" field.</summary>
    public const int StartDayFieldNumber = 2;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time startDay_;
    /// <summary>
    /// StartDay is the start day of the schedule
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time StartDay {
      get { return startDay_; }
      set {
        startDay_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Timestamp endTime_;
    /// <summary>
    /// EndTime is the end time of the schedule
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "endDay" field.</summary>
    public const int EndDayFieldNumber = 4;
    private global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time endDay_;
    /// <summary>
    /// EndDay is the end day of the schedule
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time EndDay {
      get { return endDay_; }
      set {
        endDay_ = value;
      }
    }

    /// <summary>Field number for the "cron" field.</summary>
    public const int CronFieldNumber = 5;
    private readonly static string CronDefaultValue = "";

    private string cron_;
    /// <summary>
    /// Cron string of the schedule.
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cron {
      get { return cron_ ?? CronDefaultValue; }
      set {
        cron_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cron" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCron {
      get { return cron_ != null; }
    }
    /// <summary>Clears the value of the "cron" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCron() {
      cron_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// +kubebuilder:validation:Optional
    /// The type of schedule events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerSchedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerSchedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(StartDay, other.StartDay)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (!object.Equals(EndDay, other.EndDay)) return false;
      if (Cron != other.Cron) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (startDay_ != null) hash ^= StartDay.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (endDay_ != null) hash ^= EndDay.GetHashCode();
      if (HasCron) hash ^= Cron.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (startDay_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartDay);
      }
      if (endTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EndTime);
      }
      if (endDay_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EndDay);
      }
      if (HasCron) {
        output.WriteRawTag(42);
        output.WriteString(Cron);
      }
      if (HasType) {
        output.WriteRawTag(50);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (startDay_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartDay);
      }
      if (endTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EndTime);
      }
      if (endDay_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EndDay);
      }
      if (HasCron) {
        output.WriteRawTag(42);
        output.WriteString(Cron);
      }
      if (HasType) {
        output.WriteRawTag(50);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (startDay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartDay);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (endDay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndDay);
      }
      if (HasCron) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cron);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerSchedule other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.startDay_ != null) {
        if (startDay_ == null) {
          StartDay = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        StartDay.MergeFrom(other.StartDay);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.endDay_ != null) {
        if (endDay_ == null) {
          EndDay = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
        }
        EndDay.MergeFrom(other.EndDay);
      }
      if (other.HasCron) {
        Cron = other.Cron;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (startDay_ == null) {
              StartDay = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartDay);
            break;
          }
          case 26: {
            if (endTime_ == null) {
              EndTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 34: {
            if (endDay_ == null) {
              EndDay = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(EndDay);
            break;
          }
          case 42: {
            Cron = input.ReadString();
            break;
          }
          case 50: {
            Type = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (startDay_ == null) {
              StartDay = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(StartDay);
            break;
          }
          case 26: {
            if (endTime_ == null) {
              EndTime = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 34: {
            if (endDay_ == null) {
              EndDay = new global::K8S.Io.Apimachinery.Pkg.Apis.Meta.V1.Time();
            }
            input.ReadMessage(EndDay);
            break;
          }
          case 42: {
            Cron = input.ReadString();
            break;
          }
          case 50: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// VideoPipelineSpec is the specification for preprocessing video data
  /// </summary>
  public sealed partial class VideoPipelineSpec : pb::IMessage<VideoPipelineSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VideoPipelineSpec> _parser = new pb::MessageParser<VideoPipelineSpec>(() => new VideoPipelineSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoPipelineSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Github.Com.Metaprov.Modelaapi.Pkg.Apis.Training.V1Alpha1.GeneratedReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoPipelineSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoPipelineSpec(VideoPipelineSpec other) : this() {
      columns_ = other.columns_.Clone();
      featurizer_ = other.featurizer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoPipelineSpec Clone() {
      return new VideoPipelineSpec(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Name of the datetime columns
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "featurizer" field.</summary>
    public const int FeaturizerFieldNumber = 2;
    private readonly static string FeaturizerDefaultValue = "";

    private string featurizer_;
    /// <summary>
    /// The date time imputer.
    /// +kubebuilder:default:="auto"
    /// +kubebuilder:validation:Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Featurizer {
      get { return featurizer_ ?? FeaturizerDefaultValue; }
      set {
        featurizer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "featurizer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFeaturizer {
      get { return featurizer_ != null; }
    }
    /// <summary>Clears the value of the "featurizer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFeaturizer() {
      featurizer_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoPipelineSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoPipelineSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if (Featurizer != other.Featurizer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      if (HasFeaturizer) hash ^= Featurizer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      columns_.WriteTo(output, _repeated_columns_codec);
      if (HasFeaturizer) {
        output.WriteRawTag(18);
        output.WriteString(Featurizer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (HasFeaturizer) {
        output.WriteRawTag(18);
        output.WriteString(Featurizer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (HasFeaturizer) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Featurizer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoPipelineSpec other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      if (other.HasFeaturizer) {
        Featurizer = other.Featurizer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Featurizer = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 18: {
            Featurizer = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
