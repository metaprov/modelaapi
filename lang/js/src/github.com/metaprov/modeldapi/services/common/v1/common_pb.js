// source: github.com/metaprov/modeldapi/services/common/v1/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.Histogram', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.NamespaceType', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.Plot', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.TableView', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.displayName = 'proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.displayName = 'proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.displayName = 'proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.displayName = 'proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeldapi.services.common.v1.Plot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modeldapi.services.common.v1.Plot.displayName = 'proto.github.com.metaprov.modeldapi.services.common.v1.Plot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.displayName = 'proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.displayName = 'proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modeldapi.services.common.v1.Histogram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.displayName = 'proto.github.com.metaprov.modeldapi.services.common.v1.Histogram';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.displayName = 'proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modeldapi.services.common.v1.TableView.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modeldapi.services.common.v1.TableView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modeldapi.services.common.v1.TableView.displayName = 'proto.github.com.metaprov.modeldapi.services.common.v1.TableView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.displayName = 'proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    cols: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rows: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    imbalance: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    plotsList: jspb.Message.toObjectList(msg.getPlotsList(),
    proto.github.com.metaprov.modeldapi.services.common.v1.Plot.toObject, includeInstance),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.toObject, includeInstance),
    table: (f = msg.getTable()) && proto.github.com.metaprov.modeldapi.services.common.v1.TableView.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile;
  return proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCols(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRows(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFilesize(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setImbalance(value);
      break;
    case 5:
      var value = new proto.github.com.metaprov.modeldapi.services.common.v1.Plot;
      reader.readMessage(value,proto.github.com.metaprov.modeldapi.services.common.v1.Plot.deserializeBinaryFromReader);
      msg.addPlots(value);
      break;
    case 6:
      var value = new proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile;
      reader.readMessage(value,proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 7:
      var value = new proto.github.com.metaprov.modeldapi.services.common.v1.TableView;
      reader.readMessage(value,proto.github.com.metaprov.modeldapi.services.common.v1.TableView.deserializeBinaryFromReader);
      msg.setTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCols();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRows();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFilesize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getImbalance();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPlotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.github.com.metaprov.modeldapi.services.common.v1.Plot.serializeBinaryToWriter
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.serializeBinaryToWriter
    );
  }
  f = message.getTable();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.github.com.metaprov.modeldapi.services.common.v1.TableView.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 cols = 1;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.getCols = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.setCols = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 rows = 2;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.getRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.setRows = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 filesize = 3;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.getFilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.setFilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool imbalance = 4;
 * @return {boolean}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.getImbalance = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.setImbalance = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated Plot plots = 5;
 * @return {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.getPlotsList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modeldapi.services.common.v1.Plot, 5));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} returns this
*/
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.setPlotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.addPlots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.github.com.metaprov.modeldapi.services.common.v1.Plot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.clearPlotsList = function() {
  return this.setPlotsList([]);
};


/**
 * repeated ColumnProfile columns = 6;
 * @return {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile>}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile, 6));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile>} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} returns this
*/
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.setColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};


/**
 * optional TableView table = 7;
 * @return {?proto.github.com.metaprov.modeldapi.services.common.v1.TableView}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.getTable = function() {
  return /** @type{?proto.github.com.metaprov.modeldapi.services.common.v1.TableView} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modeldapi.services.common.v1.TableView, 7));
};


/**
 * @param {?proto.github.com.metaprov.modeldapi.services.common.v1.TableView|undefined} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} returns this
*/
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.setTable = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.clearTable = function() {
  return this.setTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.DatasetProfile.prototype.hasTable = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plotsList: jspb.Message.toObjectList(msg.getPlotsList(),
    proto.github.com.metaprov.modeldapi.services.common.v1.Plot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile;
  return proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.github.com.metaprov.modeldapi.services.common.v1.Plot;
      reader.readMessage(value,proto.github.com.metaprov.modeldapi.services.common.v1.Plot.deserializeBinaryFromReader);
      msg.addPlots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.github.com.metaprov.modeldapi.services.common.v1.Plot.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Plot plots = 2;
 * @return {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.prototype.getPlotsList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modeldapi.services.common.v1.Plot, 2));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile} returns this
*/
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.prototype.setPlotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.prototype.addPlots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.github.com.metaprov.modeldapi.services.common.v1.Plot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.prototype.clearPlotsList = function() {
  return this.setPlotsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plotsList: jspb.Message.toObjectList(msg.getPlotsList(),
    proto.github.com.metaprov.modeldapi.services.common.v1.Plot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile;
  return proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.github.com.metaprov.modeldapi.services.common.v1.Plot;
      reader.readMessage(value,proto.github.com.metaprov.modeldapi.services.common.v1.Plot.deserializeBinaryFromReader);
      msg.addPlots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.github.com.metaprov.modeldapi.services.common.v1.Plot.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Plot plots = 2;
 * @return {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.prototype.getPlotsList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modeldapi.services.common.v1.Plot, 2));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile} returns this
*/
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.prototype.setPlotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.prototype.addPlots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.github.com.metaprov.modeldapi.services.common.v1.Plot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ForecastProfile.prototype.clearPlotsList = function() {
  return this.setPlotsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    plotsList: jspb.Message.toObjectList(msg.getPlotsList(),
    proto.github.com.metaprov.modeldapi.services.common.v1.Plot.toObject, includeInstance),
    modelsList: jspb.Message.toObjectList(msg.getModelsList(),
    proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile;
  return proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.github.com.metaprov.modeldapi.services.common.v1.Plot;
      reader.readMessage(value,proto.github.com.metaprov.modeldapi.services.common.v1.Plot.deserializeBinaryFromReader);
      msg.addPlots(value);
      break;
    case 2:
      var value = new proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile;
      reader.readMessage(value,proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.deserializeBinaryFromReader);
      msg.addModels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.github.com.metaprov.modeldapi.services.common.v1.Plot.serializeBinaryToWriter
    );
  }
  f = message.getModelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Plot plots = 1;
 * @return {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.prototype.getPlotsList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modeldapi.services.common.v1.Plot, 1));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.Plot>} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile} returns this
*/
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.prototype.setPlotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.prototype.addPlots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.github.com.metaprov.modeldapi.services.common.v1.Plot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.prototype.clearPlotsList = function() {
  return this.setPlotsList([]);
};


/**
 * repeated ModelProfile models = 2;
 * @return {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile>}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.prototype.getModelsList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile, 2));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile>} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile} returns this
*/
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.prototype.setModelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.prototype.addModels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.github.com.metaprov.modeldapi.services.common.v1.ModelProfile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.StudyProfile.prototype.clearModelsList = function() {
  return this.setModelsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modeldapi.services.common.v1.Plot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    img: msg.getImg_asB64(),
    fname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    url: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modeldapi.services.common.v1.Plot;
  return proto.github.com.metaprov.modeldapi.services.common.v1.Plot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImg(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modeldapi.services.common.v1.Plot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getFname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes img = 3;
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.getImg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes img = 3;
 * This is a type-conversion wrapper around `getImg()`
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.getImg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImg()));
};


/**
 * optional bytes img = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImg()`
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.getImg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.setImg = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string fname = 4;
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.getFname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.setFname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Plot} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Plot.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    n: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    missing: jspb.Message.getFieldWithDefault(msg, 4, 0),
    distinct: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mean: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    std: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    variance: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    kurtosis: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    skewness: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    sum: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    mad: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    zeros: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    p25: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    p50: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    p75: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    p100: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
    iqr: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, 0.0),
    cv: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 0.0),
    pMissing: jspb.Message.getFloatingPointFieldWithDefault(msg, 23, 0.0),
    top: jspb.Message.getFieldWithDefault(msg, 24, 0),
    freq: jspb.Message.getFieldWithDefault(msg, 25, 0),
    ignore: jspb.Message.getBooleanFieldWithDefault(msg, 26, false),
    label: jspb.Message.getBooleanFieldWithDefault(msg, 27, false),
    corr: jspb.Message.getBooleanFieldWithDefault(msg, 28, false),
    histogram: (f = msg.getHistogram()) && proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile;
  return proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setN(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMissing(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistinct(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMean(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStd(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVariance(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKurtosis(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSkewness(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSum(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMad(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZeros(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setP25(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setP50(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setP75(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setP100(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIqr(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCv(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPMissing(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTop(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFreq(value);
      break;
    case 26:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIgnore(value);
      break;
    case 27:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLabel(value);
      break;
    case 28:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCorr(value);
      break;
    case 29:
      var value = new proto.github.com.metaprov.modeldapi.services.common.v1.Histogram;
      reader.readMessage(value,proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.deserializeBinaryFromReader);
      msg.setHistogram(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getN();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMissing();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDistinct();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getMean();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getStd();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getVariance();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getKurtosis();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getSkewness();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getSum();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getMad();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getZeros();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getP25();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getP50();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getP75();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getP100();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getIqr();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getCv();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getPMissing();
  if (f !== 0.0) {
    writer.writeDouble(
      23,
      f
    );
  }
  f = message.getTop();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getFreq();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = message.getIgnore();
  if (f) {
    writer.writeBool(
      26,
      f
    );
  }
  f = message.getLabel();
  if (f) {
    writer.writeBool(
      27,
      f
    );
  }
  f = message.getCorr();
  if (f) {
    writer.writeBool(
      28,
      f
    );
  }
  f = message.getHistogram();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 n = 2;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setN = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 missing = 4;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getMissing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setMissing = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 distinct = 5;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getDistinct = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setDistinct = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional double mean = 6;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getMean = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setMean = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double std = 7;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getStd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setStd = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double variance = 8;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getVariance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setVariance = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double min = 9;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double max = 10;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double kurtosis = 11;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getKurtosis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setKurtosis = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double skewness = 12;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getSkewness = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setSkewness = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double sum = 13;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getSum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setSum = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double mad = 14;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getMad = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setMad = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double zeros = 15;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getZeros = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setZeros = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double p25 = 16;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getP25 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setP25 = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional double p50 = 17;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getP50 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setP50 = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double p75 = 18;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getP75 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setP75 = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional double p100 = 20;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getP100 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setP100 = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional double iqr = 21;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getIqr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setIqr = function(value) {
  return jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional double cv = 22;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getCv = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setCv = function(value) {
  return jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional double p_missing = 23;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getPMissing = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setPMissing = function(value) {
  return jspb.Message.setProto3FloatField(this, 23, value);
};


/**
 * optional int32 top = 24;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setTop = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional int32 freq = 25;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getFreq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setFreq = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional bool ignore = 26;
 * @return {boolean}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getIgnore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 26, false));
};


/**
 * @param {boolean} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setIgnore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 26, value);
};


/**
 * optional bool label = 27;
 * @return {boolean}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getLabel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 27, false));
};


/**
 * @param {boolean} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setLabel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 27, value);
};


/**
 * optional bool corr = 28;
 * @return {boolean}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getCorr = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 28, false));
};


/**
 * @param {boolean} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setCorr = function(value) {
  return jspb.Message.setProto3BooleanField(this, 28, value);
};


/**
 * optional Histogram histogram = 29;
 * @return {?proto.github.com.metaprov.modeldapi.services.common.v1.Histogram}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.getHistogram = function() {
  return /** @type{?proto.github.com.metaprov.modeldapi.services.common.v1.Histogram} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modeldapi.services.common.v1.Histogram, 29));
};


/**
 * @param {?proto.github.com.metaprov.modeldapi.services.common.v1.Histogram|undefined} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
*/
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.setHistogram = function(value) {
  return jspb.Message.setWrapperField(this, 29, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.clearHistogram = function() {
  return this.setHistogram(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.prototype.hasHistogram = function() {
  return jspb.Message.getField(this, 29) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    v: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue;
  return proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setV(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getV();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float v = 2;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.prototype.getV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.prototype.setV = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.Histogram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Histogram}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modeldapi.services.common.v1.Histogram;
  return proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.Histogram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Histogram}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue;
      reader.readMessage(value,proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.Histogram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated HistogramValue values = 1;
 * @return {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue>}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue, 1));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue>} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Histogram} returns this
*/
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.github.com.metaprov.modeldapi.services.common.v1.HistogramValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.Histogram} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.Histogram.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accounts: jspb.Message.getFieldWithDefault(msg, 3, 0),
    buckets: jspb.Message.getFieldWithDefault(msg, 4, 0),
    labs: jspb.Message.getFieldWithDefault(msg, 5, 0),
    servingsites: jspb.Message.getFieldWithDefault(msg, 6, 0),
    datasets: jspb.Message.getFieldWithDefault(msg, 7, 0),
    datasources: jspb.Message.getFieldWithDefault(msg, 8, 0),
    studies: jspb.Message.getFieldWithDefault(msg, 9, 0),
    models: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo;
  return proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.NamespaceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccounts(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBuckets(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLabs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServingsites(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDatasets(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDatasources(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStudies(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccounts();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBuckets();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getLabs();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getServingsites();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getDatasets();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getDatasources();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getStudies();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getModels();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.NamespaceType = {
  TENANT: 0,
  DATAPRODUCT: 1,
  LAB: 2,
  SERVINGSITE: 3,
  MODELDSYSTEM: 4,
  MODELDCATALOG: 5
};

/**
 * optional NamespaceType type = 1;
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.NamespaceType}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.getType = function() {
  return /** @type {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.NamespaceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.NamespaceType} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 accounts = 3;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.getAccounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.setAccounts = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 buckets = 4;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.getBuckets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.setBuckets = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 labs = 5;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.getLabs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.setLabs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 servingsites = 6;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.getServingsites = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.setServingsites = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 datasets = 7;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.getDatasets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.setDatasets = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 datasources = 8;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.getDatasources = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.setDatasources = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 studies = 9;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.getStudies = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.setStudies = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 models = 10;
 * @return {number}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.getModels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.NamespaceInfo.prototype.setModels = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modeldapi.services.common.v1.TableView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.toObject = function(includeInstance, msg) {
  var f, obj = {
    colsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.toObject, includeInstance),
    profilesList: jspb.Message.toObjectList(msg.getProfilesList(),
    proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modeldapi.services.common.v1.TableView;
  return proto.github.com.metaprov.modeldapi.services.common.v1.TableView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCols(value);
      break;
    case 2:
      var value = new proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow;
      reader.readMessage(value,proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    case 3:
      var value = new proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile;
      reader.readMessage(value,proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.deserializeBinaryFromReader);
      msg.addProfiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modeldapi.services.common.v1.TableView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.serializeBinaryToWriter
    );
  }
  f = message.getProfilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string cols = 1;
 * @return {!Array<string>}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.getColsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.setColsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.addCols = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.clearColsList = function() {
  return this.setColsList([]);
};


/**
 * repeated TableViewRow rows = 2;
 * @return {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow>}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow, 2));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow>} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView} returns this
*/
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};


/**
 * repeated ColumnProfile profiles = 3;
 * @return {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile>}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.getProfilesList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile, 3));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile>} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView} returns this
*/
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.setProfilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.addProfiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.github.com.metaprov.modeldapi.services.common.v1.ColumnProfile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableView} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableView.prototype.clearProfilesList = function() {
  return this.setProfilesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow;
  return proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow} returns this
 */
proto.github.com.metaprov.modeldapi.services.common.v1.TableViewRow.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


goog.object.extend(exports, proto.github.com.metaprov.modeldapi.services.common.v1);
