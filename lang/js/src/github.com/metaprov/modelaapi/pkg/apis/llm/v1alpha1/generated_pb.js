// source: github.com/metaprov/modelaapi/pkg/apis/llm/v1alpha1/generated.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb = require('../../../../../../../github.com/metaprov/modelaapi/pkg/apis/catalog/v1alpha1/generated_pb.js');
goog.object.extend(proto, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb);
var k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb = require('../../../../../../../k8s.io/apimachinery/pkg/apis/meta/v1/generated_pb.js');
goog.object.extend(proto, k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb);
var k8s_io_apimachinery_pkg_runtime_generated_pb = require('../../../../../../../k8s.io/apimachinery/pkg/runtime/generated_pb.js');
goog.object.extend(proto, k8s_io_apimachinery_pkg_runtime_generated_pb);
var k8s_io_apimachinery_pkg_runtime_schema_generated_pb = require('../../../../../../../k8s.io/apimachinery/pkg/runtime/schema/generated_pb.js');
goog.object.extend(proto, k8s_io_apimachinery_pkg_runtime_schema_generated_pb);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec', null, global);
goog.exportSymbol('proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.repeatedFields_, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.displayName = 'proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    language: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    chunklines: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    chunklinesoverlap: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    maxchars: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunklines(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunklinesoverlap(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxchars(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string language = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.setLanguage = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.clearLanguage = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.hasLanguage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 chunkLines = 2;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.getChunklines = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.setChunklines = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.clearChunklines = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.hasChunklines = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 chunkLinesOverlap = 3;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.getChunklinesoverlap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.setChunklinesoverlap = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.clearChunklinesoverlap = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.hasChunklinesoverlap = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 maxChars = 4;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.getMaxchars = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.setMaxchars = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.clearMaxchars = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.prototype.hasMaxchars = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    includeorderrelationship: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    includemetadata: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    text: (f = msg.getText()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.toObject(includeInstance, f),
    sentence: (f = msg.getSentence()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeorderrelationship(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludemetadata(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 5:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.deserializeBinaryFromReader);
      msg.setSentence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.serializeBinaryToWriter
    );
  }
  f = message.getSentence();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool includeOrderRelationship = 1;
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.getIncludeorderrelationship = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.setIncludeorderrelationship = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.clearIncludeorderrelationship = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.hasIncludeorderrelationship = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool includeMetadata = 2;
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.getIncludemetadata = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.setIncludemetadata = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.clearIncludemetadata = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.hasIncludemetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.setType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.clearType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TextSplitterSpec text = 4;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.getText = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec, 4));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.setText = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.hasText = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SentenceWindowNodeParserSpec sentence = 5;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.getSentence = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec, 5));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.setSentence = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.clearSentence = function() {
  return this.setSentence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.prototype.hasSentence = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    connectionname: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    query: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 4:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string connectionName = 2;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.getConnectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.setConnectionname = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.clearConnectionname = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.hasConnectionname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string query = 3;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.setQuery = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.clearQuery = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, string> options = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    description: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
    refreshperiod: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    nodeparser: (f = msg.getNodeparser()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.toObject(includeInstance, f),
    embeddingmodel: (f = msg.getEmbeddingmodel()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.toObject(includeInstance, f),
    file: (f = msg.getFile()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.toObject(includeInstance, f),
    database: (f = msg.getDatabase()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.toObject(includeInstance, f),
    web: (f = msg.getWeb()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.toObject(includeInstance, f),
    repository: (f = msg.getRepository()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRefreshperiod(value);
      break;
    case 5:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.deserializeBinaryFromReader);
      msg.setNodeparser(value);
      break;
    case 6:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.deserializeBinaryFromReader);
      msg.setEmbeddingmodel(value);
      break;
    case 7:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 8:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.deserializeBinaryFromReader);
      msg.setDatabase(value);
      break;
    case 9:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.deserializeBinaryFromReader);
      msg.setWeb(value);
      break;
    case 10:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.deserializeBinaryFromReader);
      msg.setRepository(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getNodeparser();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.serializeBinaryToWriter
    );
  }
  f = message.getEmbeddingmodel();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.serializeBinaryToWriter
    );
  }
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.serializeBinaryToWriter
    );
  }
  f = message.getDatabase();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.serializeBinaryToWriter
    );
  }
  f = message.getWeb();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.serializeBinaryToWriter
    );
  }
  f = message.getRepository();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, string> metadata = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;};


/**
 * optional int32 refreshPeriod = 4;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.getRefreshperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.setRefreshperiod = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.clearRefreshperiod = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.hasRefreshperiod = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional NodeParserSpec nodeParser = 5;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.getNodeparser = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec, 5));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.setNodeparser = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.clearNodeparser = function() {
  return this.setNodeparser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.hasNodeparser = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ModelSpec embeddingModel = 6;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.getEmbeddingmodel = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec, 6));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.setEmbeddingmodel = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.clearEmbeddingmodel = function() {
  return this.setEmbeddingmodel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.hasEmbeddingmodel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional FileLocationReaderSpec file = 7;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.getFile = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec, 7));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.setFile = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.clearFile = function() {
  return this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.hasFile = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DatabaseReaderSpec database = 8;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.getDatabase = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec, 8));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.setDatabase = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.clearDatabase = function() {
  return this.setDatabase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.hasDatabase = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional WebReaderSpec web = 9;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.getWeb = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec, 9));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.setWeb = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.clearWeb = function() {
  return this.setWeb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.hasWeb = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RepositoryReaderSpec repository = 10;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.getRepository = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec, 10));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.setRepository = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.clearRepository = function() {
  return this.setRepository(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.prototype.hasRepository = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    nodes: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lasterror: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    flagged: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    lastrefreshat: (f = msg.getLastrefreshat()) && k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodes(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLasterror(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlagged(value);
      break;
    case 5:
      var value = new k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time;
      reader.readMessage(value,k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.deserializeBinaryFromReader);
      msg.setLastrefreshat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getLastrefreshat();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 nodes = 2;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.getNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.setNodes = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.clearNodes = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.hasNodes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string lastError = 3;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.getLasterror = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.setLasterror = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.clearLasterror = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.hasLasterror = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool flagged = 4;
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.getFlagged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.setFlagged = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.clearFlagged = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.hasFlagged = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastRefreshAt = 5;
 * @return {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.getLastrefreshat = function() {
  return /** @type{?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time} */ (
    jspb.Message.getWrapperField(this, k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time, 5));
};


/**
 * @param {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.setLastrefreshat = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.clearLastrefreshat = function() {
  return this.setLastrefreshat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.prototype.hasLastrefreshat = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    includeList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    excludeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addInclude(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addExclude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIncludeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getExcludeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string include = 1;
 * @return {!Array<string>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.prototype.getIncludeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.prototype.setIncludeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.prototype.addInclude = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.prototype.clearIncludeList = function() {
  return this.setIncludeList([]);
};


/**
 * repeated string exclude = 2;
 * @return {!Array<string>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.prototype.getExcludeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.prototype.setExcludeList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.prototype.addExclude = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.prototype.clearExcludeList = function() {
  return this.setExcludeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    filereaderspec: (f = msg.getFilereaderspec()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.FileLocation.toObject(includeInstance, f),
    url: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.deserializeBinaryFromReader);
      msg.setFilereaderspec(value);
      break;
    case 2:
      var value = new github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.FileLocation;
      reader.readMessage(value,github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.FileLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilereaderspec();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.FileLocation.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional FileReaderSpec fileReaderSpec = 4;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.getFilereaderspec = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec, 4));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.setFilereaderspec = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.clearFilereaderspec = function() {
  return this.setFilereaderspec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.hasFilereaderspec = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.FileLocation location = 2;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.FileLocation}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.getLocation = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.FileLocation} */ (
    jspb.Message.getWrapperField(this, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.FileLocation, 2));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.FileLocation|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.setUrl = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.clearUrl = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileLocationReaderSpec.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, string> options = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.toObject = function(includeInstance, msg) {
  var f, obj = {
    extension: (f = msg.getExtension$()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.toObject(includeInstance, f),
    length: (f = msg.getLength()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.toObject(includeInstance, f),
    name: (f = msg.getName()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
    parser: (f = msg.getParser()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.deserializeBinaryFromReader);
      msg.setExtension$(value);
      break;
    case 2:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.deserializeBinaryFromReader);
      msg.setLength(value);
      break;
    case 3:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 4:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.deserializeBinaryFromReader);
      msg.setParser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExtension$();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter.serializeBinaryToWriter
    );
  }
  f = message.getLength();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getParser();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExtensionFilter extension = 1;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.getExtension$ = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter, 1));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ExtensionFilter|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.setExtension$ = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.clearExtension$ = function() {
  return this.setExtension$(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.hasExtension$ = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LengthFilter length = 2;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.getLength = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter, 2));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.setLength = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.clearLength = function() {
  return this.setLength(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.hasLength = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NameFilter name = 3;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.getName = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter, 3));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.setName = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.clearName = function() {
  return this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, string> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;};


/**
 * optional ConcreteNodeParserSpec parser = 5;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.getParser = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec, 5));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.setParser = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.clearParser = function() {
  return this.setParser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.prototype.hasParser = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta;
      reader.readMessage(value,k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
 * @return {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.getMetadata = function() {
  return /** @type{?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta, 1));
};


/**
 * @param {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional KnowledgeBaseSpec spec = 2;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.getSpec = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec, 2));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional KnowledgeBaseStatus status = 3;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.getStatus = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus, 3));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ListMeta.toObject(includeInstance, f),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ListMeta;
      reader.readMessage(value,k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ListMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ListMeta.serializeBinaryToWriter
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase.serializeBinaryToWriter
    );
  }
};


/**
 * optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
 * @return {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.prototype.getMetadata = function() {
  return /** @type{?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta} */ (
    jspb.Message.getWrapperField(this, k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ListMeta, 1));
};


/**
 * @param {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated KnowledgeBase items = 2;
 * @return {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase, 2));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase>} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    description: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    refreshschedule: (f = msg.getRefreshschedule()) && github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.RunSchedule.toObject(includeInstance, f),
    artifactbucketname: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    labname: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    resources: (f = msg.getResources()) && github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.ResourceSpec.toObject(includeInstance, f),
    metadatadatabaseconnectionname: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    vectorstoreconnectionname: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    documentstoreconnectionname: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    embeddingmodel: (f = msg.getEmbeddingmodel()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.toObject(includeInstance, f),
    documentsList: jspb.Message.toObjectList(msg.getDocumentsList(),
    proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.toObject, includeInstance),
    nodeparser: (f = msg.getNodeparser()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.RunSchedule;
      reader.readMessage(value,github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.RunSchedule.deserializeBinaryFromReader);
      msg.setRefreshschedule(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtifactbucketname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabname(value);
      break;
    case 6:
      var value = new github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.ResourceSpec;
      reader.readMessage(value,github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.ResourceSpec.deserializeBinaryFromReader);
      msg.setResources(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadatadatabaseconnectionname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVectorstoreconnectionname(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocumentstoreconnectionname(value);
      break;
    case 10:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.deserializeBinaryFromReader);
      msg.setEmbeddingmodel(value);
      break;
    case 11:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.deserializeBinaryFromReader);
      msg.addDocuments(value);
      break;
    case 12:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.deserializeBinaryFromReader);
      msg.setNodeparser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRefreshschedule();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.RunSchedule.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getResources();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.ResourceSpec.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getEmbeddingmodel();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.serializeBinaryToWriter
    );
  }
  f = message.getDocumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.serializeBinaryToWriter
    );
  }
  f = message.getNodeparser();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional string owner = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setOwner = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearOwner = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RunSchedule refreshSchedule = 3;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RunSchedule}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getRefreshschedule = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RunSchedule} */ (
    jspb.Message.getWrapperField(this, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.RunSchedule, 3));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RunSchedule|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setRefreshschedule = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearRefreshschedule = function() {
  return this.setRefreshschedule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.hasRefreshschedule = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string artifactBucketName = 4;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getArtifactbucketname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setArtifactbucketname = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearArtifactbucketname = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.hasArtifactbucketname = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string labName = 5;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getLabname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setLabname = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearLabname = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.hasLabname = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec resources = 6;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getResources = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec} */ (
    jspb.Message.getWrapperField(this, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.ResourceSpec, 6));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setResources = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearResources = function() {
  return this.setResources(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.hasResources = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string metadataDatabaseConnectionName = 7;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getMetadatadatabaseconnectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setMetadatadatabaseconnectionname = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearMetadatadatabaseconnectionname = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.hasMetadatadatabaseconnectionname = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string vectorStoreConnectionName = 8;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getVectorstoreconnectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setVectorstoreconnectionname = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearVectorstoreconnectionname = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.hasVectorstoreconnectionname = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string documentStoreConnectionName = 9;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getDocumentstoreconnectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setDocumentstoreconnectionname = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearDocumentstoreconnectionname = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.hasDocumentstoreconnectionname = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ModelSpec embeddingModel = 10;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getEmbeddingmodel = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec, 10));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setEmbeddingmodel = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearEmbeddingmodel = function() {
  return this.setEmbeddingmodel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.hasEmbeddingmodel = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated DocumentSpec documents = 11;
 * @return {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getDocumentsList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec, 11));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec>} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setDocumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.addDocuments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearDocumentsList = function() {
  return this.setDocumentsList([]);
};


/**
 * optional NodeParserSpec nodeParser = 12;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.getNodeparser = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec, 12));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.setNodeparser = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.clearNodeparser = function() {
  return this.setNodeparser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec.prototype.hasNodeparser = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.repeatedFields_ = [4,5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    observedgeneration: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    lastrefreshat: (f = msg.getLastrefreshat()) && k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.toObject(includeInstance, f),
    lastcompletionat: (f = msg.getLastcompletionat()) && k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.toObject(includeInstance, f),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.ContainerLog.toObject, includeInstance),
    documentsList: jspb.Message.toObjectList(msg.getDocumentsList(),
    proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.toObject, includeInstance),
    updatedat: (f = msg.getUpdatedat()) && k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.toObject(includeInstance, f),
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Condition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObservedgeneration(value);
      break;
    case 2:
      var value = new k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time;
      reader.readMessage(value,k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.deserializeBinaryFromReader);
      msg.setLastrefreshat(value);
      break;
    case 3:
      var value = new k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time;
      reader.readMessage(value,k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.deserializeBinaryFromReader);
      msg.setLastcompletionat(value);
      break;
    case 4:
      var value = new github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.ContainerLog;
      reader.readMessage(value,github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.ContainerLog.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 5:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.deserializeBinaryFromReader);
      msg.addDocuments(value);
      break;
    case 6:
      var value = new k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time;
      reader.readMessage(value,k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.deserializeBinaryFromReader);
      msg.setUpdatedat(value);
      break;
    case 7:
      var value = new k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Condition;
      reader.readMessage(value,k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Condition.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLastrefreshat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.serializeBinaryToWriter
    );
  }
  f = message.getLastcompletionat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.serializeBinaryToWriter
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.ContainerLog.serializeBinaryToWriter
    );
  }
  f = message.getDocumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedat();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time.serializeBinaryToWriter
    );
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Condition.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 observedGeneration = 1;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.getObservedgeneration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.setObservedgeneration = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.clearObservedgeneration = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.hasObservedgeneration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastRefreshAt = 2;
 * @return {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.getLastrefreshat = function() {
  return /** @type{?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time} */ (
    jspb.Message.getWrapperField(this, k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time, 2));
};


/**
 * @param {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.setLastrefreshat = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.clearLastrefreshat = function() {
  return this.setLastrefreshat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.hasLastrefreshat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastCompletionAt = 3;
 * @return {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.getLastcompletionat = function() {
  return /** @type{?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time} */ (
    jspb.Message.getWrapperField(this, k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time, 3));
};


/**
 * @param {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.setLastcompletionat = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.clearLastcompletionat = function() {
  return this.setLastcompletionat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.hasLastcompletionat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ContainerLog logs = 4;
 * @return {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ContainerLog>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ContainerLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1_generated_pb.ContainerLog, 4));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ContainerLog>} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ContainerLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ContainerLog}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ContainerLog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


/**
 * repeated DocumentStatus documents = 5;
 * @return {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.getDocumentsList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus, 5));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus>} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.setDocumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.addDocuments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.clearDocumentsList = function() {
  return this.setDocumentsList([]);
};


/**
 * optional k8s.io.apimachinery.pkg.apis.meta.v1.Time updatedAt = 6;
 * @return {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.getUpdatedat = function() {
  return /** @type{?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time} */ (
    jspb.Message.getWrapperField(this, k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Time, 6));
};


/**
 * @param {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.Time|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.setUpdatedat = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.clearUpdatedat = function() {
  return this.setUpdatedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.hasUpdatedat = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 7;
 * @return {!Array<!proto.k8s.io.apimachinery.pkg.apis.meta.v1.Condition>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.k8s.io.apimachinery.pkg.apis.meta.v1.Condition>} */ (
    jspb.Message.getRepeatedWrapperField(this, k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.Condition, 7));
};


/**
 * @param {!Array<!proto.k8s.io.apimachinery.pkg.apis.meta.v1.Condition>} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.setConditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.k8s.io.apimachinery.pkg.apis.meta.v1.Condition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.k8s.io.apimachinery.pkg.apis.meta.v1.Condition}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.k8s.io.apimachinery.pkg.apis.meta.v1.Condition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus.prototype.clearConditionsList = function() {
  return this.setConditionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    greaterthan: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    lessthan: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGreaterthan(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLessthan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 greaterThan = 1;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.prototype.getGreaterthan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.prototype.setGreaterthan = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.prototype.clearGreaterthan = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.prototype.hasGreaterthan = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 lessThan = 2;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.prototype.getLessthan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.prototype.setLessthan = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.prototype.clearLessthan = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.LengthFilter.prototype.hasLessthan = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    parsersList: jspb.Message.toObjectList(msg.getParsersList(),
    proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.toObject, includeInstance),
    fallback: (f = msg.getFallback()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.deserializeBinaryFromReader);
      msg.addParsers(value);
      break;
    case 2:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.deserializeBinaryFromReader);
      msg.setFallback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser.serializeBinaryToWriter
    );
  }
  f = message.getFallback();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FilteredNodeParser parsers = 1;
 * @return {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.prototype.getParsersList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser, 1));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser>} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.prototype.setParsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.prototype.addParsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FilteredNodeParser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.prototype.clearParsersList = function() {
  return this.setParsersList([]);
};


/**
 * optional ConcreteNodeParserSpec fallback = 2;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.prototype.getFallback = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec, 2));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.prototype.setFallback = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.prototype.clearFallback = function() {
  return this.setFallback(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.prototype.hasFallback = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionname: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    model: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string connectionName = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.prototype.getConnectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.prototype.setConnectionname = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.prototype.clearConnectionname = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.prototype.hasConnectionname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string model = 2;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.prototype.setModel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.prototype.clearModel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec.prototype.hasModel = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    contains: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    equals: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContains(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEquals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string contains = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.prototype.getContains = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.prototype.setContains = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.prototype.clearContains = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.prototype.hasContains = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string equals = 2;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.prototype.getEquals = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.prototype.setEquals = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.prototype.clearEquals = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NameFilter.prototype.hasEquals = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    concretenodeparserspec: (f = msg.getConcretenodeparserspec()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.toObject(includeInstance, f),
    mixed: (f = msg.getMixed()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.deserializeBinaryFromReader);
      msg.setConcretenodeparserspec(value);
      break;
    case 6:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.deserializeBinaryFromReader);
      msg.setMixed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConcretenodeparserspec();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec.serializeBinaryToWriter
    );
  }
  f = message.getMixed();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConcreteNodeParserSpec concreteNodeParserSpec = 7;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.prototype.getConcretenodeparserspec = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec, 7));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ConcreteNodeParserSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.prototype.setConcretenodeparserspec = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.prototype.clearConcretenodeparserspec = function() {
  return this.setConcretenodeparserspec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.prototype.hasConcretenodeparserspec = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MixedNodeParserSpec mixed = 6;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.prototype.getMixed = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec, 6));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.MixedNodeParserSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.prototype.setMixed = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.prototype.clearMixed = function() {
  return this.setMixed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec.prototype.hasMixed = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.toObject = function(includeInstance, msg) {
  var f, obj = {
    extension: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    extensionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    reader: (f = msg.getReader()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtension$(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addExtensions(value);
      break;
    case 3:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.deserializeBinaryFromReader);
      msg.setReader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExtensionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getReader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional string extension = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.getExtension$ = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.setExtension$ = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.clearExtension$ = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.hasExtension$ = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string extensions = 2;
 * @return {!Array<string>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.getExtensionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.setExtensionsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.addExtensions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.clearExtensionsList = function() {
  return this.setExtensionsList([]);
};


/**
 * optional FileReaderSpec reader = 3;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.getReader = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec, 3));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.setReader = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.clearReader = function() {
  return this.setReader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.prototype.hasReader = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    connectionname: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    extensionsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    readersList: jspb.Message.toObjectList(msg.getReadersList(),
    proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.toObject, includeInstance),
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addExtensions(value);
      break;
    case 4:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.deserializeBinaryFromReader);
      msg.addReaders(value);
      break;
    case 5:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExtensionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getReadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader.serializeBinaryToWriter
    );
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string connectionName = 2;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.getConnectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.setConnectionname = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.clearConnectionname = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.hasConnectionname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string extensions = 3;
 * @return {!Array<string>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.getExtensionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.setExtensionsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.addExtensions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.clearExtensionsList = function() {
  return this.setExtensionsList([]);
};


/**
 * repeated RepositoryFileReader readers = 4;
 * @return {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.getReadersList = function() {
  return /** @type{!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader, 4));
};


/**
 * @param {!Array<!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader>} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.setReadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.addReaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryFileReader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.clearReadersList = function() {
  return this.setReadersList([]);
};


/**
 * map<string, string> options = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.RepositoryReaderSpec.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunksize: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    chunkoverlap: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    wordseparator: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    paragraphseparator: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    splitter: (f = msg.getSplitter()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunksize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunkoverlap(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWordseparator(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParagraphseparator(value);
      break;
    case 5:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.deserializeBinaryFromReader);
      msg.setSplitter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSplitter();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 chunkSize = 1;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.getChunksize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.setChunksize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.clearChunksize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.hasChunksize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 chunkOverlap = 2;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.getChunkoverlap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.setChunkoverlap = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.clearChunkoverlap = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.hasChunkoverlap = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string wordSeparator = 3;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.getWordseparator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.setWordseparator = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.clearWordseparator = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.hasWordseparator = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string paragraphSeparator = 4;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.getParagraphseparator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.setParagraphseparator = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.clearParagraphseparator = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.hasParagraphseparator = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SentenceTokenizerSpec splitter = 5;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.getSplitter = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec, 5));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.setSplitter = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.clearSplitter = function() {
  return this.setSplitter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.prototype.hasSplitter = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    separator: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeparator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string separator = 2;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.prototype.getSeparator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.prototype.setSeparator = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.prototype.clearSeparator = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.prototype.hasSeparator = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    splitter: (f = msg.getSplitter()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.toObject(includeInstance, f),
    windowsize: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.deserializeBinaryFromReader);
      msg.setSplitter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindowsize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSplitter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional SentenceTokenizerSpec splitter = 1;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.prototype.getSplitter = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec, 1));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.prototype.setSplitter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.prototype.clearSplitter = function() {
  return this.setSplitter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.prototype.hasSplitter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 windowSize = 2;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.prototype.getWindowsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.prototype.setWindowsize = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.prototype.clearWindowsize = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec.prototype.hasWindowsize = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sentence: (f = msg.getSentence()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.toObject(includeInstance, f),
    token: (f = msg.getToken()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.toObject(includeInstance, f),
    code: (f = msg.getCode()) && proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.deserializeBinaryFromReader);
      msg.setSentence(value);
      break;
    case 3:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 4:
      var value = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec;
      reader.readMessage(value,proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.deserializeBinaryFromReader);
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSentence();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SentenceSplitterSpec sentence = 2;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.getSentence = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec, 2));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.setSentence = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.clearSentence = function() {
  return this.setSentence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.hasSentence = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TokenSplitterSpec token = 3;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.getToken = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec, 3));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CodeSplitterSpec code = 4;
 * @return {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.getCode = function() {
  return /** @type{?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec} */ (
    jspb.Message.getWrapperField(this, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec, 4));
};


/**
 * @param {?proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec|undefined} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} returns this
*/
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.setCode = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.clearCode = function() {
  return this.setCode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec.prototype.hasCode = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunksize: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    chunkoverlap: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    wordseparator: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunksize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunkoverlap(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWordseparator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 chunkSize = 1;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.getChunksize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.setChunksize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.clearChunksize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.hasChunksize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 chunkOverlap = 2;
 * @return {number}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.getChunkoverlap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.setChunkoverlap = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.clearChunkoverlap = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.hasChunkoverlap = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string wordSeparator = 3;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.getWordseparator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.setWordseparator = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.clearWordseparator = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec.prototype.hasWordseparator = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    connectionname: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec;
  return proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionname(value);
      break;
    case 3:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string connectionName = 2;
 * @return {string}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.getConnectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.setConnectionname = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.clearConnectionname = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.hasConnectionname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, string> options = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec} returns this
 */
proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
  return this;};


goog.object.extend(exports, proto.github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1);
