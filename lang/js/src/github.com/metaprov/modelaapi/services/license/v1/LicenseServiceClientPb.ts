/**
 * @fileoverview gRPC-Web generated client stub for github.com.metaprov.modelaapi.services.license.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.12.4
// source: github.com/metaprov/modelaapi/services/license/v1/license.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as github_com_metaprov_modelaapi_services_license_v1_license_pb from '../../../../../../github.com/metaprov/modelaapi/services/license/v1/license_pb';


export class LicenseServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorListLicenses = new grpcWeb.MethodDescriptor(
    '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/ListLicenses',
    grpcWeb.MethodType.UNARY,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.ListLicensesRequest,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.ListLicensesResponse,
    (request: github_com_metaprov_modelaapi_services_license_v1_license_pb.ListLicensesRequest) => {
      return request.serializeBinary();
    },
    github_com_metaprov_modelaapi_services_license_v1_license_pb.ListLicensesResponse.deserializeBinary
  );

  listLicenses(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.ListLicensesRequest,
    metadata: grpcWeb.Metadata | null): Promise<github_com_metaprov_modelaapi_services_license_v1_license_pb.ListLicensesResponse>;

  listLicenses(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.ListLicensesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.ListLicensesResponse) => void): grpcWeb.ClientReadableStream<github_com_metaprov_modelaapi_services_license_v1_license_pb.ListLicensesResponse>;

  listLicenses(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.ListLicensesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.ListLicensesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/ListLicenses',
        request,
        metadata || {},
        this.methodDescriptorListLicenses,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/ListLicenses',
    request,
    metadata || {},
    this.methodDescriptorListLicenses);
  }

  methodDescriptorCreateLicense = new grpcWeb.MethodDescriptor(
    '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/CreateLicense',
    grpcWeb.MethodType.UNARY,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseRequest,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse,
    (request: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseRequest) => {
      return request.serializeBinary();
    },
    github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse.deserializeBinary
  );

  createLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseRequest,
    metadata: grpcWeb.Metadata | null): Promise<github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse>;

  createLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse) => void): grpcWeb.ClientReadableStream<github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse>;

  createLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/CreateLicense',
        request,
        metadata || {},
        this.methodDescriptorCreateLicense,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/CreateLicense',
    request,
    metadata || {},
    this.methodDescriptorCreateLicense);
  }

  methodDescriptorCreateLicenseFromKey = new grpcWeb.MethodDescriptor(
    '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/CreateLicenseFromKey',
    grpcWeb.MethodType.UNARY,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseFromKeyRequest,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse,
    (request: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseFromKeyRequest) => {
      return request.serializeBinary();
    },
    github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse.deserializeBinary
  );

  createLicenseFromKey(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseFromKeyRequest,
    metadata: grpcWeb.Metadata | null): Promise<github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse>;

  createLicenseFromKey(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseFromKeyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse) => void): grpcWeb.ClientReadableStream<github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse>;

  createLicenseFromKey(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseFromKeyRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.CreateLicenseResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/CreateLicenseFromKey',
        request,
        metadata || {},
        this.methodDescriptorCreateLicenseFromKey,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/CreateLicenseFromKey',
    request,
    metadata || {},
    this.methodDescriptorCreateLicenseFromKey);
  }

  methodDescriptorGetLicense = new grpcWeb.MethodDescriptor(
    '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/GetLicense',
    grpcWeb.MethodType.UNARY,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.GetLicenseRequest,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.GetLicenseResponse,
    (request: github_com_metaprov_modelaapi_services_license_v1_license_pb.GetLicenseRequest) => {
      return request.serializeBinary();
    },
    github_com_metaprov_modelaapi_services_license_v1_license_pb.GetLicenseResponse.deserializeBinary
  );

  getLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.GetLicenseRequest,
    metadata: grpcWeb.Metadata | null): Promise<github_com_metaprov_modelaapi_services_license_v1_license_pb.GetLicenseResponse>;

  getLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.GetLicenseRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.GetLicenseResponse) => void): grpcWeb.ClientReadableStream<github_com_metaprov_modelaapi_services_license_v1_license_pb.GetLicenseResponse>;

  getLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.GetLicenseRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.GetLicenseResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/GetLicense',
        request,
        metadata || {},
        this.methodDescriptorGetLicense,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/GetLicense',
    request,
    metadata || {},
    this.methodDescriptorGetLicense);
  }

  methodDescriptorUpdateLicense = new grpcWeb.MethodDescriptor(
    '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/UpdateLicense',
    grpcWeb.MethodType.UNARY,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.UpdateLicenseRequest,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.UpdateLicenseResponse,
    (request: github_com_metaprov_modelaapi_services_license_v1_license_pb.UpdateLicenseRequest) => {
      return request.serializeBinary();
    },
    github_com_metaprov_modelaapi_services_license_v1_license_pb.UpdateLicenseResponse.deserializeBinary
  );

  updateLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.UpdateLicenseRequest,
    metadata: grpcWeb.Metadata | null): Promise<github_com_metaprov_modelaapi_services_license_v1_license_pb.UpdateLicenseResponse>;

  updateLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.UpdateLicenseRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.UpdateLicenseResponse) => void): grpcWeb.ClientReadableStream<github_com_metaprov_modelaapi_services_license_v1_license_pb.UpdateLicenseResponse>;

  updateLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.UpdateLicenseRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.UpdateLicenseResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/UpdateLicense',
        request,
        metadata || {},
        this.methodDescriptorUpdateLicense,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/UpdateLicense',
    request,
    metadata || {},
    this.methodDescriptorUpdateLicense);
  }

  methodDescriptorDeleteLicense = new grpcWeb.MethodDescriptor(
    '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/DeleteLicense',
    grpcWeb.MethodType.UNARY,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.DeleteLicenseRequest,
    github_com_metaprov_modelaapi_services_license_v1_license_pb.DeleteLicenseResponse,
    (request: github_com_metaprov_modelaapi_services_license_v1_license_pb.DeleteLicenseRequest) => {
      return request.serializeBinary();
    },
    github_com_metaprov_modelaapi_services_license_v1_license_pb.DeleteLicenseResponse.deserializeBinary
  );

  deleteLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.DeleteLicenseRequest,
    metadata: grpcWeb.Metadata | null): Promise<github_com_metaprov_modelaapi_services_license_v1_license_pb.DeleteLicenseResponse>;

  deleteLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.DeleteLicenseRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.DeleteLicenseResponse) => void): grpcWeb.ClientReadableStream<github_com_metaprov_modelaapi_services_license_v1_license_pb.DeleteLicenseResponse>;

  deleteLicense(
    request: github_com_metaprov_modelaapi_services_license_v1_license_pb.DeleteLicenseRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: github_com_metaprov_modelaapi_services_license_v1_license_pb.DeleteLicenseResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/DeleteLicense',
        request,
        metadata || {},
        this.methodDescriptorDeleteLicense,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/github.com.metaprov.modelaapi.services.license.v1.LicenseService/DeleteLicense',
    request,
    metadata || {},
    this.methodDescriptorDeleteLicense);
  }

}

