// source: github.com/metaprov/modeldapi/services/notifier/v1/notifier.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var google_api_annotations_pb = require('../../../../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb = require('../../../../../../github.com/metaprov/modeldapi/pkg/apis/infra/v1alpha1/generated_pb.js');
goog.object.extend(proto, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb);
var github_com_metaprov_modeldapi_services_common_v1_common_pb = require('../../../../../../github.com/metaprov/modeldapi/services/common/v1/common_pb.js');
goog.object.extend(proto, github_com_metaprov_modeldapi_services_common_v1_common_pb);
goog.exportSymbol('proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest', null, global);
goog.exportSymbol('proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.displayName = 'proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.displayName = 'proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse.displayName = 'proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.displayName = 'proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse.displayName = 'proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.displayName = 'proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse.displayName = 'proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.displayName = 'proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.displayName = 'proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.displayName = 'proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse.displayName = 'proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
            labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : []
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest;
    return proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setNamespace(value);
                break;
            case 3:
                var value = msg.getLabelsMap();
                reader.readMessage(value, function (message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
                });
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getNamespace();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getLabelsMap(true);
    if (f && f.getLength() > 0) {
        f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
    }
};
/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.prototype.getNamespace = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.prototype.setNamespace = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * map<string, string> labels = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.prototype.getLabelsMap = function (opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 3, opt_noLazyCreate, null));
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersRequest.prototype.clearLabelsMap = function () {
    this.getLabelsMap().clear();
    return this;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            items: (f = msg.getItems()) && github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierList.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse;
    return proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierList;
                reader.readMessage(value, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierList.deserializeBinaryFromReader);
                msg.setItems(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getItems();
    if (f != null) {
        writer.writeMessage(1, f, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierList.serializeBinaryToWriter);
    }
};
/**
 * optional github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierList items = 1;
 * @return {?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierList}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.prototype.getItems = function () {
    return /** @type{?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierList} */ (jspb.Message.getWrapperField(this, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierList, 1));
};
/**
 * @param {?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierList|undefined} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse} returns this
*/
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.prototype.setItems = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.prototype.clearItems = function () {
    return this.setItems(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.ListNotifiersResponse.prototype.hasItems = function () {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse;
    return proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeld.services.notifier.v1.NotifierResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
            name: jspb.Message.getFieldWithDefault(msg, 2, ""),
            labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
            spec: (f = msg.getSpec()) && github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierSpec.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest;
    return proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setNamespace(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 3:
                var value = msg.getLabelsMap();
                reader.readMessage(value, function (message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
                });
                break;
            case 4:
                var value = new github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierSpec;
                reader.readMessage(value, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierSpec.deserializeBinaryFromReader);
                msg.setSpec(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getNamespace();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getLabelsMap(true);
    if (f && f.getLength() > 0) {
        f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
    }
    f = message.getSpec();
    if (f != null) {
        writer.writeMessage(4, f, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierSpec.serializeBinaryToWriter);
    }
};
/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.getNamespace = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.setNamespace = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string name = 2;
 * @return {string}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * map<string, string> labels = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.getLabelsMap = function (opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 3, opt_noLazyCreate, null));
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.clearLabelsMap = function () {
    this.getLabelsMap().clear();
    return this;
};
/**
 * optional github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierSpec spec = 4;
 * @return {?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierSpec}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.getSpec = function () {
    return /** @type{?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierSpec} */ (jspb.Message.getWrapperField(this, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierSpec, 4));
};
/**
 * @param {?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierSpec|undefined} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest} returns this
*/
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.setSpec = function (value) {
    return jspb.Message.setWrapperField(this, 4, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.clearSpec = function () {
    return this.setSpec(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierRequest.prototype.hasSpec = function () {
    return jspb.Message.getField(this, 4) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse;
    return proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeld.services.notifier.v1.CreateNotifierResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
            name: jspb.Message.getFieldWithDefault(msg, 2, ""),
            labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
            spec: (f = msg.getSpec()) && github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierSpec.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest;
    return proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setNamespace(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 3:
                var value = msg.getLabelsMap();
                reader.readMessage(value, function (message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
                });
                break;
            case 5:
                var value = new github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierSpec;
                reader.readMessage(value, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierSpec.deserializeBinaryFromReader);
                msg.setSpec(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getNamespace();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getLabelsMap(true);
    if (f && f.getLength() > 0) {
        f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
    }
    f = message.getSpec();
    if (f != null) {
        writer.writeMessage(5, f, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierSpec.serializeBinaryToWriter);
    }
};
/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.getNamespace = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.setNamespace = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string name = 2;
 * @return {string}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * map<string, string> labels = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.getLabelsMap = function (opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 3, opt_noLazyCreate, null));
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.clearLabelsMap = function () {
    this.getLabelsMap().clear();
    return this;
};
/**
 * optional github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierSpec spec = 5;
 * @return {?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierSpec}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.getSpec = function () {
    return /** @type{?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierSpec} */ (jspb.Message.getWrapperField(this, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.NotifierSpec, 5));
};
/**
 * @param {?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.NotifierSpec|undefined} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest} returns this
*/
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.setSpec = function (value) {
    return jspb.Message.setWrapperField(this, 5, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.clearSpec = function () {
    return this.setSpec(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierRequest.prototype.hasSpec = function () {
    return jspb.Message.getField(this, 5) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse;
    return proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeld.services.notifier.v1.UpdateNotifierResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
            name: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest;
    return proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setNamespace(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getNamespace();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.prototype.getNamespace = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.prototype.setNamespace = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string name = 2;
 * @return {string}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierRequest.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            item: (f = msg.getItem()) && github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.Notifier.toObject(includeInstance, f),
            yaml: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse;
    return proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.Notifier;
                reader.readMessage(value, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.Notifier.deserializeBinaryFromReader);
                msg.setItem(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setYaml(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getItem();
    if (f != null) {
        writer.writeMessage(1, f, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.Notifier.serializeBinaryToWriter);
    }
    f = message.getYaml();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Notifier item = 1;
 * @return {?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Notifier}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.prototype.getItem = function () {
    return /** @type{?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Notifier} */ (jspb.Message.getWrapperField(this, github_com_metaprov_modeldapi_pkg_apis_infra_v1alpha1_generated_pb.Notifier, 1));
};
/**
 * @param {?proto.github.com.metaprov.modeldapi.pkg.apis.infra.v1alpha1.Notifier|undefined} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse} returns this
*/
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.prototype.setItem = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.prototype.clearItem = function () {
    return this.setItem(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.prototype.hasItem = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string yaml = 2;
 * @return {string}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.prototype.getYaml = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.GetNotifierResponse.prototype.setYaml = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
            name: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest;
    return proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setNamespace(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getNamespace();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.prototype.getNamespace = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.prototype.setNamespace = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string name = 2;
 * @return {string}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest} returns this
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierRequest.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse;
    return proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.github.com.metaprov.modeld.services.notifier.v1.DeleteNotifierResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
goog.object.extend(exports, proto.github.com.metaprov.modeld.services.notifier.v1);
//# sourceMappingURL=notifier_pb.js.map