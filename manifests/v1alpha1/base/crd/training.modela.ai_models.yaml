---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: models.training.modela.ai
spec:
  group: training.modela.ai
  names:
    categories:
    - training
    - modela
    - all
    kind: Model
    listKind: ModelList
    plural: models
    shortNames:
    - md
    singular: model
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Status
      type: string
    - jsonPath: .status.progress
      name: Progress
      priority: 1
      type: string
    - jsonPath: .status.best
      name: Best
      type: boolean
    - jsonPath: .spec.owner
      name: Owner
      priority: 1
      type: string
    - jsonPath: .spec.versionName
      name: Version
      priority: 1
      type: string
    - jsonPath: .spec.studyName
      name: Study
      type: string
    - jsonPath: .spec.task
      name: Task
      priority: 1
      type: string
    - jsonPath: .spec.estimator.algorithmName
      name: Algorithm
      type: string
    - jsonPath: .spec.objective.metric
      name: Objective
      type: string
    - jsonPath: .status.validationScore
      name: Validation Score
      type: number
    - jsonPath: .status.trainScore
      name: Train Score
      priority: 1
      type: number
    - jsonPath: .status.testScore
      name: Test Score
      type: number
    - jsonPath: .status.failureMessage
      name: Last Failure
      priority: 1
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Model represents a machine learning model that can be trained
          by Modela
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ModelSpec defines the desired state of the Model resource
            properties:
              abort:
                default: false
                description: If true, all workloads created by the Model will be removed
                  and the Model will no longer be reconciled
                type: boolean
              activeDeadlineSeconds:
                default: 600
                description: The deadline for any Jobs associated with the Model to
                  be completed in seconds
                format: int64
                type: integer
              approval:
                description: Approval specifies the model approval requirements (unimplemented)
                properties:
                  decisionType:
                    description: DecisionType specifies the requirements for the model
                      to be approved in the case of there being multiple reviewers
                    type: string
                  enabled:
                    default: false
                    description: Enabled indicates if model approval is enabled
                    type: boolean
                  members:
                    description: Reviewers contains the name of Accounts that will
                      be required to approve models for promotion
                    items:
                      type: string
                    type: array
                type: object
              artifactBucketName:
                description: The name of the Virtual Bucket where Study artifacts
                  (metadata, reports, and model artifacts) generated by the Study
                  will be stored. If empty, it will default to the default Virtual
                  Bucket of the Data Product
                type: string
              baseline:
                default: false
                description: Baseline indicates if the Model was produced by the baseline
                  phase of a Study
                type: boolean
              ensemble:
                description: Ensemble specifies the configuration to create an ensemble
                  model
                properties:
                  baseEstimator:
                    description: The base estimator
                    properties:
                      algorithmName:
                        description: AlgorithmName references the name of an estimator
                        type: string
                      parameters:
                        description: Parameters is a list of hyperparameters for the
                          algorithm
                        items:
                          description: HyperParameterValue represent an individual
                            hyperparameter for a machine learning algorithm
                          properties:
                            name:
                              description: The name of the hyperparameter
                              type: string
                            value:
                              description: The value of the hyperparameter
                              type: string
                          required:
                          - name
                          - value
                          type: object
                        type: array
                    type: object
                  estimators:
                    description: The collection of estimators to be used in the ensemble,
                      derived from Models
                    items:
                      description: ClassicalEstimatorSpec defines the specification
                        for the Model's algorithm
                      properties:
                        algorithmName:
                          description: AlgorithmName references the name of an estimator
                          type: string
                        parameters:
                          description: Parameters is a list of hyperparameters for
                            the algorithm
                          items:
                            description: HyperParameterValue represent an individual
                              hyperparameter for a machine learning algorithm
                            properties:
                              name:
                                description: The name of the hyperparameter
                                type: string
                              value:
                                description: The value of the hyperparameter
                                type: string
                            required:
                            - name
                            - value
                            type: object
                          type: array
                      type: object
                    type: array
                  models:
                    description: The collection of models (by their name) to be used
                      as estimators in the ensemble
                    items:
                      type: string
                    type: array
                  type:
                    description: The ensemble type method
                    type: string
                type: object
              estimator:
                description: Estimator specifies the machine learning algorithm and
                  hyperparameters of the Model
                properties:
                  algorithmName:
                    description: AlgorithmName references the name of an estimator
                    type: string
                  parameters:
                    description: Parameters is a list of hyperparameters for the algorithm
                    items:
                      description: HyperParameterValue represent an individual hyperparameter
                        for a machine learning algorithm
                      properties:
                        name:
                          description: The name of the hyperparameter
                          type: string
                        value:
                          description: The value of the hyperparameter
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                type: object
              estimatorType:
                default: classical
                description: EstimatorType specifies the type of estimator for the
                  Model
                enum:
                - classical
                - dnn
                - transformer
                - chatbot
                - rl
                - hierarchy
                type: string
              explain:
                default: false
                description: If true, Shapley values (and relevant visualizations)
                  will be calculated for the highest-performing Model
                type: boolean
              fast:
                default: false
                description: Fast indicates if the Model will skip profiling, unit
                  testing, explaining, and reporting
                type: boolean
              featureEngineering:
                description: FeatureEngineering specifies the preprocessing pipelines
                  that will be applied to the model prior to training
                properties:
                  imbalance:
                    default: auto
                    description: Imbalance specifies the method which will be used
                      to handle an imbalanced dataset
                    enum:
                    - adasyn
                    - baseline-smote
                    - kmean-smote
                    - random-over-sampler
                    - smote
                    - smotenc
                    - svmsmote
                    - none
                    - auto
                    - class-weights
                    type: string
                  pipelines:
                    description: Pipelines contains the collection of feature engineering
                      pipelines that will be applied to the dataset prior to model
                      training
                    items:
                      description: FeatureEngineeringPipeline represents a single
                        pipeline to transform a dataset
                      properties:
                        dataType:
                          description: DataType specifies the data type of the pipeline,
                            which corresponds to the data type of all features in
                            the pipeline
                          enum:
                          - boolean
                          - datetime
                          - number
                          - categorical
                          - ordinal
                          - text
                          - json
                          - number-list
                          - categorical-list
                          - text-list
                          type: string
                        datetimeTransformation:
                          default: none
                          description: DatetimeTransformation specifies the method
                            to use when handling the date-time data type
                          enum:
                          - extract-datetime-information
                          - none
                          - auto
                          type: string
                        discretisation:
                          default: none
                          description: Discretisation specifies the discretisation
                            method to convert numerical features to discrete variables
                          enum:
                          - equal-width-discretisation-
                          - equal-freq-discretisation
                          - kbin-discretisation
                          - kernel-centerer-discretisation
                          - label-binarizer-discretisation
                          - multi-label-binarizer-discretisation
                          - none
                          - auto
                          type: string
                        drop:
                          default: false
                          description: Drop indicates if all of all the features for
                            the pipeline will be dropped
                          type: boolean
                        encoding:
                          default: none
                          description: Encoding specifies the encoding method to use
                            for categorical features
                          enum:
                          - one-hot-encoding
                          - one-hot-encoding-top-categories
                          - ordinal-encoding
                          - count-encoding
                          - target-encoding
                          - weight-of-evidence-encoding
                          - binary-encoding
                          - label-encoding
                          - hash-encoding
                          - catboost-encoding
                          - loo-encoding
                          - no-encoding
                          - auto
                          - none
                          type: string
                        features:
                          description: Features contains the collection of features
                            which the pipeline will be applied to
                          items:
                            type: string
                          type: array
                        imputation:
                          default: none
                          description: Imputation specifies the imputation method
                            to use when handling missing values
                          enum:
                          - remove-rows-with-missing-values
                          - replace-with-mean
                          - replace-with-median
                          - replace-with-arbitrary-value
                          - freq-category-imputation
                          - add-missing-value-indicator
                          - knn
                          - iterative
                          - mice
                          - no-imputation
                          - auto
                          - none
                          type: string
                        name:
                          description: Name specifies the unique name of the pipeline
                          type: string
                        outlierHandling:
                          default: none
                          description: OutlierHandling specifies the method to use
                            when handling outliers Apply only to numeric data types.
                          enum:
                          - trim-outliers
                          - winsorizer-outliers
                          - cap-outliers
                          - zero-code-outliers
                          - none
                          - auto
                          type: string
                        scaling:
                          default: none
                          description: Scaling specifies the scaling method to use
                            for numerical features
                          enum:
                          - standard-scaling
                          - max-abs-scaling
                          - min-max-scaling
                          - normalization-scaling
                          - robust-scaling
                          - scale-to-unit-norm
                          - none
                          - auto
                          type: string
                        text:
                          description: Text defines the configuration for the pipeline
                            to handle text features
                          properties:
                            embedding:
                              description: Indicates if the pipeline will generate
                                a word embedding
                              type: string
                            encoder:
                              default: auto
                              description: The text encoder (e.g. TFIDF)
                              enum:
                              - tfidf
                              - count-vec
                              - hasing-vec
                              - none
                              - auto
                              type: string
                            lemma:
                              default: true
                              description: Indicates if the pipeline will implement
                                lemmatization
                              type: boolean
                            maxSvdComponents:
                              default: 0
                              description: The maximum number of SVD components to
                                use, if applicable
                              format: int32
                              type: integer
                            pos:
                              default: true
                              description: Indicates if the pipeline will add part-of-speech
                                handling
                              type: boolean
                            stem:
                              default: true
                              description: Indicates if the pipeline will implement
                                word stemming
                              type: boolean
                            stopwords:
                              default: true
                              description: Indicates if the pipeline will add stop
                                word handling
                              type: boolean
                            svd:
                              default: true
                              description: Indicates if the pipeline will add singular
                                value decomposition
                              type: boolean
                            tokenizer:
                              description: The text tokenizer character
                              type: string
                          type: object
                        variableTransformation:
                          default: none
                          description: VariableTransformation specifies the transformation
                            method to use for numerical feature
                          enum:
                          - log-transformation
                          - reciprocal-transformation
                          - sqrt-transformation
                          - power-transformation
                          - box-cox-transformation
                          - yj-transformation
                          - none
                          - auto
                          type: string
                      type: object
                    type: array
                type: object
              forecast:
                default: false
                description: If true, a forecast will be generated for the Model (applicable
                  if the task type is forecasting)
                type: boolean
              forecasting:
                description: Forecasting specifies the configuration to generate a
                  forecast
                properties:
                  anomalies:
                    items:
                      properties:
                        adjDeltaColumn:
                          type: string
                        end:
                          description: The end of the anomaly
                          type: string
                        name:
                          type: string
                        start:
                          description: The start of the anomaly
                          type: string
                        valueColumn:
                          type: string
                      type: object
                    type: array
                  coverage:
                    description: Make a forecast post training
                    type: number
                  estimators:
                    description: The estimators to try. By default, we try graykit
                      / auto arima and prophet.
                    items:
                      type: string
                    type: array
                  evaluationMetrics:
                    description: Spec for evaluation metric
                    properties:
                      aggFunc:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          Defines how to aggregate rolling windows of actual and predicted
                          values before evaluation.'
                        type: string
                      aggPeriod:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          Number of periods to aggregate before evaluation.'
                        format: int32
                        type: integer
                      nullModelParams:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          Defines baseline model to compute ``R2_null_model_score``
                          evaluation metric. R2_null_model_score is the improvement
                          in the loss function relative to a null model. It can be
                          used to evaluate model quality with respect to a simple
                          baseline'
                        type: string
                      relErrTolerance:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          Threshold to compute the ``Outside Tolerance`` metric, defined
                          as the fraction of forecasted values whose relative error
                          is strictly greater than ``relative_error_tolerance``. If
                          `NoneSeasonalityMode`, the metric is not computed.'
                        type: number
                      reporting:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          Additional metrics to compute during CV, besides the one
                          specified by ``cv_selection_metric``'
                        items:
                          type: string
                        type: array
                      selection:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          Used to select the optimal model during cross-validation.'
                        type: string
                    type: object
                  evaluationPeriod:
                    description: Spec for time series cross validation
                    properties:
                      cvExpandingWindows:
                        type: boolean
                      cvHorizon:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          Number of periods in each CV test set If None, default is
                          forecast_horizon. Set to 0 to skip CV.'
                        format: int32
                        type: integer
                      cvMaxSplits:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          Maximum number of CV splits. Given the above configuration,
                          samples up to max_splits train/test splits, preferring splits
                          toward the end of available data. If None, uses all splits.'
                        format: int32
                        type: integer
                      cvMinTrainPeriods:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          Minimum number of periods for training each CV fold. If
                          cv_expanding_window is False, every training period is this
                          size If None, default is 2 * cv_horizon'
                        format: int32
                        type: integer
                      cvPeriodsBetweenSplits:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          Number of periods to slide the test window between CV splits.
                          Has to be greater than or equal to 1. If None, default is
                          cv_horizon.'
                        format: int32
                        type: integer
                      cvUseMostRecentSplits:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          If True, splits from the end of the dataset are used. Else
                          a sampling strategy is applied. Check'
                        type: boolean
                      periodsBetweenTrainTest:
                        format: int32
                        type: integer
                      testHorizon:
                        description: 'From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
                          Numbers of periods held back from end of df for test. The
                          rest is used for cross validation. If None, default is forecast_horizon.
                          Set to 0 to skip backtest.'
                        format: int32
                        type: integer
                    type: object
                  events:
                    description: The spec for the holiday
                    items:
                      properties:
                        country:
                          description: If this event is an holiday, this is the holiday
                            country
                          enum:
                          - US
                          - BR
                          - ID
                          - IN
                          - MY
                          - VN
                          - TH
                          - PH
                          - PK
                          - BD
                          - EG
                          - CN
                          - RU
                          - KR
                          - BY
                          - AE
                          - none
                          type: string
                        holiday:
                          description: Set to true if this event is an holiday
                          type: boolean
                        method:
                          description: Set to true if this event is an holiday
                          type: string
                        name:
                          description: Set to true if this event is an holiday
                          type: string
                        postEvent:
                          description: Post event windows the might have event effects.
                          format: int32
                          type: integer
                        preEvent:
                          description: Pre event window, that might have event effects
                          format: int32
                          type: integer
                        timePoints:
                          description: The time points to mark the events
                          items:
                            type: string
                          type: array
                      type: object
                    type: array
                  features:
                    description: List of time series features to compute on each time
                      series.
                    items:
                      type: string
                    type: array
                  forecast:
                    description: Make a forecast post training
                    type: boolean
                  future:
                    description: Specification for the future windows
                    properties:
                      interval:
                        description: The period interval
                        enum:
                        - second
                        - minute
                        - hour
                        - day
                        - week
                        - month
                        - quarter
                        - year
                        - multi-year
                        type: string
                      length:
                        description: The window length
                        format: int32
                        type: integer
                      start:
                        default: 0
                        description: The number of intervals to start. If the start
                          is more than 0, there is a gap.
                        format: int32
                        type: integer
                    type: object
                  groups:
                    description: Filter the groups to forecast for. If none forecast
                      only to the leaf group
                    items:
                      type: string
                    type: array
                  growth:
                    description: Set the growth of the series
                    enum:
                    - linear
                    - logistic
                    - flat
                    - quadratic
                    - none
                    type: string
                  hpoBudget:
                    format: int32
                    type: integer
                  hts:
                    default: bottom-up
                    description: Group recocile. By default this is the bottom-up
                    enum:
                    - bottom-up
                    - middle-out
                    - top-down
                    - none
                    type: string
                  key:
                    description: In case of group forecast
                    items:
                      type: string
                    type: array
                  laggedRegressors:
                    description: Lagged Regressors
                    items:
                      type: string
                    type: array
                  outputLocation:
                    description: The data location that would store the forecast result.
                    properties:
                      bucket:
                        default: ""
                        description: In the case of the location type being an object
                          storage system, BucketName is the name of the VirtualBucket
                          resource that exists in the same tenant as the resource
                          specifying the DataLocation. Modela will connect to the
                          external object storage system, and will access the file
                          from the path specified by the Path field
                        type: string
                      connection:
                        default: ""
                        description: In the case of the type of location being a database,
                          ConnectionName specifies the name of the ConnectionName
                          resource that exists in the same tenant as the resource
                          specifying the DataLocation. Modela will attempt to connect
                          to the database using the credentials specified in the ConnectionName,
                          and will execute the query specified by the SQL field
                        type: string
                      database:
                        default: ""
                        description: The name of a database inside the database system
                          specified by the ConnectionName field
                        type: string
                      path:
                        default: ""
                        description: The path to a flat-file inside an object storage
                          system. When using the Modela API to upload files (through
                          the FileService API), Modela will upload the data to a predetermined
                          path based on the Tenant, Data Product, Data Product Version,
                          and resource type of the resource in relation to the file
                          being uploaded. The path does not need to adhere to this
                          format; you may also specify an arbitrary path
                        type: string
                      resourceRef:
                        description: In the case of the location type being Dataset
                          or PublicDataset, ResourceRef references another resource
                          that containing data that will be used as a data source
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      sql:
                        default: ""
                        description: The SQL statement which will be executed to query
                          data from the table specified by Table
                        type: string
                      table:
                        default: ""
                        description: The name of a table inside a database, if applicable
                        type: string
                      topic:
                        default: ""
                        description: The name of the streaming topic (currently unsupported)
                        type: string
                      type:
                        default: object
                        description: The type of location where the data resides,
                          which can either be an object inside an object storage system
                          (i.e. Minio), a SQL location like a table or a view, a data
                          stream (i.e. Kafka, currently unsupported), or a web location
                          (currently unsupported)
                        enum:
                        - object
                        - table
                        - view
                        - stream
                        - web
                        - public-dataset
                        - dataset
                        type: string
                      url:
                        default: ""
                        description: In the case of the location type being WebApi,
                          URL specifies the external location (HTTP or Git) that will
                          be queried and then stored as flat-file by the resource
                          which specifies the DataLocation
                        type: string
                    type: object
                  past:
                    description: Specification for the past windows
                    properties:
                      interval:
                        description: The period interval
                        enum:
                        - second
                        - minute
                        - hour
                        - day
                        - week
                        - month
                        - quarter
                        - year
                        - multi-year
                        type: string
                      length:
                        description: The window length
                        format: int32
                        type: integer
                      start:
                        default: 0
                        description: The number of intervals to start. If the start
                          is more than 0, there is a gap.
                        format: int32
                        type: integer
                    type: object
                  predefinedTemplate:
                    enum:
                    - silverkite
                    - prophet
                    - auto-arima
                    - lag-based
                    - sk
                    - two-stage
                    - wow
                    - daily-1-config-1
                    - daily-1-config-2
                    - daily-1-config-3
                    - daily-1
                    - daily-90
                    - weekly
                    - monthly
                    - hourly-1
                    - hourly-24
                    - hourly-168
                    - hourly-336
                    type: string
                  regressors:
                    description: The regressor. Initially those are set from the data
                      source schema
                    items:
                      type: string
                    type: array
                  seasonality:
                    properties:
                      auto:
                        description: If true infer the seasonality
                        type: boolean
                      daily:
                        description: Define the seasonality for a period (yearly /
                          monthly / daily)
                        properties:
                          auto:
                            description: Infer the seasonality
                            type: boolean
                          enabled:
                            description: Is the seasonality exist
                            type: boolean
                          fourierOrder:
                            default: 0
                            description: If enabled, the number of data points in
                              the interval
                            format: int32
                            type: integer
                        type: object
                      monthly:
                        description: Define the seasonality for a period (yearly /
                          monthly / daily)
                        properties:
                          auto:
                            description: Infer the seasonality
                            type: boolean
                          enabled:
                            description: Is the seasonality exist
                            type: boolean
                          fourierOrder:
                            default: 0
                            description: If enabled, the number of data points in
                              the interval
                            format: int32
                            type: integer
                        type: object
                      quarterly:
                        description: Define the seasonality for a period (yearly /
                          monthly / daily)
                        properties:
                          auto:
                            description: Infer the seasonality
                            type: boolean
                          enabled:
                            description: Is the seasonality exist
                            type: boolean
                          fourierOrder:
                            default: 0
                            description: If enabled, the number of data points in
                              the interval
                            format: int32
                            type: integer
                        type: object
                      weekly:
                        description: Define the seasonality for a period (yearly /
                          monthly / daily)
                        properties:
                          auto:
                            description: Infer the seasonality
                            type: boolean
                          enabled:
                            description: Is the seasonality exist
                            type: boolean
                          fourierOrder:
                            default: 0
                            description: If enabled, the number of data points in
                              the interval
                            format: int32
                            type: integer
                        type: object
                      yearly:
                        description: Define the seasonality for a period (yearly /
                          monthly / daily)
                        properties:
                          auto:
                            description: Infer the seasonality
                            type: boolean
                          enabled:
                            description: Is the seasonality exist
                            type: boolean
                          fourierOrder:
                            default: 0
                            description: If enabled, the number of data points in
                              the interval
                            format: int32
                            type: integer
                        type: object
                    type: object
                  trainEndData:
                    type: string
                  valueColumn:
                    description: The value column. this is the name of the column
                      to forecast, this will be based on the data source.
                    type: string
                type: object
              interpretability:
                description: Interpretability specifies the configuration to generate
                  model interpretability visualizations
                properties:
                  anchor:
                    default: false
                    description: Indicates if anchor explanation diagrams will be
                      generated
                    type: boolean
                  counterfactual:
                    default: false
                    description: Indicates if counter-factual diagrams will be generated
                    type: boolean
                  ice:
                    default: true
                    description: Indicates if ICE (individual condition expectation)
                      plots will be generated
                    type: boolean
                  icepairs:
                    description: The collection of feature pairs to generate ICE scatter
                      diagrams for each
                    items:
                      properties:
                        x:
                          type: string
                        "y":
                          type: string
                      type: object
                    type: array
                  lime:
                    default: false
                    description: Indicates if LIME (local interpretable model-agnostic
                      explanations) diagrams will be generated
                    type: boolean
                  shap:
                    default: auto
                    description: The type of SHAP values to be generated. Linear and
                      tree values are the only recommended types due to the high compute
                      times of other methods
                    enum:
                    - permutation
                    - partition
                    - tree
                    - kernel
                    - sampling
                    - linear
                    - deep
                    - gradient
                    - auto
                    - none
                    type: string
                  shappairs:
                    description: The collection of feature pairs to generate SHAP
                      scatter diagrams for each
                    items:
                      properties:
                        x:
                          type: string
                        "y":
                          type: string
                      type: object
                    type: array
                type: object
              modelClass:
                description: The type of model, relevant to the Study phase which
                  the Model was created for
                enum:
                - feature-engineering
                - baseline
                - search
                - ensemble
                - test
                type: string
              modelClassName:
                description: The Model Class which created the Model, if applicable
                type: string
              modelClassRunName:
                description: The Model Class Run which created the Model, if applicable
                type: string
              notification:
                description: The name of the Notifier resource which Alerts created
                  by the Model will be forwarded to
                properties:
                  notifierName:
                    description: NotifierName specifies the name of a single Notifier
                      resource which the Alert will be forwarded to
                    type: string
                  selector:
                    additionalProperties:
                      type: string
                    description: Selector defines a map of labels that will be matched
                      to find multiple Notifier resource to forward alerts to
                    type: object
                  ttl:
                    default: 3600
                    description: TTL defines the time-to-live for Alerts, in seconds,
                      after which they will be deleted
                    format: int32
                    type: integer
                type: object
              objective:
                description: The objective metric that will be used to evaluate the
                  performance of the model
                properties:
                  goal:
                    default: maximize
                    description: The goal of the objective.
                    type: string
                  metric:
                    description: The objective metric
                    type: string
                type: object
              owner:
                default: no-one
                description: The Account which owns the the Study that created the
                  Model
                type: string
              package:
                default: false
                description: If true, the Model's estimator and other artifacts will
                  be packaged for use in a Predictor
                type: boolean
              partitionLocations:
                description: The set locations in case of group forecasts
                properties:
                  partitionFolder:
                    description: The folder of group data
                    type: string
                  partitionForecastFile:
                    description: The folder of partition data
                    type: string
                  partitionModelFile:
                    description: The folder of partition data
                    type: string
                  partitionModelFolder:
                    description: The folder of partition data
                    type: string
                  partitionProfileFolder:
                    description: The folder of partition data
                    type: string
                  partitionReportFile:
                    description: The folder of partition data
                    type: string
                type: object
              pause:
                default: false
                description: If true, the execution of new workloads associated with
                  the Model will be paused
                type: boolean
              profile:
                default: false
                description: If true, a profile will be generated for the Model succeeding
                  training
                type: boolean
              report:
                default: false
                description: If true, a Report resource will be generated for the
                  Model succeeding completion
                type: boolean
              studyName:
                description: The name of the Study which created the Model. If empty,
                  the Model will be trained as a stand-alone model
                maxLength: 63
                type: string
              subtask:
                default: none
                description: The machine learning subtask relevant to the primary
                  task (text classification, image object detection, etc.)
                enum:
                - text-ner
                - text-classification
                - text-multi-classification
                - text-regression
                - text-multi-label-classification
                - text-conversation
                - text-lang-generation
                - text-lang-model
                - text-multi-modal
                - text-ner
                - text-qa
                - text-summarization
                - text-sentence-pair
                - text-representation-generation
                - text-sentiment-analysis
                - text-code-generation
                - text-translation
                - text-lang-detection
                - text-grammar-correction
                - text-paraphrasing
                - text-intent-classification
                - text-semantic-similarity
                - text-keyword-extraction
                - text-pos
                - text-tokenization
                - text-lemma
                - image-classification
                - image-multi-label-classification
                - image-object-detection
                - image-segmentation
                - none
                type: string
              task:
                description: The machine learning task type of the Model (i.e. regression,
                  classification), derived from the parent Study
                enum:
                - binary-classification
                - multi-classification
                - forecasting
                - regression
                - clustering
                - recommendation
                - outlier-detection
                - novelty-detection
                - auto
                - unknown
                - partition-forecasting
                - monitoring
                type: string
              test:
                default: false
                description: Test indicates if the model will be moved to testing.
                  The model will be measured against all available benchmarks
                type: boolean
              training:
                description: TrainingSpec specifies the configuration to prepare and
                  train a model
                properties:
                  checkpoint:
                    description: Checkpoint specifies the location to store model
                      checkpoints
                    properties:
                      checkpointInterval:
                        default: 10
                        description: The interval, in minutes, at which a snapshot
                          of a partially trained model will be saved. Applicable to
                          models with long training times for resiliency if training
                          is suddenly stopped
                        format: int32
                        minimum: 0
                        type: integer
                      enabled:
                        default: false
                        description: Indicates if checkpointing is enabled.
                        type: boolean
                      location:
                        description: The location of the model checkpoint
                        properties:
                          bucket:
                            default: ""
                            description: In the case of the location type being an
                              object storage system, BucketName is the name of the
                              VirtualBucket resource that exists in the same tenant
                              as the resource specifying the DataLocation. Modela
                              will connect to the external object storage system,
                              and will access the file from the path specified by
                              the Path field
                            type: string
                          connection:
                            default: ""
                            description: In the case of the type of location being
                              a database, ConnectionName specifies the name of the
                              ConnectionName resource that exists in the same tenant
                              as the resource specifying the DataLocation. Modela
                              will attempt to connect to the database using the credentials
                              specified in the ConnectionName, and will execute the
                              query specified by the SQL field
                            type: string
                          database:
                            default: ""
                            description: The name of a database inside the database
                              system specified by the ConnectionName field
                            type: string
                          path:
                            default: ""
                            description: The path to a flat-file inside an object
                              storage system. When using the Modela API to upload
                              files (through the FileService API), Modela will upload
                              the data to a predetermined path based on the Tenant,
                              Data Product, Data Product Version, and resource type
                              of the resource in relation to the file being uploaded.
                              The path does not need to adhere to this format; you
                              may also specify an arbitrary path
                            type: string
                          resourceRef:
                            description: In the case of the location type being Dataset
                              or PublicDataset, ResourceRef references another resource
                              that containing data that will be used as a data source
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          sql:
                            default: ""
                            description: The SQL statement which will be executed
                              to query data from the table specified by Table
                            type: string
                          table:
                            default: ""
                            description: The name of a table inside a database, if
                              applicable
                            type: string
                          topic:
                            default: ""
                            description: The name of the streaming topic (currently
                              unsupported)
                            type: string
                          type:
                            default: object
                            description: The type of location where the data resides,
                              which can either be an object inside an object storage
                              system (i.e. Minio), a SQL location like a table or
                              a view, a data stream (i.e. Kafka, currently unsupported),
                              or a web location (currently unsupported)
                            enum:
                            - object
                            - table
                            - view
                            - stream
                            - web
                            - public-dataset
                            - dataset
                            type: string
                          url:
                            default: ""
                            description: In the case of the location type being WebApi,
                              URL specifies the external location (HTTP or Git) that
                              will be queried and then stored as flat-file by the
                              resource which specifies the DataLocation
                            type: string
                        type: object
                    type: object
                  cvtype:
                    default: kfold
                    description: The type of cross-validation to use, in the case
                      that a validation dataset is not enabled
                    enum:
                    - none
                    - group-kfold
                    - group-shuffle-split
                    - kfold
                    - leave-one-group-out
                    - leave-p-groups-out
                    - leave-one-out
                    - leave-p-out
                    - predefined-split
                    - repeated-kfold
                    - repeated-stratified-k-fold
                    - shuffle-split
                    - stratified-k-fold
                    - stratified-shuffle-split
                    - stratified-group-k-fold
                    - time-series-split
                    type: string
                  evalMetrics:
                    description: EvalMetrics specifies the collection of metrics that
                      will be evaluated after model training is complete
                    items:
                      type: string
                    type: array
                  featureImportance:
                    default: true
                    description: Indicates if feature importance for the model will
                      be computed as part of training. Some algorithms (e.g. Random
                      Forest) have built in support for feature importance
                    type: boolean
                  folds:
                    default: 5
                    description: The number of folds to use during cross-validation.
                      If set to 0, cross-validation will be disabled
                    format: int32
                    type: integer
                  gpu:
                    default: false
                    description: Indicates if a GPU will be allocated for model training
                    type: boolean
                  labRef:
                    description: The reference to the Lab under which the model training
                      Job will be created
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  logLevel:
                    default: info
                    description: The maximum log level for logs produced by Jobs associated
                      with the Model
                    enum:
                    - trace
                    - debug
                    - info
                    - error
                    type: string
                  priority:
                    default: medium
                    description: The priority of the Kubernetes Job created by the
                      Model (medium, by default)
                    enum:
                    - low
                    - medium
                    - high
                    - urgent
                    type: string
                  resources:
                    description: Resources specifies the resource requirements allocated
                      to the model training workload
                    properties:
                      custom:
                        default: false
                        description: Custom indicates if the custom requirements specified
                          by Requirements will be used
                        type: boolean
                      requirements:
                        description: Requirements specifies the custom resource requirements
                          for the workload
                        properties:
                          limits:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                          requests:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Requests describes the minimum amount of
                              compute resources required. If Requests is omitted for
                              a container, it defaults to Limits if that is explicitly
                              specified, otherwise to an implementation-defined value.
                              More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                        type: object
                      workloadName:
                        description: WorkloadName references the name of a Workload
                          Class resource that will be used to determine the resource
                          requirements of the workload. If specified, WorkloadName
                          will take precedence over custom requirements
                        type: string
                    type: object
                  samplePct:
                    default: 100
                    description: The number percentage (0 through 100) of rows to
                      be used during training
                    format: int32
                    type: integer
                  seed:
                    default: 42
                    description: The random state used for the model's estimator,
                      if applicable (for example, in RandomForestClassifier)
                    type: number
                  sh:
                    description: SuccessiveHalving specifies the configuration for
                      a Study to execute a model search using successive halving
                    properties:
                      bracket:
                        description: The bracket of the model
                        format: int32
                        maximum: 128
                        minimum: 0
                        type: integer
                      budget:
                        description: The budget to be used in a multi-fidelity search,
                          for example the number of epochs or the percentage of data
                          to train the model with
                        format: int32
                        maximum: 128
                        minimum: 0
                        type: integer
                      confID:
                        description: The configuration ID allocated to the model
                        format: int32
                        type: integer
                      modality:
                        description: The type of modality, based on the type of model
                          For classical models, it should be based on data percentage
                          For deep models, it should be based on epochs
                        enum:
                        - data
                        - epochs
                        type: string
                      rung:
                        description: The rung of the model
                        format: int32
                        maximum: 128
                        minimum: 0
                        type: integer
                    type: object
                  split:
                    description: Split specifies the configuration to generate training,
                      testing, and validation datasets
                    properties:
                      method:
                        default: auto
                        description: Method defines the type of split method
                        enum:
                        - random
                        - split-column
                        - time
                        - random-stratified
                        - auto
                        - test-dataset
                        type: string
                      splitColumn:
                        description: The name of the column containing a binary value
                          that indicates if the row should be split. The split type
                          must use split-column in order for SplitColumn to have an
                          effect
                        type: string
                      test:
                        default: 20
                        description: The number percentage (0 through 100) of rows
                          that will be allocated to the training dataset
                        format: int32
                        maximum: 100
                        minimum: 0
                        type: integer
                      testDataset:
                        default: ""
                        description: The name of the Dataset resource which will be
                          used as the testing dataset
                        type: string
                      train:
                        default: 80
                        description: The number percentage (0 through 100) of rows
                          that will be allocated to the training dataset
                        format: int32
                        maximum: 100
                        minimum: 1
                        type: integer
                      trainDataset:
                        default: ""
                        description: The name of the Dataset resource which will be
                          used as the training dataset
                        type: string
                      validation:
                        default: 0
                        description: The number percentage (0 through 100) of rows
                          that will be allocated to the validation dataset. If Validation
                          is set to 0 the benchmarking process will use cross-validation
                        format: int32
                        maximum: 50
                        minimum: 0
                        type: integer
                      validationDataset:
                        default: ""
                        description: The name of the Dataset resource which will be
                          used as the validation dataset, applicable if the split
                          type uses test-dataset. If enabled, the training dataset
                          will not be split and used as-is
                        type: string
                    type: object
                  timeout:
                    default: 600
                    description: The maximum time, in seconds, that Jobs associated
                      with the Model can run for before being forcefully cancelled
                    format: int32
                    type: integer
                type: object
              trialID:
                default: 0
                description: The trial ID of the Model, designated by the parent Study
                  of the Model
                format: int32
                type: integer
              unitTest:
                default: false
                description: If true, the Model will be unit-tested against the test
                  suite specified by UnitTests
                type: boolean
              unitTests:
                description: UnitTests defines the test suite that will be executed
                  on the Model succeeding training
                properties:
                  enabled:
                    description: If false, this test case is disabled
                    type: boolean
                  tests:
                    items:
                      properties:
                        assertThat:
                          description: The assertion type
                          type: string
                        column:
                          description: If unit test is column test, this is the name
                            of the column
                          type: string
                        column2:
                          description: For test that involve two columns (e.g. correlation)
                          type: string
                        columns:
                          description: If unit test is column test, this is the name
                            of the column
                          items:
                            type: string
                          type: array
                        compareToRef:
                          description: Reference to another entity which is a ref.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object. TODO: this design is not final and this
                                field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        dataFilter:
                          description: Sql statement to filter the data for this unit
                            test
                          type: string
                        enabled:
                          description: If false, this test case is disabled
                          type: boolean
                        entityRef:
                          description: Reference to an entity.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object. TODO: this design is not final and this
                                field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        entityRef2:
                          description: Reference to an entity.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object. TODO: this design is not final and this
                                field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        expectedCategory:
                          description: The expected value
                          type: string
                        expectedSet:
                          description: Expected set of values,if the assertion
                          items:
                            type: string
                          type: array
                        expectedValue:
                          description: The expected numerical value
                          type: number
                        featureFilter:
                          description: Filter the filter for this unit test.
                          type: string
                        generated:
                          description: Indicates if this validation rule was automatically
                            generated by the system
                          type: boolean
                        lower:
                          description: For range based tests.
                          format: float
                          type: number
                        lowerInclusive:
                          type: boolean
                        metric:
                          description: The metric that is used for the test
                          type: string
                        name:
                          description: The name of the test case, will be generate
                            if empty by the combination of assertion, entity ref,
                            column name and metric
                          type: string
                        periods:
                          description: The length of the past if we are comparing
                            to moving avg
                          format: int32
                          type: integer
                        referenceType:
                          description: Set the reference type for this unit test
                          type: string
                        tags:
                          description: The test case tags, used for filtering. Optional
                            Test Tags
                          items:
                            type: string
                          type: array
                        type:
                          description: The test type The type of the data test
                          type: string
                        upper:
                          format: float
                          type: number
                        upperInclusive:
                          type: boolean
                      type: object
                    type: array
                type: object
              version:
                default: ""
                description: The version of the Model, derived from the Study which
                  created the Model
                type: string
            type: object
          status:
            description: ModelStatus defines the observed state of a Model
            properties:
              approval:
                description: Approval specifies the current approval status for the
                  Model
                properties:
                  reviews:
                    description: Reviews contains an ApprovalReviewStatus for each
                      reviewer specified by the ApprovalSpec for the Model
                    items:
                      properties:
                        approvedAt:
                          description: The date at which the review took place. If
                            empty, the review is still unconfirmed
                          format: date-time
                          type: string
                        notes:
                          description: The notes for the review, created by the reviewer
                            at the time of the decision
                          type: string
                        result:
                          description: The approval status, which can be approved,
                            rejected, or unconfirmed
                          type: string
                        reviewer:
                          description: Reviewer specifies the name of the Account
                            which is responsible for this review
                          type: string
                      type: object
                    type: array
                  status:
                    description: Status defines the overall approval status of the
                      Model
                    type: string
                type: object
              completedAt:
                description: CompletedAt represents the time at which the Model was
                  marked as ready, failed, or aborted
                format: date-time
                type: string
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{ // Represents the observations of a foo's
                    current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              correlationsWithTarget:
                description: The collection of correlations of the features of the
                  training dataset and the target feature
                items:
                  description: Correlation records the correlation between two features
                    in a Dataset
                  properties:
                    method:
                      description: How the value was calculated
                      type: string
                    value:
                      description: The correlation value
                      type: number
                    x:
                      description: The name of the feature on the X axis
                      type: string
                    "y":
                      description: The name of the feature on the Y axis
                      type: string
                  required:
                  - x
                  - "y"
                  type: object
                type: array
              dataSourceName:
                description: The name of the Data Source resource which the Model
                  was trained with
                type: string
              datasetName:
                description: The name of the Dataset resource which the Model was
                  trained with
                type: string
              failureMessage:
                description: In the case of failure, the Model resource controller
                  will set this field with a failure message
                type: string
              feedback:
                description: Feedback contain the collection of measurements produced
                  by validation on the feedback dataset
                items:
                  description: Measurement is a value for a specific metric
                  properties:
                    algorithm:
                      description: The name of the algorithm that generated this measurment
                      type: string
                    boolQty:
                      description: If the metric refer to a bool unit, store the bool
                        value
                      type: boolean
                    category:
                      description: If the metric refer to categorical measure,store
                        the category.
                      type: string
                    column:
                      type: string
                    entity:
                      description: 'ObjectReference contains enough information to
                        let you inspect or modify the referred object. --- New uses
                        of this type are discouraged because of difficulty describing
                        its usage when embedded in APIs. 1. Ignored fields.  It includes
                        many fields which are not generally honored.  For instance,
                        ResourceVersion and FieldPath are both very rarely valid in
                        actual usage. 2. Invalid usage help.  It is impossible to
                        add specific help for individual usage.  In most embedded
                        usages, there are particular restrictions like, "must refer
                        only to types A and B" or "UID not honored" or "name must
                        be restricted". Those cannot be well described when embedded.
                        3. Inconsistent validation.  Because the usages are different,
                        the validation rules are different by usage, which makes it
                        hard for users to predict what will happen. 4. The fields
                        are both imprecise and overly precise.  Kind is not a precise
                        mapping to a URL. This can produce ambiguity during interpretation
                        and require a REST mapping.  In most cases, the dependency
                        is on the group,resource tuple and the version of the actual
                        struct is irrelevant. 5. We cannot easily change it.  Because
                        this type is embedded in many locations, updates to this type
                        will affect numerous schemas.  Don''t make new APIs embed
                        an underspecified API type they do not control. Instead of
                        using this type, create a locally provided and used type that
                        is well-focused on your reference. For example, ServiceReferences
                        for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                        .'
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object. TODO: this design
                            is not final and this field is subject to change in the
                            future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    metric:
                      description: The metric type name (e.g. F1 / Accuracy)
                      type: string
                    stddev:
                      description: Metric standard diviation for quantative observations.
                      type: number
                    taskType:
                      description: The measurment task type (e.g. train, test, cv,
                        feature)
                      type: string
                    timePoint:
                      description: The Time when the observation was taken
                      format: date-time
                      type: string
                    value:
                      description: The value of the metric for quantitive observations
                      type: number
                    valueSet:
                      description: Capture a set of values.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
              feedbackTestResults:
                description: The result of running the feedback unit tests, the feedback
                  unit tests
                properties:
                  completedAt:
                    description: Stop time of running the suite.
                    format: date-time
                    type: string
                  entityRef:
                    description: A reference to the object under test. Best practice
                      is to have one suite for an object
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  errors:
                    description: Total number of assertion errors.
                    format: int32
                    type: integer
                  failures:
                    description: Total number of failures. A failure is an unplanned
                      error, e.g. cannot connect to a dataset
                    format: int32
                    type: integer
                  startedAt:
                    description: Start time of running the suite
                    format: date-time
                    type: string
                  tests:
                    description: The result of executing the test suite. The result
                      contain one result object per test case.
                    items:
                      description: Result for a specific case
                      properties:
                        actual:
                          description: Actual observation
                          properties:
                            algorithm:
                              description: The name of the algorithm that generated
                                this measurment
                              type: string
                            boolQty:
                              description: If the metric refer to a bool unit, store
                                the bool value
                              type: boolean
                            category:
                              description: If the metric refer to categorical measure,store
                                the category.
                              type: string
                            column:
                              type: string
                            entity:
                              description: 'ObjectReference contains enough information
                                to let you inspect or modify the referred object.
                                --- New uses of this type are discouraged because
                                of difficulty describing its usage when embedded in
                                APIs. 1. Ignored fields.  It includes many fields
                                which are not generally honored.  For instance, ResourceVersion
                                and FieldPath are both very rarely valid in actual
                                usage. 2. Invalid usage help.  It is impossible to
                                add specific help for individual usage.  In most embedded
                                usages, there are particular restrictions like, "must
                                refer only to types A and B" or "UID not honored"
                                or "name must be restricted". Those cannot be well
                                described when embedded. 3. Inconsistent validation.  Because
                                the usages are different, the validation rules are
                                different by usage, which makes it hard for users
                                to predict what will happen. 4. The fields are both
                                imprecise and overly precise.  Kind is not a precise
                                mapping to a URL. This can produce ambiguity during
                                interpretation and require a REST mapping.  In most
                                cases, the dependency is on the group,resource tuple
                                and the version of the actual struct is irrelevant.
                                5. We cannot easily change it.  Because this type
                                is embedded in many locations, updates to this type
                                will affect numerous schemas.  Don''t make new APIs
                                embed an underspecified API type they do not control.
                                Instead of using this type, create a locally provided
                                and used type that is well-focused on your reference.
                                For example, ServiceReferences for admission registration:
                                https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                                .'
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object
                                    instead of an entire object, this string should
                                    contain a valid JSON/Go field access statement,
                                    such as desiredState.manifest.containers[2]. For
                                    example, if the object reference is to a container
                                    within a pod, this would take on a value like:
                                    "spec.containers{name}" (where "name" refers to
                                    the name of the container that triggered the event)
                                    or if no container name is specified "spec.containers[2]"
                                    (container with index 2 in this pod). This syntax
                                    is chosen only to have some well-defined way of
                                    referencing a part of an object. TODO: this design
                                    is not final and this field is subject to change
                                    in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info:
                                    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which
                                    this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                            metric:
                              description: The metric type name (e.g. F1 / Accuracy)
                              type: string
                            stddev:
                              description: Metric standard diviation for quantative
                                observations.
                              type: number
                            taskType:
                              description: The measurment task type (e.g. train, test,
                                cv, feature)
                              type: string
                            timePoint:
                              description: The Time when the observation was taken
                              format: date-time
                              type: string
                            value:
                              description: The value of the metric for quantitive
                                observations
                              type: number
                            valueSet:
                              description: Capture a set of values.
                              items:
                                type: string
                              type: array
                          type: object
                        error:
                          description: An error occur if the system cannot execute
                            the test case (e.g. connection error).
                          type: boolean
                        failure:
                          description: A failure occur on assertion failure
                          type: boolean
                        failureMsg:
                          description: An optional
                          type: string
                        name:
                          description: The test case name for this result.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                type: object
              forecastLocation:
                description: FileLocation denotes the location of a flat-file, which
                  is the name of a VirtualBucket and the path within it
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              fullWeightsLocation:
                description: FileLocation denotes the location of a flat-file, which
                  is the name of a VirtualBucket and the path within it
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              groupby:
                description: The sub models uri file contain the results of running
                  the sub model
                properties:
                  forecastsURI:
                    description: The locations of forecasts
                    type: string
                  modelsURI:
                    description: The locations of the datasets profile files. Each
                      file is the group
                    type: string
                  profilesURI:
                    description: The locations of the datasets profiles files.
                    type: string
                  workerResults:
                    description: Holds the worker on-going result, when a worker finish,
                      we update the location of their result files
                    items:
                      properties:
                        error:
                          type: string
                        id:
                          description: Worker ID
                          format: int32
                          type: integer
                        task:
                          type: string
                        uri:
                          description: URI
                          type: string
                      type: object
                    type: array
                type: object
              images:
                description: Images specifies the container images used to train the
                  model
                properties:
                  dataImage:
                    description: The image used for data operations
                    type: string
                  publisherImage:
                    description: The image used to deploy models
                    type: string
                  trainerImage:
                    description: The image used during training
                    type: string
                type: object
              impurityImportance:
                description: The collection of features and their importance, sorted
                  by the greatest importance first The collection is measured based
                  on impuriry and uses the native measures by a tree algorithm
                items:
                  description: FeatureImportance records the computed importance of
                    a single feature
                  properties:
                    feature:
                      description: The name of the feature
                      type: string
                    importance:
                      description: The importance of the feature
                      format: float
                      type: number
                  type: object
                type: array
              interpretability:
                description: Interpretability contains results produced during the
                  explaining phase of the Model
                properties:
                  completedAt:
                    description: CompletedAt represents the time when the model explanation
                      phase ended
                    format: date-time
                    type: string
                  explainerLocation:
                    description: The location of the generated explanation data
                    properties:
                      bucketName:
                        type: string
                      path:
                        type: string
                    type: object
                  importance:
                    description: The collection of feature importances generated from
                      the computed SHAP values
                    items:
                      description: FeatureImportance records the computed importance
                        of a single feature
                      properties:
                        feature:
                          description: The name of the feature
                          type: string
                        importance:
                          description: The importance of the feature
                          format: float
                          type: number
                      type: object
                    type: array
                  startedAt:
                    description: StartedAt represents the time when the model explanation
                      phase started
                    format: date-time
                    type: string
                  testShapValuesLocation:
                    description: The location of the test SHAP values
                    properties:
                      bucketName:
                        type: string
                      path:
                        type: string
                    type: object
                  trainShapValuesLocation:
                    description: The location of the train SHAP values
                    properties:
                      bucketName:
                        type: string
                      path:
                        type: string
                    type: object
                type: object
              logs:
                description: Logs specifies the location of logs produced by workloads
                  associated with the Model
                properties:
                  bucket:
                    description: The name of the Virtual Bucket resource where the
                      logs are stored
                    type: string
                  containers:
                    description: The collection of logs for each container of the
                      workload
                    items:
                      description: ContainerLog describes the location of logs for
                        a single Job
                      properties:
                        bucket:
                          description: The bucket the log was stored in
                          type: string
                        container:
                          description: The container name
                          type: string
                        job:
                          description: The name of the Job
                          type: string
                        key:
                          description: The path to the log in the bucket
                          type: string
                      type: object
                    type: array
                type: object
              misclassificationLocation:
                description: The location of the misclassification file produced during
                  the testing phase
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              observedGeneration:
                description: ObservedGeneration is the last generation that was acted
                  on
                format: int64
                type: integer
              packageLocation:
                description: The location of the packaged model
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              permutationImportance:
                description: The collection of features and their importance, sorted
                  by the greatest importance first The collection is measured using
                  permutation importance
                items:
                  description: FeatureImportance records the computed importance of
                    a single feature
                  properties:
                    feature:
                      description: The name of the feature
                      type: string
                    importance:
                      description: The importance of the feature
                      format: float
                      type: number
                  type: object
                type: array
              phase:
                default: Pending
                description: The phase of the Model
                type: string
              prCurve:
                description: The Precision/Recall curve of the trained model
                properties:
                  values:
                    items:
                      properties:
                        x:
                          type: number
                        "y":
                          type: number
                      type: object
                    type: array
                type: object
              profileLocation:
                description: The location of the model profile, which contains visualizations
                  produced during the profiling phase
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              progress:
                description: The progress percentage of the Model, which is derived
                  from the Model's current phase
                format: int32
                type: integer
              reportLocation:
                description: The location of the Report produced by the Model
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              reportName:
                description: The name of the Report resource produced by the Model
                type: string
              rocCurve:
                description: The Roc/Auc curve of the trained model
                properties:
                  values:
                    items:
                      properties:
                        x:
                          type: number
                        "y":
                          type: number
                      type: object
                    type: array
                type: object
              runtime:
                description: The runtime training details.
                properties:
                  os:
                    description: The OS of the trainer container
                    type: string
                  pythonPackages:
                    additionalProperties:
                      type: string
                    description: The Python packages used during training (produced
                      by pip freeze)
                    type: object
                  pythonVersion:
                    description: The Python version of the model trainer
                    type: string
                type: object
              serving:
                description: ServingStatus contains the status of the model in the
                  case that it was deployed to a Predictor or Data App
                properties:
                  dashboardEndpoint:
                    description: The endpoint of the model served by a Data App
                    type: string
                  dataAppName:
                    description: The name of the Data App hosting the model
                    type: string
                  predictorEndpoint:
                    description: The endpoint of the model served by a Predictor
                    type: string
                  predictorName:
                    description: The name of the Predictor hosting this model
                    type: string
                  role:
                    default: none
                    description: Role indicates the role of the model deployed after
                      it is deployed within a Predictor
                    enum:
                    - live
                    - shadow
                    - none
                    type: string
                type: object
              tarFileHash:
                description: Sha256 of the model tar file
                type: string
              test:
                description: Train contains the collection of measurements produced
                  by validation on the testing dataset
                items:
                  description: Measurement is a value for a specific metric
                  properties:
                    algorithm:
                      description: The name of the algorithm that generated this measurment
                      type: string
                    boolQty:
                      description: If the metric refer to a bool unit, store the bool
                        value
                      type: boolean
                    category:
                      description: If the metric refer to categorical measure,store
                        the category.
                      type: string
                    column:
                      type: string
                    entity:
                      description: 'ObjectReference contains enough information to
                        let you inspect or modify the referred object. --- New uses
                        of this type are discouraged because of difficulty describing
                        its usage when embedded in APIs. 1. Ignored fields.  It includes
                        many fields which are not generally honored.  For instance,
                        ResourceVersion and FieldPath are both very rarely valid in
                        actual usage. 2. Invalid usage help.  It is impossible to
                        add specific help for individual usage.  In most embedded
                        usages, there are particular restrictions like, "must refer
                        only to types A and B" or "UID not honored" or "name must
                        be restricted". Those cannot be well described when embedded.
                        3. Inconsistent validation.  Because the usages are different,
                        the validation rules are different by usage, which makes it
                        hard for users to predict what will happen. 4. The fields
                        are both imprecise and overly precise.  Kind is not a precise
                        mapping to a URL. This can produce ambiguity during interpretation
                        and require a REST mapping.  In most cases, the dependency
                        is on the group,resource tuple and the version of the actual
                        struct is irrelevant. 5. We cannot easily change it.  Because
                        this type is embedded in many locations, updates to this type
                        will affect numerous schemas.  Don''t make new APIs embed
                        an underspecified API type they do not control. Instead of
                        using this type, create a locally provided and used type that
                        is well-focused on your reference. For example, ServiceReferences
                        for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                        .'
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object. TODO: this design
                            is not final and this field is subject to change in the
                            future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    metric:
                      description: The metric type name (e.g. F1 / Accuracy)
                      type: string
                    stddev:
                      description: Metric standard diviation for quantative observations.
                      type: number
                    taskType:
                      description: The measurment task type (e.g. train, test, cv,
                        feature)
                      type: string
                    timePoint:
                      description: The Time when the observation was taken
                      format: date-time
                      type: string
                    value:
                      description: The value of the metric for quantitive observations
                      type: number
                    valueSet:
                      description: Capture a set of values.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
              testConfusionMatrix:
                description: The confusion matrix of the test data
                properties:
                  rows:
                    items:
                      properties:
                        count:
                          format: int32
                          type: integer
                        p:
                          type: string
                        pct:
                          type: number
                        t:
                          type: string
                      type: object
                    type: array
                type: object
              testDatasetLocation:
                description: TestDatasetLocation specifies the location of the testing
                  dataset
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              testScore:
                description: The score for the objective metric based on the testing
                  dataset
                type: number
              testWeightsLocation:
                description: FileLocation denotes the location of a flat-file, which
                  is the name of a VirtualBucket and the path within it
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              testingCompletedAt:
                description: TestingCompletedAt represents the time at which the Model
                  completed testing
                format: date-time
                type: string
              testingResources:
                description: TestingResources details the resources that were consumed
                  by the testing workload
                properties:
                  cpu:
                    format: int64
                    type: integer
                  gpu:
                    format: int64
                    type: integer
                  memory:
                    format: int64
                    type: integer
                type: object
              testingRows:
                description: The number of rows in the testing dataset
                format: int32
                type: integer
              testingStartedAt:
                description: TestingStartedAt represents the time at which the Model
                  started testing
                format: date-time
                type: string
              topCorrelations:
                description: The top correlations between features of the training
                  dataset
                items:
                  description: Correlation records the correlation between two features
                    in a Dataset
                  properties:
                    method:
                      description: How the value was calculated
                      type: string
                    value:
                      description: The correlation value
                      type: number
                    x:
                      description: The name of the feature on the X axis
                      type: string
                    "y":
                      description: The name of the feature on the Y axis
                      type: string
                  required:
                  - x
                  - "y"
                  type: object
                type: array
              train:
                description: Train contains the collection of measurements produced
                  by validation on the training dataset
                items:
                  description: Measurement is a value for a specific metric
                  properties:
                    algorithm:
                      description: The name of the algorithm that generated this measurment
                      type: string
                    boolQty:
                      description: If the metric refer to a bool unit, store the bool
                        value
                      type: boolean
                    category:
                      description: If the metric refer to categorical measure,store
                        the category.
                      type: string
                    column:
                      type: string
                    entity:
                      description: 'ObjectReference contains enough information to
                        let you inspect or modify the referred object. --- New uses
                        of this type are discouraged because of difficulty describing
                        its usage when embedded in APIs. 1. Ignored fields.  It includes
                        many fields which are not generally honored.  For instance,
                        ResourceVersion and FieldPath are both very rarely valid in
                        actual usage. 2. Invalid usage help.  It is impossible to
                        add specific help for individual usage.  In most embedded
                        usages, there are particular restrictions like, "must refer
                        only to types A and B" or "UID not honored" or "name must
                        be restricted". Those cannot be well described when embedded.
                        3. Inconsistent validation.  Because the usages are different,
                        the validation rules are different by usage, which makes it
                        hard for users to predict what will happen. 4. The fields
                        are both imprecise and overly precise.  Kind is not a precise
                        mapping to a URL. This can produce ambiguity during interpretation
                        and require a REST mapping.  In most cases, the dependency
                        is on the group,resource tuple and the version of the actual
                        struct is irrelevant. 5. We cannot easily change it.  Because
                        this type is embedded in many locations, updates to this type
                        will affect numerous schemas.  Don''t make new APIs embed
                        an underspecified API type they do not control. Instead of
                        using this type, create a locally provided and used type that
                        is well-focused on your reference. For example, ServiceReferences
                        for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                        .'
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object. TODO: this design
                            is not final and this field is subject to change in the
                            future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    metric:
                      description: The metric type name (e.g. F1 / Accuracy)
                      type: string
                    stddev:
                      description: Metric standard diviation for quantative observations.
                      type: number
                    taskType:
                      description: The measurment task type (e.g. train, test, cv,
                        feature)
                      type: string
                    timePoint:
                      description: The Time when the observation was taken
                      format: date-time
                      type: string
                    value:
                      description: The value of the metric for quantitive observations
                      type: number
                    valueSet:
                      description: Capture a set of values.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
              trainConfusionMatrix:
                description: The confusion matrix of the train data.
                properties:
                  rows:
                    items:
                      properties:
                        count:
                          format: int32
                          type: integer
                        p:
                          type: string
                        pct:
                          type: number
                        t:
                          type: string
                      type: object
                    type: array
                type: object
              trainDatasetLocation:
                description: TrainDatasetLocation specifies the location of the training
                  dataset
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              trainLabelEncoderLocation:
                description: FileLocation denotes the location of a flat-file, which
                  is the name of a VirtualBucket and the path within it
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              trainWeightsLocation:
                description: FileLocation denotes the location of a flat-file, which
                  is the name of a VirtualBucket and the path within it
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              trainedBy:
                description: The Account which trained the model, derived from the
                  parent Study
                type: string
              trainingCompletedAt:
                description: TrainCompletionTime represents the time at which the
                  Model completed training
                format: date-time
                type: string
              trainingDataHash:
                description: TrainingDataHash specifies the hashes for datasets used
                  by the Model
                properties:
                  testingHash:
                    default: ""
                    type: string
                  trainingHash:
                    default: ""
                    type: string
                  validationHash:
                    default: ""
                    type: string
                type: object
              trainingResources:
                description: TrainingResources details the resources that were consumed
                  by the training workload
                properties:
                  cpu:
                    format: int64
                    type: integer
                  gpu:
                    format: int64
                    type: integer
                  memory:
                    format: int64
                    type: integer
                type: object
              trainingRows:
                description: The number of rows in the training dataset
                format: int32
                type: integer
              trainingScore:
                description: The score for the objective metric based on the training
                  dataset
                type: number
              trainingStartedAt:
                description: TrainStartTime represents the time at which the Model
                  started training
                format: date-time
                type: string
              tune:
                description: Tune contains the collection of measurements produced
                  by validation on the tune dataset
                items:
                  description: Measurement is a value for a specific metric
                  properties:
                    algorithm:
                      description: The name of the algorithm that generated this measurment
                      type: string
                    boolQty:
                      description: If the metric refer to a bool unit, store the bool
                        value
                      type: boolean
                    category:
                      description: If the metric refer to categorical measure,store
                        the category.
                      type: string
                    column:
                      type: string
                    entity:
                      description: 'ObjectReference contains enough information to
                        let you inspect or modify the referred object. --- New uses
                        of this type are discouraged because of difficulty describing
                        its usage when embedded in APIs. 1. Ignored fields.  It includes
                        many fields which are not generally honored.  For instance,
                        ResourceVersion and FieldPath are both very rarely valid in
                        actual usage. 2. Invalid usage help.  It is impossible to
                        add specific help for individual usage.  In most embedded
                        usages, there are particular restrictions like, "must refer
                        only to types A and B" or "UID not honored" or "name must
                        be restricted". Those cannot be well described when embedded.
                        3. Inconsistent validation.  Because the usages are different,
                        the validation rules are different by usage, which makes it
                        hard for users to predict what will happen. 4. The fields
                        are both imprecise and overly precise.  Kind is not a precise
                        mapping to a URL. This can produce ambiguity during interpretation
                        and require a REST mapping.  In most cases, the dependency
                        is on the group,resource tuple and the version of the actual
                        struct is irrelevant. 5. We cannot easily change it.  Because
                        this type is embedded in many locations, updates to this type
                        will affect numerous schemas.  Don''t make new APIs embed
                        an underspecified API type they do not control. Instead of
                        using this type, create a locally provided and used type that
                        is well-focused on your reference. For example, ServiceReferences
                        for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                        .'
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object. TODO: this design
                            is not final and this field is subject to change in the
                            future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    metric:
                      description: The metric type name (e.g. F1 / Accuracy)
                      type: string
                    stddev:
                      description: Metric standard diviation for quantative observations.
                      type: number
                    taskType:
                      description: The measurment task type (e.g. train, test, cv,
                        feature)
                      type: string
                    timePoint:
                      description: The Time when the observation was taken
                      format: date-time
                      type: string
                    value:
                      description: The value of the metric for quantitive observations
                      type: number
                    valueSet:
                      description: Capture a set of values.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
              unitTestResults:
                description: The result of running the unit tests
                properties:
                  completedAt:
                    description: Stop time of running the suite.
                    format: date-time
                    type: string
                  entityRef:
                    description: A reference to the object under test. Best practice
                      is to have one suite for an object
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  errors:
                    description: Total number of assertion errors.
                    format: int32
                    type: integer
                  failures:
                    description: Total number of failures. A failure is an unplanned
                      error, e.g. cannot connect to a dataset
                    format: int32
                    type: integer
                  startedAt:
                    description: Start time of running the suite
                    format: date-time
                    type: string
                  tests:
                    description: The result of executing the test suite. The result
                      contain one result object per test case.
                    items:
                      description: Result for a specific case
                      properties:
                        actual:
                          description: Actual observation
                          properties:
                            algorithm:
                              description: The name of the algorithm that generated
                                this measurment
                              type: string
                            boolQty:
                              description: If the metric refer to a bool unit, store
                                the bool value
                              type: boolean
                            category:
                              description: If the metric refer to categorical measure,store
                                the category.
                              type: string
                            column:
                              type: string
                            entity:
                              description: 'ObjectReference contains enough information
                                to let you inspect or modify the referred object.
                                --- New uses of this type are discouraged because
                                of difficulty describing its usage when embedded in
                                APIs. 1. Ignored fields.  It includes many fields
                                which are not generally honored.  For instance, ResourceVersion
                                and FieldPath are both very rarely valid in actual
                                usage. 2. Invalid usage help.  It is impossible to
                                add specific help for individual usage.  In most embedded
                                usages, there are particular restrictions like, "must
                                refer only to types A and B" or "UID not honored"
                                or "name must be restricted". Those cannot be well
                                described when embedded. 3. Inconsistent validation.  Because
                                the usages are different, the validation rules are
                                different by usage, which makes it hard for users
                                to predict what will happen. 4. The fields are both
                                imprecise and overly precise.  Kind is not a precise
                                mapping to a URL. This can produce ambiguity during
                                interpretation and require a REST mapping.  In most
                                cases, the dependency is on the group,resource tuple
                                and the version of the actual struct is irrelevant.
                                5. We cannot easily change it.  Because this type
                                is embedded in many locations, updates to this type
                                will affect numerous schemas.  Don''t make new APIs
                                embed an underspecified API type they do not control.
                                Instead of using this type, create a locally provided
                                and used type that is well-focused on your reference.
                                For example, ServiceReferences for admission registration:
                                https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                                .'
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object
                                    instead of an entire object, this string should
                                    contain a valid JSON/Go field access statement,
                                    such as desiredState.manifest.containers[2]. For
                                    example, if the object reference is to a container
                                    within a pod, this would take on a value like:
                                    "spec.containers{name}" (where "name" refers to
                                    the name of the container that triggered the event)
                                    or if no container name is specified "spec.containers[2]"
                                    (container with index 2 in this pod). This syntax
                                    is chosen only to have some well-defined way of
                                    referencing a part of an object. TODO: this design
                                    is not final and this field is subject to change
                                    in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info:
                                    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which
                                    this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                            metric:
                              description: The metric type name (e.g. F1 / Accuracy)
                              type: string
                            stddev:
                              description: Metric standard diviation for quantative
                                observations.
                              type: number
                            taskType:
                              description: The measurment task type (e.g. train, test,
                                cv, feature)
                              type: string
                            timePoint:
                              description: The Time when the observation was taken
                              format: date-time
                              type: string
                            value:
                              description: The value of the metric for quantitive
                                observations
                              type: number
                            valueSet:
                              description: Capture a set of values.
                              items:
                                type: string
                              type: array
                          type: object
                        error:
                          description: An error occur if the system cannot execute
                            the test case (e.g. connection error).
                          type: boolean
                        failure:
                          description: A failure occur on assertion failure
                          type: boolean
                        failureMsg:
                          description: An optional
                          type: string
                        name:
                          description: The test case name for this result.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                type: object
              updatedAt:
                description: The last time the object was updated
                format: date-time
                type: string
              usage:
                description: The status of the model, when deploying via the stages
                properties:
                  cpu:
                    format: int64
                    type: integer
                  gpu:
                    format: int64
                    type: integer
                  memory:
                    format: int64
                    type: integer
                type: object
              validation:
                description: Validation contains the collection of measurements produced
                  by cross-validation or validation on the validation dataset
                items:
                  description: Measurement is a value for a specific metric
                  properties:
                    algorithm:
                      description: The name of the algorithm that generated this measurment
                      type: string
                    boolQty:
                      description: If the metric refer to a bool unit, store the bool
                        value
                      type: boolean
                    category:
                      description: If the metric refer to categorical measure,store
                        the category.
                      type: string
                    column:
                      type: string
                    entity:
                      description: 'ObjectReference contains enough information to
                        let you inspect or modify the referred object. --- New uses
                        of this type are discouraged because of difficulty describing
                        its usage when embedded in APIs. 1. Ignored fields.  It includes
                        many fields which are not generally honored.  For instance,
                        ResourceVersion and FieldPath are both very rarely valid in
                        actual usage. 2. Invalid usage help.  It is impossible to
                        add specific help for individual usage.  In most embedded
                        usages, there are particular restrictions like, "must refer
                        only to types A and B" or "UID not honored" or "name must
                        be restricted". Those cannot be well described when embedded.
                        3. Inconsistent validation.  Because the usages are different,
                        the validation rules are different by usage, which makes it
                        hard for users to predict what will happen. 4. The fields
                        are both imprecise and overly precise.  Kind is not a precise
                        mapping to a URL. This can produce ambiguity during interpretation
                        and require a REST mapping.  In most cases, the dependency
                        is on the group,resource tuple and the version of the actual
                        struct is irrelevant. 5. We cannot easily change it.  Because
                        this type is embedded in many locations, updates to this type
                        will affect numerous schemas.  Don''t make new APIs embed
                        an underspecified API type they do not control. Instead of
                        using this type, create a locally provided and used type that
                        is well-focused on your reference. For example, ServiceReferences
                        for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                        .'
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object. TODO: this design
                            is not final and this field is subject to change in the
                            future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    metric:
                      description: The metric type name (e.g. F1 / Accuracy)
                      type: string
                    stddev:
                      description: Metric standard diviation for quantative observations.
                      type: number
                    taskType:
                      description: The measurment task type (e.g. train, test, cv,
                        feature)
                      type: string
                    timePoint:
                      description: The Time when the observation was taken
                      format: date-time
                      type: string
                    value:
                      description: The value of the metric for quantitive observations
                      type: number
                    valueSet:
                      description: Capture a set of values.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
              validationDatasetLocation:
                description: ValidationDatasetLocation specifies the location of the
                  validation dataset
                properties:
                  bucketName:
                    type: string
                  path:
                    type: string
                type: object
              validationRows:
                description: The number of rows in the validation dataset, if applicable
                format: int32
                type: integer
              validationScore:
                description: The validation score for the objective metric produced
                  through cross validation or the validation dataset
                type: number
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
