/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "github.com/metaprov/modeldapi/pkg/client/clientset/versioned"
	catalogv1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/catalog/v1alpha1"
	fakecatalogv1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/catalog/v1alpha1/fake"
	datav1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/data/v1alpha1"
	fakedatav1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/data/v1alpha1/fake"
	inferencev1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/inference/v1alpha1"
	fakeinferencev1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/inference/v1alpha1/fake"
	infrav1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/infra/v1alpha1"
	fakeinfrav1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/infra/v1alpha1/fake"
	teamv1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/team/v1alpha1"
	faketeamv1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/team/v1alpha1/fake"
	trainingv1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/training/v1alpha1"
	faketrainingv1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/training/v1alpha1/fake"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// CatalogV1alpha1 retrieves the CatalogV1alpha1Client
func (c *Clientset) CatalogV1alpha1() catalogv1alpha1.CatalogV1alpha1Interface {
	return &fakecatalogv1alpha1.FakeCatalogV1alpha1{Fake: &c.Fake}
}

// DataV1alpha1 retrieves the DataV1alpha1Client
func (c *Clientset) DataV1alpha1() datav1alpha1.DataV1alpha1Interface {
	return &fakedatav1alpha1.FakeDataV1alpha1{Fake: &c.Fake}
}

// InferenceV1alpha1 retrieves the InferenceV1alpha1Client
func (c *Clientset) InferenceV1alpha1() inferencev1alpha1.InferenceV1alpha1Interface {
	return &fakeinferencev1alpha1.FakeInferenceV1alpha1{Fake: &c.Fake}
}

// InfraV1alpha1 retrieves the InfraV1alpha1Client
func (c *Clientset) InfraV1alpha1() infrav1alpha1.InfraV1alpha1Interface {
	return &fakeinfrav1alpha1.FakeInfraV1alpha1{Fake: &c.Fake}
}

// TeamV1alpha1 retrieves the TeamV1alpha1Client
func (c *Clientset) TeamV1alpha1() teamv1alpha1.TeamV1alpha1Interface {
	return &faketeamv1alpha1.FakeTeamV1alpha1{Fake: &c.Fake}
}

// TrainingV1alpha1 retrieves the TrainingV1alpha1Client
func (c *Clientset) TrainingV1alpha1() trainingv1alpha1.TrainingV1alpha1Interface {
	return &faketrainingv1alpha1.FakeTrainingV1alpha1{Fake: &c.Fake}
}
