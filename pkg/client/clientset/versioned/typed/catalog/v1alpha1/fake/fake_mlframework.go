/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/catalog/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeMLFrameworks implements MLFrameworkInterface
type FakeMLFrameworks struct {
	Fake *FakeCatalogV1alpha1
	ns   string
}

var mlframeworksResource = schema.GroupVersionResource{Group: "catalog.modeld.io", Version: "v1alpha1", Resource: "mlframeworks"}

var mlframeworksKind = schema.GroupVersionKind{Group: "catalog.modeld.io", Version: "v1alpha1", Kind: "MLFramework"}

// Get takes name of the mLFramework, and returns the corresponding mLFramework object, and an error if there is any.
func (c *FakeMLFrameworks) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.MLFramework, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(mlframeworksResource, c.ns, name), &v1alpha1.MLFramework{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MLFramework), err
}

// List takes label and field selectors, and returns the list of MLFrameworks that match those selectors.
func (c *FakeMLFrameworks) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.MLFrameworkList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(mlframeworksResource, mlframeworksKind, c.ns, opts), &v1alpha1.MLFrameworkList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.MLFrameworkList{ListMeta: obj.(*v1alpha1.MLFrameworkList).ListMeta}
	for _, item := range obj.(*v1alpha1.MLFrameworkList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested mLFrameworks.
func (c *FakeMLFrameworks) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(mlframeworksResource, c.ns, opts))

}

// Create takes the representation of a mLFramework and creates it.  Returns the server's representation of the mLFramework, and an error, if there is any.
func (c *FakeMLFrameworks) Create(ctx context.Context, mLFramework *v1alpha1.MLFramework, opts v1.CreateOptions) (result *v1alpha1.MLFramework, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(mlframeworksResource, c.ns, mLFramework), &v1alpha1.MLFramework{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MLFramework), err
}

// Update takes the representation of a mLFramework and updates it. Returns the server's representation of the mLFramework, and an error, if there is any.
func (c *FakeMLFrameworks) Update(ctx context.Context, mLFramework *v1alpha1.MLFramework, opts v1.UpdateOptions) (result *v1alpha1.MLFramework, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(mlframeworksResource, c.ns, mLFramework), &v1alpha1.MLFramework{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MLFramework), err
}

// Delete takes name of the mLFramework and deletes it. Returns an error if one occurs.
func (c *FakeMLFrameworks) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(mlframeworksResource, c.ns, name), &v1alpha1.MLFramework{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMLFrameworks) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(mlframeworksResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.MLFrameworkList{})
	return err
}

// Patch applies the patch and returns the patched mLFramework.
func (c *FakeMLFrameworks) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.MLFramework, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(mlframeworksResource, c.ns, name, pt, data, subresources...), &v1alpha1.MLFramework{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MLFramework), err
}
