/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1"
	scheme "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// FeaturePipelineRunsGetter has a method to return a FeaturePipelineRunInterface.
// A group's client should implement this interface.
type FeaturePipelineRunsGetter interface {
	FeaturePipelineRuns(namespace string) FeaturePipelineRunInterface
}

// FeaturePipelineRunInterface has methods to work with FeaturePipelineRun resources.
type FeaturePipelineRunInterface interface {
	Create(ctx context.Context, featurePipelineRun *v1alpha1.FeaturePipelineRun, opts v1.CreateOptions) (*v1alpha1.FeaturePipelineRun, error)
	Update(ctx context.Context, featurePipelineRun *v1alpha1.FeaturePipelineRun, opts v1.UpdateOptions) (*v1alpha1.FeaturePipelineRun, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.FeaturePipelineRun, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.FeaturePipelineRunList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.FeaturePipelineRun, err error)
	FeaturePipelineRunExpansion
}

// featurePipelineRuns implements FeaturePipelineRunInterface
type featurePipelineRuns struct {
	client rest.Interface
	ns     string
}

// newFeaturePipelineRuns returns a FeaturePipelineRuns
func newFeaturePipelineRuns(c *DataV1alpha1Client, namespace string) *featurePipelineRuns {
	return &featurePipelineRuns{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the featurePipelineRun, and returns the corresponding featurePipelineRun object, and an error if there is any.
func (c *featurePipelineRuns) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.FeaturePipelineRun, err error) {
	result = &v1alpha1.FeaturePipelineRun{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("featurepipelineruns").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of FeaturePipelineRuns that match those selectors.
func (c *featurePipelineRuns) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.FeaturePipelineRunList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.FeaturePipelineRunList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("featurepipelineruns").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested featurePipelineRuns.
func (c *featurePipelineRuns) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("featurepipelineruns").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a featurePipelineRun and creates it.  Returns the server's representation of the featurePipelineRun, and an error, if there is any.
func (c *featurePipelineRuns) Create(ctx context.Context, featurePipelineRun *v1alpha1.FeaturePipelineRun, opts v1.CreateOptions) (result *v1alpha1.FeaturePipelineRun, err error) {
	result = &v1alpha1.FeaturePipelineRun{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("featurepipelineruns").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(featurePipelineRun).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a featurePipelineRun and updates it. Returns the server's representation of the featurePipelineRun, and an error, if there is any.
func (c *featurePipelineRuns) Update(ctx context.Context, featurePipelineRun *v1alpha1.FeaturePipelineRun, opts v1.UpdateOptions) (result *v1alpha1.FeaturePipelineRun, err error) {
	result = &v1alpha1.FeaturePipelineRun{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("featurepipelineruns").
		Name(featurePipelineRun.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(featurePipelineRun).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the featurePipelineRun and deletes it. Returns an error if one occurs.
func (c *featurePipelineRuns) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("featurepipelineruns").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *featurePipelineRuns) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("featurepipelineruns").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched featurePipelineRun.
func (c *featurePipelineRuns) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.FeaturePipelineRun, err error) {
	result = &v1alpha1.FeaturePipelineRun{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("featurepipelineruns").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
