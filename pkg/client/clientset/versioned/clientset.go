/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	catalogv1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/catalog/v1alpha1"
	datav1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/data/v1alpha1"
	inferencev1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/inference/v1alpha1"
	infrav1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/infra/v1alpha1"
	teamv1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/team/v1alpha1"
	trainingv1alpha1 "github.com/metaprov/modeldapi/pkg/client/clientset/versioned/typed/training/v1alpha1"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	CatalogV1alpha1() catalogv1alpha1.CatalogV1alpha1Interface
	DataV1alpha1() datav1alpha1.DataV1alpha1Interface
	InferenceV1alpha1() inferencev1alpha1.InferenceV1alpha1Interface
	InfraV1alpha1() infrav1alpha1.InfraV1alpha1Interface
	TeamV1alpha1() teamv1alpha1.TeamV1alpha1Interface
	TrainingV1alpha1() trainingv1alpha1.TrainingV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	catalogV1alpha1   *catalogv1alpha1.CatalogV1alpha1Client
	dataV1alpha1      *datav1alpha1.DataV1alpha1Client
	inferenceV1alpha1 *inferencev1alpha1.InferenceV1alpha1Client
	infraV1alpha1     *infrav1alpha1.InfraV1alpha1Client
	teamV1alpha1      *teamv1alpha1.TeamV1alpha1Client
	trainingV1alpha1  *trainingv1alpha1.TrainingV1alpha1Client
}

// CatalogV1alpha1 retrieves the CatalogV1alpha1Client
func (c *Clientset) CatalogV1alpha1() catalogv1alpha1.CatalogV1alpha1Interface {
	return c.catalogV1alpha1
}

// DataV1alpha1 retrieves the DataV1alpha1Client
func (c *Clientset) DataV1alpha1() datav1alpha1.DataV1alpha1Interface {
	return c.dataV1alpha1
}

// InferenceV1alpha1 retrieves the InferenceV1alpha1Client
func (c *Clientset) InferenceV1alpha1() inferencev1alpha1.InferenceV1alpha1Interface {
	return c.inferenceV1alpha1
}

// InfraV1alpha1 retrieves the InfraV1alpha1Client
func (c *Clientset) InfraV1alpha1() infrav1alpha1.InfraV1alpha1Interface {
	return c.infraV1alpha1
}

// TeamV1alpha1 retrieves the TeamV1alpha1Client
func (c *Clientset) TeamV1alpha1() teamv1alpha1.TeamV1alpha1Interface {
	return c.teamV1alpha1
}

// TrainingV1alpha1 retrieves the TrainingV1alpha1Client
func (c *Clientset) TrainingV1alpha1() trainingv1alpha1.TrainingV1alpha1Interface {
	return c.trainingV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.catalogV1alpha1, err = catalogv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dataV1alpha1, err = datav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.inferenceV1alpha1, err = inferencev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.infraV1alpha1, err = infrav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.teamV1alpha1, err = teamv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.trainingV1alpha1, err = trainingv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.catalogV1alpha1 = catalogv1alpha1.NewForConfigOrDie(c)
	cs.dataV1alpha1 = datav1alpha1.NewForConfigOrDie(c)
	cs.inferenceV1alpha1 = inferencev1alpha1.NewForConfigOrDie(c)
	cs.infraV1alpha1 = infrav1alpha1.NewForConfigOrDie(c)
	cs.teamV1alpha1 = teamv1alpha1.NewForConfigOrDie(c)
	cs.trainingV1alpha1 = trainingv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.catalogV1alpha1 = catalogv1alpha1.New(c)
	cs.dataV1alpha1 = datav1alpha1.New(c)
	cs.inferenceV1alpha1 = inferencev1alpha1.New(c)
	cs.infraV1alpha1 = infrav1alpha1.New(c)
	cs.teamV1alpha1 = teamv1alpha1.New(c)
	cs.trainingV1alpha1 = trainingv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
