/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataProductLister helps list DataProducts.
// All objects returned here must be treated as read-only.
type DataProductLister interface {
	// List lists all DataProducts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataProduct, err error)
	// DataProducts returns an object that can list and get DataProducts.
	DataProducts(namespace string) DataProductNamespaceLister
	DataProductListerExpansion
}

// dataProductLister implements the DataProductLister interface.
type dataProductLister struct {
	indexer cache.Indexer
}

// NewDataProductLister returns a new DataProductLister.
func NewDataProductLister(indexer cache.Indexer) DataProductLister {
	return &dataProductLister{indexer: indexer}
}

// List lists all DataProducts in the indexer.
func (s *dataProductLister) List(selector labels.Selector) (ret []*v1alpha1.DataProduct, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataProduct))
	})
	return ret, err
}

// DataProducts returns an object that can list and get DataProducts.
func (s *dataProductLister) DataProducts(namespace string) DataProductNamespaceLister {
	return dataProductNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataProductNamespaceLister helps list and get DataProducts.
// All objects returned here must be treated as read-only.
type DataProductNamespaceLister interface {
	// List lists all DataProducts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataProduct, err error)
	// Get retrieves the DataProduct from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DataProduct, error)
	DataProductNamespaceListerExpansion
}

// dataProductNamespaceLister implements the DataProductNamespaceLister
// interface.
type dataProductNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataProducts in the indexer for a given namespace.
func (s dataProductNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataProduct, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataProduct))
	})
	return ret, err
}

// Get retrieves the DataProduct from the indexer for a given namespace and name.
func (s dataProductNamespaceLister) Get(name string) (*v1alpha1.DataProduct, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dataproduct"), name)
	}
	return obj.(*v1alpha1.DataProduct), nil
}
