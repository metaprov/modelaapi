/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/training/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotebookRunLister helps list NotebookRuns.
// All objects returned here must be treated as read-only.
type NotebookRunLister interface {
	// List lists all NotebookRuns in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotebookRun, err error)
	// NotebookRuns returns an object that can list and get NotebookRuns.
	NotebookRuns(namespace string) NotebookRunNamespaceLister
	NotebookRunListerExpansion
}

// notebookRunLister implements the NotebookRunLister interface.
type notebookRunLister struct {
	indexer cache.Indexer
}

// NewNotebookRunLister returns a new NotebookRunLister.
func NewNotebookRunLister(indexer cache.Indexer) NotebookRunLister {
	return &notebookRunLister{indexer: indexer}
}

// List lists all NotebookRuns in the indexer.
func (s *notebookRunLister) List(selector labels.Selector) (ret []*v1alpha1.NotebookRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotebookRun))
	})
	return ret, err
}

// NotebookRuns returns an object that can list and get NotebookRuns.
func (s *notebookRunLister) NotebookRuns(namespace string) NotebookRunNamespaceLister {
	return notebookRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotebookRunNamespaceLister helps list and get NotebookRuns.
// All objects returned here must be treated as read-only.
type NotebookRunNamespaceLister interface {
	// List lists all NotebookRuns in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotebookRun, err error)
	// Get retrieves the NotebookRun from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NotebookRun, error)
	NotebookRunNamespaceListerExpansion
}

// notebookRunNamespaceLister implements the NotebookRunNamespaceLister
// interface.
type notebookRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NotebookRuns in the indexer for a given namespace.
func (s notebookRunNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotebookRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotebookRun))
	})
	return ret, err
}

// Get retrieves the NotebookRun from the indexer for a given namespace and name.
func (s notebookRunNamespaceLister) Get(name string) (*v1alpha1.NotebookRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notebookrun"), name)
	}
	return obj.(*v1alpha1.NotebookRun), nil
}
