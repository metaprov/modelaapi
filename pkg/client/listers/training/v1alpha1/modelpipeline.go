/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/training/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ModelPipelineLister helps list ModelPipelines.
// All objects returned here must be treated as read-only.
type ModelPipelineLister interface {
	// List lists all ModelPipelines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ModelPipeline, err error)
	// ModelPipelines returns an object that can list and get ModelPipelines.
	ModelPipelines(namespace string) ModelPipelineNamespaceLister
	ModelPipelineListerExpansion
}

// modelPipelineLister implements the ModelPipelineLister interface.
type modelPipelineLister struct {
	indexer cache.Indexer
}

// NewModelPipelineLister returns a new ModelPipelineLister.
func NewModelPipelineLister(indexer cache.Indexer) ModelPipelineLister {
	return &modelPipelineLister{indexer: indexer}
}

// List lists all ModelPipelines in the indexer.
func (s *modelPipelineLister) List(selector labels.Selector) (ret []*v1alpha1.ModelPipeline, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModelPipeline))
	})
	return ret, err
}

// ModelPipelines returns an object that can list and get ModelPipelines.
func (s *modelPipelineLister) ModelPipelines(namespace string) ModelPipelineNamespaceLister {
	return modelPipelineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ModelPipelineNamespaceLister helps list and get ModelPipelines.
// All objects returned here must be treated as read-only.
type ModelPipelineNamespaceLister interface {
	// List lists all ModelPipelines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ModelPipeline, err error)
	// Get retrieves the ModelPipeline from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ModelPipeline, error)
	ModelPipelineNamespaceListerExpansion
}

// modelPipelineNamespaceLister implements the ModelPipelineNamespaceLister
// interface.
type modelPipelineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ModelPipelines in the indexer for a given namespace.
func (s modelPipelineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ModelPipeline, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModelPipeline))
	})
	return ret, err
}

// Get retrieves the ModelPipeline from the indexer for a given namespace and name.
func (s modelPipelineNamespaceLister) Get(name string) (*v1alpha1.ModelPipeline, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("modelpipeline"), name)
	}
	return obj.(*v1alpha1.ModelPipeline), nil
}
