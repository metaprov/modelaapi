/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/inference/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PredictorTemplateLister helps list PredictorTemplates.
// All objects returned here must be treated as read-only.
type PredictorTemplateLister interface {
	// List lists all PredictorTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PredictorTemplate, err error)
	// PredictorTemplates returns an object that can list and get PredictorTemplates.
	PredictorTemplates(namespace string) PredictorTemplateNamespaceLister
	PredictorTemplateListerExpansion
}

// predictorTemplateLister implements the PredictorTemplateLister interface.
type predictorTemplateLister struct {
	indexer cache.Indexer
}

// NewPredictorTemplateLister returns a new PredictorTemplateLister.
func NewPredictorTemplateLister(indexer cache.Indexer) PredictorTemplateLister {
	return &predictorTemplateLister{indexer: indexer}
}

// List lists all PredictorTemplates in the indexer.
func (s *predictorTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.PredictorTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PredictorTemplate))
	})
	return ret, err
}

// PredictorTemplates returns an object that can list and get PredictorTemplates.
func (s *predictorTemplateLister) PredictorTemplates(namespace string) PredictorTemplateNamespaceLister {
	return predictorTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PredictorTemplateNamespaceLister helps list and get PredictorTemplates.
// All objects returned here must be treated as read-only.
type PredictorTemplateNamespaceLister interface {
	// List lists all PredictorTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PredictorTemplate, err error)
	// Get retrieves the PredictorTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PredictorTemplate, error)
	PredictorTemplateNamespaceListerExpansion
}

// predictorTemplateNamespaceLister implements the PredictorTemplateNamespaceLister
// interface.
type predictorTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PredictorTemplates in the indexer for a given namespace.
func (s predictorTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PredictorTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PredictorTemplate))
	})
	return ret, err
}

// Get retrieves the PredictorTemplate from the indexer for a given namespace and name.
func (s predictorTemplateNamespaceLister) Get(name string) (*v1alpha1.PredictorTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("predictortemplate"), name)
	}
	return obj.(*v1alpha1.PredictorTemplate), nil
}
