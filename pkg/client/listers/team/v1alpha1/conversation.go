/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/team/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConversationLister helps list Conversations.
// All objects returned here must be treated as read-only.
type ConversationLister interface {
	// List lists all Conversations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Conversation, err error)
	// Conversations returns an object that can list and get Conversations.
	Conversations(namespace string) ConversationNamespaceLister
	ConversationListerExpansion
}

// conversationLister implements the ConversationLister interface.
type conversationLister struct {
	indexer cache.Indexer
}

// NewConversationLister returns a new ConversationLister.
func NewConversationLister(indexer cache.Indexer) ConversationLister {
	return &conversationLister{indexer: indexer}
}

// List lists all Conversations in the indexer.
func (s *conversationLister) List(selector labels.Selector) (ret []*v1alpha1.Conversation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Conversation))
	})
	return ret, err
}

// Conversations returns an object that can list and get Conversations.
func (s *conversationLister) Conversations(namespace string) ConversationNamespaceLister {
	return conversationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConversationNamespaceLister helps list and get Conversations.
// All objects returned here must be treated as read-only.
type ConversationNamespaceLister interface {
	// List lists all Conversations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Conversation, err error)
	// Get retrieves the Conversation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Conversation, error)
	ConversationNamespaceListerExpansion
}

// conversationNamespaceLister implements the ConversationNamespaceLister
// interface.
type conversationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Conversations in the indexer for a given namespace.
func (s conversationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Conversation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Conversation))
	})
	return ret, err
}

// Get retrieves the Conversation from the indexer for a given namespace and name.
func (s conversationNamespaceLister) Get(name string) (*v1alpha1.Conversation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("conversation"), name)
	}
	return obj.(*v1alpha1.Conversation), nil
}
