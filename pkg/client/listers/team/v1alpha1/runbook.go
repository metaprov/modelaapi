/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/team/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RunBookLister helps list RunBooks.
// All objects returned here must be treated as read-only.
type RunBookLister interface {
	// List lists all RunBooks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RunBook, err error)
	// RunBooks returns an object that can list and get RunBooks.
	RunBooks(namespace string) RunBookNamespaceLister
	RunBookListerExpansion
}

// runBookLister implements the RunBookLister interface.
type runBookLister struct {
	indexer cache.Indexer
}

// NewRunBookLister returns a new RunBookLister.
func NewRunBookLister(indexer cache.Indexer) RunBookLister {
	return &runBookLister{indexer: indexer}
}

// List lists all RunBooks in the indexer.
func (s *runBookLister) List(selector labels.Selector) (ret []*v1alpha1.RunBook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RunBook))
	})
	return ret, err
}

// RunBooks returns an object that can list and get RunBooks.
func (s *runBookLister) RunBooks(namespace string) RunBookNamespaceLister {
	return runBookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RunBookNamespaceLister helps list and get RunBooks.
// All objects returned here must be treated as read-only.
type RunBookNamespaceLister interface {
	// List lists all RunBooks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RunBook, err error)
	// Get retrieves the RunBook from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RunBook, error)
	RunBookNamespaceListerExpansion
}

// runBookNamespaceLister implements the RunBookNamespaceLister
// interface.
type runBookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RunBooks in the indexer for a given namespace.
func (s runBookNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RunBook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RunBook))
	})
	return ret, err
}

// Get retrieves the RunBook from the indexer for a given namespace and name.
func (s runBookNamespaceLister) Get(name string) (*v1alpha1.RunBook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("runbook"), name)
	}
	return obj.(*v1alpha1.RunBook), nil
}
