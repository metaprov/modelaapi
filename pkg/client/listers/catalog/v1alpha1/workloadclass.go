/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/catalog/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkloadClassLister helps list WorkloadClasses.
// All objects returned here must be treated as read-only.
type WorkloadClassLister interface {
	// List lists all WorkloadClasses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkloadClass, err error)
	// WorkloadClasses returns an object that can list and get WorkloadClasses.
	WorkloadClasses(namespace string) WorkloadClassNamespaceLister
	WorkloadClassListerExpansion
}

// workloadClassLister implements the WorkloadClassLister interface.
type workloadClassLister struct {
	indexer cache.Indexer
}

// NewWorkloadClassLister returns a new WorkloadClassLister.
func NewWorkloadClassLister(indexer cache.Indexer) WorkloadClassLister {
	return &workloadClassLister{indexer: indexer}
}

// List lists all WorkloadClasses in the indexer.
func (s *workloadClassLister) List(selector labels.Selector) (ret []*v1alpha1.WorkloadClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkloadClass))
	})
	return ret, err
}

// WorkloadClasses returns an object that can list and get WorkloadClasses.
func (s *workloadClassLister) WorkloadClasses(namespace string) WorkloadClassNamespaceLister {
	return workloadClassNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkloadClassNamespaceLister helps list and get WorkloadClasses.
// All objects returned here must be treated as read-only.
type WorkloadClassNamespaceLister interface {
	// List lists all WorkloadClasses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkloadClass, err error)
	// Get retrieves the WorkloadClass from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WorkloadClass, error)
	WorkloadClassNamespaceListerExpansion
}

// workloadClassNamespaceLister implements the WorkloadClassNamespaceLister
// interface.
type workloadClassNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkloadClasses in the indexer for a given namespace.
func (s workloadClassNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkloadClass, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkloadClass))
	})
	return ret, err
}

// Get retrieves the WorkloadClass from the indexer for a given namespace and name.
func (s workloadClassNamespaceLister) Get(name string) (*v1alpha1.WorkloadClass, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workloadclass"), name)
	}
	return obj.(*v1alpha1.WorkloadClass), nil
}
