/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.metaprov.modeld_api.pkg.apis.data.v1alpha1;

import "github.com/metaprov/modeld-api/pkg/apis/catalog/v1alpha1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Define the aggregation period
message AggregationSpec {
  optional string slidePeriod = 1;

  repeated FeatureAggrSpec aggregations = 2;
}

message Column {
  // FileName specify the name of the attribute
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:validation:MinLength=1
  // required
  optional string name = 1;

  // FileName specify the name of the feature, if this attribute comes from a feature
  // +kubebuilder:validation:MaxLength=63
  // +optional
  optional string featureName = 2;

  // Type specify the data type of the attribute
  // required
  optional string datatype = 3;

  // DataFormat is the domain of the column. A domain constrain the set of values.
  // +optional
  optional string format = 4;

  // Description is a description of the feature
  // +kubebuilder:validation:MaxLength=63
  // +optional
  optional string description = 5;

  // Ignore specify if the attribute should be ignored when building the model
  // default is false
  // +optional
  optional bool ignore = 6;

  // Label should be true if this attribute is the predictable target
  // Default is false
  // +optional
  optional bool label = 7;

  // Nullable indicates if a column can contain string
  // Default is false
  // +optional
  optional bool nullable = 8;

  // PrimaryKey denotes if this column is part of the file key.
  // +optional
  optional bool pk = 9;

  // MultipleOf
  // +optional
  optional int32 multipleOf = 10;

  // MaximumFloat
  // +optional
  optional double maximum = 11;

  // ExclusiveMaximum
  // +optional
  optional bool exclusiveMaximum = 12;

  // MinimumFloat
  // +optional
  optional double minimum = 13;

  // ExclusiveMinimum
  // +optional
  optional bool exclusiveMinimum = 14;

  // MaxLength
  // +optional
  optional int32 maxLength = 15;

  // MinLength
  // +optional
  optional int32 minLength = 16;

  // Pattern
  // Default is empty
  // +optional
  optional string pattern = 17;

  // Required
  // +optional
  optional bool required = 18;

  // Title
  // +kubebuilder:validation:MaxLength=63
  // +optional
  optional string title = 19;

  // Example
  // +optional
  optional string example = 20;

  // External Docs
  // +optional
  optional string externalDocs = 21;

  // Enum
  // +optional
  repeated string enum = 22;

  // Preprocessor hint constrain the transformer
  // Default is empty
  // +optional
  optional string transformerHint = 23;

  // Max Items in the data in case of a list
  // +optional
  optional int32 maxItems = 24;

  // Min Items in the data in case of a list.
  // +optional
  optional int32 minItems = 25;

  // Enforce that all the items in the list are unique
  // +optional
  optional bool uniqueItems = 26;

  // True if this column is used as the time axis in time series foreacst
  // Default is false.
  // +optional
  optional bool timeColumn = 27;
}

// Hold the statistical parameters about a single attribute
message ColumnStatistics {
  // FileName is the name of the column
  // +optional
  optional string name = 1;

  // Min is the minimum value of the attribute
  // +optional
  optional double min = 2;

  // Max is the maximum value of the attribute
  // +optional
  optional double max = 3;

  // Mean is the mean value of the attribute
  // +optional
  optional double mean = 4;

  // StdDev is the standard deviation value of the attribute
  // +optional
  optional double stddev = 5;

  // Skewness is the standard deviation value of the attribute
  // +optional
  optional double skewness = 6;

  // Kurtosis is the standard deviation value of the attribute
  // +optional
  optional double kurtosis = 7;

  // Zeros is the numbers of zeros in the feature
  // +optional
  optional double zeros = 8;

  // Pct25 is the 25 precent point
  // +optional
  optional double p25 = 10;

  // Pct50 is the median
  // +optional
  optional double p50 = 11;

  // Pct75 is the 75% point
  // +optional
  optional double p75 = 12;

  // The number of missing values
  optional int32 missing = 14;

  // The number of invalid values
  optional int32 invalid = 15;

  // Is this the target attribute, the value is derived from the schema
  optional bool target = 16;

  // The feature importance
  optional double importance = 17;

  optional int32 distinc = 18;

  // Should this column be ignored, as specified by the user.
  // This value is derived from the schema
  optional bool ignored = 19;

  // Is this column is nullable.
  // This value is derived from the schema.
  optional bool nullable = 20;

  // This column has high cardinality and should be ignored.
  // The value is set during the profile process.
  optional bool highCred = 21;

  // This column has high corrolation with another feature and should be dropped.
  // The value is set during the profile process.
  optional bool highCorr = 22;

  // Mark that this column is skewed and would require a power transform
  // If skewness is less than -1 or greater than 1, the distribution is highly skewed.
  // If skewness is between -1 and -0.5 or between 0.5 and 1, the distribution is moderately skewed.
  // If skewness is between -0.5 and 0.5, the distribution is approximately symmetric
  optional bool skew = 23;
}

// data reference contain pointers to the actual data objects
message DataLocation {
  optional string bucketName = 1;

  // Path to the full data file (e.g. csv file).
  // +required
  optional string path = 2;
}

// +genclient
// +genclient:noStatus
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=datapipelines,singular=datapipeline,categories={data,modeld}
// DataPipeline represents the ETL flow from the data sources to a processed dataset, ready for training.
message DataPipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DataPipelineSpec spec = 2;

  // +optional
  optional DataPipelineStatus status = 3;
}

// DataPipelineCondition describes the state of a wrangler at a certain point.
message DataPipelineCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// DataPipelineList contain the list of DataPipeline
message DataPipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated DataPipeline items = 2;
}

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=datapipelineruns,singular=datapipelinerun,categories={data,modeld,all}
// DataPipelineRun represent the joiner of dataset into the system
message DataPipelineRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DataPipelineRunSpec spec = 2;

  // +optional
  optional DataPipelineRunStatus status = 3;
}

// DataPipelineRunCondition describes the state of a data processor run at a certain point.
message DataPipelineRunCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// DataPipelineList contains a list of DataPipeline
message DataPipelineRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated DataPipelineRun items = 2;
}

// DataPipelineRunSpec defines the desired state of a schema
message DataPipelineRunSpec {
  // The product of the rejoiner
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  optional string versionName = 1;

  // User provided description
  // +optional
  optional string description = 2;

  // The data product
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  optional string datapipelineName = 3;

  // The location of data artifacts that are generated during the run
  optional DataLocation dataLocation = 4;

  // The owner account name
  // +kubebuilder:default=""
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string owner = 5;
}

// DataPipelineRunStatus defines the observed state of DataPipelineRun
message DataPipelineRunStatus {
  // Pointers to the done datasets
  repeated string inputs = 1;

  // the resulting dataset from the flow
  optional string output = 2;

  // the phase of the run
  optional string phase = 3;

  // StartTime is the times that this data pipeline started
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 4;

  // CompletionTime is the time that this pipeline finishes
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 5;

  // +optional
  repeated DataPipelineRunCondition conditions = 6;
}

// DataPipelineSpec defines the desired state of a DataPipeline
message DataPipelineSpec {
  // Dataproduct version
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  optional string versionName = 1;

  // User provided description
  // +optional
  optional string description = 2;

  // The datasets objects which are used for this pipeline. Each datafile can be from a bucket
  repeated string inputDatasets = 3;

  // The recipe for this pipeline.
  repeated string recipeNames = 4;

  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // The output file of the pipeline
  optional string outputDataset = 5;

  // A cron field to schedule the data pipeline.
  optional string schedule = 6;

  // The owner account name
  // +kubebuilder:default=""
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string owner = 7;
}

// DataPipelineStatus is the observed state of the DataPipeline object.
message DataPipelineStatus {
  // +optional
  repeated DataPipelineCondition conditions = 1;
}

// +genclient
// +genclient:noStatus
// DataProduct represent a single data product in the system
// +k8s:openapi-gen=true
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status"
// +kubebuilder:printcolumn:name="Bucket",type="string",JSONPath=".spec.dataLocation.bucketName"
// +kubebuilder:printcolumn:name="Image Repo",type="string",JSONPath=".spec.imageLocation.url"
// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=dataproducts,shortName=dp,singular=dataproduct,categories={data,modeld,all}
message DataProduct {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DataProductSpec spec = 2;

  // +optional
  optional DataProductStatus status = 3;
}

// DeploymentCondition describes the state of a deployment at a certain point.
message DataProductCondition {
  // Type of condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// DataProductList contains a list of DataProducts
message DataProductList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated DataProduct items = 2;
}

// DataProduct defines the desired state of a data product
message DataProductSpec {
  // The account name of the owner of this data product
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string owner = 1;

  // The tenant that own the data product.
  // Default to default tenant.
  // +optional
  optional k8s.io.api.core.v1.ObjectReference tenantRef = 2;

  // Stake holders refer to a list of stackholders, which have interest in the product.
  // +optional
  repeated StakeHolder stakeholders = 3;

  // GitLocation is the github repository for all the artifacts for this product
  // +optional
  optional GitLocation gitLocation = 4;

  // ImageLocation is the image repository that stores the models images for the product versions
  // Required.
  optional ImageLocation imageLocation = 5;

  // LabName is the Lab where models of this products are trained
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // Required.
  optional string labName = 7;

  // ServingSiteName is the serving site where predictors of this product are deployed
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // Required.
  optional string servingSiteName = 8;

  // Task denote the machine learning task of the product (classification/regression,etc.)
  // Required.
  optional string task = 9;

  // User provided description
  // +optional
  // +kubebuilder:validation:MaxLength=512
  optional string description = 10;

  // This folder contain the root location for all the artifacts from the product.
  // +optional
  optional DataLocation dataLocation = 11;

  // the notifier selector select the notifier for events that occur in the product life cycle.
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string notifierName = 12;

  // A reference to the workload class used when training or testing the model
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string modelWorkloadClassName = 13;

  // A reference to the workload class used when running tasks on the dataset, for example profiling or reports.
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string dataWorkloadClassName = 14;

  // Denote how many time a job is retry after failure
  // default to 3
  // +optional
  optional int32 retriesOnFailure = 15;
}

// DataProductStatus defines the observed state of DataProduct
message DataProductStatus {
  // The conditions of the product.
  // +optional
  repeated DataProductCondition conditions = 1;
}

// +genclient
// +genclient:noStatus
// +k8s:openapi-gen=true
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Entity",type="string",JSONPath=".spec.productRef.name",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=dataproductversions,shortName=dpv,singular=dataproductversion,categories={data,modeld,all}
// DataProductVersion represent a version of the data product. A version is usually created when a new
// data was gathered for the same product.
message DataProductVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DataProductVersionSpec spec = 2;

  // +optional
  optional DataProductVersionStatus status = 3;
}

// DataProductVersionCondition describes the state of a DataProductVersion at a certain point.
message DataProductVersionCondition {
  // Type of condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// DataProductVersionList contains a list of DataProductVersion
message DataProductVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated DataProductVersion items = 2;
}

// DataProductVersionSpec defines the desired state of a data product version
message DataProductVersionSpec {
  optional k8s.io.api.core.v1.ObjectReference productRef = 1;

  // Description is user provided description
  // +optional
  // +kubebuilder:validation:MaxLength=512
  optional string description = 2;

  // PrevVersionName is a pointer to the version that we derived from
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:default=""
  // +optional
  optional string prevVersionName = 3;

  // Baseline denote if this product version a baseline. If a product version is a baseline, we can garbage
  // collect all the parents' product versions
  // Default: false
  // +optional
  optional bool baseline = 4;

  // The owner account name
  // +kubebuilder:default="no-one"
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string owner = 5;
}

// DataProductVersionStatus defines the observed state of DataProductVersion
message DataProductVersionStatus {
  // Represents the latest available observations of a dataset state.
  // +optional
  repeated DataProductVersionCondition conditions = 1;
}

// Datasource represent source of the data in the system. The spec consist of schema
// +genclient
// +genclient:noStatus
// +k8s:openapi-gen=true
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=datasources,singular=datasource,categories={data,modeld,all}
message DataSource {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DataSourceSpec spec = 2;

  // +optional
  optional DataSourceStatus status = 3;
}

// DataSourceCondition describes the state of a datasource at a certain point.
message DataSourceCondition {
  // Type of condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// DataSourceList contain a list of DataSource objects
message DataSourceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated DataSource items = 2;
}

message DataSourceSpec {
  // The account name of the owner of this dataset
  // +kubebuilder:default="no-one"
  // +optional
  optional string ownerName = 1;

  // The version of the flat file.
  // +kubebuilder:validation:MaxLength=63
  // +optional
  optional string versionName = 2;

  // User provided description of the data source
  // +kubebuilder:validation:MaxLength=512
  // +optional
  optional string description = 3;

  // The data source schema
  optional Schema schema = 4;

  // The data source type.
  optional string type = 5;

  // If the data source is flat file
  optional FlatFileSpec file = 6;

  // If the data source is a table
  optional Table table = 7;

  // The owner account name
  // +kubebuilder:default="no-one"
  // +optional
  optional string owner = 8;
}

// FlatFileStatus defines the observed state of FlatFileSpec
message DataSourceStatus {
  // +optional
  repeated DataSourceCondition conditions = 2;
}

// +kubebuilder:object:root=true
// +k8s:openapi-gen=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Location Origin",type="string",JSONPath=".spec.datasourceName"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Rows",type="integer",JSONPath=".status.statistics.rows"
// +kubebuilder:printcolumn:name="Columns",type="integer",JSONPath=".status.statistics.cols"
// +kubebuilder:printcolumn:name="Size",type="integer",JSONPath=".status.statistics.fileSize"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=datasets,shortName=ds,singular=dataset,categories={data,modeld,all}
// Dataset represents a single batch of data
message Dataset {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DatasetSpec spec = 2;

  // +optional
  optional DatasetStatus status = 3;
}

// DatasetCondition describes the state of a dataset at a certain point.
message DatasetCondition {
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 6;
}

// +kubebuilder:object:root=true
// DatasetList contains a list of Datasets
message DatasetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Dataset items = 2;
}

// DatasetSpec defines the desired state of a dataset
message DatasetSpec {
  // The account name of the owner of this dataset
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string owner = 1;

  // VersionName is the data product version of the dataset
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:MaxLength=63
  // required.
  optional string versionName = 2;

  // DataSourceName is the name of the data source which created this dataset. For example flat file
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:validation:MinLength=1
  optional string datasourceName = 3;

  // User provided description
  // +kubebuilder:validation:MaxLength=512
  // +optional
  optional string description = 4;

  // If true, a dataset report should be generated for this dataset.
  // Default: true
  // +optional
  optional bool report = 7;

  // If true, we should validate the dataset
  // Default:  true
  // +optional
  optional bool validate = 8;

  // Labeled indicates if this dataset is labeled or not.
  // Default:  true
  // +optional
  optional bool labeled = 10;

  // Define the data location. The operator will copy the data from this location into the live location.
  // The datafiles are initially uploaded to this location.
  // +optional
  optional DataLocation origin = 12;

  // Folder of the actual data resides.
  // +required.
  optional DataLocation location = 13;
}

// DatasetStatistics contains statistics about attributes and correltation between attributes
message DatasetStatistics {
  // Columns contain the collection of statistics for each attribute
  // +optional
  repeated ColumnStatistics columns = 1;

  // number of rows in the dataset
  // +optional
  optional int32 rows = 3;

  // number of columns, used mainly to show the columns in the kubectl
  // +optional
  optional int32 cols = 4;

  // file size in bytes
  // +optional
  optional int32 fileSize = 5;
}

// DatasetStatus defines the observed state of Dataset
message DatasetStatus {
  // Statistics for the dataset. The statistics contain information about each column.
  // +optional
  optional DatasetStatistics statistics = 1;

  // The phase of the dataset processing
  // +optional
  optional string phase = 2;

  // Reference to the report object that was generated for the dataset
  // +optional
  optional string reportName = 3;

  // A reference to the visualization uri which were produce during processing
  // +optional
  optional string profileUri = 4;

  // Based on the actual data, treat this dataset as imbalanced.
  optional bool imbalanced = 5;

  // Sha256 sig of the files
  optional Signatures sigs = 6;

  // Represents the latest available observations of a dataset state.
  // +optional
  repeated DatasetCondition conditions = 7;
}

// DatasetTemplate is  used to generate new datasets
message DatasetTemplate {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DatasetSpec spec = 2;
}

// +kubebuilder:object:root=true
// +k8s:openapi-gen=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=entities,singular=entity,categories={data,modeld}
// +kubebuilder:subresource:status
// Entity represents a entity object
message Entity {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EntitySpec spec = 2;

  // +optional
  optional EntityStatus status = 3;
}

// EntityCondition describes the state of a deployment at a certain point.
message EntityCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 7;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// EntityList contains a list of Entity
message EntityList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Entity items = 2;
}

// EntitySpec contain the desired state of a Entity.
message EntitySpec {
  // The product version of the entity
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  optional string versionName = 1;

  // User provided description
  // +optional
  // +kubebuilder:validation:MaxLength=512
  optional string description = 2;

  // Reference to the feature names of this entity
  repeated string keys = 3;

  // The owner account name
  // +kubebuilder:default="no-one"
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string owner = 4;
}

// EntityStatus defines the observed state of Entity
message EntityStatus {
  // +optional
  repeated EntityCondition conditions = 1;
}

// Feature represent a feature object in the feature store.
// +kubebuilder:object:root=true
// +k8s:openapi-gen=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=features,singular=feature,categories={data,modeld}
// +kubebuilder:subresource:status
message Feature {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional FeatureSpec spec = 2;

  // +optional
  optional FeatureStatus status = 3;
}

message FeatureAggrSpec {
  // The column
  optional string column = 1;

  // The aggregation function
  repeated string functions = 2;

  // List of windows functions
  repeated string windows = 3;
}

// DeploymentCondition describes the state of a deployment at a certain point.
message FeatureCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 7;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// FeatureList contain a list of feature objects
message FeatureList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Feature items = 2;
}

// FeaturePipeline represent a feature set object in the feature store.
// +kubebuilder:object:root=true
// +k8s:openapi-gen=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=featurepipelines,singular=featurepipeline,categories={data,modeld}
// +kubebuilder:subresource:status
message FeaturePipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional FeaturePipelineSpec spec = 2;

  // +optional
  optional FeaturePipelineStatus status = 3;
}

// DeploymentCondition describes the state of a deployment at a certain point.
message FeaturePipelineCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 7;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// FeatureList contain a list of feature objects
message FeaturePipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated FeaturePipeline items = 2;
}

// FeaturePipeline represent a feature set object in the feature store.
// +kubebuilder:object:root=true
// +k8s:openapi-gen=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=featurepipelineruns,singular=featurepipelinerun,categories={data,modeld}
// +kubebuilder:subresource:status
message FeaturePipelineRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional FeaturePipelineRunSpec spec = 2;

  // +optional
  optional FeaturePipelineRunStatus status = 3;
}

// DeploymentCondition describes the state of a deployment at a certain point.
message FeaturePipelineRunCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 7;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// FeatureList contain a list of feature objects
message FeaturePipelineRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated FeaturePipelineRun items = 2;
}

// FeatureSpec contain the desired state of a Feature
message FeaturePipelineRunSpec {
  // The feature owner
  // +kubebuilder:default="no-one"
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string owner = 1;

  // The product version for the feature.
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string versionName = 2;

  // FileName specify the name of the attribute
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:MaxLength=64
  // +kubebuilder:validation:MinLength=1
  optional string featurePipelineName = 3;
}

// FeatureStatus defines the observed state of Feature
message FeaturePipelineRunStatus {
  // The Start time of the run
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 1;

  // The End time of the run
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 2;

  // +optional
  repeated FeaturePipelineRunCondition conditions = 3;
}

// FeatureSpec contain the desired state of a Feature
message FeaturePipelineSpec {
  // The feature owner
  // +kubebuilder:default="no-one"
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string owner = 1;

  // The product version for the feature.
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string versionName = 2;

  // FileName specify the name of the attribute
  // +kubebuilder:validation:MaxLength=64
  // +kubebuilder:validation:MinLength=1
  optional string name = 3;

  // Comments is a description of the feature
  // +optional
  // +kubebuilder:validation:MaxLength=512
  optional string description = 4;

  // Aggregation
  // +optional
  optional AggregationSpec aggregation = 5;

  // Materialization
  optional MaterializationSpec materialization = 6;

  // Feature Family name
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string family = 7;

  // Reference to the entity name
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string entityName = 8;
}

// FeatureStatus defines the observed state of Feature
message FeaturePipelineStatus {
  // Store the avg cost of running this pipeline
  optional double averageCost = 1;

  // +optional
  repeated FeaturePipelineCondition conditions = 2;
}

// FeatureSpec contain the desired state of a Feature
message FeatureSpec {
  // The feature owner
  // +kubebuilder:default="no-one"
  optional string owner = 1;

  // The product version for the feature.
  // +optional
  optional string versionName = 2;

  // Comments is a description of the feature
  // +optional
  // +kubebuilder:validation:MaxLength=512
  optional string description = 3;

  // FileName specify the name of the attribute
  // +kubebuilder:validation:MaxLength=64
  // +kubebuilder:validation:MinLength=1
  optional string name = 4;

  // Type name of the column key, this column is the key column in the entity.
  // +optional
  optional string keyColumn = 5;

  // The name of the time stamp column
  optional string timestampColumn = 6;

  // The name of the feature column
  optional string featureColumn = 7;

  // The name of the entity containing this feature
  optional string entityName = 8;

  // The name of the feature pipeline that is producing this feature
  optional string featurePipelineName = 9;
}

// FeatureStatus defines the observed state of Feature
message FeatureStatus {
  // Sha256 contains the signature of
  // +optional
  optional string sha256 = 2;

  // FileName is the name of the attribute
  // +optional
  optional string name = 3;

  // Min is the minimum value of the attribute
  // +optional
  optional double min = 4;

  // Max is the maximum value of the attribute
  // +optional
  optional double max = 5;

  // Mean is the mean value of the attribute
  // +optional
  optional double mean = 6;

  // Zeros is the numbers of zeros in the feature
  // +optional
  optional int32 zeros = 7;

  // Nulls is the numbers of zeros in the feature
  // +optional
  optional int32 nulls = 8;

  // P01 is the numbers of values in the first precent
  // +optional
  optional double p01 = 9;

  // P99 is the numbers of values
  // +optional
  optional double p99 = 10;

  // StdDev is the standard deviation value of the attribute
  // +optional
  optional double stddev = 11;

  // +optional
  repeated FeatureCondition conditions = 13;
}

// +kubebuilder:object:root=true
// +k8s:openapi-gen=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=featuresets,singular=featureset,categories={data,modeld}
// +kubebuilder:subresource:status
// Featureset represents a featureset object
message Featureset {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional FeaturesetSpec spec = 2;

  // +optional
  optional FeaturesetStatus status = 3;
}

// FeaturesetCondition describes the state of a deployment at a certain point.
message FeaturesetCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 7;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// FeaturesetList contains a list of Featureset
message FeaturesetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Featureset items = 2;
}

// FeaturesetSpec contain the desired state of a Featureset.
message FeaturesetSpec {
  // The product version of the featureset
  optional string versionName = 1;

  // User provided description
  // +optional
  // +kubebuilder:validation:MaxLength=512
  optional string description = 2;

  // Reference to the feature names of this featureset
  repeated string features = 3;

  // The owner account name
  // +kubebuilder:default="no-one"
  // +optional
  optional string owner = 4;
}

// FeaturesetStatus defines the observed state of Featureset
message FeaturesetStatus {
  // +optional
  repeated FeaturesetCondition conditions = 1;
}

message FlatFileSpec {
  // The text file type
  // Default: csv
  // +optional
  optional string fileType = 4;

  // Refers to the character used to separate fields.
  // Default to comma
  // +optional
  optional string delimiter = 5;

  // The quata char.
  // +optional
  optional string quote = 6;

  // the char used to escape the delimiter when quoting
  // +optional
  optional string escapeChar = 7;

  // CommentCharacter(s) to split comments off the end of lines.
  // +optional
  optional string commentChars = 8;

  // Check if there is an header
  // +optional
  optional bool header = 9;

  // The number of rows to skip
  // +optional
  optional int32 skipRows = 10;

  // NullValue	is a sequence of values to replace with NA.
  // +optional
  optional string nullValues = 11;

  // Encoding for Unicode (e.g., 'utf-8' for UTF-8 encoded text).
  // +optional
  optional string encoding = 12;

  // The maximum number of rows to read.
  // +optional
  optional int32 maxRows = 13;

  // If true, the import will fail if there is an error
  // +optional
  optional bool strict = 14;
}

message GitLocation {
  // The credential to the git repo provider
  optional string gitConnectionName = 2;

  // The url to the git repo.
  // +kubebuilder:validation:MaxLength=256
  optional string url = 1;
}

message ImageLocation {
  // The canonical name of the image repo.
  // The default value is docker/productname
  // +kubebuilder:validation:MaxLength=256
  // optional
  optional string name = 1;

  // The connection of the docker registry provider
  // If the value is empty, the system will not push images.
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // optional
  optional string registryConnectionName = 2;
}

// +genclient
// +genclient:noStatus
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=labelingpipelines,singular=labelingpipeline,categories={data,modeld}
// LabelingPipeline represents the ETL flow from the data sources to a processed dataset, ready for training.
message LabelingPipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional LabelingPipelineSpec spec = 2;

  // +optional
  optional LabelingPipelineStatus status = 3;
}

// LabelingPipelineCondition describes the state of a wrangler at a certain point.
message LabelingPipelineCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// LabelingPipelineList contain the list of LabelingPipeline
message LabelingPipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated LabelingPipeline items = 2;
}

// LabelingPipeline represent a feature set object in the feature store.
// +kubebuilder:object:root=true
// +k8s:openapi-gen=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=labelingpipelineruns,singular=labelingpipelinerun,categories={data,modeld}
// +kubebuilder:subresource:status
message LabelingPipelineRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional LabelingPipelineRunSpec spec = 2;

  // +optional
  optional LabelingPipelineRunStatus status = 3;
}

// DeploymentCondition describes the state of a deployment at a certain point.
message LabelingPipelineRunCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 7;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// LabelList contain a list of feature objects
message LabelingPipelineRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated LabelingPipelineRun items = 2;
}

// LabelSpec contain the desired state of a Label
message LabelingPipelineRunSpec {
  // The feature owner
  // +kubebuilder:default="no-one"
  optional string owner = 1;

  // The product version for the feature.
  // +optional
  optional string versionName = 2;

  // FileName specify the name of the attribute
  // +kubebuilder:validation:MaxLength=64
  // +kubebuilder:validation:MinLength=1
  optional string featurePipelineName = 3;
}

// LabelStatus defines the observed state of Label
message LabelingPipelineRunStatus {
  // The Start time of the run
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 1;

  // The End time of the run
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 2;

  // +optional
  repeated LabelingPipelineRunCondition conditions = 3;
}

// LabelingPipelineSpec defines the desired state of a LabelingPipeline
message LabelingPipelineSpec {
  // The product of the rejoiner
  optional string versionName = 1;

  // User provided description
  // +optional
  optional string description = 2;

  // The datasets objects which are used for this pipeline. Each datafile can be from a bucket
  repeated string inputLabelsets = 3;

  // The recipe for this pipeline.
  repeated string recipeNames = 4;

  // The output file of the pipeline
  optional string outputLabelset = 5;

  // A cron field to schedule the data pipeline.
  optional string schedule = 6;

  // The owner account name
  // +kubebuilder:default="no-one"
  // +optional
  optional string owner = 7;
}

// LabelingPipelineStatus is the observed state of the LabelingPipeline object.
message LabelingPipelineStatus {
  // +optional
  repeated LabelingPipelineCondition conditions = 1;
}

message MaterializationSpec {
  // If true, update the online store
  // +optional
  optional bool online = 1;

  // If true update the offline store.
  // +optional
  optional bool offline = 2;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startDate = 3;

  // +optional
  optional string scheduleInterval = 4;

  // +optional
  optional int32 ttl = 5;

  // Number of days to store information from the past in the feature store.
  optional int32 backfill = 6;
}

// +kubebuilder:object:root=true
// +k8s:openapi-gen=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Rows",type="integer",JSONPath=".status.statistics.rows"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=recipes,shortName=rc,singular=recipe,categories={data,modeld,all}
// Recipe represents a single batch of data
message Recipe {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RecipeSpec spec = 2;

  // +optional
  optional RecipeStatus status = 3;
}

// RecipeCondition describes the state of a dataset at a certain point.
message RecipeCondition {
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 6;
}

// Specification for the recipe input
message RecipeInputSpec {
  optional string datasetName = 2;

  // Folder of the actual data resides.
  // +required.
  optional DataLocation location = 3;

  // dataset name
  // format
  optional string format = 4;
}

// +kubebuilder:object:root=true
// RecipeList contains a list of Recipes
message RecipeList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Recipe items = 2;
}

// Specification for the recipe output
message RecipeOutputSpec {
  // If true, create a new dataset when the recipe is done.
  // +optional
  optional bool createDataset = 1;

  // +optional
  optional string datasetName = 2;

  // Folder of the actual data resides.
  // +required.
  optional DataLocation location = 3;
}

// +kubebuilder:object:root=true
// +k8s:openapi-gen=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=reciperuns,shortName=rr,singular=reciperun,categories={data,modeld,all}
// Recipe run represent one execution of the recipe.
// Execution is perfomed by creating a kuberentes job.
message RecipeRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RecipeRunSpec spec = 2;

  // +optional
  optional RecipeRunStatus status = 3;
}

// RecipeRunCondition describes the state of a dataset at a certain point.
message RecipeRunCondition {
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 6;
}

// +kubebuilder:object:root=true
// RecipeRunList contains a list of Recipes
message RecipeRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated RecipeRun items = 2;
}

// RecipeSpec defines the desired state of a dataset
message RecipeRunSpec {
  optional string versionName = 1;

  // The name of the recipe that execute this run
  // +required.
  optional string recipeName = 2;

  // The execution env of this recipes
  // +optional
  optional string labName = 3;

  // The location of the data output.
  // +required.
  optional DataLocation output = 4;
}

// RecipeStatus defines the observed state of Recipe
message RecipeRunStatus {
  // Represents the start time
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 1;

  // Represents the end time
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 2;

  // The phase of the dataset processing
  // +optional
  optional string phase = 3;

  // Represents the latest available observations of a dataset state.
  // +optional
  repeated RecipeCondition conditions = 4;
}

message RecipeSampleSpec {
  optional string type = 1;

  // The number of rows. Default is 500
  // +optional
  optional int32 rows = 2;

  // filter formula. Valid only if the sample is a filter.
  // +optional
  optional string filter = 3;
}

// RecipeSpec defines the desired state of a dataset
message RecipeSpec {
  // The account name of the owner of this dataset
  // +kubebuilder:default="no-one"
  // +optional
  optional string owner = 1;

  // VersionName is the data product version of the dataset
  // +kubebuilder:validation:MaxLength=63
  // required.
  optional string versionName = 2;

  // User provided description
  // +kubebuilder:validation:MaxLength=512
  // +optional
  optional string description = 3;

  // The recipe input spec.
  optional RecipeInputSpec input = 4;

  // The reciepe steps
  repeated RecipeStep steps = 5;

  // Use this as the output dataset name
  optional RecipeOutputSpec output = 6;

  // Specify the sampling paramters when viewing the recipe
  // +optional
  optional RecipeSampleSpec sample = 7;

  // Specify the sampling paramters when viewing the recipe. By default the recipe controller use the product workload class.
  // +optional
  optional string workloadClassName = 8;
}

// RecipeStatus defines the observed state of Recipe
message RecipeStatus {
  // Represents the latest available observations of a dataset state.
  // +optional
  repeated RecipeCondition conditions = 1;
}

message RecipeStep {
  optional string op = 1;

  repeated RecipeStepParam parameters = 2;
}

message RecipeStepParam {
  optional string name = 1;

  optional string value = 2;
}

message Schema {
  // Time series schema. Set time series specific parameters.
  // +optional
  optional TimeSeriesSchema tsSchema = 1;

  // Columns
  repeated Column columns = 2;
}

// Signatures contains the sha256 signatures of the datasets
message Signatures {
  // Data to the full data file (e.g. csv file).
  // +required
  optional string data = 2;

  // The location of the labels file (If exist)
  // +optional
  optional string labels = 3;

  // path to the training set
  optional string train = 4;

  // the location of the training data, if different from the data.
  // +optional
  optional string test = 5;

  // Pointer to the validation
  // +optional
  optional string validation = 6;
}

// Represent a stack holder in the product.
// Each stake holder can hove one or more roles.
message StakeHolder {
  optional string accountName = 1;

  repeated string roles = 2;
}

message Table {
  // +kubebuilder:validation:MaxLength=64
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  optional string versionName = 1;

  // User provided description
  // +optional
  optional string description = 2;

  // The actual query. this is required.
  // +optional
  optional string query = 3;

  // Type of server
  // +optional
  optional string serverType = 4;

  // ConnectionString to connect to the database server
  // +kubebuilder:validation:MaxLength=128
  // +optional
  optional string connectionString = 5;

  // Connection refer to a connection object that point to secret
  // +optional
  optional k8s.io.api.core.v1.ObjectReference connectionRef = 6;

  // The version of the server.
  // +optional
  optional string serverVersion = 7;
}

message TimeSeriesSchema {
  // The time series frequency
  // required
  optional string freq = 1;

  // take holiday into account
  // required
  // default is US
  optional string country = 2;
}

