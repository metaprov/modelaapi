/**
*
* Copyright (C) 2017 modela authors
* For license information, see LICENSE.txt
 */ // Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/metaprov/modelaapi/pkg/apis/genai/v1alpha1/generated.proto

package v1alpha1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/catalog/v1alpha1"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/catalog/v1alpha1"
	v11 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *AnswerFilteringSpec) Reset()      { *m = AnswerFilteringSpec{} }
func (*AnswerFilteringSpec) ProtoMessage() {}
func (*AnswerFilteringSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{0}
}
func (m *AnswerFilteringSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnswerFilteringSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AnswerFilteringSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnswerFilteringSpec.Merge(m, src)
}
func (m *AnswerFilteringSpec) XXX_Size() int {
	return m.Size()
}
func (m *AnswerFilteringSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AnswerFilteringSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AnswerFilteringSpec proto.InternalMessageInfo

func (m *AutoVectorRetrieverSpec) Reset()      { *m = AutoVectorRetrieverSpec{} }
func (*AutoVectorRetrieverSpec) ProtoMessage() {}
func (*AutoVectorRetrieverSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{1}
}
func (m *AutoVectorRetrieverSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoVectorRetrieverSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AutoVectorRetrieverSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoVectorRetrieverSpec.Merge(m, src)
}
func (m *AutoVectorRetrieverSpec) XXX_Size() int {
	return m.Size()
}
func (m *AutoVectorRetrieverSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoVectorRetrieverSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AutoVectorRetrieverSpec proto.InternalMessageInfo

func (m *CodeSplitterSpec) Reset()      { *m = CodeSplitterSpec{} }
func (*CodeSplitterSpec) ProtoMessage() {}
func (*CodeSplitterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{2}
}
func (m *CodeSplitterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeSplitterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CodeSplitterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeSplitterSpec.Merge(m, src)
}
func (m *CodeSplitterSpec) XXX_Size() int {
	return m.Size()
}
func (m *CodeSplitterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeSplitterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CodeSplitterSpec proto.InternalMessageInfo

func (m *CohereRerankSpec) Reset()      { *m = CohereRerankSpec{} }
func (*CohereRerankSpec) ProtoMessage() {}
func (*CohereRerankSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{3}
}
func (m *CohereRerankSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CohereRerankSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CohereRerankSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CohereRerankSpec.Merge(m, src)
}
func (m *CohereRerankSpec) XXX_Size() int {
	return m.Size()
}
func (m *CohereRerankSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CohereRerankSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CohereRerankSpec proto.InternalMessageInfo

func (m *ConcreteQueryEngineSpec) Reset()      { *m = ConcreteQueryEngineSpec{} }
func (*ConcreteQueryEngineSpec) ProtoMessage() {}
func (*ConcreteQueryEngineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{4}
}
func (m *ConcreteQueryEngineSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConcreteQueryEngineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConcreteQueryEngineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConcreteQueryEngineSpec.Merge(m, src)
}
func (m *ConcreteQueryEngineSpec) XXX_Size() int {
	return m.Size()
}
func (m *ConcreteQueryEngineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ConcreteQueryEngineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ConcreteQueryEngineSpec proto.InternalMessageInfo

func (m *ConcreteRetrieverSpec) Reset()      { *m = ConcreteRetrieverSpec{} }
func (*ConcreteRetrieverSpec) ProtoMessage() {}
func (*ConcreteRetrieverSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{5}
}
func (m *ConcreteRetrieverSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConcreteRetrieverSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConcreteRetrieverSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConcreteRetrieverSpec.Merge(m, src)
}
func (m *ConcreteRetrieverSpec) XXX_Size() int {
	return m.Size()
}
func (m *ConcreteRetrieverSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ConcreteRetrieverSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ConcreteRetrieverSpec proto.InternalMessageInfo

func (m *DatabaseReaderSpec) Reset()      { *m = DatabaseReaderSpec{} }
func (*DatabaseReaderSpec) ProtoMessage() {}
func (*DatabaseReaderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{6}
}
func (m *DatabaseReaderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatabaseReaderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DatabaseReaderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseReaderSpec.Merge(m, src)
}
func (m *DatabaseReaderSpec) XXX_Size() int {
	return m.Size()
}
func (m *DatabaseReaderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseReaderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseReaderSpec proto.InternalMessageInfo

func (m *DocumentSpec) Reset()      { *m = DocumentSpec{} }
func (*DocumentSpec) ProtoMessage() {}
func (*DocumentSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{7}
}
func (m *DocumentSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DocumentSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentSpec.Merge(m, src)
}
func (m *DocumentSpec) XXX_Size() int {
	return m.Size()
}
func (m *DocumentSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentSpec proto.InternalMessageInfo

func (m *DocumentStatus) Reset()      { *m = DocumentStatus{} }
func (*DocumentStatus) ProtoMessage() {}
func (*DocumentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{8}
}
func (m *DocumentStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DocumentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentStatus.Merge(m, src)
}
func (m *DocumentStatus) XXX_Size() int {
	return m.Size()
}
func (m *DocumentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentStatus proto.InternalMessageInfo

func (m *DocumentSummaryIndexSpec) Reset()      { *m = DocumentSummaryIndexSpec{} }
func (*DocumentSummaryIndexSpec) ProtoMessage() {}
func (*DocumentSummaryIndexSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{9}
}
func (m *DocumentSummaryIndexSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentSummaryIndexSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DocumentSummaryIndexSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentSummaryIndexSpec.Merge(m, src)
}
func (m *DocumentSummaryIndexSpec) XXX_Size() int {
	return m.Size()
}
func (m *DocumentSummaryIndexSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentSummaryIndexSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentSummaryIndexSpec proto.InternalMessageInfo

func (m *DocumentSummaryRetrieverSpec) Reset()      { *m = DocumentSummaryRetrieverSpec{} }
func (*DocumentSummaryRetrieverSpec) ProtoMessage() {}
func (*DocumentSummaryRetrieverSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{10}
}
func (m *DocumentSummaryRetrieverSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentSummaryRetrieverSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DocumentSummaryRetrieverSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentSummaryRetrieverSpec.Merge(m, src)
}
func (m *DocumentSummaryRetrieverSpec) XXX_Size() int {
	return m.Size()
}
func (m *DocumentSummaryRetrieverSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentSummaryRetrieverSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentSummaryRetrieverSpec proto.InternalMessageInfo

func (m *EmbeddingRecencyPostProcessorSpec) Reset()      { *m = EmbeddingRecencyPostProcessorSpec{} }
func (*EmbeddingRecencyPostProcessorSpec) ProtoMessage() {}
func (*EmbeddingRecencyPostProcessorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{11}
}
func (m *EmbeddingRecencyPostProcessorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmbeddingRecencyPostProcessorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EmbeddingRecencyPostProcessorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmbeddingRecencyPostProcessorSpec.Merge(m, src)
}
func (m *EmbeddingRecencyPostProcessorSpec) XXX_Size() int {
	return m.Size()
}
func (m *EmbeddingRecencyPostProcessorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EmbeddingRecencyPostProcessorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EmbeddingRecencyPostProcessorSpec proto.InternalMessageInfo

func (m *ExtensionFilter) Reset()      { *m = ExtensionFilter{} }
func (*ExtensionFilter) ProtoMessage() {}
func (*ExtensionFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{12}
}
func (m *ExtensionFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtensionFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExtensionFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionFilter.Merge(m, src)
}
func (m *ExtensionFilter) XXX_Size() int {
	return m.Size()
}
func (m *ExtensionFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionFilter proto.InternalMessageInfo

func (m *FileLocationReaderSpec) Reset()      { *m = FileLocationReaderSpec{} }
func (*FileLocationReaderSpec) ProtoMessage() {}
func (*FileLocationReaderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{13}
}
func (m *FileLocationReaderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileLocationReaderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FileLocationReaderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileLocationReaderSpec.Merge(m, src)
}
func (m *FileLocationReaderSpec) XXX_Size() int {
	return m.Size()
}
func (m *FileLocationReaderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FileLocationReaderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FileLocationReaderSpec proto.InternalMessageInfo

func (m *FileReaderSpec) Reset()      { *m = FileReaderSpec{} }
func (*FileReaderSpec) ProtoMessage() {}
func (*FileReaderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{14}
}
func (m *FileReaderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileReaderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FileReaderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileReaderSpec.Merge(m, src)
}
func (m *FileReaderSpec) XXX_Size() int {
	return m.Size()
}
func (m *FileReaderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FileReaderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FileReaderSpec proto.InternalMessageInfo

func (m *FilteredNodeParser) Reset()      { *m = FilteredNodeParser{} }
func (*FilteredNodeParser) ProtoMessage() {}
func (*FilteredNodeParser) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{15}
}
func (m *FilteredNodeParser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilteredNodeParser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FilteredNodeParser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilteredNodeParser.Merge(m, src)
}
func (m *FilteredNodeParser) XXX_Size() int {
	return m.Size()
}
func (m *FilteredNodeParser) XXX_DiscardUnknown() {
	xxx_messageInfo_FilteredNodeParser.DiscardUnknown(m)
}

var xxx_messageInfo_FilteredNodeParser proto.InternalMessageInfo

func (m *FixedRecencyPostProcessorSpec) Reset()      { *m = FixedRecencyPostProcessorSpec{} }
func (*FixedRecencyPostProcessorSpec) ProtoMessage() {}
func (*FixedRecencyPostProcessorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{16}
}
func (m *FixedRecencyPostProcessorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedRecencyPostProcessorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FixedRecencyPostProcessorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedRecencyPostProcessorSpec.Merge(m, src)
}
func (m *FixedRecencyPostProcessorSpec) XXX_Size() int {
	return m.Size()
}
func (m *FixedRecencyPostProcessorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedRecencyPostProcessorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FixedRecencyPostProcessorSpec proto.InternalMessageInfo

func (m *FusionRetrieverSpec) Reset()      { *m = FusionRetrieverSpec{} }
func (*FusionRetrieverSpec) ProtoMessage() {}
func (*FusionRetrieverSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{17}
}
func (m *FusionRetrieverSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FusionRetrieverSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FusionRetrieverSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FusionRetrieverSpec.Merge(m, src)
}
func (m *FusionRetrieverSpec) XXX_Size() int {
	return m.Size()
}
func (m *FusionRetrieverSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FusionRetrieverSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FusionRetrieverSpec proto.InternalMessageInfo

func (m *HierarchicalSplitterSpec) Reset()      { *m = HierarchicalSplitterSpec{} }
func (*HierarchicalSplitterSpec) ProtoMessage() {}
func (*HierarchicalSplitterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{18}
}
func (m *HierarchicalSplitterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HierarchicalSplitterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HierarchicalSplitterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HierarchicalSplitterSpec.Merge(m, src)
}
func (m *HierarchicalSplitterSpec) XXX_Size() int {
	return m.Size()
}
func (m *HierarchicalSplitterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HierarchicalSplitterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HierarchicalSplitterSpec proto.InternalMessageInfo

func (m *IndexReference) Reset()      { *m = IndexReference{} }
func (*IndexReference) ProtoMessage() {}
func (*IndexReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{19}
}
func (m *IndexReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IndexReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexReference.Merge(m, src)
}
func (m *IndexReference) XXX_Size() int {
	return m.Size()
}
func (m *IndexReference) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexReference.DiscardUnknown(m)
}

var xxx_messageInfo_IndexReference proto.InternalMessageInfo

func (m *IndexSpec) Reset()      { *m = IndexSpec{} }
func (*IndexSpec) ProtoMessage() {}
func (*IndexSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{20}
}
func (m *IndexSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IndexSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexSpec.Merge(m, src)
}
func (m *IndexSpec) XXX_Size() int {
	return m.Size()
}
func (m *IndexSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexSpec.DiscardUnknown(m)
}

var xxx_messageInfo_IndexSpec proto.InternalMessageInfo

func (m *KeywordPostProcessorSpec) Reset()      { *m = KeywordPostProcessorSpec{} }
func (*KeywordPostProcessorSpec) ProtoMessage() {}
func (*KeywordPostProcessorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{21}
}
func (m *KeywordPostProcessorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeywordPostProcessorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KeywordPostProcessorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeywordPostProcessorSpec.Merge(m, src)
}
func (m *KeywordPostProcessorSpec) XXX_Size() int {
	return m.Size()
}
func (m *KeywordPostProcessorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KeywordPostProcessorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KeywordPostProcessorSpec proto.InternalMessageInfo

func (m *KnowledgeBase) Reset()      { *m = KnowledgeBase{} }
func (*KnowledgeBase) ProtoMessage() {}
func (*KnowledgeBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{22}
}
func (m *KnowledgeBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KnowledgeBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KnowledgeBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnowledgeBase.Merge(m, src)
}
func (m *KnowledgeBase) XXX_Size() int {
	return m.Size()
}
func (m *KnowledgeBase) XXX_DiscardUnknown() {
	xxx_messageInfo_KnowledgeBase.DiscardUnknown(m)
}

var xxx_messageInfo_KnowledgeBase proto.InternalMessageInfo

func (m *KnowledgeBaseList) Reset()      { *m = KnowledgeBaseList{} }
func (*KnowledgeBaseList) ProtoMessage() {}
func (*KnowledgeBaseList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{23}
}
func (m *KnowledgeBaseList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KnowledgeBaseList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KnowledgeBaseList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnowledgeBaseList.Merge(m, src)
}
func (m *KnowledgeBaseList) XXX_Size() int {
	return m.Size()
}
func (m *KnowledgeBaseList) XXX_DiscardUnknown() {
	xxx_messageInfo_KnowledgeBaseList.DiscardUnknown(m)
}

var xxx_messageInfo_KnowledgeBaseList proto.InternalMessageInfo

func (m *KnowledgeBaseSpec) Reset()      { *m = KnowledgeBaseSpec{} }
func (*KnowledgeBaseSpec) ProtoMessage() {}
func (*KnowledgeBaseSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{24}
}
func (m *KnowledgeBaseSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KnowledgeBaseSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KnowledgeBaseSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnowledgeBaseSpec.Merge(m, src)
}
func (m *KnowledgeBaseSpec) XXX_Size() int {
	return m.Size()
}
func (m *KnowledgeBaseSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KnowledgeBaseSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KnowledgeBaseSpec proto.InternalMessageInfo

func (m *KnowledgeBaseStatus) Reset()      { *m = KnowledgeBaseStatus{} }
func (*KnowledgeBaseStatus) ProtoMessage() {}
func (*KnowledgeBaseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{25}
}
func (m *KnowledgeBaseStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KnowledgeBaseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KnowledgeBaseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnowledgeBaseStatus.Merge(m, src)
}
func (m *KnowledgeBaseStatus) XXX_Size() int {
	return m.Size()
}
func (m *KnowledgeBaseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_KnowledgeBaseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_KnowledgeBaseStatus proto.InternalMessageInfo

func (m *KnowledgeGraphQueryEngine) Reset()      { *m = KnowledgeGraphQueryEngine{} }
func (*KnowledgeGraphQueryEngine) ProtoMessage() {}
func (*KnowledgeGraphQueryEngine) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{26}
}
func (m *KnowledgeGraphQueryEngine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KnowledgeGraphQueryEngine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KnowledgeGraphQueryEngine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnowledgeGraphQueryEngine.Merge(m, src)
}
func (m *KnowledgeGraphQueryEngine) XXX_Size() int {
	return m.Size()
}
func (m *KnowledgeGraphQueryEngine) XXX_DiscardUnknown() {
	xxx_messageInfo_KnowledgeGraphQueryEngine.DiscardUnknown(m)
}

var xxx_messageInfo_KnowledgeGraphQueryEngine proto.InternalMessageInfo

func (m *LLM) Reset()      { *m = LLM{} }
func (*LLM) ProtoMessage() {}
func (*LLM) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{27}
}
func (m *LLM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LLM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LLM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLM.Merge(m, src)
}
func (m *LLM) XXX_Size() int {
	return m.Size()
}
func (m *LLM) XXX_DiscardUnknown() {
	xxx_messageInfo_LLM.DiscardUnknown(m)
}

var xxx_messageInfo_LLM proto.InternalMessageInfo

func (m *LLMAccessSpec) Reset()      { *m = LLMAccessSpec{} }
func (*LLMAccessSpec) ProtoMessage() {}
func (*LLMAccessSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{28}
}
func (m *LLMAccessSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LLMAccessSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LLMAccessSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLMAccessSpec.Merge(m, src)
}
func (m *LLMAccessSpec) XXX_Size() int {
	return m.Size()
}
func (m *LLMAccessSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_LLMAccessSpec.DiscardUnknown(m)
}

var xxx_messageInfo_LLMAccessSpec proto.InternalMessageInfo

func (m *LLMList) Reset()      { *m = LLMList{} }
func (*LLMList) ProtoMessage() {}
func (*LLMList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{29}
}
func (m *LLMList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LLMList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LLMList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLMList.Merge(m, src)
}
func (m *LLMList) XXX_Size() int {
	return m.Size()
}
func (m *LLMList) XXX_DiscardUnknown() {
	xxx_messageInfo_LLMList.DiscardUnknown(m)
}

var xxx_messageInfo_LLMList proto.InternalMessageInfo

func (m *LLMRerankSpec) Reset()      { *m = LLMRerankSpec{} }
func (*LLMRerankSpec) ProtoMessage() {}
func (*LLMRerankSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{30}
}
func (m *LLMRerankSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LLMRerankSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LLMRerankSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLMRerankSpec.Merge(m, src)
}
func (m *LLMRerankSpec) XXX_Size() int {
	return m.Size()
}
func (m *LLMRerankSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_LLMRerankSpec.DiscardUnknown(m)
}

var xxx_messageInfo_LLMRerankSpec proto.InternalMessageInfo

func (m *LLMSpec) Reset()      { *m = LLMSpec{} }
func (*LLMSpec) ProtoMessage() {}
func (*LLMSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{31}
}
func (m *LLMSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LLMSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LLMSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLMSpec.Merge(m, src)
}
func (m *LLMSpec) XXX_Size() int {
	return m.Size()
}
func (m *LLMSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_LLMSpec.DiscardUnknown(m)
}

var xxx_messageInfo_LLMSpec proto.InternalMessageInfo

func (m *LLMStatus) Reset()      { *m = LLMStatus{} }
func (*LLMStatus) ProtoMessage() {}
func (*LLMStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{32}
}
func (m *LLMStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LLMStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LLMStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLMStatus.Merge(m, src)
}
func (m *LLMStatus) XXX_Size() int {
	return m.Size()
}
func (m *LLMStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_LLMStatus.DiscardUnknown(m)
}

var xxx_messageInfo_LLMStatus proto.InternalMessageInfo

func (m *LengthFilter) Reset()      { *m = LengthFilter{} }
func (*LengthFilter) ProtoMessage() {}
func (*LengthFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{33}
}
func (m *LengthFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LengthFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LengthFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LengthFilter.Merge(m, src)
}
func (m *LengthFilter) XXX_Size() int {
	return m.Size()
}
func (m *LengthFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_LengthFilter.DiscardUnknown(m)
}

var xxx_messageInfo_LengthFilter proto.InternalMessageInfo

func (m *LongContextReorderSpec) Reset()      { *m = LongContextReorderSpec{} }
func (*LongContextReorderSpec) ProtoMessage() {}
func (*LongContextReorderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{34}
}
func (m *LongContextReorderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongContextReorderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LongContextReorderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongContextReorderSpec.Merge(m, src)
}
func (m *LongContextReorderSpec) XXX_Size() int {
	return m.Size()
}
func (m *LongContextReorderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_LongContextReorderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_LongContextReorderSpec proto.InternalMessageInfo

func (m *MetadataKeyInfo) Reset()      { *m = MetadataKeyInfo{} }
func (*MetadataKeyInfo) ProtoMessage() {}
func (*MetadataKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{35}
}
func (m *MetadataKeyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataKeyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MetadataKeyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataKeyInfo.Merge(m, src)
}
func (m *MetadataKeyInfo) XXX_Size() int {
	return m.Size()
}
func (m *MetadataKeyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataKeyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataKeyInfo proto.InternalMessageInfo

func (m *MixedNodeParserSpec) Reset()      { *m = MixedNodeParserSpec{} }
func (*MixedNodeParserSpec) ProtoMessage() {}
func (*MixedNodeParserSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{36}
}
func (m *MixedNodeParserSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixedNodeParserSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MixedNodeParserSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixedNodeParserSpec.Merge(m, src)
}
func (m *MixedNodeParserSpec) XXX_Size() int {
	return m.Size()
}
func (m *MixedNodeParserSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MixedNodeParserSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MixedNodeParserSpec proto.InternalMessageInfo

func (m *ModelMetrics) Reset()      { *m = ModelMetrics{} }
func (*ModelMetrics) ProtoMessage() {}
func (*ModelMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{37}
}
func (m *ModelMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelMetrics.Merge(m, src)
}
func (m *ModelMetrics) XXX_Size() int {
	return m.Size()
}
func (m *ModelMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ModelMetrics proto.InternalMessageInfo

func (m *ModelServingSpec) Reset()      { *m = ModelServingSpec{} }
func (*ModelServingSpec) ProtoMessage() {}
func (*ModelServingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{38}
}
func (m *ModelServingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelServingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelServingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelServingSpec.Merge(m, src)
}
func (m *ModelServingSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModelServingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelServingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModelServingSpec proto.InternalMessageInfo

func (m *ModelSpec) Reset()      { *m = ModelSpec{} }
func (*ModelSpec) ProtoMessage() {}
func (*ModelSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{39}
}
func (m *ModelSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelSpec.Merge(m, src)
}
func (m *ModelSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModelSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModelSpec proto.InternalMessageInfo

func (m *ModelStatus) Reset()      { *m = ModelStatus{} }
func (*ModelStatus) ProtoMessage() {}
func (*ModelStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{40}
}
func (m *ModelStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelStatus.Merge(m, src)
}
func (m *ModelStatus) XXX_Size() int {
	return m.Size()
}
func (m *ModelStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ModelStatus proto.InternalMessageInfo

func (m *NameFilter) Reset()      { *m = NameFilter{} }
func (*NameFilter) ProtoMessage() {}
func (*NameFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{41}
}
func (m *NameFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NameFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameFilter.Merge(m, src)
}
func (m *NameFilter) XXX_Size() int {
	return m.Size()
}
func (m *NameFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_NameFilter.DiscardUnknown(m)
}

var xxx_messageInfo_NameFilter proto.InternalMessageInfo

func (m *NodeParserSpec) Reset()      { *m = NodeParserSpec{} }
func (*NodeParserSpec) ProtoMessage() {}
func (*NodeParserSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{42}
}
func (m *NodeParserSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeParserSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeParserSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeParserSpec.Merge(m, src)
}
func (m *NodeParserSpec) XXX_Size() int {
	return m.Size()
}
func (m *NodeParserSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeParserSpec.DiscardUnknown(m)
}

var xxx_messageInfo_NodeParserSpec proto.InternalMessageInfo

func (m *NodePostProcessor) Reset()      { *m = NodePostProcessor{} }
func (*NodePostProcessor) ProtoMessage() {}
func (*NodePostProcessor) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{43}
}
func (m *NodePostProcessor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodePostProcessor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodePostProcessor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePostProcessor.Merge(m, src)
}
func (m *NodePostProcessor) XXX_Size() int {
	return m.Size()
}
func (m *NodePostProcessor) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePostProcessor.DiscardUnknown(m)
}

var xxx_messageInfo_NodePostProcessor proto.InternalMessageInfo

func (m *QueryEngineSpec) Reset()      { *m = QueryEngineSpec{} }
func (*QueryEngineSpec) ProtoMessage() {}
func (*QueryEngineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{44}
}
func (m *QueryEngineSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEngineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *QueryEngineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEngineSpec.Merge(m, src)
}
func (m *QueryEngineSpec) XXX_Size() int {
	return m.Size()
}
func (m *QueryEngineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEngineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEngineSpec proto.InternalMessageInfo

func (m *QueryEngineToolSpec) Reset()      { *m = QueryEngineToolSpec{} }
func (*QueryEngineToolSpec) ProtoMessage() {}
func (*QueryEngineToolSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{45}
}
func (m *QueryEngineToolSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEngineToolSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *QueryEngineToolSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEngineToolSpec.Merge(m, src)
}
func (m *QueryEngineToolSpec) XXX_Size() int {
	return m.Size()
}
func (m *QueryEngineToolSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEngineToolSpec.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEngineToolSpec proto.InternalMessageInfo

func (m *RepositoryFileReader) Reset()      { *m = RepositoryFileReader{} }
func (*RepositoryFileReader) ProtoMessage() {}
func (*RepositoryFileReader) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{46}
}
func (m *RepositoryFileReader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryFileReader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RepositoryFileReader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryFileReader.Merge(m, src)
}
func (m *RepositoryFileReader) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryFileReader) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryFileReader.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryFileReader proto.InternalMessageInfo

func (m *RepositoryReaderSpec) Reset()      { *m = RepositoryReaderSpec{} }
func (*RepositoryReaderSpec) ProtoMessage() {}
func (*RepositoryReaderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{47}
}
func (m *RepositoryReaderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryReaderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RepositoryReaderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryReaderSpec.Merge(m, src)
}
func (m *RepositoryReaderSpec) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryReaderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryReaderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryReaderSpec proto.InternalMessageInfo

func (m *ResponseSynthesizerSpec) Reset()      { *m = ResponseSynthesizerSpec{} }
func (*ResponseSynthesizerSpec) ProtoMessage() {}
func (*ResponseSynthesizerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{48}
}
func (m *ResponseSynthesizerSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSynthesizerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResponseSynthesizerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSynthesizerSpec.Merge(m, src)
}
func (m *ResponseSynthesizerSpec) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSynthesizerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSynthesizerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSynthesizerSpec proto.InternalMessageInfo

func (m *RetrieverQueryEngine) Reset()      { *m = RetrieverQueryEngine{} }
func (*RetrieverQueryEngine) ProtoMessage() {}
func (*RetrieverQueryEngine) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{49}
}
func (m *RetrieverQueryEngine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieverQueryEngine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RetrieverQueryEngine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieverQueryEngine.Merge(m, src)
}
func (m *RetrieverQueryEngine) XXX_Size() int {
	return m.Size()
}
func (m *RetrieverQueryEngine) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieverQueryEngine.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieverQueryEngine proto.InternalMessageInfo

func (m *RetrieverSpec) Reset()      { *m = RetrieverSpec{} }
func (*RetrieverSpec) ProtoMessage() {}
func (*RetrieverSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{50}
}
func (m *RetrieverSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieverSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RetrieverSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieverSpec.Merge(m, src)
}
func (m *RetrieverSpec) XXX_Size() int {
	return m.Size()
}
func (m *RetrieverSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieverSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieverSpec proto.InternalMessageInfo

func (m *RetrieverToolSpec) Reset()      { *m = RetrieverToolSpec{} }
func (*RetrieverToolSpec) ProtoMessage() {}
func (*RetrieverToolSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{51}
}
func (m *RetrieverToolSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieverToolSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RetrieverToolSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieverToolSpec.Merge(m, src)
}
func (m *RetrieverToolSpec) XXX_Size() int {
	return m.Size()
}
func (m *RetrieverToolSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieverToolSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieverToolSpec proto.InternalMessageInfo

func (m *RouterQueryEngineSpec) Reset()      { *m = RouterQueryEngineSpec{} }
func (*RouterQueryEngineSpec) ProtoMessage() {}
func (*RouterQueryEngineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{52}
}
func (m *RouterQueryEngineSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouterQueryEngineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouterQueryEngineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouterQueryEngineSpec.Merge(m, src)
}
func (m *RouterQueryEngineSpec) XXX_Size() int {
	return m.Size()
}
func (m *RouterQueryEngineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RouterQueryEngineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RouterQueryEngineSpec proto.InternalMessageInfo

func (m *RouterRetrieverSpec) Reset()      { *m = RouterRetrieverSpec{} }
func (*RouterRetrieverSpec) ProtoMessage() {}
func (*RouterRetrieverSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{53}
}
func (m *RouterRetrieverSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouterRetrieverSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouterRetrieverSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouterRetrieverSpec.Merge(m, src)
}
func (m *RouterRetrieverSpec) XXX_Size() int {
	return m.Size()
}
func (m *RouterRetrieverSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RouterRetrieverSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RouterRetrieverSpec proto.InternalMessageInfo

func (m *SelectorSpec) Reset()      { *m = SelectorSpec{} }
func (*SelectorSpec) ProtoMessage() {}
func (*SelectorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{54}
}
func (m *SelectorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SelectorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectorSpec.Merge(m, src)
}
func (m *SelectorSpec) XXX_Size() int {
	return m.Size()
}
func (m *SelectorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SelectorSpec proto.InternalMessageInfo

func (m *SentenceEmbeddingOptimizerSpec) Reset()      { *m = SentenceEmbeddingOptimizerSpec{} }
func (*SentenceEmbeddingOptimizerSpec) ProtoMessage() {}
func (*SentenceEmbeddingOptimizerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{55}
}
func (m *SentenceEmbeddingOptimizerSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SentenceEmbeddingOptimizerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SentenceEmbeddingOptimizerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentenceEmbeddingOptimizerSpec.Merge(m, src)
}
func (m *SentenceEmbeddingOptimizerSpec) XXX_Size() int {
	return m.Size()
}
func (m *SentenceEmbeddingOptimizerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SentenceEmbeddingOptimizerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SentenceEmbeddingOptimizerSpec proto.InternalMessageInfo

func (m *SentenceSplitterSpec) Reset()      { *m = SentenceSplitterSpec{} }
func (*SentenceSplitterSpec) ProtoMessage() {}
func (*SentenceSplitterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{56}
}
func (m *SentenceSplitterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SentenceSplitterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SentenceSplitterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentenceSplitterSpec.Merge(m, src)
}
func (m *SentenceSplitterSpec) XXX_Size() int {
	return m.Size()
}
func (m *SentenceSplitterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SentenceSplitterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SentenceSplitterSpec proto.InternalMessageInfo

func (m *SentenceTokenizerSpec) Reset()      { *m = SentenceTokenizerSpec{} }
func (*SentenceTokenizerSpec) ProtoMessage() {}
func (*SentenceTokenizerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{57}
}
func (m *SentenceTokenizerSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SentenceTokenizerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SentenceTokenizerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentenceTokenizerSpec.Merge(m, src)
}
func (m *SentenceTokenizerSpec) XXX_Size() int {
	return m.Size()
}
func (m *SentenceTokenizerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SentenceTokenizerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SentenceTokenizerSpec proto.InternalMessageInfo

func (m *SentenceWindowNodeParserSpec) Reset()      { *m = SentenceWindowNodeParserSpec{} }
func (*SentenceWindowNodeParserSpec) ProtoMessage() {}
func (*SentenceWindowNodeParserSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{58}
}
func (m *SentenceWindowNodeParserSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SentenceWindowNodeParserSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SentenceWindowNodeParserSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentenceWindowNodeParserSpec.Merge(m, src)
}
func (m *SentenceWindowNodeParserSpec) XXX_Size() int {
	return m.Size()
}
func (m *SentenceWindowNodeParserSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SentenceWindowNodeParserSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SentenceWindowNodeParserSpec proto.InternalMessageInfo

func (m *SimilarityPostProcessorSpec) Reset()      { *m = SimilarityPostProcessorSpec{} }
func (*SimilarityPostProcessorSpec) ProtoMessage() {}
func (*SimilarityPostProcessorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{59}
}
func (m *SimilarityPostProcessorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimilarityPostProcessorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SimilarityPostProcessorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimilarityPostProcessorSpec.Merge(m, src)
}
func (m *SimilarityPostProcessorSpec) XXX_Size() int {
	return m.Size()
}
func (m *SimilarityPostProcessorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SimilarityPostProcessorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SimilarityPostProcessorSpec proto.InternalMessageInfo

func (m *SubQuestionQueryEngineSpec) Reset()      { *m = SubQuestionQueryEngineSpec{} }
func (*SubQuestionQueryEngineSpec) ProtoMessage() {}
func (*SubQuestionQueryEngineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{60}
}
func (m *SubQuestionQueryEngineSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubQuestionQueryEngineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SubQuestionQueryEngineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubQuestionQueryEngineSpec.Merge(m, src)
}
func (m *SubQuestionQueryEngineSpec) XXX_Size() int {
	return m.Size()
}
func (m *SubQuestionQueryEngineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SubQuestionQueryEngineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SubQuestionQueryEngineSpec proto.InternalMessageInfo

func (m *TextSplitterSpec) Reset()      { *m = TextSplitterSpec{} }
func (*TextSplitterSpec) ProtoMessage() {}
func (*TextSplitterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{61}
}
func (m *TextSplitterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextSplitterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TextSplitterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextSplitterSpec.Merge(m, src)
}
func (m *TextSplitterSpec) XXX_Size() int {
	return m.Size()
}
func (m *TextSplitterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TextSplitterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TextSplitterSpec proto.InternalMessageInfo

func (m *TimeWeightedRecencyPostProcessorSpec) Reset()      { *m = TimeWeightedRecencyPostProcessorSpec{} }
func (*TimeWeightedRecencyPostProcessorSpec) ProtoMessage() {}
func (*TimeWeightedRecencyPostProcessorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{62}
}
func (m *TimeWeightedRecencyPostProcessorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeWeightedRecencyPostProcessorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TimeWeightedRecencyPostProcessorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeWeightedRecencyPostProcessorSpec.Merge(m, src)
}
func (m *TimeWeightedRecencyPostProcessorSpec) XXX_Size() int {
	return m.Size()
}
func (m *TimeWeightedRecencyPostProcessorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeWeightedRecencyPostProcessorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TimeWeightedRecencyPostProcessorSpec proto.InternalMessageInfo

func (m *TokenSplitterSpec) Reset()      { *m = TokenSplitterSpec{} }
func (*TokenSplitterSpec) ProtoMessage() {}
func (*TokenSplitterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{63}
}
func (m *TokenSplitterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenSplitterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TokenSplitterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenSplitterSpec.Merge(m, src)
}
func (m *TokenSplitterSpec) XXX_Size() int {
	return m.Size()
}
func (m *TokenSplitterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenSplitterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TokenSplitterSpec proto.InternalMessageInfo

func (m *VectorIndexSpec) Reset()      { *m = VectorIndexSpec{} }
func (*VectorIndexSpec) ProtoMessage() {}
func (*VectorIndexSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{64}
}
func (m *VectorIndexSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VectorIndexSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VectorIndexSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorIndexSpec.Merge(m, src)
}
func (m *VectorIndexSpec) XXX_Size() int {
	return m.Size()
}
func (m *VectorIndexSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorIndexSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VectorIndexSpec proto.InternalMessageInfo

func (m *VectorRetrieverSpec) Reset()      { *m = VectorRetrieverSpec{} }
func (*VectorRetrieverSpec) ProtoMessage() {}
func (*VectorRetrieverSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{65}
}
func (m *VectorRetrieverSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VectorRetrieverSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VectorRetrieverSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorRetrieverSpec.Merge(m, src)
}
func (m *VectorRetrieverSpec) XXX_Size() int {
	return m.Size()
}
func (m *VectorRetrieverSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorRetrieverSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VectorRetrieverSpec proto.InternalMessageInfo

func (m *WebReaderSpec) Reset()      { *m = WebReaderSpec{} }
func (*WebReaderSpec) ProtoMessage() {}
func (*WebReaderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8907c7f20c7108f3, []int{66}
}
func (m *WebReaderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebReaderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WebReaderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebReaderSpec.Merge(m, src)
}
func (m *WebReaderSpec) XXX_Size() int {
	return m.Size()
}
func (m *WebReaderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WebReaderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WebReaderSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AnswerFilteringSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.AnswerFilteringSpec")
	proto.RegisterType((*AutoVectorRetrieverSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.AutoVectorRetrieverSpec")
	proto.RegisterType((*CodeSplitterSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.CodeSplitterSpec")
	proto.RegisterType((*CohereRerankSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.CohereRerankSpec")
	proto.RegisterType((*ConcreteQueryEngineSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.ConcreteQueryEngineSpec")
	proto.RegisterType((*ConcreteRetrieverSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.ConcreteRetrieverSpec")
	proto.RegisterType((*DatabaseReaderSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.DatabaseReaderSpec")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.DatabaseReaderSpec.OptionsEntry")
	proto.RegisterType((*DocumentSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.DocumentSpec")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.DocumentSpec.MetadataEntry")
	proto.RegisterType((*DocumentStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.DocumentStatus")
	proto.RegisterType((*DocumentSummaryIndexSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.DocumentSummaryIndexSpec")
	proto.RegisterType((*DocumentSummaryRetrieverSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.DocumentSummaryRetrieverSpec")
	proto.RegisterType((*EmbeddingRecencyPostProcessorSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.EmbeddingRecencyPostProcessorSpec")
	proto.RegisterType((*ExtensionFilter)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.ExtensionFilter")
	proto.RegisterType((*FileLocationReaderSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.FileLocationReaderSpec")
	proto.RegisterType((*FileReaderSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.FileReaderSpec")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.FileReaderSpec.OptionsEntry")
	proto.RegisterType((*FilteredNodeParser)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.FilteredNodeParser")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.FilteredNodeParser.MetadataEntry")
	proto.RegisterType((*FixedRecencyPostProcessorSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.FixedRecencyPostProcessorSpec")
	proto.RegisterType((*FusionRetrieverSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.FusionRetrieverSpec")
	proto.RegisterType((*HierarchicalSplitterSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.HierarchicalSplitterSpec")
	proto.RegisterType((*IndexReference)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.IndexReference")
	proto.RegisterType((*IndexSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.IndexSpec")
	proto.RegisterType((*KeywordPostProcessorSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.KeywordPostProcessorSpec")
	proto.RegisterType((*KnowledgeBase)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.KnowledgeBase")
	proto.RegisterType((*KnowledgeBaseList)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.KnowledgeBaseList")
	proto.RegisterType((*KnowledgeBaseSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.KnowledgeBaseSpec")
	proto.RegisterType((*KnowledgeBaseStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.KnowledgeBaseStatus")
	proto.RegisterType((*KnowledgeGraphQueryEngine)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.KnowledgeGraphQueryEngine")
	proto.RegisterType((*LLM)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.LLM")
	proto.RegisterType((*LLMAccessSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.LLMAccessSpec")
	proto.RegisterType((*LLMList)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.LLMList")
	proto.RegisterType((*LLMRerankSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.LLMRerankSpec")
	proto.RegisterType((*LLMSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.LLMSpec")
	proto.RegisterType((*LLMStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.LLMStatus")
	proto.RegisterType((*LengthFilter)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.LengthFilter")
	proto.RegisterType((*LongContextReorderSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.LongContextReorderSpec")
	proto.RegisterType((*MetadataKeyInfo)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.MetadataKeyInfo")
	proto.RegisterType((*MixedNodeParserSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.MixedNodeParserSpec")
	proto.RegisterType((*ModelMetrics)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.ModelMetrics")
	proto.RegisterType((*ModelServingSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.ModelServingSpec")
	proto.RegisterType((*ModelSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.ModelSpec")
	proto.RegisterType((*ModelStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.ModelStatus")
	proto.RegisterType((*NameFilter)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.NameFilter")
	proto.RegisterType((*NodeParserSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.NodeParserSpec")
	proto.RegisterType((*NodePostProcessor)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.NodePostProcessor")
	proto.RegisterType((*QueryEngineSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.QueryEngineSpec")
	proto.RegisterType((*QueryEngineToolSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.QueryEngineToolSpec")
	proto.RegisterType((*RepositoryFileReader)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.RepositoryFileReader")
	proto.RegisterType((*RepositoryReaderSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.RepositoryReaderSpec")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.RepositoryReaderSpec.OptionsEntry")
	proto.RegisterType((*ResponseSynthesizerSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.ResponseSynthesizerSpec")
	proto.RegisterType((*RetrieverQueryEngine)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.RetrieverQueryEngine")
	proto.RegisterType((*RetrieverSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.RetrieverSpec")
	proto.RegisterType((*RetrieverToolSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.RetrieverToolSpec")
	proto.RegisterType((*RouterQueryEngineSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.RouterQueryEngineSpec")
	proto.RegisterType((*RouterRetrieverSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.RouterRetrieverSpec")
	proto.RegisterType((*SelectorSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.SelectorSpec")
	proto.RegisterType((*SentenceEmbeddingOptimizerSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.SentenceEmbeddingOptimizerSpec")
	proto.RegisterType((*SentenceSplitterSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.SentenceSplitterSpec")
	proto.RegisterType((*SentenceTokenizerSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.SentenceTokenizerSpec")
	proto.RegisterType((*SentenceWindowNodeParserSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.SentenceWindowNodeParserSpec")
	proto.RegisterType((*SimilarityPostProcessorSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.SimilarityPostProcessorSpec")
	proto.RegisterType((*SubQuestionQueryEngineSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.SubQuestionQueryEngineSpec")
	proto.RegisterType((*TextSplitterSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.TextSplitterSpec")
	proto.RegisterType((*TimeWeightedRecencyPostProcessorSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.TimeWeightedRecencyPostProcessorSpec")
	proto.RegisterType((*TokenSplitterSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.TokenSplitterSpec")
	proto.RegisterType((*VectorIndexSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.VectorIndexSpec")
	proto.RegisterType((*VectorRetrieverSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.VectorRetrieverSpec")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.VectorRetrieverSpec.MatchMetadataEntry")
	proto.RegisterType((*WebReaderSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.WebReaderSpec")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.genai.v1alpha1.WebReaderSpec.OptionsEntry")
}

func init() {
	proto.RegisterFile("github.com/metaprov/modelaapi/pkg/apis/genai/v1alpha1/generated.proto", fileDescriptor_8907c7f20c7108f3)
}

var fileDescriptor_8907c7f20c7108f3 = []byte{
	// 4800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x3c, 0x5b, 0x8c, 0x24, 0xd7,
	0x55, 0xae, 0x7e, 0xcc, 0x74, 0x9f, 0x79, 0xdf, 0xf1, 0xee, 0xb6, 0x77, 0xd7, 0xd3, 0x4b, 0x39,
	0x41, 0x0b, 0x1b, 0x7a, 0xbc, 0xab, 0x6c, 0xe2, 0x5d, 0x70, 0xb4, 0xd3, 0xf3, 0x58, 0xef, 0x6e,
	0xcf, 0xee, 0xf8, 0xce, 0xd8, 0x6b, 0x39, 0x41, 0x4e, 0x4d, 0xf5, 0x9d, 0xee, 0xda, 0xa9, 0xae,
	0x6a, 0x57, 0x55, 0xcf, 0xce, 0x18, 0x5b, 0x36, 0x84, 0x44, 0x80, 0x48, 0x14, 0x29, 0x7c, 0x40,
	0xa4, 0x7c, 0x04, 0x10, 0x12, 0x08, 0x09, 0x21, 0x50, 0x22, 0xfe, 0xf8, 0x42, 0xfe, 0x00, 0x14,
	0x93, 0x9f, 0x7c, 0xa0, 0x0e, 0x6e, 0x3e, 0x40, 0x02, 0x09, 0x21, 0x24, 0x90, 0x96, 0x0f, 0xd0,
	0x7d, 0x54, 0xd5, 0xad, 0xea, 0xea, 0x79, 0x54, 0xb7, 0xc7, 0x4e, 0xbe, 0x66, 0xfa, 0x9c, 0x73,
	0xcf, 0xb9, 0x75, 0xee, 0xbd, 0xe7, 0x55, 0xe7, 0x16, 0xac, 0x36, 0x0c, 0xaf, 0xd9, 0xd9, 0xae,
	0xe8, 0x76, 0x6b, 0xb1, 0x45, 0x3c, 0xad, 0xed, 0xd8, 0x7b, 0x8b, 0x2d, 0xbb, 0x4e, 0x4c, 0x4d,
	0x6b, 0x1b, 0x8b, 0xed, 0xdd, 0xc6, 0xa2, 0xd6, 0x36, 0xdc, 0xc5, 0x06, 0xb1, 0x34, 0x63, 0x71,
	0xef, 0xaa, 0x66, 0xb6, 0x9b, 0xda, 0x55, 0xfa, 0x93, 0x38, 0x9a, 0x47, 0xea, 0x95, 0xb6, 0x63,
	0x7b, 0x36, 0xba, 0x1e, 0xb2, 0xa9, 0xf8, 0x6c, 0x2a, 0x01, 0x9b, 0x4a, 0x7b, 0xb7, 0x51, 0xa1,
	0x6c, 0x2a, 0x8c, 0x4d, 0xc5, 0x67, 0x73, 0xfe, 0x17, 0x24, 0xe9, 0x0d, 0xbb, 0x61, 0x2f, 0x32,
	0x6e, 0xdb, 0x9d, 0x1d, 0xf6, 0x8b, 0xfd, 0x60, 0xff, 0x71, 0x29, 0xe7, 0x6f, 0x1f, 0x73, 0xb2,
	0xba, 0xe6, 0x69, 0xa6, 0xdd, 0x18, 0x38, 0xdd, 0xf3, 0xea, 0xee, 0x0b, 0x6e, 0xc5, 0xb0, 0x29,
	0xf5, 0xa2, 0x6e, 0x3b, 0x64, 0x71, 0xaf, 0x9f, 0xe6, 0xb3, 0x21, 0x4d, 0x4b, 0xd3, 0x9b, 0x86,
	0x45, 0x9c, 0x83, 0x50, 0x04, 0x15, 0x9f, 0x34, 0x6a, 0x71, 0xd0, 0x28, 0xa7, 0x63, 0x79, 0x46,
	0x8b, 0xf4, 0x0d, 0xf8, 0xdc, 0x51, 0x03, 0x5c, 0xbd, 0x49, 0x5a, 0x5a, 0x7c, 0x9c, 0xfa, 0x07,
	0x0a, 0xcc, 0x2f, 0x59, 0xee, 0x63, 0xe2, 0xac, 0x19, 0xa6, 0x47, 0x1c, 0xc3, 0x6a, 0x6c, 0xb6,
	0x89, 0x8e, 0x7e, 0x0e, 0xc6, 0x89, 0xa5, 0x6d, 0x9b, 0xa4, 0x5e, 0x52, 0x2e, 0x29, 0x97, 0x0b,
	0xd5, 0x99, 0xf7, 0xbb, 0xe5, 0xa7, 0x7a, 0xdd, 0xf2, 0xf8, 0x2a, 0x07, 0x63, 0x1f, 0x8f, 0x34,
	0xc8, 0x33, 0xe5, 0x95, 0x32, 0x97, 0x94, 0xcb, 0x13, 0xd7, 0x6e, 0x55, 0x52, 0x2d, 0x62, 0x65,
	0x9d, 0x52, 0x50, 0xd9, 0xd5, 0x62, 0xaf, 0x5b, 0xce, 0xb3, 0x9f, 0x98, 0x73, 0x56, 0x3f, 0xc8,
	0xc0, 0xb9, 0xa5, 0x8e, 0x67, 0xbf, 0x4a, 0x74, 0xcf, 0x76, 0x30, 0xf1, 0x1c, 0x83, 0xec, 0x11,
	0xe7, 0x93, 0x37, 0x53, 0xf4, 0x69, 0x18, 0x6f, 0x69, 0xfb, 0x5b, 0x76, 0xfb, 0x5e, 0x29, 0x7b,
	0x49, 0xb9, 0x9c, 0xad, 0x4e, 0xd0, 0x99, 0xac, 0x73, 0x10, 0xf6, 0x71, 0xe8, 0x3d, 0x05, 0x26,
	0xa9, 0xc4, 0xba, 0xe6, 0x69, 0x77, 0xac, 0x1d, 0xbb, 0x94, 0xbb, 0x94, 0xbd, 0x3c, 0x71, 0x6d,
	0x2d, 0xed, 0x8c, 0x04, 0xab, 0x7b, 0xe4, 0x80, 0x72, 0xab, 0x3e, 0x2d, 0x54, 0x30, 0xb9, 0x2e,
	0xc9, 0xc0, 0x11, 0x89, 0xea, 0x8f, 0x15, 0x98, 0x5d, 0xb6, 0xeb, 0x64, 0xb3, 0x6d, 0x1a, 0x9e,
	0x27, 0x94, 0xf9, 0x19, 0x28, 0x98, 0x9a, 0xd5, 0xe8, 0x68, 0x0d, 0xc2, 0xb4, 0x59, 0xac, 0xce,
	0x0a, 0x56, 0x85, 0x9a, 0x80, 0xe3, 0x80, 0x02, 0x55, 0x00, 0xf4, 0x66, 0xc7, 0xda, 0xad, 0x19,
	0x16, 0x71, 0x99, 0x52, 0xf3, 0xd5, 0xe9, 0x5e, 0xb7, 0x0c, 0xcb, 0x01, 0x14, 0x4b, 0x14, 0x68,
	0x19, 0xe6, 0xc2, 0x5f, 0x0f, 0xf6, 0x88, 0x63, 0x6a, 0x6d, 0xa6, 0xa6, 0x7c, 0xf5, 0x4c, 0xaf,
	0x5b, 0x9e, 0x5b, 0x8e, 0x23, 0x71, 0x3f, 0x3d, 0xba, 0x0c, 0x85, 0x96, 0xb6, 0xbf, 0xdc, 0xd4,
	0x1c, 0xb7, 0x94, 0x63, 0x63, 0x27, 0xe9, 0xf4, 0xd6, 0x05, 0x0c, 0x07, 0x58, 0xb5, 0x4d, 0x1f,
	0xb0, 0x49, 0x1c, 0x82, 0x89, 0xa3, 0x59, 0xbb, 0xec, 0x01, 0xbf, 0x00, 0xd3, 0xba, 0x6d, 0x59,
	0x44, 0xf7, 0x0c, 0xdb, 0xba, 0xaf, 0xb5, 0xfc, 0xc7, 0x3c, 0x2b, 0x1e, 0x73, 0x7a, 0x39, 0x82,
	0xc5, 0x31, 0x6a, 0x74, 0x11, 0x72, 0x9e, 0xdd, 0xbe, 0xcf, 0x1e, 0x36, 0x5b, 0x2d, 0xf4, 0xba,
	0xe5, 0xdc, 0x96, 0xdd, 0xbe, 0x8f, 0x19, 0x54, 0xfd, 0x96, 0x02, 0xe7, 0x96, 0x6d, 0x4b, 0x77,
	0x88, 0x47, 0x5e, 0xee, 0x10, 0xe7, 0x60, 0xd5, 0x6a, 0x18, 0x16, 0x61, 0x92, 0xf7, 0xa1, 0xe8,
	0xf8, 0x1b, 0x97, 0x09, 0x9d, 0xb8, 0x76, 0x2f, 0xe5, 0x72, 0x07, 0x07, 0x40, 0x92, 0x51, 0x9d,
	0xea, 0x75, 0xcb, 0xc5, 0x00, 0x83, 0x43, 0x61, 0xea, 0xef, 0x66, 0xe0, 0x8c, 0x3f, 0xab, 0xe8,
	0xd9, 0xb1, 0x60, 0x6c, 0x8f, 0x1d, 0x29, 0x31, 0xa1, 0xbb, 0x29, 0x27, 0x94, 0x70, 0x2e, 0xab,
	0xd0, 0xeb, 0x96, 0xc7, 0x04, 0x42, 0x48, 0x41, 0xdf, 0x50, 0x60, 0xa6, 0x6e, 0xeb, 0x9d, 0x16,
	0xb1, 0xbc, 0xcd, 0x4e, 0xab, 0xa5, 0x39, 0x07, 0xe2, 0x2c, 0x3e, 0x48, 0x29, 0x79, 0x25, 0xca,
	0xed, 0x8e, 0x55, 0x27, 0xfb, 0x4c, 0xfc, 0x7c, 0xaf, 0x5b, 0x9e, 0x89, 0x61, 0x71, 0x5c, 0xb8,
	0xfa, 0x9f, 0x19, 0x40, 0x2b, 0x9a, 0xa7, 0x6d, 0x6b, 0x2e, 0xc1, 0x44, 0xab, 0x0b, 0xbd, 0x7c,
	0x0e, 0x72, 0xde, 0x41, 0xdb, 0xdf, 0x1b, 0xaa, 0xd8, 0x1b, 0xb9, 0xad, 0x83, 0x36, 0x79, 0xd2,
	0x2d, 0xc7, 0x46, 0x50, 0x28, 0x66, 0xf4, 0x09, 0xbb, 0x2b, 0x73, 0xa2, 0xdd, 0xf5, 0x1c, 0xe4,
	0xdf, 0xa4, 0x4b, 0xca, 0x0e, 0x45, 0xb1, 0x3a, 0x25, 0x86, 0xe5, 0xd9, 0x3a, 0x63, 0x8e, 0x43,
	0xbf, 0xaa, 0xc0, 0xb8, 0xdd, 0xa6, 0x63, 0x5c, 0x61, 0x36, 0x5e, 0x4d, 0xab, 0xbc, 0xbe, 0x27,
	0xaf, 0x3c, 0xe0, 0x8c, 0x57, 0x2d, 0xcf, 0x39, 0x08, 0x2d, 0xa9, 0x80, 0x62, 0x5f, 0xee, 0xf9,
	0x9b, 0x30, 0x29, 0x53, 0xa2, 0x59, 0xc8, 0xee, 0x92, 0x03, 0xae, 0x2f, 0x4c, 0xff, 0x45, 0x4f,
	0x43, 0x7e, 0x4f, 0x33, 0x3b, 0x42, 0x03, 0x98, 0xff, 0xb8, 0x99, 0x79, 0x41, 0x51, 0xff, 0x63,
	0x1c, 0x26, 0x83, 0x85, 0xa1, 0xda, 0xbe, 0x04, 0x39, 0x2b, 0x3c, 0x89, 0x93, 0xbe, 0xb6, 0x99,
	0x86, 0x18, 0x06, 0x5d, 0x85, 0x89, 0x3a, 0x71, 0x75, 0xc7, 0x60, 0x32, 0x85, 0x52, 0x67, 0x7a,
	0xdd, 0xf2, 0xc4, 0x4a, 0x08, 0xc6, 0x32, 0x0d, 0x7a, 0x17, 0x0a, 0xbe, 0xb9, 0x2b, 0x65, 0x99,
	0x96, 0x5e, 0x1e, 0x76, 0x8b, 0x51, 0xfd, 0xf8, 0x06, 0x95, 0x2b, 0x28, 0x30, 0x8e, 0x3e, 0x18,
	0x07, 0x42, 0xd1, 0xe7, 0x61, 0xca, 0x21, 0x3b, 0x0e, 0x71, 0x9b, 0x1b, 0xc4, 0x31, 0xec, 0xba,
	0x30, 0x56, 0x73, 0xbd, 0x6e, 0x79, 0x0a, 0xcb, 0x08, 0x1c, 0xa5, 0xa3, 0x2e, 0xc4, 0xa0, 0xdb,
	0x98, 0xb8, 0xa5, 0xfc, 0xa5, 0xec, 0xe5, 0x22, 0x77, 0x21, 0x77, 0x38, 0x08, 0xfb, 0x38, 0x6a,
	0x7c, 0x2d, 0xbb, 0x4e, 0x36, 0x34, 0xc7, 0x25, 0x4e, 0x69, 0x8c, 0xa9, 0x84, 0x19, 0xdf, 0xfb,
	0x01, 0x14, 0x4b, 0x14, 0xe8, 0x6d, 0x98, 0x26, 0xad, 0x6d, 0x52, 0xaf, 0x1b, 0x56, 0x83, 0xb9,
	0xac, 0xd2, 0xf8, 0x88, 0xbc, 0x20, 0xa2, 0x3b, 0x7b, 0x35, 0xc2, 0x1b, 0xc7, 0x64, 0xa1, 0x5d,
	0xc8, 0xed, 0x18, 0x26, 0x29, 0x15, 0x98, 0xcc, 0xf5, 0x94, 0x32, 0xd7, 0x0c, 0x93, 0xd4, 0x6c,
	0x5d, 0x63, 0xcb, 0x1d, 0x6c, 0x5a, 0x6e, 0x86, 0x29, 0x0e, 0x33, 0x21, 0xc8, 0x85, 0x42, 0x5d,
	0x6c, 0xed, 0x52, 0x91, 0x09, 0xbc, 0x33, 0xb2, 0x13, 0xc2, 0xbd, 0x4d, 0x00, 0x0f, 0x04, 0xa1,
	0x37, 0x20, 0xfb, 0x98, 0x6c, 0x97, 0x80, 0xc9, 0x5b, 0x49, 0x29, 0xef, 0x21, 0xd9, 0x96, 0x44,
	0x8d, 0xf7, 0xba, 0xe5, 0x2c, 0x05, 0x51, 0xce, 0xe8, 0x57, 0x00, 0x1c, 0xd2, 0xb6, 0x5d, 0xc3,
	0xb3, 0x9d, 0x83, 0xd2, 0xc4, 0x90, 0x1e, 0xc4, 0x67, 0x24, 0x89, 0x63, 0xbb, 0x47, 0xc2, 0x48,
	0xe2, 0xce, 0xff, 0x22, 0x4c, 0x45, 0xb6, 0xfe, 0x89, 0x4e, 0xfc, 0x37, 0x33, 0x30, 0x1d, 0x9c,
	0x22, 0x4f, 0xf3, 0x3a, 0xee, 0x31, 0xce, 0xfc, 0x73, 0x90, 0xa7, 0xbb, 0xd7, 0x8f, 0x2b, 0x02,
	0x5b, 0x48, 0xb7, 0xb7, 0x8b, 0x39, 0x0e, 0x5d, 0x81, 0xa2, 0xa9, 0xb9, 0xde, 0xaa, 0xe3, 0xd8,
	0x8e, 0x6f, 0x34, 0xa9, 0x1f, 0xac, 0xf9, 0x40, 0x1c, 0xe2, 0xe9, 0xc1, 0xda, 0x31, 0xb5, 0x46,
	0x83, 0xf0, 0xb3, 0x58, 0xe0, 0x07, 0x6b, 0x8d, 0x83, 0xb0, 0x8f, 0x43, 0x3a, 0x4c, 0xd1, 0x31,
	0xe2, 0x8c, 0x2e, 0x79, 0xa5, 0x3c, 0x53, 0xf5, 0xcf, 0x57, 0x78, 0x88, 0x5d, 0x91, 0x43, 0xec,
	0x50, 0xc1, 0x54, 0xf9, 0x95, 0xbd, 0xab, 0x95, 0x2d, 0xa3, 0x45, 0xf8, 0x21, 0xaf, 0xc9, 0x4c,
	0x70, 0x94, 0xa7, 0xfa, 0x67, 0x19, 0x28, 0x0d, 0xf2, 0x5d, 0xe8, 0x3b, 0x0a, 0xcc, 0x3b, 0xc4,
	0x6d, 0xdb, 0x96, 0x4b, 0x36, 0x0f, 0x2c, 0xaf, 0x49, 0x5c, 0xe3, 0xad, 0x20, 0x6a, 0xb8, 0x9f,
	0x7a, 0xcd, 0xfb, 0x38, 0xb2, 0x65, 0xbf, 0x20, 0x34, 0x3b, 0x9f, 0x40, 0x80, 0x93, 0xe6, 0x81,
	0x5c, 0x28, 0x06, 0xc7, 0x5b, 0xf8, 0xef, 0xb5, 0xa1, 0x22, 0x87, 0xd0, 0x6d, 0xb3, 0xd5, 0x0b,
	0x6c, 0x09, 0x0e, 0xe5, 0xa8, 0x3f, 0xce, 0xc0, 0xc5, 0xb8, 0x3f, 0x8f, 0x04, 0x33, 0x8f, 0x20,
	0xcf, 0x6c, 0xa3, 0x50, 0xd3, 0x6a, 0xca, 0x19, 0xb1, 0xb9, 0x60, 0xb2, 0x43, 0x1c, 0x62, 0xe9,
	0x24, 0xdc, 0x77, 0x1c, 0xce, 0x45, 0xa0, 0xc7, 0x7d, 0xc6, 0x74, 0x54, 0x29, 0x45, 0x20, 0x2f,
	0xd9, 0x8e, 0xf2, 0xf8, 0xd3, 0x4f, 0x2e, 0xfc, 0xf8, 0xf3, 0x1e, 0x8b, 0x3f, 0xef, 0xa1, 0x5f,
	0x82, 0x1c, 0x95, 0xc5, 0xb6, 0x77, 0xb1, 0x7a, 0x99, 0x62, 0xe9, 0xb0, 0x27, 0xdd, 0xf2, 0x40,
	0xd5, 0x51, 0x3c, 0x66, 0xa3, 0xd4, 0x7f, 0x55, 0xe0, 0x67, 0x42, 0xd5, 0x13, 0x9d, 0x58, 0xfa,
	0xc1, 0x86, 0xed, 0x7a, 0x1b, 0x8e, 0xad, 0x13, 0xd7, 0xb5, 0xb9, 0x9a, 0xdf, 0x53, 0xfa, 0x9e,
	0x5d, 0x19, 0xd1, 0xb3, 0x07, 0x61, 0xd2, 0x11, 0xce, 0xe4, 0x16, 0xcc, 0xba, 0x46, 0xcb, 0x30,
	0x35, 0xc7, 0xf0, 0x0e, 0x96, 0x3b, 0x9e, 0xbd, 0xb3, 0xc3, 0xf4, 0x9f, 0xa9, 0x3e, 0xdd, 0xeb,
	0x96, 0x67, 0x37, 0x63, 0x38, 0xdc, 0x47, 0xad, 0xbe, 0x01, 0x33, 0xab, 0xfb, 0x1e, 0xb1, 0x5c,
	0xc3, 0xb6, 0x78, 0xe2, 0xcb, 0xdd, 0xae, 0x6e, 0x76, 0xea, 0xd4, 0x28, 0x49, 0x6e, 0x97, 0x81,
	0xb0, 0x8f, 0xa3, 0x64, 0x64, 0x9f, 0x93, 0x65, 0x42, 0xb2, 0xd5, 0x7d, 0x41, 0x26, 0x70, 0xea,
	0x9f, 0x66, 0xe0, 0x6c, 0xb2, 0xb7, 0x42, 0x5f, 0x55, 0x60, 0x9a, 0xba, 0xa9, 0x10, 0xc4, 0xd6,
	0x2b, 0xfd, 0x8e, 0x5d, 0x8b, 0x30, 0x0b, 0xb5, 0x18, 0x85, 0xe3, 0x98, 0x50, 0x64, 0x43, 0xc1,
	0x14, 0xb3, 0x13, 0xbb, 0xf7, 0xd8, 0x13, 0x10, 0x95, 0x91, 0x64, 0xc7, 0xcc, 0x3d, 0x64, 0xf0,
	0xe0, 0x81, 0x10, 0xf4, 0x0c, 0x64, 0x3b, 0x8e, 0x29, 0xcc, 0x34, 0xf3, 0x6d, 0xaf, 0x38, 0x26,
	0xa6, 0x30, 0xf5, 0xff, 0x14, 0x88, 0x4d, 0x17, 0x5d, 0x8b, 0xc4, 0xe0, 0x0b, 0xb1, 0x18, 0x5c,
	0xa2, 0x96, 0xe2, 0xef, 0x77, 0xe2, 0x91, 0x31, 0x1e, 0x89, 0x4a, 0x4f, 0x23, 0x2a, 0xfe, 0xdb,
	0x1c, 0x20, 0xbe, 0x13, 0x49, 0x3d, 0x8c, 0xe0, 0x98, 0xa9, 0xf5, 0x37, 0xaa, 0x38, 0x67, 0x69,
	0x4d, 0x6d, 0x6c, 0xc3, 0x0b, 0x53, 0xeb, 0x03, 0x71, 0x28, 0x07, 0x35, 0x60, 0xcc, 0x24, 0x56,
	0xc3, 0x6b, 0x8a, 0x7d, 0xb1, 0x9c, 0x52, 0x62, 0x8d, 0x31, 0x11, 0xe2, 0x58, 0x3e, 0xc8, 0x21,
	0x58, 0xb0, 0x47, 0x6f, 0x88, 0x28, 0x20, 0xcb, 0xc4, 0x2c, 0xa5, 0x14, 0x43, 0x83, 0x06, 0x21,
	0xa4, 0x10, 0x0b, 0x22, 0xbe, 0xaa, 0x48, 0x69, 0x00, 0xdf, 0x12, 0x0f, 0xd3, 0x6f, 0x89, 0xd8,
	0xe2, 0x9c, 0x20, 0x19, 0xb8, 0x16, 0x09, 0xd6, 0xf3, 0x6c, 0x4b, 0x23, 0x41, 0x3f, 0x20, 0x60,
	0x1f, 0x2e, 0xe4, 0x7a, 0x11, 0x9e, 0x5d, 0x33, 0xf6, 0x49, 0x7d, 0xa0, 0x19, 0xf7, 0x1d, 0x89,
	0x92, 0xe4, 0x48, 0xd4, 0xff, 0x55, 0x60, 0x7e, 0xad, 0xc3, 0xf6, 0x45, 0xc4, 0xc7, 0xbe, 0xa7,
	0xd0, 0x20, 0x54, 0x40, 0x5c, 0x66, 0x28, 0x27, 0xae, 0xd5, 0x52, 0x6a, 0x34, 0xb1, 0x26, 0x11,
	0xaa, 0x25, 0x00, 0xbb, 0x58, 0x92, 0x49, 0x0d, 0x30, 0xcd, 0x83, 0x0d, 0x11, 0x19, 0x8a, 0x0a,
	0xdb, 0xcb, 0x1c, 0x84, 0x7d, 0x1c, 0xba, 0x09, 0xd3, 0x0e, 0xd1, 0x8d, 0xb6, 0x63, 0xeb, 0x9a,
	0x89, 0x35, 0x6b, 0x97, 0x6d, 0xb2, 0x02, 0x4f, 0x56, 0x70, 0x04, 0x83, 0x63, 0x94, 0x6a, 0x07,
	0x4a, 0x2f, 0x19, 0xc4, 0xd1, 0x1c, 0xbd, 0x69, 0xe8, 0x9a, 0x19, 0xa9, 0x90, 0x9d, 0xa0, 0xdc,
	0xe8, 0x97, 0xc7, 0x36, 0x8d, 0xb7, 0x08, 0x37, 0x48, 0x59, 0xa9, 0x3c, 0xc6, 0xa0, 0x58, 0xa2,
	0x50, 0xdf, 0x82, 0xe9, 0x68, 0xf0, 0x81, 0x6e, 0xc3, 0xdc, 0xae, 0x65, 0x3f, 0x36, 0x49, 0xbd,
	0x41, 0xaa, 0x9a, 0x4b, 0xa4, 0x82, 0xd5, 0x33, 0x42, 0xec, 0xdc, 0xbd, 0x38, 0x01, 0xee, 0x1f,
	0x83, 0xca, 0x7e, 0x6c, 0xc4, 0x53, 0xe7, 0x62, 0x3c, 0xa0, 0x51, 0xff, 0x24, 0x03, 0xc5, 0x30,
	0x00, 0x3d, 0x3a, 0x3a, 0x7f, 0x14, 0x54, 0x8e, 0x46, 0x1b, 0xff, 0x1d, 0xb7, 0x6a, 0x94, 0xfd,
	0x38, 0xab, 0x46, 0x4d, 0x28, 0xdd, 0x23, 0x07, 0x8f, 0x6d, 0xa7, 0xde, 0x7f, 0xae, 0x46, 0x1b,
	0x46, 0x7c, 0x90, 0x81, 0xa9, 0xc8, 0x02, 0xa3, 0x2f, 0x4b, 0x06, 0x8d, 0xfb, 0x83, 0xe7, 0x8f,
	0x97, 0x98, 0x3c, 0xd8, 0x7e, 0x44, 0x74, 0x8f, 0x5a, 0x94, 0xf0, 0x88, 0x85, 0x30, 0xc9, 0x56,
	0x3d, 0x82, 0x9c, 0x4b, 0x83, 0x12, 0xbe, 0xb0, 0x2f, 0xa5, 0x54, 0x71, 0x64, 0xd6, 0x3c, 0x71,
	0xf6, 0xb7, 0x11, 0x8b, 0x46, 0x98, 0x0c, 0xe4, 0xc0, 0x98, 0xcb, 0x12, 0x42, 0xb1, 0xa0, 0x77,
	0x47, 0x22, 0x8d, 0x71, 0xac, 0x4e, 0x0b, 0x79, 0x63, 0xfc, 0x37, 0x16, 0x92, 0xd4, 0x7f, 0x54,
	0x20, 0x7a, 0x68, 0x6a, 0x86, 0xeb, 0xa1, 0x2f, 0xf5, 0xe9, 0xb5, 0x72, 0x3c, 0xbd, 0xd2, 0xd1,
	0x4c, 0xab, 0x61, 0xa5, 0x5c, 0x40, 0x24, 0x9d, 0x1a, 0x90, 0x37, 0x3c, 0xd2, 0x72, 0xd9, 0x62,
	0xa7, 0x2f, 0x0f, 0x44, 0xa6, 0x2d, 0xa5, 0x26, 0x94, 0x35, 0xe6, 0x12, 0xd4, 0xbf, 0x2b, 0xc4,
	0x1e, 0x8f, 0x6d, 0xcb, 0x32, 0xe4, 0xed, 0xc7, 0x96, 0xc8, 0x21, 0x85, 0x01, 0x78, 0x40, 0x01,
	0x98, 0xc3, 0xd3, 0x94, 0xd8, 0xbe, 0xa2, 0xc0, 0x8c, 0x28, 0x5d, 0x6d, 0xea, 0x4d, 0x52, 0xef,
	0x98, 0xbe, 0x27, 0x5f, 0x49, 0x1d, 0x48, 0xe2, 0x8e, 0xe5, 0xf3, 0xe2, 0x87, 0x11, 0x47, 0x05,
	0xe0, 0xb8, 0x44, 0xb4, 0x06, 0x48, 0x73, 0x3c, 0x63, 0x47, 0xd3, 0xbd, 0x6a, 0x47, 0xdf, 0x25,
	0x1e, 0x33, 0x92, 0x3c, 0x03, 0x3a, 0xdb, 0xeb, 0x96, 0xd1, 0x52, 0x1f, 0x16, 0x27, 0x8c, 0xa0,
	0x27, 0xd2, 0xd4, 0xb6, 0xd9, 0x60, 0xee, 0x9f, 0xd9, 0x89, 0xac, 0x71, 0x10, 0xf6, 0x71, 0x68,
	0x0f, 0x8a, 0x0e, 0x71, 0xed, 0x8e, 0xa3, 0x13, 0x97, 0x55, 0xdd, 0x86, 0x09, 0x9b, 0xb1, 0xe0,
	0xc4, 0xce, 0xc7, 0x9c, 0x58, 0xce, 0xa2, 0x0f, 0x75, 0x71, 0x28, 0x0a, 0x3d, 0x82, 0x05, 0x7f,
	0x37, 0xf9, 0xc5, 0xa7, 0x68, 0x31, 0x99, 0x95, 0xf3, 0x8a, 0x55, 0xb5, 0xd7, 0x2d, 0x2f, 0xac,
	0x1f, 0x4a, 0x89, 0x8f, 0xe0, 0x84, 0x08, 0x5c, 0x08, 0x4c, 0x9e, 0x67, 0x3b, 0x71, 0x41, 0x45,
	0x26, 0xe8, 0x39, 0x31, 0xdd, 0x0b, 0x2b, 0x83, 0x49, 0xf1, 0x61, 0x7c, 0xd0, 0x6e, 0x58, 0xe8,
	0x04, 0x76, 0x2c, 0x6e, 0x0d, 0x93, 0xb2, 0x33, 0x1d, 0x06, 0xce, 0xb8, 0xaf, 0x5c, 0xea, 0x41,
	0xd1, 0x9f, 0x8b, 0x5b, 0x9a, 0x60, 0xe2, 0x96, 0x47, 0x50, 0x10, 0x0e, 0x57, 0xcd, 0x87, 0xba,
	0x38, 0x14, 0x84, 0xde, 0x86, 0x89, 0x30, 0xa2, 0x73, 0x4b, 0x93, 0x4c, 0x6e, 0xda, 0x3c, 0x2f,
	0x8c, 0x13, 0xb9, 0xaf, 0x12, 0x92, 0x27, 0x42, 0xb8, 0x8b, 0x65, 0x71, 0x68, 0x19, 0xe6, 0xea,
	0x64, 0x47, 0xeb, 0x98, 0x5e, 0x48, 0x52, 0x9a, 0x62, 0xab, 0xc7, 0xde, 0xb7, 0xad, 0xc4, 0x91,
	0xb8, 0x9f, 0x5e, 0xfd, 0x61, 0x1e, 0xe6, 0x13, 0xcc, 0x2b, 0xba, 0x0b, 0xc8, 0xde, 0x76, 0x89,
	0xb3, 0x47, 0xea, 0xb7, 0xf9, 0x4b, 0x65, 0x3f, 0x45, 0xc9, 0x56, 0xcf, 0x8b, 0xa9, 0xa1, 0x07,
	0x7d, 0x14, 0x38, 0x61, 0x54, 0x7f, 0xc9, 0x2d, 0x33, 0xfa, 0x92, 0x1b, 0x32, 0x61, 0x96, 0x02,
	0x96, 0xed, 0x56, 0xdb, 0x24, 0x54, 0xec, 0x92, 0x27, 0xcc, 0xd5, 0x49, 0xe4, 0xb0, 0x0a, 0x43,
	0x2d, 0xc6, 0x07, 0xf7, 0x71, 0x46, 0x0d, 0xc8, 0x99, 0x76, 0xc3, 0xcf, 0x43, 0xd3, 0x9b, 0x88,
	0x65, 0xdb, 0xf2, 0x34, 0x3a, 0xa1, 0x9a, 0xdd, 0x08, 0x5d, 0x68, 0xcd, 0x6e, 0xb8, 0x98, 0x09,
	0xa0, 0x06, 0x29, 0xdc, 0xd8, 0xf9, 0xa1, 0x36, 0x58, 0xb4, 0x46, 0x7b, 0xc4, 0xd6, 0x7e, 0x08,
	0xc5, 0x4e, 0xbb, 0xae, 0x79, 0xa4, 0xbe, 0xe4, 0x09, 0x43, 0x78, 0x12, 0x3d, 0xb2, 0xec, 0xf3,
	0x15, 0x9f, 0x01, 0x0e, 0x79, 0x21, 0x1d, 0x40, 0xb7, 0xad, 0xba, 0xc1, 0xf3, 0xf8, 0x71, 0xf6,
	0x44, 0x8b, 0xc7, 0xe3, 0xbc, 0xec, 0x8f, 0x0b, 0x43, 0x9c, 0x00, 0x44, 0x63, 0xed, 0xe0, 0x7f,
	0xf5, 0x02, 0x3c, 0x13, 0x6c, 0xea, 0xdb, 0x8e, 0xd6, 0x6e, 0x4a, 0xaf, 0x52, 0xd5, 0xbf, 0xc8,
	0x40, 0xb6, 0x56, 0x5b, 0x3f, 0x85, 0x58, 0xeb, 0xcb, 0x91, 0x58, 0xeb, 0x0b, 0x69, 0xf3, 0xec,
	0xda, 0xfa, 0xc0, 0x08, 0xab, 0x19, 0x8b, 0xb0, 0x6e, 0x0d, 0x21, 0xe3, 0xf0, 0xb8, 0xea, 0x03,
	0x05, 0xa6, 0x6a, 0xb5, 0xf5, 0x25, 0x9d, 0x46, 0xc3, 0x7e, 0x8e, 0xd9, 0xb6, 0x1d, 0x8f, 0xe9,
	0x2e, 0xcf, 0x73, 0xcc, 0x0d, 0xdb, 0xf1, 0x30, 0x83, 0xa2, 0xcb, 0x50, 0x60, 0xc6, 0x8a, 0x52,
	0x64, 0xc2, 0x17, 0xf9, 0xf7, 0x05, 0x0c, 0x07, 0x58, 0xb4, 0x0f, 0xa0, 0x31, 0xae, 0x5b, 0x07,
	0x6d, 0xdf, 0xb5, 0xbf, 0xe6, 0xeb, 0x75, 0x29, 0xc0, 0x3c, 0xe9, 0x96, 0xab, 0x29, 0x5b, 0x7b,
	0x2a, 0x21, 0x17, 0x2c, 0xc9, 0x52, 0xff, 0x41, 0x81, 0xf1, 0x5a, 0x6d, 0xfd, 0xa7, 0x2b, 0x42,
	0xfc, 0x3e, 0x5f, 0x28, 0xa9, 0x2b, 0xc2, 0xef, 0x6a, 0x50, 0x92, 0xba, 0x1a, 0x4e, 0xa9, 0x6d,
	0x86, 0x4e, 0xe6, 0xf6, 0xc6, 0x96, 0x48, 0xd3, 0x59, 0xf0, 0x85, 0x39, 0x08, 0xfb, 0x38, 0xf5,
	0x6b, 0x39, 0xb6, 0x1c, 0x1f, 0x59, 0x44, 0xfb, 0x22, 0xcc, 0x50, 0xdf, 0x64, 0x58, 0x8d, 0x4d,
	0xc3, 0xe3, 0xd9, 0x36, 0xaf, 0x56, 0xb2, 0x50, 0x74, 0x33, 0x8a, 0xc2, 0x71, 0xda, 0x68, 0x6c,
	0x98, 0x3b, 0xbd, 0xd8, 0xd0, 0x86, 0x31, 0xc6, 0xd1, 0xb7, 0xff, 0xb7, 0x87, 0x5a, 0x21, 0xf1,
	0x50, 0xec, 0x8d, 0xa0, 0x7f, 0xd4, 0x19, 0xc6, 0xc5, 0x42, 0x0c, 0x7a, 0x17, 0x26, 0x2d, 0xdb,
	0x33, 0x76, 0x0c, 0x51, 0x3e, 0x1e, 0x3b, 0xd9, 0x4b, 0xd6, 0xbe, 0x67, 0xbd, 0x2f, 0x31, 0x63,
	0x82, 0x67, 0x7b, 0xdd, 0xf2, 0xa4, 0x0c, 0xc5, 0x11, 0x81, 0xea, 0xd7, 0x73, 0x50, 0x0c, 0x2c,
	0xd2, 0x48, 0x43, 0x91, 0xb6, 0xec, 0x4e, 0xf9, 0x59, 0xac, 0x0e, 0xa5, 0xce, 0x98, 0xd1, 0x14,
	0x9a, 0x94, 0x1c, 0xe9, 0x65, 0x28, 0x10, 0xab, 0xde, 0xb6, 0x0d, 0xcb, 0x13, 0xbb, 0x8d, 0xd9,
	0xc1, 0x55, 0x01, 0xc3, 0x01, 0x16, 0xbd, 0x0e, 0x50, 0x27, 0x6d, 0xd3, 0x3e, 0x60, 0x3e, 0x37,
	0x77, 0x62, 0x9f, 0xcb, 0x8a, 0x4f, 0x2b, 0x01, 0x07, 0x2c, 0x71, 0xfb, 0x09, 0x77, 0xe7, 0x2e,
	0x4c, 0xca, 0xc5, 0x66, 0x74, 0x1d, 0x26, 0x1a, 0x0e, 0xd1, 0x3c, 0xe2, 0x6c, 0x35, 0x35, 0xbe,
	0x15, 0xa6, 0xc2, 0x80, 0xf9, 0x76, 0x88, 0xc2, 0x32, 0x1d, 0x6b, 0x7f, 0xa3, 0xa6, 0x9f, 0x8e,
	0xc9, 0xb0, 0x31, 0xa1, 0xc9, 0x16, 0x70, 0x1c, 0x50, 0xa8, 0x25, 0x38, 0x5b, 0xb3, 0xad, 0x06,
	0x8d, 0xd0, 0xc8, 0xbe, 0x87, 0x89, 0xed, 0x88, 0xf7, 0x05, 0xea, 0x37, 0x14, 0x98, 0x89, 0xf5,
	0xe4, 0x21, 0xd5, 0xb7, 0xa2, 0x49, 0x45, 0x35, 0x61, 0x06, 0x2f, 0x89, 0x77, 0x1e, 0x99, 0x28,
	0x89, 0xf4, 0x86, 0xe3, 0x7a, 0xd4, 0xa8, 0x09, 0xeb, 0xe4, 0x3f, 0xd8, 0x20, 0xc3, 0xa6, 0xfe,
	0x50, 0x81, 0xf9, 0x75, 0x63, 0x5f, 0xae, 0x5e, 0x33, 0x23, 0xea, 0xc1, 0x78, 0x5b, 0xe4, 0x26,
	0xbc, 0x96, 0x7b, 0x67, 0x64, 0xd5, 0xf1, 0x30, 0x17, 0xf3, 0x73, 0x13, 0x5f, 0x14, 0x4d, 0xd9,
	0x77, 0x34, 0xd3, 0xdc, 0xd6, 0xf4, 0x5d, 0x29, 0x31, 0xc9, 0x84, 0x29, 0xfb, 0x5a, 0x1f, 0x16,
	0x27, 0x8c, 0x50, 0xff, 0x5c, 0x81, 0x49, 0x76, 0x9e, 0xd6, 0x89, 0xe7, 0x18, 0xba, 0x8b, 0x9e,
	0x85, 0x6c, 0xfb, 0xfa, 0xf3, 0xec, 0x64, 0x28, 0xd5, 0x09, 0x21, 0x3f, 0xbb, 0x71, 0xfd, 0x79,
	0x4c, 0xe1, 0x0c, 0x7d, 0xe3, 0x3a, 0x4b, 0xef, 0x65, 0xf4, 0x8d, 0xeb, 0x98, 0xc2, 0x39, 0xfa,
	0x06, 0xdb, 0xfc, 0x11, 0xf4, 0x0d, 0x8a, 0xbe, 0x81, 0x56, 0x60, 0xd6, 0xb3, 0x3d, 0xcd, 0xdc,
	0x70, 0x48, 0xdd, 0xd0, 0xf9, 0x76, 0x2e, 0xb0, 0xb8, 0xa5, 0x24, 0x68, 0x67, 0xb7, 0x62, 0x78,
	0xdc, 0x37, 0x42, 0xfd, 0x5a, 0x16, 0x66, 0xe3, 0x76, 0xf6, 0x18, 0xf5, 0xd6, 0x03, 0x98, 0x78,
	0x33, 0x8c, 0x50, 0x87, 0x2c, 0xba, 0xc6, 0x5a, 0x13, 0xb9, 0x53, 0x94, 0x80, 0x58, 0x96, 0xc5,
	0xa2, 0x38, 0xcd, 0x6b, 0x8a, 0xbd, 0xc6, 0xa3, 0x38, 0xcd, 0x6b, 0x62, 0x06, 0xa5, 0x6e, 0x98,
	0xfe, 0xe5, 0x89, 0x8e, 0x70, 0xc3, 0x14, 0xed, 0x62, 0x0e, 0x47, 0x8b, 0x30, 0xb6, 0x63, 0x3b,
	0x2d, 0xcd, 0x13, 0x65, 0x95, 0x73, 0xd4, 0x0a, 0xae, 0x31, 0xc8, 0x93, 0x6e, 0xb9, 0xb8, 0xb4,
	0x71, 0x87, 0xff, 0xc0, 0x82, 0x0c, 0x11, 0xff, 0xa0, 0x8c, 0x7d, 0x34, 0xaf, 0xd4, 0x45, 0x4f,
	0xb1, 0x09, 0xc5, 0x80, 0x64, 0xe8, 0xb6, 0xd0, 0xb2, 0x1c, 0x22, 0x15, 0x13, 0x3a, 0x98, 0x7f,
	0x27, 0x0b, 0x13, 0x92, 0x3f, 0x38, 0xc6, 0x8a, 0x7f, 0x09, 0xa6, 0xb8, 0x79, 0xa6, 0x5e, 0x02,
	0x93, 0x1d, 0xb1, 0xe6, 0xcf, 0x49, 0xa6, 0xb3, 0xa2, 0xdb, 0x0e, 0x09, 0xf3, 0x8d, 0xb0, 0x69,
	0x81, 0x25, 0xc3, 0x2b, 0xf2, 0x68, 0x1c, 0x65, 0x86, 0x36, 0x01, 0x58, 0xf4, 0xa2, 0x13, 0xca,
	0x3a, 0x7b, 0x7c, 0xd6, 0xcc, 0x87, 0x6c, 0x06, 0x43, 0xb1, 0xc4, 0x06, 0xdd, 0x84, 0xe9, 0x1d,
	0xcd, 0x30, 0x3b, 0x0e, 0x59, 0x27, 0xae, 0xab, 0x35, 0xfc, 0x58, 0x9d, 0xbd, 0x73, 0x59, 0x8b,
	0x60, 0x70, 0x8c, 0x12, 0x79, 0x30, 0xd9, 0x92, 0x8e, 0xb2, 0x68, 0xba, 0x59, 0x1e, 0x66, 0xf1,
	0x05, 0x2b, 0xd1, 0x82, 0xcd, 0x7f, 0xe0, 0x88, 0x14, 0xf5, 0x75, 0x80, 0xf0, 0xed, 0x21, 0xf5,
	0xc4, 0x3a, 0x4f, 0xb7, 0x5d, 0x7f, 0x61, 0xa8, 0xe9, 0x17, 0x29, 0xb8, 0x8b, 0x03, 0x2c, 0x52,
	0x61, 0x8c, 0xbc, 0xd9, 0xd1, 0x4c, 0x57, 0x2c, 0x38, 0x7b, 0x6d, 0xb1, 0xca, 0x20, 0x58, 0x60,
	0xd4, 0xbf, 0xcf, 0xc1, 0x74, 0xcc, 0xdc, 0x1e, 0xbd, 0xea, 0xaf, 0x41, 0x49, 0xbc, 0x22, 0x78,
	0x40, 0xbd, 0x09, 0x26, 0x26, 0x0b, 0x4b, 0xdc, 0xa6, 0xd1, 0x66, 0xa2, 0x0a, 0xd5, 0x8b, 0xbd,
	0x6e, 0xb9, 0x74, 0x67, 0x00, 0x0d, 0x1e, 0x38, 0x9a, 0xc6, 0xb6, 0x02, 0xb7, 0x1e, 0xf6, 0x45,
	0x52, 0x86, 0x2c, 0xb6, 0xbd, 0x13, 0x45, 0xe1, 0x38, 0x2d, 0xaa, 0x08, 0xd7, 0xc4, 0x57, 0xf4,
	0xbc, 0xfc, 0x2a, 0x3e, 0x7c, 0x48, 0xc9, 0x51, 0x11, 0xc8, 0x51, 0xaf, 0x28, 0xd6, 0x31, 0x6d,
	0x44, 0xba, 0x45, 0xf6, 0x3d, 0xf9, 0xf5, 0x9b, 0xc8, 0x4d, 0xa8, 0xbb, 0x65, 0xec, 0xd1, 0x3b,
	0x50, 0x70, 0x89, 0xe5, 0xd1, 0xad, 0x29, 0xec, 0xc5, 0x66, 0x4a, 0x51, 0x9b, 0x82, 0xcd, 0x43,
	0xc3, 0xaa, 0xdb, 0x8f, 0x63, 0xb5, 0x36, 0xb6, 0x0f, 0x7c, 0x0a, 0x1c, 0x88, 0x44, 0xbb, 0x90,
	0x6f, 0x51, 0xb7, 0x2a, 0x7a, 0x29, 0xd3, 0xbe, 0xbe, 0x48, 0x70, 0xcd, 0xc2, 0x86, 0xb0, 0x77,
	0xb8, 0x5c, 0x86, 0xfa, 0x6f, 0x45, 0x98, 0xe3, 0xd9, 0xb1, 0xf4, 0xd2, 0x09, 0xfd, 0x9a, 0x02,
	0x10, 0xf6, 0xb7, 0x88, 0xcc, 0x34, 0x6d, 0xdf, 0x43, 0xd8, 0x3a, 0xd3, 0xf7, 0x66, 0x4b, 0x9c,
	0xfc, 0x80, 0x00, 0x4b, 0x52, 0xd1, 0x1e, 0x8c, 0xef, 0xf2, 0x37, 0x62, 0x43, 0xf6, 0x73, 0x0f,
	0x7a, 0xaf, 0xc6, 0x0f, 0xb1, 0xc0, 0x62, 0x5f, 0x18, 0x8d, 0x5f, 0x1c, 0x1e, 0x77, 0x09, 0x1b,
	0x96, 0xb6, 0xb3, 0x34, 0x39, 0x90, 0x13, 0x69, 0x28, 0x07, 0x60, 0x5f, 0x14, 0xfa, 0x8e, 0x02,
	0x28, 0x68, 0x49, 0x7a, 0xd0, 0xf6, 0x8c, 0x16, 0x6b, 0xcf, 0xe3, 0x01, 0xf9, 0x2b, 0x43, 0xee,
	0xbf, 0xd5, 0x3e, 0xc6, 0xbc, 0xab, 0x87, 0xc6, 0x45, 0xfd, 0x38, 0x9c, 0x30, 0x11, 0xf4, 0x26,
	0x14, 0x4d, 0xb3, 0xc5, 0xf3, 0x7b, 0x71, 0x00, 0x57, 0xd2, 0x97, 0x7d, 0xc2, 0x3a, 0x81, 0xe8,
	0xad, 0xf4, 0x41, 0x38, 0x94, 0x82, 0xde, 0x81, 0x49, 0x5d, 0xba, 0x6b, 0x21, 0xce, 0xe2, 0xed,
	0xd4, 0x9d, 0x01, 0xd1, 0x6b, 0x1b, 0x3c, 0x1f, 0x94, 0xa1, 0x38, 0x22, 0x0e, 0xfd, 0x96, 0x02,
	0x93, 0x3b, 0x52, 0xbf, 0x83, 0x38, 0x8f, 0x5b, 0xa9, 0xa3, 0xd9, 0x43, 0x5a, 0x27, 0xf8, 0x64,
	0x64, 0x12, 0x1c, 0x91, 0x8d, 0xbe, 0xad, 0xc0, 0x2c, 0x89, 0xf5, 0xd1, 0x89, 0xc6, 0xe7, 0xd7,
	0xd2, 0xf6, 0xee, 0x1c, 0xd5, 0x96, 0xc7, 0xeb, 0xd2, 0x71, 0x32, 0xdc, 0x37, 0x0f, 0xf4, 0x47,
	0x0a, 0xcc, 0x7b, 0x46, 0x8b, 0x3c, 0x24, 0x46, 0xa3, 0xe9, 0x85, 0x0a, 0xe3, 0x7d, 0xd2, 0x5f,
	0x4c, 0x6b, 0xa7, 0xfb, 0x39, 0xf6, 0x4f, 0x91, 0x46, 0x7e, 0xf3, 0x09, 0x94, 0x38, 0x69, 0x42,
	0xea, 0xf7, 0xb2, 0x30, 0x13, 0xbf, 0x43, 0xf3, 0xc7, 0x0a, 0x9c, 0xd3, 0x93, 0xef, 0xd7, 0x0c,
	0xd9, 0x1c, 0x3b, 0xe0, 0xd6, 0x4e, 0xb5, 0x2c, 0x7c, 0xf4, 0xa0, 0x6b, 0x3d, 0x78, 0xd0, 0x7c,
	0x50, 0x1b, 0xc6, 0x1c, 0xbb, 0xe3, 0x11, 0xbf, 0x43, 0x22, 0x6d, 0x97, 0x0c, 0x66, 0x4c, 0xe2,
	0xf3, 0x62, 0x01, 0x07, 0x47, 0x61, 0x21, 0x07, 0xfd, 0xba, 0x02, 0x13, 0x6e, 0x67, 0xfb, 0xe5,
	0x0e, 0x71, 0x83, 0xe4, 0x30, 0xfd, 0xb5, 0x87, 0xcd, 0x90, 0x53, 0x62, 0xbe, 0x20, 0xe1, 0xb1,
	0x2c, 0x56, 0xfd, 0x6f, 0x05, 0xe6, 0xa5, 0x11, 0x5b, 0xb6, 0x6d, 0xfa, 0x7d, 0x8f, 0x91, 0x1c,
	0xe6, 0xa3, 0x59, 0xb0, 0x20, 0x17, 0x1e, 0x98, 0xcf, 0xf8, 0x41, 0x58, 0x66, 0x60, 0x10, 0x96,
	0x32, 0xc9, 0xee, 0x29, 0xf0, 0x74, 0xd8, 0x3e, 0x1f, 0xb6, 0x10, 0xa2, 0x2b, 0xf1, 0x26, 0xbe,
	0xe2, 0x21, 0xcd, 0x77, 0x15, 0x80, 0xe0, 0x87, 0x2b, 0x9a, 0x43, 0x98, 0xeb, 0x0d, 0xa8, 0x5d,
	0x2c, 0x51, 0xa0, 0x16, 0x8c, 0x39, 0x4c, 0x8c, 0x58, 0xef, 0x11, 0x75, 0x91, 0x06, 0x05, 0x2b,
	0x0e, 0xc3, 0x42, 0x88, 0xfa, 0x24, 0x2b, 0x3f, 0xa4, 0xd4, 0xaf, 0xf9, 0x42, 0xa4, 0x5f, 0xf3,
	0x53, 0xb1, 0x7e, 0xcd, 0xbe, 0x31, 0x23, 0xbc, 0x35, 0x15, 0xd5, 0x58, 0xf6, 0x48, 0x8d, 0xed,
	0xd1, 0xa0, 0x81, 0xce, 0xc1, 0x7f, 0x3b, 0x37, 0xfc, 0x2d, 0x8a, 0x50, 0x79, 0x61, 0xd9, 0x83,
	0xff, 0x76, 0xb1, 0x2f, 0x0c, 0x7d, 0x45, 0xba, 0xb8, 0xc5, 0x0b, 0xb5, 0xaf, 0x8d, 0xf0, 0xfa,
	0xc6, 0x69, 0x34, 0xa9, 0x7e, 0x2f, 0x03, 0xe7, 0x06, 0x5c, 0x23, 0x40, 0x9f, 0x11, 0xbd, 0xe7,
	0x7c, 0xfd, 0x4b, 0x52, 0xef, 0xf9, 0xa4, 0x3f, 0x24, 0xec, 0x35, 0x3f, 0x8d, 0x77, 0x0a, 0xbf,
	0xa9, 0xc0, 0x8c, 0x16, 0xbd, 0xda, 0x3c, 0x64, 0x97, 0x51, 0xc2, 0x45, 0x69, 0x9e, 0x3d, 0xc5,
	0x10, 0x38, 0x2e, 0x57, 0xfd, 0x4b, 0x76, 0x6a, 0xfa, 0x6f, 0x6d, 0xa2, 0xdf, 0x3b, 0xd5, 0xab,
	0x1e, 0xe7, 0x4e, 0x74, 0xcd, 0xa3, 0x23, 0xdf, 0x58, 0xcd, 0x0c, 0x15, 0x46, 0x46, 0x5b, 0x3c,
	0xa5, 0xb7, 0x19, 0xfd, 0xd7, 0x55, 0xd1, 0x6f, 0x28, 0x30, 0xdd, 0x96, 0x83, 0x07, 0x57, 0x5c,
	0xe0, 0x7b, 0x69, 0x98, 0xbe, 0x09, 0x99, 0x61, 0x68, 0x59, 0x22, 0x60, 0x17, 0xc7, 0xe4, 0xaa,
	0xdf, 0xca, 0xc2, 0x54, 0xb4, 0x01, 0xf6, 0xbb, 0x0a, 0x9c, 0xd1, 0x93, 0xfa, 0x56, 0xc5, 0x8a,
	0x8d, 0xb6, 0x17, 0xf6, 0x59, 0x31, 0xcf, 0xe4, 0xeb, 0xbb, 0x38, 0x79, 0x26, 0xc8, 0x8a, 0x45,
	0x1e, 0x77, 0x87, 0x8a, 0x3c, 0x12, 0x6e, 0xf5, 0xc6, 0xe2, 0x0e, 0x0b, 0xc6, 0x76, 0x58, 0xaf,
	0xf0, 0x90, 0xc7, 0x2b, 0xa1, 0xe1, 0x98, 0xcb, 0x13, 0x08, 0x21, 0x45, 0xfd, 0x17, 0x05, 0xe6,
	0x02, 0xaa, 0x20, 0xbc, 0x78, 0xa7, 0xff, 0x7e, 0xf5, 0x68, 0x17, 0xe3, 0xf0, 0x5d, 0x7b, 0x31,
	0x12, 0x55, 0x14, 0x46, 0x13, 0x51, 0xfc, 0x8f, 0x02, 0x67, 0x12, 0xe3, 0x3f, 0x64, 0x43, 0xde,
	0xb3, 0x6d, 0xd3, 0x2f, 0xdb, 0xdf, 0x1d, 0xbe, 0x12, 0xec, 0x2b, 0x32, 0x2c, 0x97, 0x52, 0x88,
	0x8b, 0xb9, 0x1c, 0xd4, 0x82, 0x82, 0x4b, 0x4c, 0xb9, 0xe5, 0x77, 0x39, 0x75, 0xa2, 0xcb, 0xd9,
	0xc8, 0x85, 0x15, 0x0e, 0xc1, 0x81, 0x08, 0xf5, 0xbf, 0x14, 0x98, 0x4f, 0xd8, 0x7f, 0xa8, 0x15,
	0x7d, 0xee, 0x97, 0x86, 0xb5, 0x47, 0x9f, 0xac, 0xa7, 0xfe, 0x6b, 0x05, 0x26, 0x65, 0xc2, 0xc3,
	0x9c, 0xaa, 0x4f, 0x77, 0xba, 0x4e, 0xb5, 0x0c, 0xf9, 0x56, 0xc7, 0xf4, 0x0c, 0x51, 0x3b, 0xe4,
	0x04, 0x14, 0x80, 0x39, 0x5c, 0xfd, 0xc3, 0x0c, 0x2c, 0x1c, 0x5e, 0xca, 0xf8, 0x09, 0xb8, 0x41,
	0xb6, 0x41, 0x1c, 0x9d, 0x58, 0x9e, 0x61, 0x92, 0x41, 0x37, 0xc8, 0xd0, 0x8b, 0x30, 0xe3, 0x35,
	0x1d, 0xe2, 0x36, 0x6d, 0xb3, 0x2e, 0x18, 0x64, 0x19, 0x03, 0x16, 0x10, 0x6c, 0x45, 0x51, 0x38,
	0x4e, 0xcb, 0xc2, 0x68, 0x5f, 0x4d, 0x91, 0xfb, 0x05, 0x57, 0xa0, 0x18, 0x5c, 0x09, 0x10, 0x8d,
	0x33, 0x2c, 0x57, 0x08, 0xee, 0x0c, 0xe0, 0x10, 0x8f, 0x3e, 0x0b, 0x93, 0xec, 0x87, 0xff, 0x2d,
	0x0d, 0xde, 0x46, 0xc3, 0x8b, 0x25, 0x12, 0x1c, 0x47, 0xa8, 0xd0, 0xe7, 0x61, 0xea, 0xb1, 0xed,
	0xd4, 0x37, 0x49, 0x5b, 0x73, 0x34, 0x2f, 0xb8, 0x38, 0xcb, 0x5e, 0x1a, 0x3c, 0x94, 0x11, 0x38,
	0x4a, 0x87, 0xd6, 0x00, 0xd1, 0x7f, 0x1b, 0x8e, 0xd6, 0x6e, 0x86, 0xa3, 0xa5, 0x56, 0xdb, 0x8d,
	0x3e, 0x2c, 0x4e, 0x18, 0x81, 0xf6, 0xa0, 0xe0, 0x8a, 0x67, 0x16, 0xe5, 0xa9, 0xda, 0x90, 0x45,
	0xb3, 0x2d, 0x7b, 0x97, 0x58, 0x41, 0x98, 0xc3, 0x8f, 0x97, 0x90, 0x80, 0x03, 0x59, 0x34, 0x03,
	0x9d, 0x6c, 0x4a, 0x17, 0x3b, 0x44, 0x95, 0x2a, 0x6d, 0xad, 0x72, 0xd0, 0x1d, 0x11, 0xbe, 0x00,
	0x32, 0x16, 0x47, 0xc4, 0xaa, 0xef, 0xc2, 0x99, 0xc4, 0x89, 0xa3, 0x1b, 0x91, 0x1c, 0xea, 0xd3,
	0xb1, 0x1c, 0xaa, 0x7f, 0x90, 0x94, 0x44, 0x5d, 0x81, 0xa2, 0x1b, 0x2c, 0x49, 0x26, 0xcc, 0x31,
	0xc3, 0x95, 0x08, 0xf1, 0xea, 0xdf, 0x28, 0x70, 0xf1, 0xb0, 0x7a, 0x77, 0x64, 0x85, 0x94, 0x53,
	0x5c, 0xa1, 0x0a, 0xc0, 0x63, 0x36, 0x1f, 0xb6, 0xfd, 0xa5, 0x2f, 0xca, 0x3c, 0x0c, 0xa0, 0x58,
	0xa2, 0x50, 0x57, 0xe1, 0xc2, 0x21, 0x25, 0x6b, 0xf4, 0xb3, 0x30, 0xa6, 0xcb, 0x67, 0x33, 0x48,
	0x6a, 0xc5, 0xb1, 0x14, 0x58, 0xf5, 0xb7, 0xb3, 0x70, 0x7e, 0x70, 0xbd, 0xe3, 0xf4, 0x9d, 0xed,
	0xa0, 0xac, 0x20, 0xf3, 0x09, 0xc8, 0x0a, 0x02, 0x27, 0x93, 0xfd, 0xc8, 0x3e, 0xf7, 0xf4, 0xf5,
	0x2c, 0xcc, 0xc6, 0xdf, 0xfc, 0xa0, 0xe7, 0x23, 0x67, 0xe3, 0xa2, 0x74, 0x2e, 0x22, 0xb4, 0xd2,
	0x91, 0xe8, 0x48, 0xef, 0x86, 0x32, 0x43, 0x7d, 0x2e, 0x21, 0xc9, 0x52, 0x0f, 0x7c, 0x27, 0x64,
	0xd0, 0xdd, 0xb2, 0x4b, 0xfc, 0x68, 0x38, 0x6d, 0x88, 0xc2, 0x0e, 0x4c, 0x44, 0x60, 0x91, 0xef,
	0x93, 0x5d, 0x62, 0x61, 0x2e, 0x01, 0x11, 0xc8, 0xe9, 0xfe, 0x7d, 0xef, 0x61, 0xaa, 0xed, 0xd1,
	0xaf, 0x40, 0xf1, 0xe8, 0x75, 0x99, 0xc5, 0x15, 0x94, 0xbd, 0xfa, 0x5d, 0x05, 0x3e, 0x75, 0x9c,
	0x0a, 0xef, 0x80, 0x3e, 0xc2, 0x7b, 0xa2, 0x8f, 0xf0, 0x0a, 0x14, 0x3d, 0xa3, 0x45, 0x56, 0x88,
	0xae, 0x1d, 0x08, 0x6f, 0xcb, 0x4c, 0xd4, 0x96, 0x0f, 0xc4, 0x21, 0x9e, 0x5a, 0x02, 0x53, 0x73,
	0x3d, 0xde, 0x97, 0x29, 0xa2, 0x0d, 0x66, 0x09, 0x6a, 0x01, 0x14, 0x4b, 0x14, 0xea, 0xf7, 0x33,
	0x30, 0xd7, 0xa7, 0xb2, 0x4f, 0xb4, 0x37, 0xed, 0xf3, 0x46, 0xb9, 0x8f, 0xc7, 0x1b, 0xfd, 0xbb,
	0x02, 0x33, 0xb1, 0x6b, 0x78, 0xe8, 0x55, 0x38, 0x5b, 0x4f, 0xbe, 0x65, 0x12, 0xbd, 0x8e, 0x7d,
	0x76, 0xc0, 0x0d, 0x93, 0x01, 0xa3, 0x93, 0x42, 0xbf, 0xcc, 0xe9, 0x86, 0x7e, 0xea, 0xef, 0xe7,
	0x61, 0x3e, 0xe9, 0x3b, 0x72, 0xa7, 0xf9, 0xf9, 0x88, 0x8f, 0x5f, 0x0d, 0x47, 0x7c, 0x48, 0xe2,
	0xdb, 0x0a, 0x4c, 0xb5, 0x34, 0x4f, 0x6f, 0xae, 0x47, 0x2f, 0x4f, 0xff, 0xf2, 0xe8, 0x3e, 0x10,
	0x56, 0x59, 0x97, 0xf9, 0xf3, 0xaa, 0xe5, 0x19, 0x31, 0xf9, 0xa9, 0x08, 0x0e, 0x47, 0xa7, 0x82,
	0xae, 0xc2, 0x84, 0xd6, 0xf1, 0xec, 0x75, 0xe2, 0x34, 0x0c, 0xab, 0xc1, 0x22, 0xc8, 0x02, 0x7f,
	0x27, 0xb1, 0x14, 0x82, 0xb1, 0x4c, 0x83, 0x4c, 0xc8, 0xd1, 0x9f, 0x22, 0xe0, 0x4b, 0xeb, 0x40,
	0x07, 0x7c, 0x82, 0x90, 0x6b, 0x8f, 0x22, 0x31, 0x93, 0x72, 0xfe, 0x16, 0xa0, 0xfe, 0x87, 0x3b,
	0x51, 0xa1, 0xf5, 0xaf, 0x32, 0x30, 0x15, 0xf9, 0x16, 0x50, 0xaa, 0xcf, 0x21, 0xdc, 0x1c, 0x50,
	0x58, 0x47, 0xc7, 0x28, 0xaa, 0xbf, 0x1d, 0xd6, 0xaa, 0x87, 0xfb, 0x7c, 0x56, 0xe4, 0x31, 0x4e,
	0xa1, 0x48, 0x5d, 0xfd, 0xe2, 0xfb, 0x1f, 0x2e, 0x3c, 0xf5, 0x83, 0x0f, 0x17, 0x9e, 0xfa, 0xd1,
	0x87, 0x0b, 0x4f, 0xbd, 0xd7, 0x5b, 0x50, 0xde, 0xef, 0x2d, 0x28, 0x3f, 0xe8, 0x2d, 0x28, 0x3f,
	0xea, 0x2d, 0x28, 0xff, 0xd4, 0x5b, 0x50, 0xbe, 0xf9, 0xcf, 0x0b, 0x4f, 0xbd, 0x7e, 0x3d, 0xd5,
	0x17, 0x4b, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x10, 0x80, 0x16, 0x1a, 0xe9, 0x54, 0x00, 0x00,
}

func (m *AnswerFilteringSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnswerFilteringSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnswerFilteringSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Model != nil {
		{
			size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AutoVectorRetrieverSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoVectorRetrieverSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoVectorRetrieverSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetadataInfo) > 0 {
		for iNdEx := len(m.MetadataInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetadataInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MaxTopK != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxTopK))
		i--
		dAtA[i] = 0x18
	}
	if m.Model != nil {
		{
			size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CodeSplitterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeSplitterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodeSplitterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxChars != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxChars))
		i--
		dAtA[i] = 0x20
	}
	if m.ChunkLinesOverlap != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkLinesOverlap))
		i--
		dAtA[i] = 0x18
	}
	if m.ChunkLines != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkLines))
		i--
		dAtA[i] = 0x10
	}
	i -= len(m.Language)
	copy(dAtA[i:], m.Language)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Language)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CohereRerankSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CohereRerankSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CohereRerankSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopN != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TopN))
		i--
		dAtA[i] = 0x10
	}
	i -= len(m.ConnectionName)
	copy(dAtA[i:], m.ConnectionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConnectionName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConcreteQueryEngineSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConcreteQueryEngineSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConcreteQueryEngineSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Retriever != nil {
		{
			size, err := m.Retriever.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConcreteRetrieverSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConcreteRetrieverSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConcreteRetrieverSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DocumentSummary != nil {
		{
			size, err := m.DocumentSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Vector != nil {
		{
			size, err := m.Vector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DatabaseReaderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatabaseReaderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatabaseReaderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		keysForOptions := make([]string, 0, len(m.Options))
		for k := range m.Options {
			keysForOptions = append(keysForOptions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
		for iNdEx := len(keysForOptions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Options[string(keysForOptions[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForOptions[iNdEx])
			copy(dAtA[i:], keysForOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.Query)
	copy(dAtA[i:], m.Query)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Query)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ConnectionName)
	copy(dAtA[i:], m.ConnectionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConnectionName)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DocumentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Repository != nil {
		{
			size, err := m.Repository.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Web != nil {
		{
			size, err := m.Web.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Database != nil {
		{
			size, err := m.Database.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.EmbeddingModel != nil {
		{
			size, err := m.EmbeddingModel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.NodeParser != nil {
		i -= len(*m.NodeParser)
		copy(dAtA[i:], *m.NodeParser)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.NodeParser)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Indexes) > 0 {
		for iNdEx := len(m.Indexes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Indexes[iNdEx])
			copy(dAtA[i:], m.Indexes[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Indexes[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.RefreshPeriod != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.RefreshPeriod))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Metadata) > 0 {
		keysForMetadata := make([]string, 0, len(m.Metadata))
		for k := range m.Metadata {
			keysForMetadata = append(keysForMetadata, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
		for iNdEx := len(keysForMetadata) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Metadata[string(keysForMetadata[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForMetadata[iNdEx])
			copy(dAtA[i:], keysForMetadata[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForMetadata[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DocumentStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastRefreshAt != nil {
		{
			size, err := m.LastRefreshAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Flagged != nil {
		i--
		if *m.Flagged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LastError != nil {
		i -= len(*m.LastError)
		copy(dAtA[i:], *m.LastError)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.LastError)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Nodes))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DocumentSummaryIndexSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentSummaryIndexSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentSummaryIndexSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Embedding != nil {
		{
			size, err := m.Embedding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ResponseSynthesizer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DocumentSummaryRetrieverSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentSummaryRetrieverSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentSummaryRetrieverSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mode != nil {
		i -= len(*m.Mode)
		copy(dAtA[i:], *m.Mode)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Mode)))
		i--
		dAtA[i] = 0x22
	}
	if m.TopK != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TopK))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EmbeddingRecencyPostProcessorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmbeddingRecencyPostProcessorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmbeddingRecencyPostProcessorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SimilarityCutoff != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.SimilarityCutoff))))
		i--
		dAtA[i] = 0x15
	}
	{
		size, err := m.EmbeddingModel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ExtensionFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtensionFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtensionFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Exclude) > 0 {
		for iNdEx := len(m.Exclude) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Exclude[iNdEx])
			copy(dAtA[i:], m.Exclude[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Exclude[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Include) > 0 {
		for iNdEx := len(m.Include) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Include[iNdEx])
			copy(dAtA[i:], m.Include[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Include[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FileLocationReaderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileLocationReaderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileLocationReaderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FileReaderSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Url != nil {
		i -= len(*m.Url)
		copy(dAtA[i:], *m.Url)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *FileReaderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileReaderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileReaderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		keysForOptions := make([]string, 0, len(m.Options))
		for k := range m.Options {
			keysForOptions = append(keysForOptions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
		for iNdEx := len(keysForOptions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Options[string(keysForOptions[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForOptions[iNdEx])
			copy(dAtA[i:], keysForOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FilteredNodeParser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilteredNodeParser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilteredNodeParser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.NodeParser)
	copy(dAtA[i:], m.NodeParser)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NodeParser)))
	i--
	dAtA[i] = 0x2a
	if len(m.Metadata) > 0 {
		keysForMetadata := make([]string, 0, len(m.Metadata))
		for k := range m.Metadata {
			keysForMetadata = append(keysForMetadata, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
		for iNdEx := len(keysForMetadata) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Metadata[string(keysForMetadata[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForMetadata[iNdEx])
			copy(dAtA[i:], keysForMetadata[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForMetadata[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Name != nil {
		{
			size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Length != nil {
		{
			size, err := m.Length.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Extension != nil {
		{
			size, err := m.Extension.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FixedRecencyPostProcessorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedRecencyPostProcessorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedRecencyPostProcessorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopK != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TopK))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FusionRetrieverSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FusionRetrieverSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FusionRetrieverSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReciprocalRank != nil {
		i--
		if *m.ReciprocalRank {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Queries != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Queries))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Retrievers) > 0 {
		for iNdEx := len(m.Retrievers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Retrievers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HierarchicalSplitterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HierarchicalSplitterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HierarchicalSplitterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChunkSizes) > 0 {
		for iNdEx := len(m.ChunkSizes) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintGenerated(dAtA, i, uint64(m.ChunkSizes[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *IndexReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != nil {
		i -= len(*m.Index)
		copy(dAtA[i:], *m.Index)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Index)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.KnowledgeBaseName)
	copy(dAtA[i:], m.KnowledgeBaseName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KnowledgeBaseName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IndexSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DocumentSummary != nil {
		{
			size, err := m.DocumentSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Vector != nil {
		{
			size, err := m.Vector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KeywordPostProcessorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeywordPostProcessorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeywordPostProcessorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Exclude) > 0 {
		for iNdEx := len(m.Exclude) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Exclude[iNdEx])
			copy(dAtA[i:], m.Exclude[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Exclude[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Include) > 0 {
		for iNdEx := len(m.Include) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Include[iNdEx])
			copy(dAtA[i:], m.Include[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Include[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *KnowledgeBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KnowledgeBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KnowledgeBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KnowledgeBaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KnowledgeBaseList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KnowledgeBaseList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KnowledgeBaseSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KnowledgeBaseSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KnowledgeBaseSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultNodeParser != nil {
		i -= len(*m.DefaultNodeParser)
		copy(dAtA[i:], *m.DefaultNodeParser)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DefaultNodeParser)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.NodeParsers) > 0 {
		for iNdEx := len(m.NodeParsers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeParsers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Documents) > 0 {
		for iNdEx := len(m.Documents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Documents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Indexes) > 0 {
		for iNdEx := len(m.Indexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Indexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	i -= len(m.DocumentStoreConnectionName)
	copy(dAtA[i:], m.DocumentStoreConnectionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DocumentStoreConnectionName)))
	i--
	dAtA[i] = 0x4a
	if m.MetadataDatabaseConnectionName != nil {
		i -= len(*m.MetadataDatabaseConnectionName)
		copy(dAtA[i:], *m.MetadataDatabaseConnectionName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.MetadataDatabaseConnectionName)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.LabName != nil {
		i -= len(*m.LabName)
		copy(dAtA[i:], *m.LabName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.LabName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ArtifactBucketName != nil {
		i -= len(*m.ArtifactBucketName)
		copy(dAtA[i:], *m.ArtifactBucketName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ArtifactBucketName)))
		i--
		dAtA[i] = 0x22
	}
	if m.RefreshSchedule != nil {
		{
			size, err := m.RefreshSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KnowledgeBaseStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KnowledgeBaseStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KnowledgeBaseStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Documents) > 0 {
		for iNdEx := len(m.Documents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Documents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LastCompletionAt != nil {
		{
			size, err := m.LastCompletionAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LastRefreshAt != nil {
		{
			size, err := m.LastRefreshAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KnowledgeGraphQueryEngine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KnowledgeGraphQueryEngine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KnowledgeGraphQueryEngine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LLM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LLM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LLM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LLMAccessSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LLMAccessSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LLMAccessSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.AccessType)
	copy(dAtA[i:], m.AccessType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AccessType)))
	i--
	dAtA[i] = 0x22
	if m.NodePort != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.NodePort))
		i--
		dAtA[i] = 0x10
	}
	if m.Port != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LLMList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LLMList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LLMList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LLMRerankSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LLMRerankSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LLMRerankSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RankGPT != nil {
		i--
		if *m.RankGPT {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Model != nil {
		{
			size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TopN != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TopN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LLMSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LLMSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LLMSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Notification != nil {
		{
			size, err := m.Notification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Models) > 0 {
		for iNdEx := len(m.Models) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Models[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ServingSiteName != nil {
		i -= len(*m.ServingSiteName)
		copy(dAtA[i:], *m.ServingSiteName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ServingSiteName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LLMStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LLMStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LLMStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DeployedAt != nil {
		{
			size, err := m.DeployedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Endpoint != nil {
		i -= len(*m.Endpoint)
		copy(dAtA[i:], *m.Endpoint)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Endpoint)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Models) > 0 {
		for iNdEx := len(m.Models) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Models[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *LengthFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LengthFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LengthFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.LessThan))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.GreaterThan))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *LongContextReorderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongContextReorderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongContextReorderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MetadataKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataKeyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MixedNodeParserSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixedNodeParserSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixedNodeParserSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FallbackNodeParser != nil {
		i -= len(*m.FallbackNodeParser)
		copy(dAtA[i:], *m.FallbackNodeParser)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FallbackNodeParser)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Parsers) > 0 {
		for iNdEx := len(m.Parsers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parsers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModelMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalPredictions))
	i--
	dAtA[i] = 0x40
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.P99))))
	i--
	dAtA[i] = 0x31
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.P95))))
	i--
	dAtA[i] = 0x29
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.P50))))
	i--
	dAtA[i] = 0x21
	return len(dAtA) - i, nil
}

func (m *ModelServingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelServingSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelServingSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Format != nil {
		i -= len(*m.Format)
		copy(dAtA[i:], *m.Format)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Format)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Paths) > 0 {
		for iNdEx := len(m.Paths) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Paths[iNdEx])
			copy(dAtA[i:], m.Paths[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Paths[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if m.QueryEngine != nil {
		{
			size, err := m.QueryEngine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Model != nil {
		i -= len(*m.Model)
		copy(dAtA[i:], *m.Model)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Model)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.ConnectionName)
	copy(dAtA[i:], m.ConnectionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConnectionName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metrics != nil {
		{
			size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FailureMessage != nil {
		i -= len(*m.FailureMessage)
		copy(dAtA[i:], *m.FailureMessage)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FailureMessage)))
		i--
		dAtA[i] = 0x22
	}
	if m.ServiceRef != nil {
		{
			size, err := m.ServiceRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DeploymentRef != nil {
		{
			size, err := m.DeploymentRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NameFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Equals != nil {
		i -= len(*m.Equals)
		copy(dAtA[i:], *m.Equals)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Equals)))
		i--
		dAtA[i] = 0x12
	}
	if m.Contains != nil {
		i -= len(*m.Contains)
		copy(dAtA[i:], *m.Contains)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Contains)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeParserSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeParserSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeParserSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mixed != nil {
		{
			size, err := m.Mixed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Sentence != nil {
		{
			size, err := m.Sentence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.IncludeMetadata != nil {
		i--
		if *m.IncludeMetadata {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IncludeOrderRelationship != nil {
		i--
		if *m.IncludeOrderRelationship {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodePostProcessor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodePostProcessor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodePostProcessor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeWeightedRecency != nil {
		{
			size, err := m.TimeWeightedRecency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.EmbeddingRecency != nil {
		{
			size, err := m.EmbeddingRecency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.FixedRecency != nil {
		{
			size, err := m.FixedRecency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CohereRerank != nil {
		{
			size, err := m.CohereRerank.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LLMRerank != nil {
		{
			size, err := m.LLMRerank.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.EmbeddingOptimizer != nil {
		{
			size, err := m.EmbeddingOptimizer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Reorder != nil {
		{
			size, err := m.Reorder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Keyword != nil {
		{
			size, err := m.Keyword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Similarity != nil {
		{
			size, err := m.Similarity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEngineSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEngineSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEngineSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubQuestion != nil {
		{
			size, err := m.SubQuestion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Router != nil {
		{
			size, err := m.Router.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ConcreteQueryEngineSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEngineToolSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEngineToolSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEngineToolSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.QueryEngine.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RepositoryFileReader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryFileReader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryFileReader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reader.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Extensions) > 0 {
		for iNdEx := len(m.Extensions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Extensions[iNdEx])
			copy(dAtA[i:], m.Extensions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Extensions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Extension != nil {
		i -= len(*m.Extension)
		copy(dAtA[i:], *m.Extension)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Extension)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryReaderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryReaderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryReaderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		keysForOptions := make([]string, 0, len(m.Options))
		for k := range m.Options {
			keysForOptions = append(keysForOptions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
		for iNdEx := len(keysForOptions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Options[string(keysForOptions[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForOptions[iNdEx])
			copy(dAtA[i:], keysForOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Readers) > 0 {
		for iNdEx := len(m.Readers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Readers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Extensions) > 0 {
		for iNdEx := len(m.Extensions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Extensions[iNdEx])
			copy(dAtA[i:], m.Extensions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Extensions[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.ConnectionName)
	copy(dAtA[i:], m.ConnectionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConnectionName)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ResponseSynthesizerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSynthesizerSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSynthesizerSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnswerFiltering != nil {
		{
			size, err := m.AnswerFiltering.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Model != nil {
		{
			size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Mode != nil {
		i -= len(*m.Mode)
		copy(dAtA[i:], *m.Mode)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Mode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieverQueryEngine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieverQueryEngine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieverQueryEngine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PostProcessors) > 0 {
		for iNdEx := len(m.PostProcessors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PostProcessors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Retriever.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ResponseSynthesizer != nil {
		{
			size, err := m.ResponseSynthesizer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieverSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieverSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieverSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fusion != nil {
		{
			size, err := m.Fusion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Router != nil {
		{
			size, err := m.Router.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ConcreteRetrieverSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RetrieverToolSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieverToolSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieverToolSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x1a
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Retriever.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RouterQueryEngineSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouterQueryEngineSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouterQueryEngineSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Selector != nil {
		{
			size, err := m.Selector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tools) > 0 {
		for iNdEx := len(m.Tools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RouterRetrieverSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouterRetrieverSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouterRetrieverSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Selector != nil {
		{
			size, err := m.Selector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tools) > 0 {
		for iNdEx := len(m.Tools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SelectorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Multi != nil {
		i--
		if *m.Multi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Model != nil {
		{
			size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Mode != nil {
		i -= len(*m.Mode)
		copy(dAtA[i:], *m.Mode)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Mode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SentenceEmbeddingOptimizerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentenceEmbeddingOptimizerSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentenceEmbeddingOptimizerSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ThresholdCutoff != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.ThresholdCutoff))))
		i--
		dAtA[i] = 0x1d
	}
	if m.PercentileCutoff != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.PercentileCutoff))))
		i--
		dAtA[i] = 0x15
	}
	{
		size, err := m.EmbeddingModel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SentenceSplitterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentenceSplitterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentenceSplitterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hierarchical != nil {
		{
			size, err := m.Hierarchical.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Splitter != nil {
		{
			size, err := m.Splitter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ParagraphSeparator != nil {
		i -= len(*m.ParagraphSeparator)
		copy(dAtA[i:], *m.ParagraphSeparator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ParagraphSeparator)))
		i--
		dAtA[i] = 0x22
	}
	if m.WordSeparator != nil {
		i -= len(*m.WordSeparator)
		copy(dAtA[i:], *m.WordSeparator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.WordSeparator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChunkOverlap != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkOverlap))
		i--
		dAtA[i] = 0x10
	}
	if m.ChunkSize != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SentenceTokenizerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentenceTokenizerSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentenceTokenizerSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Separator != nil {
		i -= len(*m.Separator)
		copy(dAtA[i:], *m.Separator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Separator)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SentenceWindowNodeParserSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentenceWindowNodeParserSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentenceWindowNodeParserSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WindowSize != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.WindowSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Splitter != nil {
		{
			size, err := m.Splitter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimilarityPostProcessorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimilarityPostProcessorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimilarityPostProcessorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Cutoff))))
	i--
	dAtA[i] = 0x1d
	return len(dAtA) - i, nil
}

func (m *SubQuestionQueryEngineSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubQuestionQueryEngineSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubQuestionQueryEngineSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Model != nil {
		{
			size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ResponseSynthesizer != nil {
		{
			size, err := m.ResponseSynthesizer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tools) > 0 {
		for iNdEx := len(m.Tools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TextSplitterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextSplitterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextSplitterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		{
			size, err := m.Code.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Sentence != nil {
		{
			size, err := m.Sentence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeWeightedRecencyPostProcessorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeWeightedRecencyPostProcessorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeWeightedRecencyPostProcessorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastAccess != nil {
		i--
		if *m.LastAccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TimeDecay != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.TimeDecay))))
		i--
		dAtA[i] = 0x15
	}
	if m.TopK != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TopK))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TokenSplitterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenSplitterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenSplitterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hierarchical != nil {
		{
			size, err := m.Hierarchical.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WordSeparator != nil {
		i -= len(*m.WordSeparator)
		copy(dAtA[i:], *m.WordSeparator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.WordSeparator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChunkOverlap != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkOverlap))
		i--
		dAtA[i] = 0x10
	}
	if m.ChunkSize != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VectorIndexSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VectorIndexSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VectorIndexSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EmbeddingModel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.DatabaseConnectionName)
	copy(dAtA[i:], m.DatabaseConnectionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DatabaseConnectionName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VectorRetrieverSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VectorRetrieverSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VectorRetrieverSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auto != nil {
		{
			size, err := m.Auto.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AutoMerging != nil {
		i--
		if *m.AutoMerging {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.MatchMetadata) > 0 {
		keysForMatchMetadata := make([]string, 0, len(m.MatchMetadata))
		for k := range m.MatchMetadata {
			keysForMatchMetadata = append(keysForMatchMetadata, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForMatchMetadata)
		for iNdEx := len(keysForMatchMetadata) - 1; iNdEx >= 0; iNdEx-- {
			v := m.MatchMetadata[string(keysForMatchMetadata[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForMatchMetadata[iNdEx])
			copy(dAtA[i:], keysForMatchMetadata[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForMatchMetadata[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TopK != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TopK))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.EmbeddingModel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WebReaderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebReaderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebReaderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		keysForOptions := make([]string, 0, len(m.Options))
		for k := range m.Options {
			keysForOptions = append(keysForOptions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
		for iNdEx := len(keysForOptions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Options[string(keysForOptions[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForOptions[iNdEx])
			copy(dAtA[i:], keysForOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ConnectionName != nil {
		i -= len(*m.ConnectionName)
		copy(dAtA[i:], *m.ConnectionName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AnswerFilteringSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AutoVectorRetrieverSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.MaxTopK != nil {
		n += 1 + sovGenerated(uint64(*m.MaxTopK))
	}
	if len(m.MetadataInfo) > 0 {
		for _, e := range m.MetadataInfo {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *CodeSplitterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Language)
	n += 1 + l + sovGenerated(uint64(l))
	if m.ChunkLines != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkLines))
	}
	if m.ChunkLinesOverlap != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkLinesOverlap))
	}
	if m.MaxChars != nil {
		n += 1 + sovGenerated(uint64(*m.MaxChars))
	}
	return n
}

func (m *CohereRerankSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	n += 1 + l + sovGenerated(uint64(l))
	if m.TopN != nil {
		n += 1 + sovGenerated(uint64(*m.TopN))
	}
	return n
}

func (m *ConcreteQueryEngineSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Retriever != nil {
		l = m.Retriever.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ConcreteRetrieverSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vector != nil {
		l = m.Vector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DocumentSummary != nil {
		l = m.DocumentSummary.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *DatabaseReaderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ConnectionName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Query)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DocumentSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.RefreshPeriod != nil {
		n += 1 + sovGenerated(uint64(*m.RefreshPeriod))
	}
	if len(m.Indexes) > 0 {
		for _, s := range m.Indexes {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.NodeParser != nil {
		l = len(*m.NodeParser)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EmbeddingModel != nil {
		l = m.EmbeddingModel.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Database != nil {
		l = m.Database.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Web != nil {
		l = m.Web.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Repository != nil {
		l = m.Repository.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *DocumentStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Nodes))
	if m.LastError != nil {
		l = len(*m.LastError)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Flagged != nil {
		n += 2
	}
	if m.LastRefreshAt != nil {
		l = m.LastRefreshAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *DocumentSummaryIndexSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ResponseSynthesizer.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Embedding != nil {
		l = m.Embedding.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *DocumentSummaryRetrieverSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Index.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Model.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.TopK != nil {
		n += 1 + sovGenerated(uint64(*m.TopK))
	}
	if m.Mode != nil {
		l = len(*m.Mode)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EmbeddingRecencyPostProcessorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EmbeddingModel.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.SimilarityCutoff != nil {
		n += 5
	}
	return n
}

func (m *ExtensionFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Include) > 0 {
		for _, s := range m.Include {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Exclude) > 0 {
		for _, s := range m.Exclude {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *FileLocationReaderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Url != nil {
		l = len(*m.Url)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.FileReaderSpec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FileReaderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FilteredNodeParser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Extension != nil {
		l = m.Extension.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Length != nil {
		l = m.Length.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = len(m.NodeParser)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FixedRecencyPostProcessorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopK != nil {
		n += 1 + sovGenerated(uint64(*m.TopK))
	}
	return n
}

func (m *FusionRetrieverSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Retrievers) > 0 {
		for _, e := range m.Retrievers {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Queries != nil {
		n += 1 + sovGenerated(uint64(*m.Queries))
	}
	if m.ReciprocalRank != nil {
		n += 2
	}
	return n
}

func (m *HierarchicalSplitterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	if len(m.ChunkSizes) > 0 {
		for _, e := range m.ChunkSizes {
			n += 1 + sovGenerated(uint64(e))
		}
	}
	return n
}

func (m *IndexReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KnowledgeBaseName)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Index != nil {
		l = len(*m.Index)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *IndexSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Vector != nil {
		l = m.Vector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DocumentSummary != nil {
		l = m.DocumentSummary.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *KeywordPostProcessorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Include) > 0 {
		for _, s := range m.Include {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Exclude) > 0 {
		for _, s := range m.Exclude {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *KnowledgeBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KnowledgeBaseList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *KnowledgeBaseSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RefreshSchedule != nil {
		l = m.RefreshSchedule.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ArtifactBucketName != nil {
		l = len(*m.ArtifactBucketName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LabName != nil {
		l = len(*m.LabName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Resources.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.MetadataDatabaseConnectionName != nil {
		l = len(*m.MetadataDatabaseConnectionName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.DocumentStoreConnectionName)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Indexes) > 0 {
		for _, e := range m.Indexes {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Documents) > 0 {
		for _, e := range m.Documents {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.NodeParsers) > 0 {
		for _, e := range m.NodeParsers {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.DefaultNodeParser != nil {
		l = len(*m.DefaultNodeParser)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *KnowledgeBaseStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if m.LastRefreshAt != nil {
		l = m.LastRefreshAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastCompletionAt != nil {
		l = m.LastCompletionAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Documents) > 0 {
		for _, e := range m.Documents {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *KnowledgeGraphQueryEngine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LLM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *LLMAccessSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != nil {
		n += 1 + sovGenerated(uint64(*m.Port))
	}
	if m.NodePort != nil {
		n += 1 + sovGenerated(uint64(*m.NodePort))
	}
	l = len(m.AccessType)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *LLMList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *LLMRerankSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopN != nil {
		n += 1 + sovGenerated(uint64(*m.TopN))
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RankGPT != nil {
		n += 2
	}
	return n
}

func (m *LLMSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ServingSiteName != nil {
		l = len(*m.ServingSiteName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Resources.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Models) > 0 {
		for _, e := range m.Models {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *LLMStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if len(m.Models) > 0 {
		for _, e := range m.Models {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Endpoint != nil {
		l = len(*m.Endpoint)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DeployedAt != nil {
		l = m.DeployedAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *LengthFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.GreaterThan))
	n += 1 + sovGenerated(uint64(m.LessThan))
	return n
}

func (m *LongContextReorderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MetadataKeyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Description)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MixedNodeParserSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Parsers) > 0 {
		for _, e := range m.Parsers {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.FallbackNodeParser != nil {
		l = len(*m.FallbackNodeParser)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ModelMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	n += 1 + sovGenerated(uint64(m.TotalPredictions))
	return n
}

func (m *ModelServingSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if m.QueryEngine != nil {
		l = m.QueryEngine.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Paths) > 0 {
		for _, s := range m.Paths {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Format != nil {
		l = len(*m.Format)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Model.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ModelSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Model != nil {
		l = len(*m.Model)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ModelStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if m.DeploymentRef != nil {
		l = m.DeploymentRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ServiceRef != nil {
		l = m.ServiceRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FailureMessage != nil {
		l = len(*m.FailureMessage)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NameFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contains != nil {
		l = len(*m.Contains)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Equals != nil {
		l = len(*m.Equals)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodeParserSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if m.IncludeOrderRelationship != nil {
		n += 2
	}
	if m.IncludeMetadata != nil {
		n += 2
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Sentence != nil {
		l = m.Sentence.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Mixed != nil {
		l = m.Mixed.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodePostProcessor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Similarity != nil {
		l = m.Similarity.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Keyword != nil {
		l = m.Keyword.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Reorder != nil {
		l = m.Reorder.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EmbeddingOptimizer != nil {
		l = m.EmbeddingOptimizer.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LLMRerank != nil {
		l = m.LLMRerank.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CohereRerank != nil {
		l = m.CohereRerank.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FixedRecency != nil {
		l = m.FixedRecency.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EmbeddingRecency != nil {
		l = m.EmbeddingRecency.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TimeWeightedRecency != nil {
		l = m.TimeWeightedRecency.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *QueryEngineSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ConcreteQueryEngineSpec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Router != nil {
		l = m.Router.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SubQuestion != nil {
		l = m.SubQuestion.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *QueryEngineToolSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.QueryEngine.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Description)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RepositoryFileReader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Extension != nil {
		l = len(*m.Extension)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Extensions) > 0 {
		for _, s := range m.Extensions {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.Reader.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RepositoryReaderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ConnectionName)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Extensions) > 0 {
		for _, s := range m.Extensions {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Readers) > 0 {
		for _, e := range m.Readers {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ResponseSynthesizerSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != nil {
		l = len(*m.Mode)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.AnswerFiltering != nil {
		l = m.AnswerFiltering.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *RetrieverQueryEngine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponseSynthesizer != nil {
		l = m.ResponseSynthesizer.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Retriever.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.PostProcessors) > 0 {
		for _, e := range m.PostProcessors {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *RetrieverSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ConcreteRetrieverSpec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Router != nil {
		l = m.Router.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Fusion != nil {
		l = m.Fusion.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *RetrieverToolSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Retriever.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Description)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RouterQueryEngineSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tools) > 0 {
		for _, e := range m.Tools {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *RouterRetrieverSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tools) > 0 {
		for _, e := range m.Tools {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SelectorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != nil {
		l = len(*m.Mode)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Multi != nil {
		n += 2
	}
	return n
}

func (m *SentenceEmbeddingOptimizerSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EmbeddingModel.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.PercentileCutoff != nil {
		n += 5
	}
	if m.ThresholdCutoff != nil {
		n += 5
	}
	return n
}

func (m *SentenceSplitterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChunkSize != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkSize))
	}
	if m.ChunkOverlap != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkOverlap))
	}
	if m.WordSeparator != nil {
		l = len(*m.WordSeparator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ParagraphSeparator != nil {
		l = len(*m.ParagraphSeparator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Splitter != nil {
		l = m.Splitter.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Hierarchical != nil {
		l = m.Hierarchical.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SentenceTokenizerSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Separator != nil {
		l = len(*m.Separator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SentenceWindowNodeParserSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Splitter != nil {
		l = m.Splitter.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.WindowSize != nil {
		n += 1 + sovGenerated(uint64(*m.WindowSize))
	}
	return n
}

func (m *SimilarityPostProcessorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}

func (m *SubQuestionQueryEngineSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tools) > 0 {
		for _, e := range m.Tools {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.ResponseSynthesizer != nil {
		l = m.ResponseSynthesizer.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *TextSplitterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Sentence != nil {
		l = m.Sentence.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Code != nil {
		l = m.Code.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *TimeWeightedRecencyPostProcessorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopK != nil {
		n += 1 + sovGenerated(uint64(*m.TopK))
	}
	if m.TimeDecay != nil {
		n += 5
	}
	if m.LastAccess != nil {
		n += 2
	}
	return n
}

func (m *TokenSplitterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChunkSize != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkSize))
	}
	if m.ChunkOverlap != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkOverlap))
	}
	if m.WordSeparator != nil {
		l = len(*m.WordSeparator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Hierarchical != nil {
		l = m.Hierarchical.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *VectorIndexSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatabaseConnectionName)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.EmbeddingModel.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VectorRetrieverSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Index.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.EmbeddingModel.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.TopK != nil {
		n += 1 + sovGenerated(uint64(*m.TopK))
	}
	if len(m.MatchMetadata) > 0 {
		for k, v := range m.MatchMetadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.AutoMerging != nil {
		n += 2
	}
	if m.Auto != nil {
		l = m.Auto.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *WebReaderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if m.ConnectionName != nil {
		l = len(*m.ConnectionName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AnswerFilteringSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnswerFilteringSpec{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`Model:` + strings.Replace(this.Model.String(), "ModelSpec", "ModelSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutoVectorRetrieverSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetadataInfo := "[]MetadataKeyInfo{"
	for _, f := range this.MetadataInfo {
		repeatedStringForMetadataInfo += strings.Replace(strings.Replace(f.String(), "MetadataKeyInfo", "MetadataKeyInfo", 1), `&`, ``, 1) + ","
	}
	repeatedStringForMetadataInfo += "}"
	s := strings.Join([]string{`&AutoVectorRetrieverSpec{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`Model:` + strings.Replace(this.Model.String(), "ModelSpec", "ModelSpec", 1) + `,`,
		`MaxTopK:` + valueToStringGenerated(this.MaxTopK) + `,`,
		`MetadataInfo:` + repeatedStringForMetadataInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *CodeSplitterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CodeSplitterSpec{`,
		`Language:` + fmt.Sprintf("%v", this.Language) + `,`,
		`ChunkLines:` + valueToStringGenerated(this.ChunkLines) + `,`,
		`ChunkLinesOverlap:` + valueToStringGenerated(this.ChunkLinesOverlap) + `,`,
		`MaxChars:` + valueToStringGenerated(this.MaxChars) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CohereRerankSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CohereRerankSpec{`,
		`ConnectionName:` + fmt.Sprintf("%v", this.ConnectionName) + `,`,
		`TopN:` + valueToStringGenerated(this.TopN) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConcreteQueryEngineSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConcreteQueryEngineSpec{`,
		`Retriever:` + strings.Replace(this.Retriever.String(), "RetrieverQueryEngine", "RetrieverQueryEngine", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConcreteRetrieverSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConcreteRetrieverSpec{`,
		`Vector:` + strings.Replace(this.Vector.String(), "VectorRetrieverSpec", "VectorRetrieverSpec", 1) + `,`,
		`DocumentSummary:` + strings.Replace(this.DocumentSummary.String(), "DocumentSummaryIndexSpec", "DocumentSummaryIndexSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DatabaseReaderSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForOptions := make([]string, 0, len(this.Options))
	for k := range this.Options {
		keysForOptions = append(keysForOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
	mapStringForOptions := "map[string]string{"
	for _, k := range keysForOptions {
		mapStringForOptions += fmt.Sprintf("%v: %v,", k, this.Options[k])
	}
	mapStringForOptions += "}"
	s := strings.Join([]string{`&DatabaseReaderSpec{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ConnectionName:` + fmt.Sprintf("%v", this.ConnectionName) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`Options:` + mapStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%v: %v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	s := strings.Join([]string{`&DocumentSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + valueToStringGenerated(this.Description) + `,`,
		`Metadata:` + mapStringForMetadata + `,`,
		`RefreshPeriod:` + valueToStringGenerated(this.RefreshPeriod) + `,`,
		`Indexes:` + fmt.Sprintf("%v", this.Indexes) + `,`,
		`NodeParser:` + valueToStringGenerated(this.NodeParser) + `,`,
		`EmbeddingModel:` + strings.Replace(this.EmbeddingModel.String(), "ModelSpec", "ModelSpec", 1) + `,`,
		`File:` + strings.Replace(this.File.String(), "FileLocationReaderSpec", "FileLocationReaderSpec", 1) + `,`,
		`Database:` + strings.Replace(this.Database.String(), "DatabaseReaderSpec", "DatabaseReaderSpec", 1) + `,`,
		`Web:` + strings.Replace(this.Web.String(), "WebReaderSpec", "WebReaderSpec", 1) + `,`,
		`Repository:` + strings.Replace(this.Repository.String(), "RepositoryReaderSpec", "RepositoryReaderSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentStatus{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Nodes:` + fmt.Sprintf("%v", this.Nodes) + `,`,
		`LastError:` + valueToStringGenerated(this.LastError) + `,`,
		`Flagged:` + valueToStringGenerated(this.Flagged) + `,`,
		`LastRefreshAt:` + strings.Replace(fmt.Sprintf("%v", this.LastRefreshAt), "Time", "v1.Time", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentSummaryIndexSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentSummaryIndexSpec{`,
		`ResponseSynthesizer:` + strings.Replace(strings.Replace(this.ResponseSynthesizer.String(), "ResponseSynthesizerSpec", "ResponseSynthesizerSpec", 1), `&`, ``, 1) + `,`,
		`Embedding:` + strings.Replace(this.Embedding.String(), "VectorIndexSpec", "VectorIndexSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentSummaryRetrieverSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentSummaryRetrieverSpec{`,
		`Index:` + strings.Replace(strings.Replace(this.Index.String(), "IndexReference", "IndexReference", 1), `&`, ``, 1) + `,`,
		`Model:` + strings.Replace(strings.Replace(this.Model.String(), "ModelSpec", "ModelSpec", 1), `&`, ``, 1) + `,`,
		`TopK:` + valueToStringGenerated(this.TopK) + `,`,
		`Mode:` + valueToStringGenerated(this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmbeddingRecencyPostProcessorSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmbeddingRecencyPostProcessorSpec{`,
		`EmbeddingModel:` + strings.Replace(strings.Replace(this.EmbeddingModel.String(), "ModelSpec", "ModelSpec", 1), `&`, ``, 1) + `,`,
		`SimilarityCutoff:` + valueToStringGenerated(this.SimilarityCutoff) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtensionFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtensionFilter{`,
		`Include:` + fmt.Sprintf("%v", this.Include) + `,`,
		`Exclude:` + fmt.Sprintf("%v", this.Exclude) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileLocationReaderSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileLocationReaderSpec{`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "FileLocation", "v1alpha1.FileLocation", 1) + `,`,
		`Url:` + valueToStringGenerated(this.Url) + `,`,
		`FileReaderSpec:` + strings.Replace(strings.Replace(this.FileReaderSpec.String(), "FileReaderSpec", "FileReaderSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileReaderSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForOptions := make([]string, 0, len(this.Options))
	for k := range this.Options {
		keysForOptions = append(keysForOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
	mapStringForOptions := "map[string]string{"
	for _, k := range keysForOptions {
		mapStringForOptions += fmt.Sprintf("%v: %v,", k, this.Options[k])
	}
	mapStringForOptions += "}"
	s := strings.Join([]string{`&FileReaderSpec{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Options:` + mapStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilteredNodeParser) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%v: %v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	s := strings.Join([]string{`&FilteredNodeParser{`,
		`Extension:` + strings.Replace(this.Extension.String(), "ExtensionFilter", "ExtensionFilter", 1) + `,`,
		`Length:` + strings.Replace(this.Length.String(), "LengthFilter", "LengthFilter", 1) + `,`,
		`Name:` + strings.Replace(this.Name.String(), "NameFilter", "NameFilter", 1) + `,`,
		`Metadata:` + mapStringForMetadata + `,`,
		`NodeParser:` + fmt.Sprintf("%v", this.NodeParser) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FixedRecencyPostProcessorSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FixedRecencyPostProcessorSpec{`,
		`TopK:` + valueToStringGenerated(this.TopK) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FusionRetrieverSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRetrievers := "[]ConcreteRetrieverSpec{"
	for _, f := range this.Retrievers {
		repeatedStringForRetrievers += strings.Replace(strings.Replace(f.String(), "ConcreteRetrieverSpec", "ConcreteRetrieverSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForRetrievers += "}"
	s := strings.Join([]string{`&FusionRetrieverSpec{`,
		`Retrievers:` + repeatedStringForRetrievers + `,`,
		`Queries:` + valueToStringGenerated(this.Queries) + `,`,
		`ReciprocalRank:` + valueToStringGenerated(this.ReciprocalRank) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HierarchicalSplitterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HierarchicalSplitterSpec{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`ChunkSizes:` + fmt.Sprintf("%v", this.ChunkSizes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IndexReference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IndexReference{`,
		`KnowledgeBaseName:` + fmt.Sprintf("%v", this.KnowledgeBaseName) + `,`,
		`Index:` + valueToStringGenerated(this.Index) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IndexSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IndexSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Vector:` + strings.Replace(this.Vector.String(), "VectorIndexSpec", "VectorIndexSpec", 1) + `,`,
		`DocumentSummary:` + strings.Replace(this.DocumentSummary.String(), "DocumentSummaryIndexSpec", "DocumentSummaryIndexSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeywordPostProcessorSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeywordPostProcessorSpec{`,
		`Include:` + fmt.Sprintf("%v", this.Include) + `,`,
		`Exclude:` + fmt.Sprintf("%v", this.Exclude) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KnowledgeBase) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KnowledgeBase{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "KnowledgeBaseSpec", "KnowledgeBaseSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "KnowledgeBaseStatus", "KnowledgeBaseStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KnowledgeBaseList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]KnowledgeBase{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "KnowledgeBase", "KnowledgeBase", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&KnowledgeBaseList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *KnowledgeBaseSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIndexes := "[]IndexSpec{"
	for _, f := range this.Indexes {
		repeatedStringForIndexes += strings.Replace(strings.Replace(f.String(), "IndexSpec", "IndexSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForIndexes += "}"
	repeatedStringForDocuments := "[]DocumentSpec{"
	for _, f := range this.Documents {
		repeatedStringForDocuments += strings.Replace(strings.Replace(f.String(), "DocumentSpec", "DocumentSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForDocuments += "}"
	repeatedStringForNodeParsers := "[]NodeParserSpec{"
	for _, f := range this.NodeParsers {
		repeatedStringForNodeParsers += strings.Replace(strings.Replace(f.String(), "NodeParserSpec", "NodeParserSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForNodeParsers += "}"
	s := strings.Join([]string{`&KnowledgeBaseSpec{`,
		`Owner:` + valueToStringGenerated(this.Owner) + `,`,
		`Description:` + valueToStringGenerated(this.Description) + `,`,
		`RefreshSchedule:` + strings.Replace(fmt.Sprintf("%v", this.RefreshSchedule), "RunSchedule", "v1alpha1.RunSchedule", 1) + `,`,
		`ArtifactBucketName:` + valueToStringGenerated(this.ArtifactBucketName) + `,`,
		`LabName:` + valueToStringGenerated(this.LabName) + `,`,
		`Resources:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Resources), "ResourceSpec", "v1alpha1.ResourceSpec", 1), `&`, ``, 1) + `,`,
		`MetadataDatabaseConnectionName:` + valueToStringGenerated(this.MetadataDatabaseConnectionName) + `,`,
		`DocumentStoreConnectionName:` + fmt.Sprintf("%v", this.DocumentStoreConnectionName) + `,`,
		`Indexes:` + repeatedStringForIndexes + `,`,
		`Documents:` + repeatedStringForDocuments + `,`,
		`NodeParsers:` + repeatedStringForNodeParsers + `,`,
		`DefaultNodeParser:` + valueToStringGenerated(this.DefaultNodeParser) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KnowledgeBaseStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLogs := "[]ContainerLog{"
	for _, f := range this.Logs {
		repeatedStringForLogs += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForLogs += "}"
	repeatedStringForDocuments := "[]DocumentStatus{"
	for _, f := range this.Documents {
		repeatedStringForDocuments += strings.Replace(strings.Replace(f.String(), "DocumentStatus", "DocumentStatus", 1), `&`, ``, 1) + ","
	}
	repeatedStringForDocuments += "}"
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&KnowledgeBaseStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`LastRefreshAt:` + strings.Replace(fmt.Sprintf("%v", this.LastRefreshAt), "Time", "v1.Time", 1) + `,`,
		`LastCompletionAt:` + strings.Replace(fmt.Sprintf("%v", this.LastCompletionAt), "Time", "v1.Time", 1) + `,`,
		`Logs:` + repeatedStringForLogs + `,`,
		`Documents:` + repeatedStringForDocuments + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Time", "v1.Time", 1) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *KnowledgeGraphQueryEngine) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KnowledgeGraphQueryEngine{`,
		`}`,
	}, "")
	return s
}
func (this *LLM) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LLM{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "LLMSpec", "LLMSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "LLMStatus", "LLMStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LLMAccessSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LLMAccessSpec{`,
		`Port:` + valueToStringGenerated(this.Port) + `,`,
		`NodePort:` + valueToStringGenerated(this.NodePort) + `,`,
		`AccessType:` + fmt.Sprintf("%v", this.AccessType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LLMList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]KnowledgeBase{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "KnowledgeBase", "KnowledgeBase", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&LLMList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *LLMRerankSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LLMRerankSpec{`,
		`TopN:` + valueToStringGenerated(this.TopN) + `,`,
		`Model:` + strings.Replace(this.Model.String(), "ModelSpec", "ModelSpec", 1) + `,`,
		`RankGPT:` + valueToStringGenerated(this.RankGPT) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LLMSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForModels := "[]ModelServingSpec{"
	for _, f := range this.Models {
		repeatedStringForModels += strings.Replace(strings.Replace(f.String(), "ModelServingSpec", "ModelServingSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForModels += "}"
	s := strings.Join([]string{`&LLMSpec{`,
		`Owner:` + valueToStringGenerated(this.Owner) + `,`,
		`Description:` + valueToStringGenerated(this.Description) + `,`,
		`ServingSiteName:` + valueToStringGenerated(this.ServingSiteName) + `,`,
		`Resources:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Resources), "ResourceSpec", "v1alpha1.ResourceSpec", 1), `&`, ``, 1) + `,`,
		`Models:` + repeatedStringForModels + `,`,
		`Notification:` + strings.Replace(fmt.Sprintf("%v", this.Notification), "NotificationSpec", "v1alpha1.NotificationSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LLMStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForModels := "[]ModelStatus{"
	for _, f := range this.Models {
		repeatedStringForModels += strings.Replace(strings.Replace(f.String(), "ModelStatus", "ModelStatus", 1), `&`, ``, 1) + ","
	}
	repeatedStringForModels += "}"
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&LLMStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Models:` + repeatedStringForModels + `,`,
		`Endpoint:` + valueToStringGenerated(this.Endpoint) + `,`,
		`DeployedAt:` + strings.Replace(fmt.Sprintf("%v", this.DeployedAt), "Time", "v1.Time", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Time", "v1.Time", 1) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *LengthFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LengthFilter{`,
		`GreaterThan:` + fmt.Sprintf("%v", this.GreaterThan) + `,`,
		`LessThan:` + fmt.Sprintf("%v", this.LessThan) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LongContextReorderSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LongContextReorderSpec{`,
		`}`,
	}, "")
	return s
}
func (this *MetadataKeyInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetadataKeyInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MixedNodeParserSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForParsers := "[]FilteredNodeParser{"
	for _, f := range this.Parsers {
		repeatedStringForParsers += strings.Replace(strings.Replace(f.String(), "FilteredNodeParser", "FilteredNodeParser", 1), `&`, ``, 1) + ","
	}
	repeatedStringForParsers += "}"
	s := strings.Join([]string{`&MixedNodeParserSpec{`,
		`Parsers:` + repeatedStringForParsers + `,`,
		`FallbackNodeParser:` + valueToStringGenerated(this.FallbackNodeParser) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelMetrics) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelMetrics{`,
		`P50:` + fmt.Sprintf("%v", this.P50) + `,`,
		`P95:` + fmt.Sprintf("%v", this.P95) + `,`,
		`P99:` + fmt.Sprintf("%v", this.P99) + `,`,
		`TotalPredictions:` + fmt.Sprintf("%v", this.TotalPredictions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelServingSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelServingSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`QueryEngine:` + strings.Replace(this.QueryEngine.String(), "QueryEngineSpec", "QueryEngineSpec", 1) + `,`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`Paths:` + fmt.Sprintf("%v", this.Paths) + `,`,
		`Format:` + valueToStringGenerated(this.Format) + `,`,
		`Model:` + strings.Replace(strings.Replace(this.Model.String(), "ModelSpec", "ModelSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelSpec{`,
		`ConnectionName:` + fmt.Sprintf("%v", this.ConnectionName) + `,`,
		`Model:` + valueToStringGenerated(this.Model) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelStatus{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DeploymentRef:` + strings.Replace(fmt.Sprintf("%v", this.DeploymentRef), "ObjectReference", "v11.ObjectReference", 1) + `,`,
		`ServiceRef:` + strings.Replace(fmt.Sprintf("%v", this.ServiceRef), "ObjectReference", "v11.ObjectReference", 1) + `,`,
		`FailureMessage:` + valueToStringGenerated(this.FailureMessage) + `,`,
		`Metrics:` + strings.Replace(this.Metrics.String(), "ModelMetrics", "ModelMetrics", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NameFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NameFilter{`,
		`Contains:` + valueToStringGenerated(this.Contains) + `,`,
		`Equals:` + valueToStringGenerated(this.Equals) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeParserSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeParserSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`IncludeOrderRelationship:` + valueToStringGenerated(this.IncludeOrderRelationship) + `,`,
		`IncludeMetadata:` + valueToStringGenerated(this.IncludeMetadata) + `,`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Text:` + strings.Replace(this.Text.String(), "TextSplitterSpec", "TextSplitterSpec", 1) + `,`,
		`Sentence:` + strings.Replace(this.Sentence.String(), "SentenceWindowNodeParserSpec", "SentenceWindowNodeParserSpec", 1) + `,`,
		`Mixed:` + strings.Replace(this.Mixed.String(), "MixedNodeParserSpec", "MixedNodeParserSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodePostProcessor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodePostProcessor{`,
		`Similarity:` + strings.Replace(this.Similarity.String(), "SimilarityPostProcessorSpec", "SimilarityPostProcessorSpec", 1) + `,`,
		`Keyword:` + strings.Replace(this.Keyword.String(), "KeywordPostProcessorSpec", "KeywordPostProcessorSpec", 1) + `,`,
		`Reorder:` + strings.Replace(this.Reorder.String(), "LongContextReorderSpec", "LongContextReorderSpec", 1) + `,`,
		`EmbeddingOptimizer:` + strings.Replace(this.EmbeddingOptimizer.String(), "SentenceEmbeddingOptimizerSpec", "SentenceEmbeddingOptimizerSpec", 1) + `,`,
		`LLMRerank:` + strings.Replace(this.LLMRerank.String(), "LLMRerankSpec", "LLMRerankSpec", 1) + `,`,
		`CohereRerank:` + strings.Replace(this.CohereRerank.String(), "CohereRerankSpec", "CohereRerankSpec", 1) + `,`,
		`FixedRecency:` + strings.Replace(this.FixedRecency.String(), "FixedRecencyPostProcessorSpec", "FixedRecencyPostProcessorSpec", 1) + `,`,
		`EmbeddingRecency:` + strings.Replace(this.EmbeddingRecency.String(), "EmbeddingRecencyPostProcessorSpec", "EmbeddingRecencyPostProcessorSpec", 1) + `,`,
		`TimeWeightedRecency:` + strings.Replace(this.TimeWeightedRecency.String(), "TimeWeightedRecencyPostProcessorSpec", "TimeWeightedRecencyPostProcessorSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryEngineSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryEngineSpec{`,
		`ConcreteQueryEngineSpec:` + strings.Replace(strings.Replace(this.ConcreteQueryEngineSpec.String(), "ConcreteQueryEngineSpec", "ConcreteQueryEngineSpec", 1), `&`, ``, 1) + `,`,
		`Router:` + strings.Replace(this.Router.String(), "RouterQueryEngineSpec", "RouterQueryEngineSpec", 1) + `,`,
		`SubQuestion:` + strings.Replace(this.SubQuestion.String(), "SubQuestionQueryEngineSpec", "SubQuestionQueryEngineSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryEngineToolSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryEngineToolSpec{`,
		`QueryEngine:` + strings.Replace(strings.Replace(this.QueryEngine.String(), "ConcreteQueryEngineSpec", "ConcreteQueryEngineSpec", 1), `&`, ``, 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RepositoryFileReader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RepositoryFileReader{`,
		`Extension:` + valueToStringGenerated(this.Extension) + `,`,
		`Extensions:` + fmt.Sprintf("%v", this.Extensions) + `,`,
		`Reader:` + strings.Replace(strings.Replace(this.Reader.String(), "FileReaderSpec", "FileReaderSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RepositoryReaderSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReaders := "[]RepositoryFileReader{"
	for _, f := range this.Readers {
		repeatedStringForReaders += strings.Replace(strings.Replace(f.String(), "RepositoryFileReader", "RepositoryFileReader", 1), `&`, ``, 1) + ","
	}
	repeatedStringForReaders += "}"
	keysForOptions := make([]string, 0, len(this.Options))
	for k := range this.Options {
		keysForOptions = append(keysForOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
	mapStringForOptions := "map[string]string{"
	for _, k := range keysForOptions {
		mapStringForOptions += fmt.Sprintf("%v: %v,", k, this.Options[k])
	}
	mapStringForOptions += "}"
	s := strings.Join([]string{`&RepositoryReaderSpec{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ConnectionName:` + fmt.Sprintf("%v", this.ConnectionName) + `,`,
		`Extensions:` + fmt.Sprintf("%v", this.Extensions) + `,`,
		`Readers:` + repeatedStringForReaders + `,`,
		`Options:` + mapStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSynthesizerSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSynthesizerSpec{`,
		`Mode:` + valueToStringGenerated(this.Mode) + `,`,
		`Model:` + strings.Replace(this.Model.String(), "ModelSpec", "ModelSpec", 1) + `,`,
		`AnswerFiltering:` + strings.Replace(this.AnswerFiltering.String(), "AnswerFilteringSpec", "AnswerFilteringSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieverQueryEngine) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPostProcessors := "[]NodePostProcessor{"
	for _, f := range this.PostProcessors {
		repeatedStringForPostProcessors += strings.Replace(strings.Replace(f.String(), "NodePostProcessor", "NodePostProcessor", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPostProcessors += "}"
	s := strings.Join([]string{`&RetrieverQueryEngine{`,
		`ResponseSynthesizer:` + strings.Replace(this.ResponseSynthesizer.String(), "ResponseSynthesizerSpec", "ResponseSynthesizerSpec", 1) + `,`,
		`Retriever:` + strings.Replace(strings.Replace(this.Retriever.String(), "RetrieverSpec", "RetrieverSpec", 1), `&`, ``, 1) + `,`,
		`PostProcessors:` + repeatedStringForPostProcessors + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieverSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieverSpec{`,
		`ConcreteRetrieverSpec:` + strings.Replace(strings.Replace(this.ConcreteRetrieverSpec.String(), "ConcreteRetrieverSpec", "ConcreteRetrieverSpec", 1), `&`, ``, 1) + `,`,
		`Router:` + strings.Replace(this.Router.String(), "RouterRetrieverSpec", "RouterRetrieverSpec", 1) + `,`,
		`Fusion:` + strings.Replace(this.Fusion.String(), "FusionRetrieverSpec", "FusionRetrieverSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieverToolSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieverToolSpec{`,
		`Retriever:` + strings.Replace(strings.Replace(this.Retriever.String(), "ConcreteRetrieverSpec", "ConcreteRetrieverSpec", 1), `&`, ``, 1) + `,`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouterQueryEngineSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTools := "[]QueryEngineToolSpec{"
	for _, f := range this.Tools {
		repeatedStringForTools += strings.Replace(strings.Replace(f.String(), "QueryEngineToolSpec", "QueryEngineToolSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForTools += "}"
	s := strings.Join([]string{`&RouterQueryEngineSpec{`,
		`Tools:` + repeatedStringForTools + `,`,
		`Selector:` + strings.Replace(this.Selector.String(), "SelectorSpec", "SelectorSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouterRetrieverSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTools := "[]RetrieverToolSpec{"
	for _, f := range this.Tools {
		repeatedStringForTools += strings.Replace(strings.Replace(f.String(), "RetrieverToolSpec", "RetrieverToolSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForTools += "}"
	s := strings.Join([]string{`&RouterRetrieverSpec{`,
		`Tools:` + repeatedStringForTools + `,`,
		`Selector:` + strings.Replace(this.Selector.String(), "SelectorSpec", "SelectorSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SelectorSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SelectorSpec{`,
		`Mode:` + valueToStringGenerated(this.Mode) + `,`,
		`Model:` + strings.Replace(this.Model.String(), "ModelSpec", "ModelSpec", 1) + `,`,
		`Multi:` + valueToStringGenerated(this.Multi) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SentenceEmbeddingOptimizerSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentenceEmbeddingOptimizerSpec{`,
		`EmbeddingModel:` + strings.Replace(strings.Replace(this.EmbeddingModel.String(), "ModelSpec", "ModelSpec", 1), `&`, ``, 1) + `,`,
		`PercentileCutoff:` + valueToStringGenerated(this.PercentileCutoff) + `,`,
		`ThresholdCutoff:` + valueToStringGenerated(this.ThresholdCutoff) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SentenceSplitterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentenceSplitterSpec{`,
		`ChunkSize:` + valueToStringGenerated(this.ChunkSize) + `,`,
		`ChunkOverlap:` + valueToStringGenerated(this.ChunkOverlap) + `,`,
		`WordSeparator:` + valueToStringGenerated(this.WordSeparator) + `,`,
		`ParagraphSeparator:` + valueToStringGenerated(this.ParagraphSeparator) + `,`,
		`Splitter:` + strings.Replace(this.Splitter.String(), "SentenceTokenizerSpec", "SentenceTokenizerSpec", 1) + `,`,
		`Hierarchical:` + strings.Replace(this.Hierarchical.String(), "HierarchicalSplitterSpec", "HierarchicalSplitterSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SentenceTokenizerSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentenceTokenizerSpec{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Separator:` + valueToStringGenerated(this.Separator) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SentenceWindowNodeParserSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentenceWindowNodeParserSpec{`,
		`Splitter:` + strings.Replace(this.Splitter.String(), "SentenceTokenizerSpec", "SentenceTokenizerSpec", 1) + `,`,
		`WindowSize:` + valueToStringGenerated(this.WindowSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimilarityPostProcessorSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimilarityPostProcessorSpec{`,
		`Cutoff:` + fmt.Sprintf("%v", this.Cutoff) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubQuestionQueryEngineSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTools := "[]QueryEngineToolSpec{"
	for _, f := range this.Tools {
		repeatedStringForTools += strings.Replace(strings.Replace(f.String(), "QueryEngineToolSpec", "QueryEngineToolSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForTools += "}"
	s := strings.Join([]string{`&SubQuestionQueryEngineSpec{`,
		`Tools:` + repeatedStringForTools + `,`,
		`ResponseSynthesizer:` + strings.Replace(this.ResponseSynthesizer.String(), "ResponseSynthesizerSpec", "ResponseSynthesizerSpec", 1) + `,`,
		`Model:` + strings.Replace(this.Model.String(), "ModelSpec", "ModelSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextSplitterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextSplitterSpec{`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Sentence:` + strings.Replace(this.Sentence.String(), "SentenceSplitterSpec", "SentenceSplitterSpec", 1) + `,`,
		`Token:` + strings.Replace(this.Token.String(), "TokenSplitterSpec", "TokenSplitterSpec", 1) + `,`,
		`Code:` + strings.Replace(this.Code.String(), "CodeSplitterSpec", "CodeSplitterSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimeWeightedRecencyPostProcessorSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimeWeightedRecencyPostProcessorSpec{`,
		`TopK:` + valueToStringGenerated(this.TopK) + `,`,
		`TimeDecay:` + valueToStringGenerated(this.TimeDecay) + `,`,
		`LastAccess:` + valueToStringGenerated(this.LastAccess) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenSplitterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenSplitterSpec{`,
		`ChunkSize:` + valueToStringGenerated(this.ChunkSize) + `,`,
		`ChunkOverlap:` + valueToStringGenerated(this.ChunkOverlap) + `,`,
		`WordSeparator:` + valueToStringGenerated(this.WordSeparator) + `,`,
		`Hierarchical:` + strings.Replace(this.Hierarchical.String(), "HierarchicalSplitterSpec", "HierarchicalSplitterSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VectorIndexSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VectorIndexSpec{`,
		`DatabaseConnectionName:` + fmt.Sprintf("%v", this.DatabaseConnectionName) + `,`,
		`EmbeddingModel:` + strings.Replace(strings.Replace(this.EmbeddingModel.String(), "ModelSpec", "ModelSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VectorRetrieverSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForMatchMetadata := make([]string, 0, len(this.MatchMetadata))
	for k := range this.MatchMetadata {
		keysForMatchMetadata = append(keysForMatchMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMatchMetadata)
	mapStringForMatchMetadata := "map[string]string{"
	for _, k := range keysForMatchMetadata {
		mapStringForMatchMetadata += fmt.Sprintf("%v: %v,", k, this.MatchMetadata[k])
	}
	mapStringForMatchMetadata += "}"
	s := strings.Join([]string{`&VectorRetrieverSpec{`,
		`Index:` + strings.Replace(strings.Replace(this.Index.String(), "IndexReference", "IndexReference", 1), `&`, ``, 1) + `,`,
		`EmbeddingModel:` + strings.Replace(strings.Replace(this.EmbeddingModel.String(), "ModelSpec", "ModelSpec", 1), `&`, ``, 1) + `,`,
		`TopK:` + valueToStringGenerated(this.TopK) + `,`,
		`MatchMetadata:` + mapStringForMatchMetadata + `,`,
		`AutoMerging:` + valueToStringGenerated(this.AutoMerging) + `,`,
		`Auto:` + strings.Replace(this.Auto.String(), "AutoVectorRetrieverSpec", "AutoVectorRetrieverSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebReaderSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForOptions := make([]string, 0, len(this.Options))
	for k := range this.Options {
		keysForOptions = append(keysForOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
	mapStringForOptions := "map[string]string{"
	for _, k := range keysForOptions {
		mapStringForOptions += fmt.Sprintf("%v: %v,", k, this.Options[k])
	}
	mapStringForOptions += "}"
	s := strings.Join([]string{`&WebReaderSpec{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ConnectionName:` + valueToStringGenerated(this.ConnectionName) + `,`,
		`Options:` + mapStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AnswerFilteringSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnswerFilteringSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnswerFilteringSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &ModelSpec{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoVectorRetrieverSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoVectorRetrieverSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoVectorRetrieverSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &ModelSpec{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTopK", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxTopK = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataInfo = append(m.MetadataInfo, MetadataKeyInfo{})
			if err := m.MetadataInfo[len(m.MetadataInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodeSplitterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeSplitterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeSplitterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkLines", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkLines = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkLinesOverlap", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkLinesOverlap = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxChars", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxChars = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CohereRerankSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CohereRerankSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CohereRerankSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopN", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopN = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConcreteQueryEngineSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConcreteQueryEngineSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConcreteQueryEngineSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retriever", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Retriever == nil {
				m.Retriever = &RetrieverQueryEngine{}
			}
			if err := m.Retriever.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConcreteRetrieverSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConcreteRetrieverSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConcreteRetrieverSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vector == nil {
				m.Vector = &VectorRetrieverSpec{}
			}
			if err := m.Vector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DocumentSummary == nil {
				m.DocumentSummary = &DocumentSummaryIndexSpec{}
			}
			if err := m.DocumentSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatabaseReaderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatabaseReaderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatabaseReaderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = DatabaseReaderType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshPeriod", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefreshPeriod = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexes = append(m.Indexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeParser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NodeParser = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddingModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmbeddingModel == nil {
				m.EmbeddingModel = &ModelSpec{}
			}
			if err := m.EmbeddingModel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &FileLocationReaderSpec{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Database == nil {
				m.Database = &DatabaseReaderSpec{}
			}
			if err := m.Database.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Web", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Web == nil {
				m.Web = &WebReaderSpec{}
			}
			if err := m.Web.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repository == nil {
				m.Repository = &RepositoryReaderSpec{}
			}
			if err := m.Repository.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			m.Nodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LastError = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flagged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Flagged = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRefreshAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastRefreshAt == nil {
				m.LastRefreshAt = &v1.Time{}
			}
			if err := m.LastRefreshAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentSummaryIndexSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentSummaryIndexSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentSummaryIndexSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseSynthesizer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseSynthesizer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Embedding == nil {
				m.Embedding = &VectorIndexSpec{}
			}
			if err := m.Embedding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentSummaryRetrieverSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentSummaryRetrieverSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentSummaryRetrieverSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopK", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopK = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := DocumentSummaryRetrieverMode(dAtA[iNdEx:postIndex])
			m.Mode = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmbeddingRecencyPostProcessorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmbeddingRecencyPostProcessorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmbeddingRecencyPostProcessorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddingModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EmbeddingModel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimilarityCutoff", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.SimilarityCutoff = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtensionFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Include", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Include = append(m.Include, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exclude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exclude = append(m.Exclude, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileLocationReaderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileLocationReaderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileLocationReaderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &v1alpha1.FileLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Url = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileReaderSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FileReaderSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileReaderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileReaderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileReaderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = FileReaderType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilteredNodeParser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilteredNodeParser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilteredNodeParser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extension == nil {
				m.Extension = &ExtensionFilter{}
			}
			if err := m.Extension.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Length == nil {
				m.Length = &LengthFilter{}
			}
			if err := m.Length.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &NameFilter{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeParser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeParser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedRecencyPostProcessorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedRecencyPostProcessorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedRecencyPostProcessorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopK", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopK = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FusionRetrieverSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FusionRetrieverSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FusionRetrieverSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retrievers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Retrievers = append(m.Retrievers, ConcreteRetrieverSpec{})
			if err := m.Retrievers[len(m.Retrievers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Queries = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReciprocalRank", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReciprocalRank = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HierarchicalSplitterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HierarchicalSplitterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HierarchicalSplitterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChunkSizes = append(m.ChunkSizes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenerated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenerated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChunkSizes) == 0 {
					m.ChunkSizes = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChunkSizes = append(m.ChunkSizes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSizes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnowledgeBaseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KnowledgeBaseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Index = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vector == nil {
				m.Vector = &VectorIndexSpec{}
			}
			if err := m.Vector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DocumentSummary == nil {
				m.DocumentSummary = &DocumentSummaryIndexSpec{}
			}
			if err := m.DocumentSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeywordPostProcessorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeywordPostProcessorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeywordPostProcessorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Include", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Include = append(m.Include, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exclude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exclude = append(m.Exclude, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KnowledgeBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnowledgeBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnowledgeBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KnowledgeBaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnowledgeBaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnowledgeBaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, KnowledgeBase{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KnowledgeBaseSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnowledgeBaseSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnowledgeBaseSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RefreshSchedule == nil {
				m.RefreshSchedule = &v1alpha1.RunSchedule{}
			}
			if err := m.RefreshSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactBucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ArtifactBucketName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LabName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataDatabaseConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MetadataDatabaseConnectionName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentStoreConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentStoreConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexes = append(m.Indexes, IndexSpec{})
			if err := m.Indexes[len(m.Indexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = append(m.Documents, DocumentSpec{})
			if err := m.Documents[len(m.Documents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeParsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeParsers = append(m.NodeParsers, NodeParserSpec{})
			if err := m.NodeParsers[len(m.NodeParsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNodeParser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DefaultNodeParser = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KnowledgeBaseStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnowledgeBaseStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnowledgeBaseStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRefreshAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastRefreshAt == nil {
				m.LastRefreshAt = &v1.Time{}
			}
			if err := m.LastRefreshAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletionAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCompletionAt == nil {
				m.LastCompletionAt = &v1.Time{}
			}
			if err := m.LastCompletionAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, v1alpha1.ContainerLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = append(m.Documents, DocumentStatus{})
			if err := m.Documents[len(m.Documents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &v1.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, v1.Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KnowledgeGraphQueryEngine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnowledgeGraphQueryEngine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnowledgeGraphQueryEngine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LLM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LLM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LLM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LLMAccessSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LLMAccessSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LLMAccessSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodePort = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessType = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.AccessType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LLMList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LLMList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LLMList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, KnowledgeBase{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LLMRerankSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LLMRerankSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LLMRerankSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopN", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopN = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &ModelSpec{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankGPT", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RankGPT = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LLMSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LLMSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LLMSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingSiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServingSiteName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Models = append(m.Models, ModelServingSpec{})
			if err := m.Models[len(m.Models)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &v1alpha1.NotificationSpec{}
			}
			if err := m.Notification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LLMStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LLMStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LLMStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Models = append(m.Models, ModelStatus{})
			if err := m.Models[len(m.Models)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Endpoint = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeployedAt == nil {
				m.DeployedAt = &v1.Time{}
			}
			if err := m.DeployedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &v1.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, v1.Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LengthFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LengthFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LengthFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GreaterThan", wireType)
			}
			m.GreaterThan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GreaterThan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessThan", wireType)
			}
			m.LessThan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LessThan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LongContextReorderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongContextReorderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongContextReorderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixedNodeParserSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixedNodeParserSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixedNodeParserSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parsers = append(m.Parsers, FilteredNodeParser{})
			if err := m.Parsers[len(m.Parsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackNodeParser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FallbackNodeParser = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P50", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.P50 = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P95", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.P95 = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P99", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.P99 = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPredictions", wireType)
			}
			m.TotalPredictions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPredictions |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelServingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelServingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelServingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryEngine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryEngine == nil {
				m.QueryEngine = &QueryEngineSpec{}
			}
			if err := m.QueryEngine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paths = append(m.Paths, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := APIFormat(dAtA[iNdEx:postIndex])
			m.Format = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Model = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeploymentRef == nil {
				m.DeploymentRef = &v11.ObjectReference{}
			}
			if err := m.DeploymentRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceRef == nil {
				m.ServiceRef = &v11.ObjectReference{}
			}
			if err := m.ServiceRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FailureMessage = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &ModelMetrics{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Contains = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Equals = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeParserSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeParserSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeParserSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeOrderRelationship", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IncludeOrderRelationship = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeMetadata", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IncludeMetadata = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := NodeParserType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &TextSplitterSpec{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sentence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sentence == nil {
				m.Sentence = &SentenceWindowNodeParserSpec{}
			}
			if err := m.Sentence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mixed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mixed == nil {
				m.Mixed = &MixedNodeParserSpec{}
			}
			if err := m.Mixed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodePostProcessor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodePostProcessor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodePostProcessor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Similarity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Similarity == nil {
				m.Similarity = &SimilarityPostProcessorSpec{}
			}
			if err := m.Similarity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keyword == nil {
				m.Keyword = &KeywordPostProcessorSpec{}
			}
			if err := m.Keyword.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reorder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reorder == nil {
				m.Reorder = &LongContextReorderSpec{}
			}
			if err := m.Reorder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddingOptimizer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmbeddingOptimizer == nil {
				m.EmbeddingOptimizer = &SentenceEmbeddingOptimizerSpec{}
			}
			if err := m.EmbeddingOptimizer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLMRerank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LLMRerank == nil {
				m.LLMRerank = &LLMRerankSpec{}
			}
			if err := m.LLMRerank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CohereRerank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CohereRerank == nil {
				m.CohereRerank = &CohereRerankSpec{}
			}
			if err := m.CohereRerank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedRecency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FixedRecency == nil {
				m.FixedRecency = &FixedRecencyPostProcessorSpec{}
			}
			if err := m.FixedRecency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddingRecency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmbeddingRecency == nil {
				m.EmbeddingRecency = &EmbeddingRecencyPostProcessorSpec{}
			}
			if err := m.EmbeddingRecency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeWeightedRecency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeWeightedRecency == nil {
				m.TimeWeightedRecency = &TimeWeightedRecencyPostProcessorSpec{}
			}
			if err := m.TimeWeightedRecency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEngineSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEngineSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEngineSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConcreteQueryEngineSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConcreteQueryEngineSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Router == nil {
				m.Router = &RouterQueryEngineSpec{}
			}
			if err := m.Router.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubQuestion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubQuestion == nil {
				m.SubQuestion = &SubQuestionQueryEngineSpec{}
			}
			if err := m.SubQuestion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEngineToolSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEngineToolSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEngineToolSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryEngine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QueryEngine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryFileReader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryFileReader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryFileReader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Extension = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryReaderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryReaderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryReaderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = RepositoryReaderType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Readers = append(m.Readers, RepositoryFileReader{})
			if err := m.Readers[len(m.Readers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSynthesizerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSynthesizerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSynthesizerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := ResponseMode(dAtA[iNdEx:postIndex])
			m.Mode = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &ModelSpec{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswerFiltering", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnswerFiltering == nil {
				m.AnswerFiltering = &AnswerFilteringSpec{}
			}
			if err := m.AnswerFiltering.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieverQueryEngine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieverQueryEngine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieverQueryEngine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseSynthesizer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseSynthesizer == nil {
				m.ResponseSynthesizer = &ResponseSynthesizerSpec{}
			}
			if err := m.ResponseSynthesizer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retriever", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Retriever.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostProcessors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostProcessors = append(m.PostProcessors, NodePostProcessor{})
			if err := m.PostProcessors[len(m.PostProcessors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieverSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieverSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieverSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConcreteRetrieverSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConcreteRetrieverSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Router == nil {
				m.Router = &RouterRetrieverSpec{}
			}
			if err := m.Router.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fusion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fusion == nil {
				m.Fusion = &FusionRetrieverSpec{}
			}
			if err := m.Fusion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieverToolSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieverToolSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieverToolSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retriever", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Retriever.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouterQueryEngineSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouterQueryEngineSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouterQueryEngineSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tools = append(m.Tools, QueryEngineToolSpec{})
			if err := m.Tools[len(m.Tools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &SelectorSpec{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouterRetrieverSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouterRetrieverSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouterRetrieverSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tools = append(m.Tools, RetrieverToolSpec{})
			if err := m.Tools[len(m.Tools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &SelectorSpec{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := SelectorMode(dAtA[iNdEx:postIndex])
			m.Mode = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &ModelSpec{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Multi = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SentenceEmbeddingOptimizerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentenceEmbeddingOptimizerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentenceEmbeddingOptimizerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddingModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EmbeddingModel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentileCutoff", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.PercentileCutoff = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdCutoff", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.ThresholdCutoff = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SentenceSplitterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentenceSplitterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentenceSplitterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkSize = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkOverlap", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkOverlap = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordSeparator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WordSeparator = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParagraphSeparator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ParagraphSeparator = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Splitter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Splitter == nil {
				m.Splitter = &SentenceTokenizerSpec{}
			}
			if err := m.Splitter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hierarchical", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hierarchical == nil {
				m.Hierarchical = &HierarchicalSplitterSpec{}
			}
			if err := m.Hierarchical.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SentenceTokenizerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentenceTokenizerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentenceTokenizerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = SentenceTokenizerType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Separator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Separator = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SentenceWindowNodeParserSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentenceWindowNodeParserSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentenceWindowNodeParserSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Splitter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Splitter == nil {
				m.Splitter = &SentenceTokenizerSpec{}
			}
			if err := m.Splitter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WindowSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimilarityPostProcessorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimilarityPostProcessorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimilarityPostProcessorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cutoff", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Cutoff = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubQuestionQueryEngineSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubQuestionQueryEngineSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubQuestionQueryEngineSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tools = append(m.Tools, QueryEngineToolSpec{})
			if err := m.Tools[len(m.Tools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseSynthesizer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseSynthesizer == nil {
				m.ResponseSynthesizer = &ResponseSynthesizerSpec{}
			}
			if err := m.ResponseSynthesizer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &ModelSpec{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextSplitterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextSplitterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextSplitterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := TextSplitterType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sentence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sentence == nil {
				m.Sentence = &SentenceSplitterSpec{}
			}
			if err := m.Sentence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &TokenSplitterSpec{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Code == nil {
				m.Code = &CodeSplitterSpec{}
			}
			if err := m.Code.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeWeightedRecencyPostProcessorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeWeightedRecencyPostProcessorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeWeightedRecencyPostProcessorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopK", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopK = &v
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeDecay", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.TimeDecay = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.LastAccess = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenSplitterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenSplitterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenSplitterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkSize = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkOverlap", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkOverlap = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordSeparator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WordSeparator = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hierarchical", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hierarchical == nil {
				m.Hierarchical = &HierarchicalSplitterSpec{}
			}
			if err := m.Hierarchical.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VectorIndexSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VectorIndexSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VectorIndexSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddingModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EmbeddingModel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VectorRetrieverSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VectorRetrieverSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VectorRetrieverSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddingModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EmbeddingModel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopK", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopK = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchMetadata == nil {
				m.MatchMetadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MatchMetadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoMerging", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AutoMerging = &b
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auto == nil {
				m.Auto = &AutoVectorRetrieverSpec{}
			}
			if err := m.Auto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebReaderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebReaderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebReaderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = FileReaderType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ConnectionName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
