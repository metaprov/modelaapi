package v1alpha1

type DataType string

const (
	TextDataType      DataType = "text"
	IntegerDataType   DataType = "integer"
	FloatDataType     DataType = "float"
	BooleanDataType   DataType = "boolean"
	EmbeddingDataType DataType = "embedding"
)

type Granularity string

const (
	// DocumentGranularity extracts a single data point for all nodes generated by a reader.
	// A reader is defined for every document within a Knowledge Base, and may produce many individual nodes
	DocumentGranularity Granularity = "document"
	// NodeGranularity extracts a data point for every individual node generated by a reader
	NodeGranularity Granularity = "node"
)

type NumberExtractionMode string

const (
	MeanNumberExtractionMode   NumberExtractionMode = "mean"
	MedianNumberExtractionMode NumberExtractionMode = "median"
	MinNumberExtractionMode    NumberExtractionMode = "min"
	MaxNumberExtractionMode    NumberExtractionMode = "max"
)

type NumberRoundingMode string

const (
	RoundRoundingMode       NumberRoundingMode = "round"
	CeilNumberRoundingMode  NumberRoundingMode = "ceil"
	FloorNumberRoundingMode NumberRoundingMode = "floor"
)

type TextExtractionMode string

const (
	SummarizationTextExtractionMode TextExtractionMode = "summarization"
	ConcatenationTextExtractionMode TextExtractionMode = "concatenation"
)

// EmbeddingSpec defines the configuration for an embedding column
type EmbeddingSpec struct {
	// The list of text columns to include when generating the embedding
	Columns []string `json:"columns,omitempty" protobuf:"bytes,1,opt,name=columns"`
	// The embedding model to use to generate the embedding
	Model *ModelSpec `json:"model,omitempty" protobuf:"bytes,2,opt,name=model"`
}

type IntegerSpec struct {
	// The method to use for determining the final number extracted from all nodes. If unspecified, default to mean
	ExtractionMode *NumberExtractionMode `json:"extractionMode,omitempty" protobuf:"bytes,1,opt,name=extractionMode"`
	// The rounding mode to use when determining the final number. If unspecified, default to `round`
	RoundingMode *NumberRoundingMode `json:"roundingMode,omitempty" protobuf:"bytes,2,opt,name=roundingMode"`
	// The default number, if one could not be extracted from the nodes. If unspecified, the column will be left null
	Default *int32 `json:"default,omitempty" protobuf:"bytes,3,opt,name=default"`
}

type FloatSpec struct {
	// The method to use for determining the final number extracted from all nodes. If unspecified, default to mean
	ExtractionMode *NumberExtractionMode `json:"extractionMode,omitempty" protobuf:"bytes,1,opt,name=extractionMode"`
	// The rounding mode to use when determining the final number. If unspecified, rounding will not be applied
	RoundingMode *NumberRoundingMode `json:"roundingMode,omitempty" protobuf:"bytes,2,opt,name=roundingMode"`
	// The maximum precision of the extracted float. If unspecified, default to 3
	Precision *int32 `json:"precision,omitempty" protobuf:"bytes,3,opt,name=precision"`
	// The default number, if one could not be extracted from the nodes. If unspecified, the column will be left null
	Default *int32 `json:"default,omitempty" protobuf:"bytes,4,opt,name=default"`
}

type TextSpec struct {
	// The method to use for determining the final text extracted from all nodes. If unspecified, default to concatenation
	ExtractionMode *TextExtractionMode `json:"extractionMode,omitempty" protobuf:"bytes,1,opt,name=extractionMode"`
	// The prompt to use when summarizing text. The prompt must include the literal `{texts}`, which will be
	// filled in with all the generated texts. The prompt may also include the literal `{description}`, which will
	// be filled in with the description of the field
	SummarizationPrompt *string `json:"summarizationPrompt,omitempty" protobuf:"bytes,2,opt,name=summarizationPrompt"`
	// The string to use for concatenation. If unspecified, default to `, `
	ConcatenationString *string `json:"concatenationString,omitempty" protobuf:"bytes,3,opt,name=concatenationString"`
	// The default text value, if one could not be extracted from the nodes. If unspecified, the column will be left null
	Default *int32 `json:"default,omitempty" protobuf:"bytes,5,opt,name=default"`
}

type BooleanSpec struct {
	// The method to use for determining the final boolean value extracted from all nodes. If unspecified, default to mean
	ExtractionMode *NumberExtractionMode `json:"extractionMode,omitempty" protobuf:"bytes,1,opt,name=extractionMode"`
	// The default boolean value, if one could not be extracted from the nodes. If unspecified, the column will be left null
	Default *bool `json:"default,omitempty" protobuf:"bytes,2,opt,name=default"`
}

// Column defines the schema for a single column in a table managed by a SQL index
type Column struct {
	// The name of the column
	Name string `json:"name,omitempty" protobuf:"bytes,1,opt,name=name"`
	// The data type of the column. When a specification for a data type is provided, this field may be omitted.
	// When not provided, the defaults for the data type will be used
	Type DataType `json:"type,omitempty" protobuf:"bytes,2,opt,name=type"`
	// The specification for an integer column
	Integer *IntegerSpec `json:"integer,omitempty" protobuf:"bytes,3,opt,name=integer"`
	// The specification for a float column
	Float *FloatSpec `json:"float,omitempty" protobuf:"bytes,4,opt,name=float"`
	// The specification for a text column
	Text *TextSpec `json:"text,omitempty" protobuf:"bytes,5,opt,name=text"`
	// The specification for a boolean column
	Boolean *BooleanSpec `json:"boolean,omitempty" protobuf:"bytes,6,opt,name=boolean"`
	// The description of the column, which the LLM will use to extract the value of the column from documents
	Description string `json:"description,omitempty" protobuf:"bytes,7,opt,name=description"`
	// The metadata key of the document being processed which will be used as a value for the column
	MetadataKey *string `json:"metadataKey,omitempty" protobuf:"bytes,8,opt,name=metadataKey"`
}

// Schema defines the schema of a table managed by a SQL index
type Schema struct {
	// The description of the table
	Description string `json:"description,omitempty" protobuf:"bytes,1,opt,name=description"`
	// The columns of the table
	Columns []Column `json:"columns,omitempty" protobuf:"bytes,2,opt,name=columns"`
}

// SQLIndexSpec defines the configuration for a SQL index. A SQL index can ingest unstructured documents by
// extracting data points that can be inserted into a SQL database
type SQLIndexSpec struct {
	// The LLMServer to use when extracting data points from documents
	Model *ModelSpec `json:"model,omitempty" protobuf:"bytes,1,opt,name=model"`
	// The name of the connection the SQL database
	DatabaseConnectionName string `json:"databaseConnectionName,omitempty" protobuf:"bytes,2,opt,name=databaseConnectionName"`
	// The name of the table. If the table does not exist, a table schema must be provided in Schema
	TableName *string `json:"tableName,omitempty" protobuf:"bytes,3,opt,name=tableName"`
	// The name of the required column specifying the document which the data point belongs to.
	// If unspecified, default to `ref_doc_id`. The column will automatically be appended to created tables
	RefDocColumn *string `json:"refDocColumn,omitempty" protobuf:"bytes,4,opt,name=refDocColumn"`
	// The schema of the table managed by the index. If present, the schema will be validated against the database table
	Schema *Schema `json:"schema,omitempty" protobuf:"bytes,5,opt,name=schema"`
	// Granularity defines the scale at which data points are extracted from documents produced by readers.
	// For example, the `node` granularity will extract a data point for each page in a PDF file, whilst the
	// `document` granularity will extract a single data point for the entire file. If unspecified, default to `document`
	Granularity *Granularity `json:"granularity,omitempty" protobuf:"bytes,6,opt,name=granularity"`
}
