/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.metaprov.modeldapi.pkg.apis.catalog.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/api/rbac/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Algorithm define the metadata about a machine learning algorithm.
// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Namespaced
// +kubebuilder:resource:path=algorithms,singular=algorithm,categories={catalog,modeld,all}
// +kubebuilder:printcolumn:name="Framework",type="string",JSONPath=".spec.frameworkName",description="ML Framework name"
// +kubebuilder:printcolumn:name="Docs",type="string",JSONPath=".spec.url",description=""
// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task",description="ML task name"
// +kubebuilder:printcolumn:name="Age",type=date,JSONPath=`.metadata.creationTimestamp`
message Algorithm {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional AlgorithmSpec spec = 2;
}

// +kubebuilder:object:root=true
// AlgorithmList contains a list of Algorithm
message AlgorithmList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Algorithm items = 2;
}

// AlgorithmSpec describes the attributes of an machine learning algorithm
message AlgorithmSpec {
  // FrameworkName is a reference to library
  // +kubebuilder:validation:Required
  optional string frameworkName = 1;

  // Description is the description of the algorithm
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string description = 2;

  // URL is a url to the html page describing the algorithm
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string url = 3;

  // Task is the machine learning task (binary classification / regression)
  // +kubebuilder:validation:Optional
  optional string task = 4;

  // Sparse indicate if this algorithm can deal with sparse data
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool sparse = 5;

  // IntegerParameters is the list of integer hyper parameter ranges.
  // +kubebuilder:validation:Optional
  repeated IntParameter integerParameters = 6;

  // FloatParameters is the list of float hyper parameters ranges
  // +kubebuilder:validation:Optional
  repeated FloatParameter floatParameters = 7;

  // CategoricalParameters is the list of categorical hyper parameters ranges
  // +kubebuilder:validation:Optional
  repeated CategoricalParameter categoricalParameters = 8;
}

// CategoricalParameter contain the specification of an categorical hyper parameter
message CategoricalParameter {
  // Name is the name of the hyper parameter
  // +kubebuilder:validation:Optional
  optional string name = 1;

  // DefaultValue if the default categorical value
  optional string defaultValue = 2;

  // Enums defines the list of values
  // +kubebuilder:validation:Optional
  repeated string enums = 3;
}

// Cloud represent a cloud provider metadata. A cloud contains regions,datacenter,machine classes
// +kubebuilder:object:root=true
// +kubebuilder:resource:path=clouds,singular=cloud,categories={catalog,modeld,all}
message Cloud {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional CloudSpec spec = 2;

  // +optional
  optional CloudStatus status = 3;
}

// +kubebuilder:object:root=true
// CloudList contains a list of Cloud
message CloudList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Cloud items = 2;
}

// CloudSpec define the attribute of a single cloud provider (E.g. AWS)
message CloudSpec {
  // DefaultRegionName is the default region.
  // +kubebuilder:validation:Optional
  optional string defaultRegionName = 1;

  // DefaultMachineClassName is the default machine class. Used when allocating new machine on this provider
  // +kubebuilder:validation:Optional
  optional string defaultMachineClassName = 2;

  // DefaultGpuClassName is the default gpu class. Used when allocating new gpu on this provider
  // +kubebuilder:validation:Optional
  optional string defaultGpuClassName = 3;

  // MachineClasses defines the types of machines in this provider
  // +kubebuilder:validation:Optional
  repeated MachineClass machineClasses = 4;

  // GPUClasses define the type of GPUs offered by this provider
  // +kubebuilder:validation:Optional
  repeated GpuClass gpuClasses = 5;

  // Regions define the type of regions offered by this provider
  // +kubebuilder:validation:Optional
  repeated Region regions = 6;
}

// CloudStatus defines the observed state of Cloud.
message CloudStatus {
  // Machine cost is the costs of
  repeated MachineClassCost machineCosts = 1;

  // CostSpot is the spot cost of the machine class
  repeated GpuClassCost gpuCosts = 2;
}

// Datacenter contains the attribute of a specific data center
message DataCenter {
  // Name is the name of the datacenter
  optional string name = 1;

  // Code is the code of the datacenter
  optional string code = 2;
}

// FloatParameter contain the specification of an float hyper parameter
message FloatParameter {
  // Name is the name of the hyper parameter
  // +kubebuilder:validation:Optional
  optional string name = 1;

  // Min is the minimum value
  // +kubebuilder:validation:Optional
  optional double min = 3;

  // Max is the maximum value
  // +kubebuilder:validation:Optional
  optional double max = 4;

  // Default float value
  // +kubebuilder:validation:Optional
  optional double defaultValue = 5;

  // Log specify if this hyper paramer is logartimic
  // +kubebuilder:validation:Optional
  optional bool log = 6;
}

// GithubEvents specify repo and the events to listen in order ot fire the pipeline
message GithubEvents {
  // The github connections used to loginto git
  optional string gitConnectionName = 1;

  // Repository is the name of the github repository
  optional string repository = 2;

  // Branch is the name of the github branch.
  // By default the trigger listen to all branch
  optional string branch = 3;

  // Blobname regex is a regular expression on the blob name that changed
  optional string blobNameRegex = 4;

  // Events is the name of the github events.
  repeated string events = 5;
}

// GpuClass define the specific for a machine type of a cloud provider
message GpuClass {
  // Code the the code of the gpu class within the data provider
  optional string code = 1;

  optional string regionName = 2;

  // Vcpu is the number of cores
  optional int32 vcpu = 3;

  // Gpumem is the amount of memory on the gpu
  optional k8s.io.apimachinery.pkg.api.resource.Quantity gpumem = 4;
}

// GpuClassCost contain the current cost of a gpu class in a region
message GpuClassCost {
  // Code is the machine class code
  optional string code = 1;

  optional string region = 2;

  // CostPerMinute is the cost per minute in dollar of the machine class
  optional k8s.io.apimachinery.pkg.api.resource.Quantity costPerMinute = 3;

  // CostSpot is the spot cost of the machine class
  optional k8s.io.apimachinery.pkg.api.resource.Quantity costSpot = 4;
}

// IntParameter contain the specification of an integer hyper parameter
message IntParameter {
  // Name is the name of the hyper parameter
  // +kubebuilder:validation:Optional
  optional string name = 1;

  // Type is the datatype of the parameter
  // +kubebuilder:validation:Optional
  optional string type = 2;

  // Min is the minimum value of the hyper parameter range
  // +kubebuilder:validation:Optional
  optional int32 min = 3;

  // Max is the maximum value of the hyper parameter range
  // +kubebuilder:validation:Optional
  optional int32 max = 4;

  // DefaultValue is the default value of the parameter
  optional int32 defaultValue = 6;
}

// MLFramework define the metadata about a machine learning framework
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="URL",type="string",JSONPath=".spec.url"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:resource:path=mlframeworks,singular=mlframework,categories={catalog,modeld,all}
message MLFramework {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MLFrameworkSpec spec = 2;
}

// +kubebuilder:object:root=true
// MLFrameworkList contains a list of MLFramework
message MLFrameworkList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated MLFramework items = 2;
}

// MLFramework is the spec for a specific version of machine learning framework (e.g. tensorflow)
message MLFrameworkSpec {
  // URL for the home page of the mlframework
  // +kubebuilder:validation:Optional
  optional string url = 1;

  // Comments of the framework
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string description = 2;

  // The current version of the mlframework
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string version = 3;

  // Lang is the framework lang
  // +kubebuilder:validation:Optional
  optional string lang = 4;
}

// MachineClass define the specific for a machine type of a cloud provider
message MachineClass {
  // Code the the code of the machine class within the data provider
  optional string code = 1;

  // +optional
  optional string regionName = 2;

  // Mem is the amount of memory on this machine
  // +optional
  optional k8s.io.apimachinery.pkg.api.resource.Quantity mem = 3;

  // Vcpu is the number of virtual cpus on this machine
  // +optional
  optional int32 vcpu = 4;

  // Storage is the amount of storage on this machine class
  // +optional
  optional string storage = 5;
}

// MachineClassCost contain the current cost of a machine class in a region
message MachineClassCost {
  // Code is the machine class code
  optional string code = 1;

  // Region is the code of the region
  optional string region = 2;

  // CostPerMinute is the cost per minute in dollar of the machine class
  optional k8s.io.apimachinery.pkg.api.resource.Quantity costPerMinute = 3;

  // CostSpot is the spot cost of the machine class
  optional k8s.io.apimachinery.pkg.api.resource.Quantity costSpot = 4;
}

// Measurement is a value for a specific metric
message Measurement {
  // The metric type name (e.g. F1 / Accuracy)
  // +kubebuilder:validation:Required
  optional string metric = 1;

  // The value for this model
  // +kubebuilder:validation:Required
  optional double value = 2;
}

// The desired state of the model.
message ModelDeploymentSpec {
  // ModelName is the name of the model. The name must be unique within
  // +kubebuilder:validation:Required
  optional string modelName = 1;

  // The version of the model. Note that a single predictor might serve different models
  optional string modelVersion = 2;

  // How much traffic this deployment model should serve.
  // Default: 100.
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Maximum=100
  // +kubebuilder:validation:Minimum=0
  optional int32 maxTraffic = 3;

  // Traffic is the current amount of production traffic served by this model.
  // +kubebuilder:validation:Maximum=100
  // +kubebuilder:validation:Minimum=0
  // Default: 100.
  // +kubebuilder:validation:Optional
  optional int32 traffic = 4;

  // Canary denotes if this deployment is staged release. A staged release will serve traffic in incerements
  // Default: false
  // +kubebuilder:validation:Optional
  optional bool canary = 5;

  // Shadow denotes if the model is running in shadow mode. a shadow model face the production traffic, however, the predictions are not
  // served back to the client
  // Default: false
  // +kubebuilder:validation:Optional
  optional bool shadow = 6;

  // A released model is a model that should serve production traffic.
  // Default: false
  // +kubebuilder:validation:Optional
  optional bool released = 7;

  // a deployed model is a model whose containers are up, but does not serve production traffic.
  // Default: false
  // +kubebuilder:validation:Optional
  optional bool deployed = 8;

  // TrafficSelector is a filter on the traffic to this model
  // +kubebuilder:validation:Optional
  optional string trafficSelector = 9;

  // If the deployment is canary, the metric define how to evaluate the canary.
  // Default: none
  // +kubebuilder:validation:Optional
  repeated string canaryMetrics = 10;
}

message ModelDeploymentStatus {
  // The model image name
  optional string imageName = 1;

  // The deployment name that serves this model
  optional string deploymentName = 2;

  // The service name that serves this model
  optional string serviceName = 3;

  // the name of the horizonal pod autoscaler, if autoscaling is true
  optional string hpaName = 4;

  // P95 latency
  optional double current95 = 5;

  // P99 is the 99% latency of the model
  optional double current99 = 6;

  // Last prediction time is the time of the last prediction
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastPredictionTime = 7;

  optional int32 dailyPredictionAvg = 8;

  // LastFailure is the last faiure that occur with the model
  optional string lastFailure = 9;

  // Phase is the current phase of this model deployment
  optional string phase = 10;

  // DeployedAt is the last time that this model was deployed
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time deployedAt = 11;

  // ReleasedAt is the time that this model was released
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time releasedAt = 12;
}

// Pretrained model contain the metadata about a pretrained model
// +kubebuilder:object:root=true
message PretrainedModel {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PretrainedModelSpec spec = 2;
}

// +kubebuilder:object:root=true
// PretrainedModelList is a list of pretrained models
message PretrainedModelList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated PretrainedModel items = 2;
}

// PretrainedModelSpec is the desired state of the pretrained model
message PretrainedModelSpec {
  // Image is the docker image of the pretrained model
  optional string image = 1;
}

// PublicDataset represent the metadata about a public dataset
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Image",type="string",JSONPath=".spec.image"
// +kubebuilder:resource:path=publicdatasets,singular=publicdataset,categories={catalog,modeld,all}
message PublicDataset {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PublicDatasetSpec spec = 2;
}

// +kubebuilder:object:root=true
// PublicDatasetList contains a list of PublicDataset
message PublicDatasetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated PublicDataset items = 2;
}

message PublicDatasetSpec {
  // +kubebuilder:validation:Optional
  optional string image = 1;

  // Task is the machine learning task of the public dataset
  // +kubebuilder:validation:Optional
  optional string task = 2;

  // +kubebuilder:validation:Optional
  optional string id = 3;

  // +kubebuilder:validation:Optional
  optional string externalName = 4;

  // +kubebuilder:validation:Optional
  optional string dataUrl = 5;
}

// Region defines a region within the data provider
message Region {
  // Code is the code of the region
  optional string code = 1;

  // The default datacenter for a region
  // +optional
  optional string defaultDatacenterName = 2;

  // Location is the location code The location of the region
  optional string location = 3;

  // BillingCode is the billing code of the region
  optional string billingCode = 4;

  // Datacenters if the list of datacenters
  repeated DataCenter datacenters = 5;
}

// Run Schedule is a specification for job schedule
message RunSchedule {
  // The start time of the schedule
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 1;

  // StartDay is the start day of the schedule
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startDay = 2;

  // EndTime is the end time of the schedule
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp endTime = 3;

  // EndDay is the end day of the schedule
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endDay = 4;

  // Cron string of the schedule.
  // +kubebuilder:validation:Optional
  optional string cron = 5;

  // +kubebuilder:validation:Optional
  // The type of schedule events.
  optional string type = 6;
}

// UserRoleClass specify the RBAC premission for a specific user role.
// +kubebuilder:resource:path=userroleclasses,singular=userroleclass,categories={catalog,modeld,all}
// +kubebuilder:object:root=true
message UserRoleClass {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional UserRoleClassSpec spec = 2;
}

// +kubebuilder:object:root=true
// UserRoleClassList contains a list of UserRoleClass
message UserRoleClassList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated UserRoleClass items = 2;
}

// UserRoleClassSpec is the spec for UserRoleClass
message UserRoleClassSpec {
  // +kubebuilder:validation:Optional
  repeated k8s.io.api.rbac.v1.PolicyRule rules = 1;
}

message VizUri {
  optional string name = 1;

  optional string uri = 2;
}

// WorkloadClass define a template for a job.
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Image",type="string",JSONPath=".spec.image"
// +kubebuilder:printcolumn:name="vCpu",type="string",JSONPath=".spec.vcpu"
// +kubebuilder:printcolumn:name="Memory",type="string",JSONPath=".spec.mem"
// +kubebuilder:printcolumn:name="Gpu",type="integer",JSONPath=".spec.gpu"
// +kubebuilder:resource:path=workloadclasses,singular=workloadclass,categories={catalog,modeld,all}
message WorkloadClass {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional WorkloadClassSpec spec = 2;
}

// +kubebuilder:object:root=true
// TrainerList contains a list of Trainer
message WorkloadClassList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated WorkloadClass items = 2;
}

// WorkloadClassSpec defines the specification of  a workload class.
message WorkloadClassSpec {
  // DataImage is the container image used to data tasks
  // +kubebuilder:validation:Required
  optional string dataImage = 1;

  // ControlImage is the container image used for control
  // +kubebuilder:validation:Required
  optional string controlImage = 2;

  // TrainerImage is the image used for training models
  // +kubebuilder:validation:Required
  optional string trainerImage = 3;

  // PublisherImage is the image used for publishing models
  // +kubebuilder:validation:Required
  optional string publisherImage = 4;

  // Vcpu is the number of cpu
  // +kubebuilder:validation:Optional
  optional float vcpu = 5;

  // Memory is the amount of memory offered by thie template
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.api.resource.Quantity mem = 6;

  // Number of gpus of this workload
  // +kubebuilder:validation:Optional
  optional int32 gpu = 7;

  // Template is the Pod specification for new trainers from this workload class.
  // +kubebuilder:validation:Required
  optional k8s.io.api.core.v1.PodTemplateSpec podTemplate = 8;
}

