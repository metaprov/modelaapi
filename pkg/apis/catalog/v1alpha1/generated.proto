/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.metaprov.modeld.pkg.apis.catalog.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/api/rbac/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=algorithms,singular=algorithm,categories={catalog,modeld,all}
// +kubebuilder:printcolumn:name="Framework",type="string",JSONPath=".spec.frameworkName",description=""
// +kubebuilder:printcolumn:name="Repository",type="string",JSONPath=".spec.url",description=""
// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task",description=""
message Algorithm {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional AlgorithmSpec spec = 2;

  // +optional
  optional AlgorithmStatus status = 3;
}

// +kubebuilder:object:root=true
// AlgorithmList contains a list of Algorithm
message AlgorithmList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Algorithm items = 2;
}

// Algorithm is the spec for a machine learning algorithm
// All of the fields are real only
message AlgorithmSpec {
  // FrameworkRef is a reference to library
  // +optional
  optional string frameworkName = 1;

  // The Algorithm description
  // +optional
  optional string description = 2;

  // The Algorithm Url
  // +optional
  optional string url = 3;

  // The Algorithm Task (binary classification / regression)
  // +optional
  optional string task = 4;

  // The Algorithm Task (binary classification / regression)
  // +optional
  optional bool sparse = 5;

  // Integer hyper parameters
  // +optional
  repeated IntParameter integerParameters = 6;

  // Integer hyper parameters
  // +optional
  repeated FloatParameter floatParameters = 7;

  // Categorical hyper parameters
  repeated CategoricalParameter categoricalParameters = 8;
}

// AlgorithmStatus defines the observed state of Datacenter.
message AlgorithmStatus {
}

message CategoricalParameter {
  // FileName is the name of the hyper parameter
  // +optional
  optional string name = 1;

  // Default value
  optional string defaultValue = 8;

  // +optional
  repeated string enums = 10;
}

// ==============================================================================
// CloudName
// ==============================================================================
// +genclient
// +genclient:noStatus
// +k8s:openapi-gen=true
// +kubebuilder:object:root=true
// +kubebuilder:resource:path=clouds,singular=cloud,categories={catalog,modeld,all}
// Cloud represent a cloud provider. A cloud contains RegionName, machines
message Cloud {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional CloudSpec spec = 2;

  // +optional
  optional CloudStatus status = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// CloudList contains a list of CloudName
message CloudList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Cloud items = 2;
}

message CloudSpec {
  optional string defaultRegionName = 1;

  optional string defaultMachineClassName = 2;

  optional string defaultGpuClassName = 3;

  repeated MachineClass machineClasses = 4;

  repeated GpuClass gpuClasses = 5;

  repeated Region regions = 6;
}

// CloudStatus defines the observed state of Cloud.
message CloudStatus {
  repeated MachineClassCost machineCosts = 1;

  repeated GpuClassCost gpuCosts = 2;
}

// Update the error that occured during the operator reconcile process.
message CustomResourceError {
  // time of error
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time occurredAt = 1;

  // error message
  optional string message = 2;
}

message DataCenter {
  optional string name = 1;

  optional string code = 2;
}

message FloatParameter {
  // FileName is the name of the hyper parameter
  // +optional
  optional string name = 1;

  // Min is the minimum value
  // +optional
  optional double minimum = 3;

  // Max is the maximum value
  // +optional
  optional double maximum = 4;

  // Default float value
  // +optional
  optional double defaultValue = 5;
}

message GpuClass {
  optional string cloudName = 1;

  optional string regionName = 2;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity mem = 3;

  optional int32 vcpu = 4;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity gpumem = 5;

  optional string storage = 6;
}

message GpuClassCost {
  optional string region = 1;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity costPerMinute = 2;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity costSpot = 3;
}

// IntParameter contain the specification of an integer hyper parameter
message IntParameter {
  // FileName is the name of the hyper parameter
  // +optional
  optional string name = 1;

  // Type is the datatype of the parameter
  // +optional
  optional string type = 2;

  // Min is the minimum value
  // +optional
  optional int32 minimum = 3;

  // Max is the maximum value
  // +optional
  optional int32 maximum = 4;

  // Default float value
  optional int32 defaultValue = 6;
}

// +genclient
// +genclient:noStatus
// +k8s:openapi-gen=true
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Name",type="string",JSONPath=".spec.url"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:resource:path=mlframeworks,singular=mlframework,categories={catalog,modeld,all}
message MLFramework {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MLFrameworkSpec spec = 2;

  // +optional
  optional MLFrameworkStatus status = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// MLFrameworkList contains a list of MLFramework
message MLFrameworkList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated MLFramework items = 2;
}

// MLFramework is the spec for a specific version of machine learning framework (e.g. tensorflow)
message MLFrameworkSpec {
  // Url for the home page of the mlframework
  optional string url = 1;

  // Comments of the framework
  // +Optional
  optional string description = 2;

  // The current version of the mlframework
  optional string version = 3;
}

// MLFrameworkStatus defines the observed state of Datacenter.
message MLFrameworkStatus {
}

message MachineClass {
  // +optional
  optional string cloudName = 1;

  // +optional
  optional string regionName = 2;

  // +optional
  optional k8s.io.apimachinery.pkg.api.resource.Quantity mem = 3;

  // +optional
  optional int32 vcpu = 4;

  // +optional
  optional string storage = 5;
}

message MachineClassCost {
  optional string region = 1;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity costPerMinute = 2;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity costSpot = 3;
}

// +genclient
// +genclient:noStatus
// +kubebuilder:object:root=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message PretrainedModel {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PretrainedModelSpec spec = 2;

  // +optional
  optional PretrainedModelStatus status = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// PretrainedModelList is a list of pretrained models
message PretrainedModelList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated PretrainedModel items = 2;
}

// PrebuildModelSpec is the desired state of the pretrained model
message PretrainedModelSpec {
  optional string image = 1;
}

message PretrainedModelStatus {
}

// PublicDataset
// +k8s:openapi-gen=true
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Image",type="string",JSONPath=".spec.image"
// +kubebuilder:resource:path=publicdatasets,singular=publicdataset,categories={catalog,modeld,all}
message PublicDataset {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PublicDatasetSpec spec = 2;
}

// +kubebuilder:object:root=true
// PublicDatasetList contains a list of PublicDataset
message PublicDatasetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated PublicDataset items = 2;
}

message PublicDatasetSpec {
  optional string image = 1;

  optional string task = 2;

  optional string id = 3;

  optional string externalName = 4;

  optional string dataUrl = 5;
}

message Region {
  optional string cloudName = 1;

  // The default datacenter for a region
  // +optional
  optional string defaultDatacenterName = 2;

  // The location of the region
  optional string location = 3;

  // The billing code of the region
  optional string billingCode = 4;

  repeated DataCenter datacenters = 5;
}

// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:priority=0,name="Cloud",type=string,JSONPath=".spec.cloud",description="Cloud provider",format=""
// +kubebuilder:printcolumn:priority=0,name="Task",type=string,JSONPath=".spc.task",description="machine learning task",format=""
message UserRoleClass {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional UserRoleClassSpec spec = 2;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// UserRoleClassList contains a list of UserRoleClass
message UserRoleClassList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated UserRoleClass items = 2;
}

// UserRoleClassSpec is the spec for UserRoleClass
message UserRoleClassSpec {
  repeated k8s.io.api.rbac.v1.PolicyRule rules = 1;
}

message VizUri {
  optional string name = 1;

  optional string uri = 2;
}

// Trainer class define a template for a trainer.
// +k8s:openapi-gen=true
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Image",type="string",JSONPath=".spec.image"
// +kubebuilder:resource:path=workloadclasses,singular=workloadclass,categories={catalog,modeld,all}
message WorkloadClass {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional WorkloadClassSpec spec = 2;
}

// +kubebuilder:object:root=true
// TrainerList contains a list of Trainer
message WorkloadClassList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated WorkloadClass items = 2;
}

message WorkloadClassSpec {
  optional string image = 1;

  repeated string tasks = 2;

  optional MLFrameworkList frameworks = 3;

  // The Pod specification for new trainers from this workload class.
  optional k8s.io.api.core.v1.PodTemplateSpec podTemplate = 4;
}

