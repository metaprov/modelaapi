/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.metaprov.modeldapi.pkg.apis.team.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message Alert {
  // +optional
  optional string name = 1;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time at = 2;
}

message Comment {
  optional string id = 1;

  // The author of the comment
  optional k8s.io.api.core.v1.ObjectReference authorRef = 2;

  // If this comment is a reply to an id
  // +optional
  optional string replyTo = 3;

  // The content of the comment
  optional string content = 4;

  // Time when the comment was posted
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time postedAt = 5;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=conversations,shortName=cv,singular=conversation,categories={team,modeld}
// Conversation represents a comment about any conversation
message Conversation {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the desired state of the Converation.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ConversationSpec spec = 2;

  // Status is the desired state of the Conversation.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ConversationStatus status = 3;
}

// VitualBucketCondition describes the state of a virtual bucket at a certain point.
message ConversationCondition {
  // Type of bucket condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// ConversationList is a list of Conversations
message ConversationList {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of Conversation objects.
  repeated Conversation items = 2;
}

// ConversationSpec defines the desired state of BucketName
message ConversationSpec {
  // The target of the conversation
  optional k8s.io.api.core.v1.ObjectReference entityRef = 1;

  // Messages are the messages of the conversation.
  repeated Comment messages = 2;

  // The owner account name
  // +optional
  optional string owner = 3;
}

message ConversationStatus {
  // +optional
  repeated ConversationCondition conditions = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=postmortems,shortName=pt,singular=postmortem,categories={team,modeld,all}
// PostMortem represent a comment about any entity
message PostMortem {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the desired state of the PostMortem.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional PostMortemSpec spec = 2;

  optional PostMortemStatus status = 3;
}

// VitualBucketCondition describes the state of a virtual bucket at a certain point.
message PostMortemCondition {
  // Type of bucket condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// PostMortemList is a list of PostMortems
message PostMortemList {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated PostMortem items = 2;
}

// PostMortemSpec defines the desired state of PostMorem
message PostMortemSpec {
  // The target object of the post mortem for example a predictor.
  // +optional
  optional k8s.io.api.core.v1.ObjectReference entityRef = 1;

  // The place of the events, can be lab or serving site.
  // +optional
  optional k8s.io.api.core.v1.ObjectReference locationRef = 2;

  // Reference to accounts that handled the post-mortem
  // +optional
  repeated k8s.io.api.core.v1.ObjectReference handledBy = 3;

  // Alerts
  // +optional
  repeated Alert alert = 4;

  // Timeline is the list of events that happed during the events
  // +optional
  repeated TimeLineEvent timeline = 5;

  // Root cause
  // +optional
  optional string rootCause = 6;

  // Summary of the post morten
  // +optional
  optional string summary = 7;

  // The owner account name
  // +optional
  optional string owner = 8;
}

// PostMortemStatus defines the actual state of a PostMortem
message PostMortemStatus {
  // +optional
  repeated PostMortemCondition conditions = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=runbooks,shortName=rb,singular=runbook,categories={data,modeld}
// RunBook represent a list of instructions for a specific operation
message RunBook {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the observed state of the RunBook.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional RunBookSpec spec = 2;

  optional RunBookStatus status = 3;
}

// RunBookCondition describes the state of a RunBook at a certain point.
message RunBookCondition {
  // Type of condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // The last time this condition was updated.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 3;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// RunBookList is a list of RunBooks
message RunBookList {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated RunBook items = 2;
}

// RunBookSpec defines the desired state of RunBook
message RunBookSpec {
  // The target object of run book
  // +optional
  optional k8s.io.api.core.v1.ObjectReference entityRef = 1;

  // The author of the comment
  optional k8s.io.api.core.v1.ObjectReference authorRef = 2;

  // The owner account name
  // +optional
  optional string owner = 3;
}

// RunBookStatus defines the actual state of a RunBook
message RunBookStatus {
  // +optional
  repeated RunBookCondition conditions = 1;
}

message TimeLineEvent {
  // +optional
  optional string content = 1;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time at = 2;
}

