/**
*
* Copyright (C) 2017 modela authors
* For license information, see LICENSE.txt
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option (gogoproto.marshaler_all) = true;
option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option go_package = "github.com/metaprov/modelaapi/pkg/apis/team/v1alpha1";

message ActionItem {
  // The action to take in this action time
  // +kubebuilder:validation:Optional
  optional string action = 1 [(gogoproto.customname) = "Action", (gogoproto.nullable) = false];

  // action due date
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time due = 2 [(gogoproto.customname) = "Due"];

  // The account to which the action is assigned to
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference assignedTo = 3 [(gogoproto.customname) = "AssignedTo"];
}

message CheckListItem {
  // The step ID
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string id = 1 [(gogoproto.customname) = "ID"];

  // Instruction to follow.
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string instruction = 2 [(gogoproto.customname) = "Instruction"];

  // Enabled indicate weather this item is enabled
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool enabled = 3 [(gogoproto.customname) = "Enabled"];

  // Condition is the condition to use this checklist item
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string condition = 4 [(gogoproto.customname) = "Condition"];

  // The command line to execute when running the step.
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string command = 5 [(gogoproto.customname) = "Command"];

  // What must be true before the step
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string precondition = 6 [(gogoproto.customname) = "PreCondition"];

  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string postcondition = 7 [(gogoproto.customname) = "PostCondition"];
}

// Commnet represents a single comment in the review
message Comment {
  // ID is the comment ID. Used when replying to a comment.
  optional string id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];

  // AuthorRef is a reference to the author of the comment
  optional k8s.io.api.core.v1.ObjectReference authorRef = 2 [(gogoproto.customname) = "AuthorRef"];

  // If this comment is a reply to an id
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string replyTo = 3 [(gogoproto.customname) = "ReplyToID"];

  // Content is the content of the comment
  // +kubebuilder:default:=""
  optional string content = 4 [(gogoproto.customname) = "Content"];

  // PostedAt is the time when the comment was posted
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time postedAt = 5 [(gogoproto.customname) = "PostedAt"];

  // Sent indicate if the comment was sent to the notifier.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool sent = 6 [(gogoproto.customname) = "Sent"];

  // Pin the comment
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool pinned = 7 [(gogoproto.customname) = "Pinned"];

  // The ID of the reply
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string replyIndicationID = 8 [(gogoproto.customname) = "ReplyIndicationID"];

  // The URL of an Image attached to this review
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string imageURL = 9 [(gogoproto.customname) = "ImageURL"];

  // The ID of the reply
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string accountMentionID = 10 [(gogoproto.customname) = "AccountMentionID"];
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase",description=""
// +kubebuilder:printcolumn:name="Description",type="string",JSONPath=".spec.description",description=""
// +kubebuilder:printcolumn:name="Entity Namespace",type="string",JSONPath=".spec.entityRef.name",description=""
// +kubebuilder:printcolumn:name="Entity Name",type="string",JSONPath=".spec.entityRef.namespace",description=""
// +kubebuilder:printcolumn:name="Time",type="date",JSONPath=".spec.time",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=meetings,singular=meeting,categories={infra,modela}
message Meeting {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional MeetingSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  // +optional
  optional MeetingStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// MeetingCondition describes the state of the license at a certain point.
message MeetingCondition {
  // Type of account condition.
  optional string type = 1 [(gogoproto.casttype) = "MeetingConditionType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2 [(gogoproto.casttype) = "k8s.io/api/core/v1.ConditionStatus", (gogoproto.customname) = "Status", (gogoproto.nullable) = false];

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3 [(gogoproto.customname) = "LastTransitionTime"];

  // The reason for the condition's last transition.
  optional string reason = 4 [(gogoproto.customname) = "Reason", (gogoproto.nullable) = false];

  // A human-readable message indicating details about the transition.
  optional string message = 5 [(gogoproto.customname) = "Message", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// MeetingList is a list of Meetings
message MeetingList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated Meeting items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// MeetingSpec defines the desired state of Meeting
message MeetingSpec {
  // Description of the meeting
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string description = 1 [(gogoproto.customname) = "Description"];

  // Agenda of the meeting
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string agenda = 2 [(gogoproto.customname) = "Agenda"];

  // The modela entity that the meeting is about
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference entityRef = 3 [(gogoproto.customname) = "EntityRef", (gogoproto.nullable) = false];

  // NotifierName is the name of the notifier used to fire the alert.
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string notifierName = 4 [(gogoproto.customname) = "NotifierName"];

  // Assigned to is the user name assigned to this task
  // +kubebuilder:validation:Optional
  repeated string participants = 5 [(gogoproto.customname) = "Participants"];

  // Flagged denote if the meeting is flagged
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool flagged = 6 [(gogoproto.customname) = "Flagged"];

  // Reminder is the time to send a reminder
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time reminder = 7 [(gogoproto.customname) = "Reminder"];

  // The meeting notes.
  // +kubebuilder:validation:Optional
  optional string notes = 8 [(gogoproto.customname) = "Notes", (gogoproto.nullable) = false];

  // the meeting action items
  // +kubebuilder:validation:Optional
  repeated ActionItem actionItems = 9 [(gogoproto.customname) = "ActionItems", (gogoproto.nullable) = false];

  // TenantRef is the commit tenant
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference tenantRef = 10 [(gogoproto.customname) = "TenantRef"];

  // The meeting time
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 11 [(gogoproto.customname) = "Time"];

  // A link to calender URL
  // +kubebuilder:validation:Optional
  optional string calendarURL = 12 [(gogoproto.customname) = "CalendarURL"];
}

// MeetingStatus is the observed state of a Meeting
message MeetingStatus {
  // Phase is the phase of the meeting
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 1 [(gogoproto.casttype) = "MeetingPhase", (gogoproto.customname) = "Phase", (gogoproto.nullable) = false];

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 2 [(gogoproto.customname) = "ObservedGeneration", (gogoproto.nullable) = false];

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 6 [(gogoproto.customname) = "LastUpdated"];

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated MeetingCondition conditions = 7 [(gogoproto.customname) = "Conditions", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=postmortems,shortName=pt,singular=postmortem,categories={team,modela,all}
// PostMortem represent a post mortem
message PostMortem {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional PostMortemSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  // +optional
  optional PostMortemStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// Post Morem Condition describes the state of a post mortem at a certain point.
message PostMortemCondition {
  // Type of bucket condition.
  optional string type = 1 [(gogoproto.casttype) = "PostMortemConditionType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2 [(gogoproto.casttype) = "k8s.io/api/core/v1.ConditionStatus", (gogoproto.customname) = "Status", (gogoproto.nullable) = false];

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3 [(gogoproto.customname) = "LastTransitionTime"];

  // The reason for the condition's last transition.
  optional string reason = 4 [(gogoproto.customname) = "Reason", (gogoproto.nullable) = false];

  // A human readable message indicating details about the transition.
  optional string message = 5 [(gogoproto.customname) = "Message", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// PostMortemList is a list of PostMortems
message PostMortemList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated PostMortem items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// PostMortemSpec defines the desired state of PostMorem
message PostMortemSpec {
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  // Description of the meeting
  optional string description = 1 [(gogoproto.customname) = "Description"];

  // The target object of the post mortem for example a predictor.
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference entityRef = 2 [(gogoproto.customname) = "EntityRef"];

  // The place of the events, can be lab or serving site.
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference locationRef = 3 [(gogoproto.customname) = "LocationRef"];

  // Reference to accounts that handled the post-mortem
  // +kubebuilder:validation:Optional
  repeated k8s.io.api.core.v1.ObjectReference handledBy = 4 [(gogoproto.customname) = "HandledBy", (gogoproto.nullable) = false];

  // Alerts
  // +kubebuilder:validation:Optional
  repeated RaisedAlert alerts = 5 [(gogoproto.customname) = "Alerts", (gogoproto.nullable) = false];

  // Timeline is the list of events that happed during the events
  // +kubebuilder:validation:Optional
  repeated TimeLineEvent timeline = 6 [(gogoproto.customname) = "TimeLine", (gogoproto.nullable) = false];

  // Root cause
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string rootCause = 7 [(gogoproto.customname) = "RootCause"];

  // Summary of the post mortem
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string summary = 8 [(gogoproto.customname) = "Summary"];

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 9 [(gogoproto.customname) = "Owner"];

  // TenantRef is the commit tenant
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference tenantRef = 10 [(gogoproto.customname) = "TenantRef"];

  // The start time of the post mortem
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 11 [(gogoproto.customname) = "StartTime"];

  // The detection time of the post mortem
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time detectionTime = 12 [(gogoproto.customname) = "DetectionTime"];

  // The end time of the post mortem.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 13 [(gogoproto.customname) = "EndTime"];

  // Attach image to the post mortem.
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string imageURL = 14 [(gogoproto.customname) = "ImageURL"];
}

// PostMortemStatus defines the actual state of a PostMortem
message PostMortemStatus {
  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 1 [(gogoproto.customname) = "ObservedGeneration", (gogoproto.nullable) = false];

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 2 [(gogoproto.customname) = "LastUpdated"];

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated PostMortemCondition conditions = 3 [(gogoproto.customname) = "Conditions", (gogoproto.nullable) = false];
}

// Alert is an alert that was raised during the incident
message RaisedAlert {
  // +kubebuilder:validation:Optional
  optional string name = 1 [(gogoproto.customname) = "Name"];

  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time at = 2 [(gogoproto.customname) = "At"];
}

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Entity Kind",type="string",JSONPath=".spec.entityRef.kind",description=""
// +kubebuilder:printcolumn:name="Entity Namespace",type="string",JSONPath=".spec.entityRef.namespace",description=""
// +kubebuilder:printcolumn:name="Entity Name",type="string",JSONPath=".spec.entityRef.name",description=""
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=reviews,shortName=cv,singular=review,categories={team,modela}
// Review represents a comment about any review
message Review {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional ReviewSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  // +optional
  optional ReviewStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// ReviewCondition describes the state of the review
message ReviewCondition {
  optional string type = 1 [(gogoproto.casttype) = "ReviewConditionType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];

  optional string status = 2 [(gogoproto.casttype) = "k8s.io/api/core/v1.ConditionStatus", (gogoproto.customname) = "Status", (gogoproto.nullable) = false];

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3 [(gogoproto.customname) = "LastTransitionTime"];

  // The reason for the condition's last transition.
  optional string reason = 4 [(gogoproto.customname) = "Reason", (gogoproto.nullable) = false];

  // A human readable message indicating details about the transition.
  optional string message = 5 [(gogoproto.customname) = "Message", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// ReviewList is a list of Reviews
message ReviewList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated Review items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// ReviewSpec defines the desired state of a Review
message ReviewSpec {
  // The target of the review
  optional k8s.io.api.core.v1.ObjectReference entityRef = 1 [(gogoproto.customname) = "EntityRef"];

  // Messages are the messages of the review.
  repeated Comment messages = 2 [(gogoproto.customname) = "Messages", (gogoproto.nullable) = false];

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 3 [(gogoproto.customname) = "Owner"];

  // The notifier is used for alerts about new msgs in the review
  // +kubebuilder:default:="default-slack-notifier"
  // +kubebuilder:validation:Optional
  optional string notifierName = 4 [(gogoproto.customname) = "NotifierName"];

  // TenantRef is the review tenant.
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference tenantRef = 5 [(gogoproto.customname) = "TenantRef"];
}

// ReviewStatus is the current status of the review
message ReviewStatus {
  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 1 [(gogoproto.customname) = "LastUpdated"];

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 2 [(gogoproto.customname) = "ObservedGeneration", (gogoproto.nullable) = false];

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ReviewCondition conditions = 3 [(gogoproto.customname) = "Conditions", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=runbooks,shortName=rb,singular=runbook,categories={data,modela}
// RunBook represent a list of instructions for a specific operation
message RunBook {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional RunBookSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  // +optional
  optional RunBookStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// RunBookCondition describes the state of a RunBook at a certain point.
message RunBookCondition {
  // Type of condition.
  optional string type = 1 [(gogoproto.casttype) = "RunBookConditionType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2 [(gogoproto.casttype) = "k8s.io/api/core/v1.ConditionStatus", (gogoproto.customname) = "Status", (gogoproto.nullable) = false];

  // The last time this condition was updated.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 3 [(gogoproto.customname) = "LastUpdateTime", (gogoproto.nullable) = false];

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4 [(gogoproto.customname) = "LastTransitionTime"];

  // The reason for the condition's last transition.
  optional string reason = 5 [(gogoproto.customname) = "Reason", (gogoproto.nullable) = false];

  // A human readable message indicating details about the transition.
  optional string message = 6 [(gogoproto.customname) = "Message", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// RunBookList is a list of RunBooks
message RunBookList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated RunBook items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// RunBookSpec defines the desired state of RunBook
message RunBookSpec {
  // Description of the run book
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string description = 1 [(gogoproto.customname) = "Description"];

  // The target object of run book
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference entityRef = 2 [(gogoproto.customname) = "EntityRef"];

  // The author of the run book
  optional k8s.io.api.core.v1.ObjectReference authorRef = 3 [(gogoproto.customname) = "AuthorRef"];

  // The checklist
  // +kubebuilder:validation:Optional
  repeated CheckListItem checklist = 4 [(gogoproto.customname) = "CheckList", (gogoproto.nullable) = false];

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 5 [(gogoproto.customname) = "Owner"];

  // TenantRef is the run book tenant
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference tenantRef = 6 [(gogoproto.customname) = "TenantRef"];
}

// RunBookStatus defines the actual state of a RunBook
message RunBookStatus {
  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 1 [(gogoproto.customname) = "ObservedGeneration", (gogoproto.nullable) = false];

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 2 [(gogoproto.customname) = "LastUpdated"];

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated RunBookCondition conditions = 3 [(gogoproto.customname) = "Conditions", (gogoproto.nullable) = false];
}

message TaskSpec {
  optional string id = 1 [(gogoproto.customname) = "ID"];

  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string description = 2 [(gogoproto.customname) = "Content"];

  // Assigned to is the user name assigned to this task
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string assignedTo = 3 [(gogoproto.customname) = "AssignedTo"];

  // Flagged donete that task was flagged
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time dueDate = 4 [(gogoproto.customname) = "DueDate"];

  // Reminder is the time to send a reminder
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time reminder = 5 [(gogoproto.customname) = "Reminder"];

  // If this task is a subtask, this is the name of the subtask
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string parentTask = 6 [(gogoproto.customname) = "ParentTask"];
}

// TimeLineEvent
message TimeLineEvent {
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=""
  optional string content = 1 [(gogoproto.customname) = "Content"];

  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time at = 2 [(gogoproto.customname) = "At"];
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase",description=""
// +kubebuilder:printcolumn:name="Description",type="string",JSONPath=".spec.description",description=""
// +kubebuilder:printcolumn:name="Entity Namespace",type="string",JSONPath=".spec.entityRef.namespace",description=""
// +kubebuilder:printcolumn:name="Entity Name",type="string",JSONPath=".spec.entityRef.name",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=todos,singular=todo,categories={team,modela}
message Todo {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional TodoSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  // +optional
  optional TodoStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// TodoCondition describes the state of the license at a certain point.
message TodoCondition {
  // Type of account condition.
  optional string type = 1 [(gogoproto.casttype) = "TodoConditionType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2 [(gogoproto.casttype) = "k8s.io/api/core/v1.ConditionStatus", (gogoproto.customname) = "Status", (gogoproto.nullable) = false];

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3 [(gogoproto.customname) = "LastTransitionTime"];

  // The reason for the condition's last transition.
  optional string reason = 4 [(gogoproto.customname) = "Reason", (gogoproto.nullable) = false];

  // A human readable message indicating details about the transition.
  optional string message = 5 [(gogoproto.customname) = "Message", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// TodoList is a list of Todos
message TodoList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated Todo items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// TodoSpec defines the desired state of Todo
message TodoSpec {
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string description = 1 [(gogoproto.customname) = "Description"];

  // +kubebuilder:validation:Optional
  repeated TaskSpec tasks = 2 [(gogoproto.customname) = "Tasks", (gogoproto.nullable) = false];

  // The modela entity that the task refer to.
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference entityRef = 3 [(gogoproto.customname) = "EntityRef", (gogoproto.nullable) = false];

  // +kubebuilder:default:=""
  // +kubebuilder:validation:Required
  // NotifierName is the name of the notifier used to fire the alert.
  optional string notifierName = 4 [(gogoproto.customname) = "NotifierName"];

  // Flagged donate that task was flagged
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool flagged = 5 [(gogoproto.customname) = "Flagged"];

  // TenantRef is the todo tenant
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference tenantRef = 6 [(gogoproto.customname) = "TenantRef"];
}

// TodoStatus is the observed state of a Todo
message TodoStatus {
  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 1 [(gogoproto.customname) = "ObservedGeneration", (gogoproto.nullable) = false];

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 2 [(gogoproto.customname) = "LastUpdated"];

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated TodoCondition conditions = 3 [(gogoproto.customname) = "Conditions", (gogoproto.nullable) = false];
}

