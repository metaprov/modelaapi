/**
*
* Copyright (C) 2017 modela authors
* For license information, see LICENSE.txt
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.metaprov.modelaapi.pkg.apis.team.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Commnet represents a single comment in the review
message Comment {
  // ID is the comment ID. Used when replying to a comment.
  optional string id = 1;

  // AuthorRef is a reference to the author of the comment
  optional k8s.io.api.core.v1.ObjectReference authorRef = 2;

  // If this comment is a reply to an id
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string replyTo = 3;

  // Content is the content of the comment
  // +kubebuilder:default:=""
  optional string content = 4;

  // PostedAt is the time when the comment was posted
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time postedAt = 5;

  // Sent indicate if the comment was sent to the notifier.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool sent = 6;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=postmortems,shortName=pt,singular=postmortem,categories={team,modela,all}
// PostMortem represent a post mortem
message PostMortem {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PostMortemSpec spec = 2;

  optional PostMortemStatus status = 3;
}

// Post Morem Condition describes the state of a post mortem at a certain point.
message PostMortemCondition {
  // Type of bucket condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// PostMortemList is a list of PostMortems
message PostMortemList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated PostMortem items = 2;
}

// PostMortemSpec defines the desired state of PostMorem
message PostMortemSpec {
  // The target object of the post mortem for example a predictor.
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference entityRef = 1;

  // The place of the events, can be lab or serving site.
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference locationRef = 2;

  // Reference to accounts that handled the post-mortem
  // +kubebuilder:validation:Optional
  repeated k8s.io.api.core.v1.ObjectReference handledBy = 3;

  // Alerts
  // +kubebuilder:validation:Optional
  repeated RaisedAlert alert = 4;

  // Timeline is the list of events that happed during the events
  // +kubebuilder:validation:Optional
  repeated TimeLineEvent timeline = 5;

  // Root cause
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string rootCause = 6;

  // Summary of the post mortem
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string summary = 7;

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 8;
}

// PostMortemStatus defines the actual state of a PostMortem
message PostMortemStatus {
  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 1;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated PostMortemCondition conditions = 2;
}

// Alert is an alert that was raised during the incident
message RaisedAlert {
  // +kubebuilder:validation:Optional
  optional string name = 1;

  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time at = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Entity Kind",type="string",JSONPath=".spec.entityRef.kind",description=""
// +kubebuilder:printcolumn:name="Entity Namespace",type="string",JSONPath=".spec.entityRef.namespace",description=""
// +kubebuilder:printcolumn:name="Entity Name",type="string",JSONPath=".spec.entityRef.name",description=""
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=reviews,shortName=cv,singular=review,categories={team,modela}
// Review represents a comment about any review
message Review {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ReviewSpec spec = 2;

  optional ReviewStatus status = 3;
}

// ReviewCondition describes the state of the review
message ReviewCondition {
  optional string type = 1;

  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// ReviewList is a list of Reviews
message ReviewList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Review items = 2;
}

// ReviewSpec defines the desired state of a Review
message ReviewSpec {
  // The target of the review
  optional k8s.io.api.core.v1.ObjectReference entityRef = 1;

  // Messages are the messages of the review.
  repeated Comment messages = 2;

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 3;

  // The notifier is used for alerts about new msgs in the review
  // +kubebuilder:default:="default-slack-notifier"
  // +kubebuilder:validation:Optional
  optional string notifierName = 4;
}

// ReviewStatus is the current status of the review
message ReviewStatus {
  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 1;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 2;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ReviewCondition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=runbooks,shortName=rb,singular=runbook,categories={data,modela}
// RunBook represent a list of instructions for a specific operation
message RunBook {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RunBookSpec spec = 2;

  optional RunBookStatus status = 3;
}

// RunBookCondition describes the state of a RunBook at a certain point.
message RunBookCondition {
  // Type of condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // The last time this condition was updated.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 3;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// RunBookList is a list of RunBooks
message RunBookList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated RunBook items = 2;
}

// RunBookSpec defines the desired state of RunBook
message RunBookSpec {
  // The target object of run book
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference entityRef = 1;

  // The author of the comment
  optional k8s.io.api.core.v1.ObjectReference authorRef = 2;

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 3;
}

// RunBookStatus defines the actual state of a RunBook
message RunBookStatus {
  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 1;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated RunBookCondition conditions = 2;
}

// TimeLineEvent
message TimeLineEvent {
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=""
  optional string content = 1;

  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time at = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase",description=""
// +kubebuilder:printcolumn:name="Subject",type="string",JSONPath=".spec.subject",description=""
// +kubebuilder:printcolumn:name="Entity Namespace",type="string",JSONPath=".spec.entityRef.name",description=""
// +kubebuilder:printcolumn:name="Entity Name",type="string",JSONPath=".spec.entityRef.namespace",description=""
// +kubebuilder:printcolumn:name="Notifier",type="string",JSONPath=".spec.notifierName",description=""
// +kubebuilder:printcolumn:name="At",type="date",JSONPath=".status.at",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=todos,singular=todo,categories={infra,modela}
message Todo {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional TodoSpec spec = 2;

  optional TodoStatus status = 3;
}

// TodoCondition describes the state of the license at a certain point.
message TodoCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// TodoList is a list of Todos
message TodoList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Todo items = 2;
}

// TodoSpec defines the desired state of Todo
message TodoSpec {
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string task = 1;

  // The modela entity that the task refer to.
  optional k8s.io.api.core.v1.ObjectReference entityRef = 2;

  // +kubebuilder:default:=""
  // +kubebuilder:validation:Required
  // NotifierName is the name of the notifier used to fire the alert.
  optional string notifierName = 3;

  // Assigned to is the user name assigned to this task
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string assignedTo = 4;

  // Flagged donete that task was flagged
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool flagged = 5;

  // Reminder is the time to send a reminder
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time reminder = 6;

  // Flagged donete that task was flagged
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time dueDate = 7;
}

// TodoStatus is the observed state of a Todo
message TodoStatus {
  // Phase is the phase of the model
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 1;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 2;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated TodoCondition conditions = 3;
}

