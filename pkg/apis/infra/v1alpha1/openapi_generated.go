// +build !ignore_autogenerated

/**
*
* Copyright (C) 2017 modela authors
* For license information, see LICENSE.txt
 */
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Account":                  schema_pkg_apis_infra_v1alpha1_Account(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountCondition":         schema_pkg_apis_infra_v1alpha1_AccountCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountDefaults":          schema_pkg_apis_infra_v1alpha1_AccountDefaults(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountList":              schema_pkg_apis_infra_v1alpha1_AccountList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountSpec":              schema_pkg_apis_infra_v1alpha1_AccountSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountStatus":            schema_pkg_apis_infra_v1alpha1_AccountStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Review":                   schema_pkg_apis_infra_v1alpha1_Comment(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ReviewCondition":          schema_pkg_apis_infra_v1alpha1_CommentCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ReviewList":               schema_pkg_apis_infra_v1alpha1_CommentList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ReviewSpec":               schema_pkg_apis_infra_v1alpha1_CommentSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ReviewStatus":             schema_pkg_apis_infra_v1alpha1_CommentStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.StorageConnection":        schema_pkg_apis_infra_v1alpha1_Connection(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ConnectionCondition":      schema_pkg_apis_infra_v1alpha1_ConnectionCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ConnectionList":           schema_pkg_apis_infra_v1alpha1_ConnectionList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ConnectionSpec":           schema_pkg_apis_infra_v1alpha1_ConnectionSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ConnectionStatus":         schema_pkg_apis_infra_v1alpha1_ConnectionStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.SmtpSpec":                 schema_pkg_apis_infra_v1alpha1_EmailConfig(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepository":            schema_pkg_apis_infra_v1alpha1_GitRepository(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepositoryCondition":   schema_pkg_apis_infra_v1alpha1_GitRepositoryCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepositoryList":        schema_pkg_apis_infra_v1alpha1_GitRepositoryList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepositorySpec":        schema_pkg_apis_infra_v1alpha1_GitRepositorySpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepositoryStatus":      schema_pkg_apis_infra_v1alpha1_GitRepositoryStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepository":          schema_pkg_apis_infra_v1alpha1_ImageRepository(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepositoryCondition": schema_pkg_apis_infra_v1alpha1_ImageRepositoryCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepositoryList":      schema_pkg_apis_infra_v1alpha1_ImageRepositoryList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepositorySpec":      schema_pkg_apis_infra_v1alpha1_ImageRepositorySpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepositoryStatus":    schema_pkg_apis_infra_v1alpha1_ImageRepositoryStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Lab":                      schema_pkg_apis_infra_v1alpha1_Lab(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LabCondition":             schema_pkg_apis_infra_v1alpha1_LabCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LabList":                  schema_pkg_apis_infra_v1alpha1_LabList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LabSpec":                  schema_pkg_apis_infra_v1alpha1_LabSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LabStatus":                schema_pkg_apis_infra_v1alpha1_LabStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.License":                  schema_pkg_apis_infra_v1alpha1_License(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LicenseCondition":         schema_pkg_apis_infra_v1alpha1_LicenseCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LicenseList":              schema_pkg_apis_infra_v1alpha1_LicenseList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LicenseSpec":              schema_pkg_apis_infra_v1alpha1_LicenseSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LicenseStatus":            schema_pkg_apis_infra_v1alpha1_LicenseStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImage":             schema_pkg_apis_infra_v1alpha1_MachineImage(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImageCondition":    schema_pkg_apis_infra_v1alpha1_MachineImageCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImageList":         schema_pkg_apis_infra_v1alpha1_MachineImageList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImageSpec":         schema_pkg_apis_infra_v1alpha1_MachineImageSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImageStatus":       schema_pkg_apis_infra_v1alpha1_MachineImageStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Notifier":                 schema_pkg_apis_infra_v1alpha1_Notifier(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.NotifierCondition":        schema_pkg_apis_infra_v1alpha1_NotifierCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.NotifierList":             schema_pkg_apis_infra_v1alpha1_NotifierList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.NotifierSpec":             schema_pkg_apis_infra_v1alpha1_NotifierSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.NotifierStatus":           schema_pkg_apis_infra_v1alpha1_NotifierStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortem":               schema_pkg_apis_infra_v1alpha1_PostMortem(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortemCondition":      schema_pkg_apis_infra_v1alpha1_PostMortemCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortemList":           schema_pkg_apis_infra_v1alpha1_PostMortemList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortemSpec":           schema_pkg_apis_infra_v1alpha1_PostMortemSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortemStatus":         schema_pkg_apis_infra_v1alpha1_PostMortemStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBook":                  schema_pkg_apis_infra_v1alpha1_RunBook(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBookCondition":         schema_pkg_apis_infra_v1alpha1_RunBookCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBookList":              schema_pkg_apis_infra_v1alpha1_RunBookList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBookSpec":              schema_pkg_apis_infra_v1alpha1_RunBookSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBookStatus":            schema_pkg_apis_infra_v1alpha1_RunBookStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSite":              schema_pkg_apis_infra_v1alpha1_ServingSite(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSiteCondition":     schema_pkg_apis_infra_v1alpha1_ServingSiteCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSiteList":          schema_pkg_apis_infra_v1alpha1_ServingSiteList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSiteSpec":          schema_pkg_apis_infra_v1alpha1_ServingSiteSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSiteStatus":        schema_pkg_apis_infra_v1alpha1_ServingSiteStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.SlackSpec":                schema_pkg_apis_infra_v1alpha1_SlackConfig(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Tenant":                   schema_pkg_apis_infra_v1alpha1_Tenant(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.TenantCondition":          schema_pkg_apis_infra_v1alpha1_TenantCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.TenantList":               schema_pkg_apis_infra_v1alpha1_TenantList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.TenantSpec":               schema_pkg_apis_infra_v1alpha1_TenantSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.TenantStatus":             schema_pkg_apis_infra_v1alpha1_TenantStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucket":            schema_pkg_apis_infra_v1alpha1_VirtualBucket(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucketCondition":   schema_pkg_apis_infra_v1alpha1_VirtualBucketCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucketList":        schema_pkg_apis_infra_v1alpha1_VirtualBucketList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucketSpec":        schema_pkg_apis_infra_v1alpha1_VirtualBucketSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucketStatus":      schema_pkg_apis_infra_v1alpha1_VirtualBucketStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualCluster":           schema_pkg_apis_infra_v1alpha1_VirtualCluster(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterCondition":  schema_pkg_apis_infra_v1alpha1_VirtualClusterCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterList":       schema_pkg_apis_infra_v1alpha1_VirtualClusterList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterSpec":       schema_pkg_apis_infra_v1alpha1_VirtualClusterSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterStatus":     schema_pkg_apis_infra_v1alpha1_VirtualClusterStatus(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolume":            schema_pkg_apis_infra_v1alpha1_VirtualVolume(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolumeCondition":   schema_pkg_apis_infra_v1alpha1_VirtualVolumeCondition(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolumeList":        schema_pkg_apis_infra_v1alpha1_VirtualVolumeList(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolumeSpec":        schema_pkg_apis_infra_v1alpha1_VirtualVolumeSpec(ref),
		"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolumeStatus":      schema_pkg_apis_infra_v1alpha1_VirtualVolumeStatus(ref),
	}
}

func schema_pkg_apis_infra_v1alpha1_Account(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Account represents a user or team account in the system",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_AccountCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccountCondition describes the state of a account at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of account condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_AccountDefaults(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"defaultLabRef": {
						SchemaProps: spec.SchemaProps{
							Description: "the default lab for this account",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"defaultServingSiteRef": {
						SchemaProps: spec.SchemaProps{
							Description: "the default serving site for this account",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"defaultProductRef": {
						SchemaProps: spec.SchemaProps{
							Description: "the default product.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"defaultProductVersionRef": {
						SchemaProps: spec.SchemaProps{
							Description: "the default product version.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"defaultWorkloadClassRef": {
						SchemaProps: spec.SchemaProps{
							Description: "the default workload class",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"defaultCloudRef": {
						SchemaProps: spec.SchemaProps{
							Description: "the default cloud",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_AccountList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccountList represent list of accounts.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Account"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Account", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_AccountSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccountSpec defines the desired state of Account",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tenantRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"teamRef": {
						SchemaProps: spec.SchemaProps{
							Description: "the team of the product",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the type of account - user, group. default is user",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"userName": {
						SchemaProps: spec.SchemaProps{
							Description: "UserName specifies the name of the account Reqired field.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"firstName": {
						SchemaProps: spec.SchemaProps{
							Description: "User first name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastName": {
						SchemaProps: spec.SchemaProps{
							Description: "User last name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"email": {
						SchemaProps: spec.SchemaProps{
							Description: "Smtp specify the email of the user",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"phone": {
						SchemaProps: spec.SchemaProps{
							Description: "Phone specify the phone of the user",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaults": {
						SchemaProps: spec.SchemaProps{
							Description: "The account defaults",
							Ref:         ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountDefaults"),
						},
					},
				},
				Required: []string{"userName"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountDefaults", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_AccountStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccountStatus defines the actual state of the api object",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a account state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.AccountCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_Comment(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Review represent a comment about any entity",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ReviewSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ReviewStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ReviewSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ReviewStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_CommentCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitualBucketCondition describes the state of a virtual bucket at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of bucket condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_CommentList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReviewList is a list of Comments",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Review"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Review", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_CommentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReviewSpec defines the desired state of BucketName",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"entityRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The target object of the comment",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"authorRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The author of the comment",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"replyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "If this comment is a reply store a reference to the original comment",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"content": {
						SchemaProps: spec.SchemaProps{
							Description: "The content of the comment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"entityRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_CommentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of the comment state",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ReviewCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ReviewCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_Connection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ConnectionSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ConnectionStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ConnectionSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ConnectionStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ConnectionCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DeploymentCondition describes the state of a deployment at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of account condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ConnectionList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConnectionList is a list of RegistryConnectionName.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.StorageConnection"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.StorageConnection", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ConnectionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConnectionSpec defines the desired state of RegistryConnectionName",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tenantRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The owner of the connection",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"provider": {
						SchemaProps: spec.SchemaProps{
							Description: "Provider specifies the name api provider (E.g. aws)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "RegistryConnectionName refer to the secret with the actual connections",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
				},
				Required: []string{"provider", "secretRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ConnectionStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a connection state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ConnectionCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ConnectionCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_EmailConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Used for email recivers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"to": {
						SchemaProps: spec.SchemaProps{
							Description: "To is the list of emails to send the notification to",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"from": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"connectionRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_GitRepository(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitRepository represent a gitrepo api object",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepositorySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepositoryStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepositorySpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepositoryStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_GitRepositoryCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitualBucketCondition describes the state of a virtual gitrepo at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of gitrepo condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_GitRepositoryList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitRepositoryList is a list of GitRepository",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepository"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepository", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_GitRepositorySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitRepositorySpec defines the desired state of GitRepository",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"productRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The product reference that own the git repository",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"connectionRef": {
						SchemaProps: spec.SchemaProps{
							Description: "CloudProviderConnectionName specify the api connections of this gitrepo cloud provider.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "The git location ImageName.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "User provided description",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"productRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_GitRepositoryStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a gitrepo state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepositoryCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.GitRepositoryCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ImageRepository(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageRepository represent a repository in the docker registry",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepositorySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepositoryStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepositorySpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepositoryStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ImageRepositoryCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitualBucketCondition describes the state of a virtual gitrepo at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of gitrepo condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ImageRepositoryList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageRepositoryList is a list of ImageRepository",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepository"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepository", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ImageRepositorySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageRepositorySpec defines the desired state of ImageRepository",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"productRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The product that own the image git repository",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"connectionRef": {
						SchemaProps: spec.SchemaProps{
							Description: "CloudProviderConnectionName specify the api connections of this gitrepo cloud provider.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"imageName": {
						SchemaProps: spec.SchemaProps{
							Description: "The git location ImageName.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "User provided description",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"productRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ImageRepositoryStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a gitrepo state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepositoryCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ImageRepositoryCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_Lab(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LabSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LabStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LabSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LabStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_LabCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LabCondition describes the state of a lab at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of account condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_LabList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LabList is a list of labs",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Lab"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Lab", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_LabSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LabSpec defines the desired state of a TenantRef",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tenantRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to the tenant owning this lab",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"quotaSpec": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource Quota",
							Ref:         ref("k8s.io/api/core/v1.ResourceQuotaSpec"),
						},
					},
					"limitRangeSpec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LimitRangeSpec"),
						},
					},
					"ingressRef": {
						SchemaProps: spec.SchemaProps{
							Description: "IngressName denote the name of the ingress object where the lab places the external points used to access the predictors",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "User provided description",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LimitRangeSpec", "k8s.io/api/core/v1.ObjectReference", "k8s.io/api/core/v1.ResourceQuotaSpec"},
	}
}

func schema_pkg_apis_infra_v1alpha1_LabStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a lab state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LabCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LabCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_License(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "License is an abstraction that represent the cluster wide license as obtained from Modeld. The license is store inside a a secret",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LicenseSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LicenseStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LicenseSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LicenseStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_LicenseCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LicenseCondition describes the state of the license at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of account condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_LicenseList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LicenseList is a list of License",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.License"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.License", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_LicenseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LicenseSpec defines the desired state of License",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tenantRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to the tenant owning this license",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"connectionRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The connection with the license token",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Is this a lite license - eval.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"notifierSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "a notifier to receive the license expiration notification",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
						},
					},
				},
				Required: []string{"connectionRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
	}
}

func schema_pkg_apis_infra_v1alpha1_LicenseStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"expireAt": {
						SchemaProps: spec.SchemaProps{
							Description: "When the license expire",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a license state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LicenseCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.LicenseCondition", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_MachineImage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MachineImage is an abstraction of virtual machine image that is used when adding new nodes to the cluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec holds the desired state of the machine image.",
							Ref:         ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImageSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status holds the desired state of the machine image.",
							Ref:         ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImageStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImageSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImageStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_MachineImageCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MachineImageCondition describes the state of the MachineImage at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of account condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_MachineImageList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImage"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImage", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_MachineImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MachineImageSpec defines the desired state of MachineImage",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"content": {
						SchemaProps: spec.SchemaProps{
							Description: "The packer file definition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"content"},
			},
		},
	}
}

func schema_pkg_apis_infra_v1alpha1_MachineImageStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a license state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImageCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.MachineImageCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_Notifier(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.NotifierSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.NotifierStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.NotifierSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.NotifierStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_NotifierCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NotifierCondition describes the state of the license at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of account condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_NotifierList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Notifier"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Notifier", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_NotifierSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NotifierSpec defines the desired state of Notifier",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tenantRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The tenant that own the git repository",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type if the type of recieveer. Smtp or Slack",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"email": {
						SchemaProps: spec.SchemaProps{
							Description: "Smtp configuration. Relevant if the notifier is an email notifier",
							Ref:         ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.SmtpSpec"),
						},
					},
					"slack": {
						SchemaProps: spec.SchemaProps{
							Description: "Slack configuration. Relevant if the notifier is an slack notifier",
							Ref:         ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.SlackSpec"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "User provided description",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"tenantRef"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.SmtpSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.SlackSpec", "k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_NotifierStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a license state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.NotifierCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.NotifierCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_PostMortem(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostMortem represent a comment about any entity",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortemSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortemStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortemSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortemStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_PostMortemCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitualBucketCondition describes the state of a virtual bucket at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of bucket condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_PostMortemList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostMortemList is a list of PostMortems",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortem"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortem", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_PostMortemSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostMortemSpec defines the desired state of BucketName",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"entityRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The target object of the comment",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"authorRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The author of the comment",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"replyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "If this comment is a reply store a reference to the original comment",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"content": {
						SchemaProps: spec.SchemaProps{
							Description: "The content of the comment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"entityRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_PostMortemStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of the comment state",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortemCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.PostMortemCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_RunBook(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RunBook represent a comment about any entity",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBookSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBookStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBookSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBookStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_RunBookCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitualBucketCondition describes the state of a virtual bucket at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of bucket condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_RunBookList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RunBookList is a list of RunBooks",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBook"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBook", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_RunBookSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RunBookSpec defines the desired state of BucketName",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"entityRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The target object of the comment",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"authorRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The author of the comment",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"content": {
						SchemaProps: spec.SchemaProps{
							Description: "The content of the comment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"entityRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_RunBookStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of the comment state",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBookCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.RunBookCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ServingSite(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSiteSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSiteStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSiteSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSiteStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ServingSiteCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DeploymentCondition describes the state of a deployment at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of account condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ServingSiteList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSite"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSite", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ServingSiteSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"tenantRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to the tenant owning this serving site.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"quotaSpec": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource Quota for the serving site By default, not quota is applied",
							Ref:         ref("k8s.io/api/core/v1.ResourceQuotaSpec"),
						},
					},
					"limitRangeSpec": {
						SchemaProps: spec.SchemaProps{
							Description: "limit range for the serving site By default, no limit range apply.",
							Ref:         ref("k8s.io/api/core/v1.LimitRangeSpec"),
						},
					},
					"ingressRef": {
						SchemaProps: spec.SchemaProps{
							Description: "IngressName denote the name of the ingress object where the serving site places the external points used to access the predictors",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"masterRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The master site for this site. This creates a master-slave relationship between serving sites.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "User provided description",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LimitRangeSpec", "k8s.io/api/core/v1.ObjectReference", "k8s.io/api/core/v1.ResourceQuotaSpec"},
	}
}

func schema_pkg_apis_infra_v1alpha1_ServingSiteStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a lab state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSiteCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.ServingSiteCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_SlackConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Used for email recivers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"webhook": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_infra_v1alpha1_Tenant(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Tenant represents a user or team account in the system",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.TenantSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.TenantStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.TenantSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.TenantStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_TenantCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TenantCondition describes the state of a account at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of account condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_TenantList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TenantList represent list of accounts.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Tenant"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.Tenant", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_TenantSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TenantSpec defines the desired state of Tenant",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"defaultLabRef": {
						SchemaProps: spec.SchemaProps{
							Description: "the default lab for this account",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"defaultServingSiteRef": {
						SchemaProps: spec.SchemaProps{
							Description: "the default serving site for this account",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"adminRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The admin account for this tenant.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "User provided description",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_TenantStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TenantStatus defines the actual state of the api object",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a account state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.TenantCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.TenantCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualBucket(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BucketName represent a bucket api object",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucketSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucketStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucketSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucketStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualBucketCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitualBucketCondition describes the state of a virtual bucket at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of bucket condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualBucketList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualBucketList is a list of BucketName",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucket"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucket", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualBucketSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualBucketSpec defines the desired state of BucketName",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tenantRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The owner of the virtual bucket",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"connectionRef": {
						SchemaProps: spec.SchemaProps{
							Description: "ProviderConnectionName specify the api connections of this bucket cloud provider.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "User provided description",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualBucketStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a bucket state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucketCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualBucketCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterStatus"),
						},
					},
				},
				Required: []string{"metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualClusterCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DeploymentCondition describes the state of a deployment at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of account condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a serving site state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterCondition", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualClusterList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualCluster"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualCluster", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualClusterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"labRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The Lab that own the git repository",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"resourceClass": {
						SchemaProps: spec.SchemaProps{
							Description: "The class of resource",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "The desired number of nodes",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"nodeClassRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The class of nodes.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"gpus": {
						SchemaProps: spec.SchemaProps{
							Description: "The desired number of gpus",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"gouClass": {
						SchemaProps: spec.SchemaProps{
							Description: "The class of gpu.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"volumeSize": {
						SchemaProps: spec.SchemaProps{
							Description: "Volume, if needed. The volume is monuted on all nodes.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"spot": {
						SchemaProps: spec.SchemaProps{
							Description: "Should we use spot instances.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"labRef", "resourceClass"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualClusterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"availableNodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of available Nodes",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"availableGpus": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of available Gpus",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a virtual cluster state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"availableNodes", "availableGpus"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualClusterCondition"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualVolume(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualVolume represent a mdvolume api object",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolumeSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolumeStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolumeSpec", "github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolumeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualVolumeCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DeploymentCondition describes the state of a deployment at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of account condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualVolumeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualVolumeList is a list of mdvolumes",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolume"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolume", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualVolumeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualVolumeSpec define the desired state of the mdvolume.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tenantRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The Lab that own the git repository",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"connectionRef": {
						SchemaProps: spec.SchemaProps{
							Description: "\n specify the api connections of this mdvolume cloud provider.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
				},
				Required: []string{"tenantRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_infra_v1alpha1_VirtualVolumeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dbid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a virtual volume state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolumeCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/metaprov/modelaapi/pkg/apis/infra/v1alpha1.VirtualVolumeCondition"},
	}
}
