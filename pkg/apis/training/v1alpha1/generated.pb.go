/**
*
* Copyright (C) 2017 modela authors
* For license information, see LICENSE.txt
 */ // Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1/generated.proto

package v1alpha1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/catalog/v1alpha1"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/catalog/v1alpha1"
	v1alpha11 "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1"
	k8s_io_api_core_v1 "k8s.io/api/core/v1"
	v11 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *AlgorithmParameterRange) Reset()      { *m = AlgorithmParameterRange{} }
func (*AlgorithmParameterRange) ProtoMessage() {}
func (*AlgorithmParameterRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{0}
}
func (m *AlgorithmParameterRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgorithmParameterRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AlgorithmParameterRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgorithmParameterRange.Merge(m, src)
}
func (m *AlgorithmParameterRange) XXX_Size() int {
	return m.Size()
}
func (m *AlgorithmParameterRange) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgorithmParameterRange.DiscardUnknown(m)
}

var xxx_messageInfo_AlgorithmParameterRange proto.InternalMessageInfo

func (m *AlgorithmSearchSpaceSpec) Reset()      { *m = AlgorithmSearchSpaceSpec{} }
func (*AlgorithmSearchSpaceSpec) ProtoMessage() {}
func (*AlgorithmSearchSpaceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{1}
}
func (m *AlgorithmSearchSpaceSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgorithmSearchSpaceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AlgorithmSearchSpaceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgorithmSearchSpaceSpec.Merge(m, src)
}
func (m *AlgorithmSearchSpaceSpec) XXX_Size() int {
	return m.Size()
}
func (m *AlgorithmSearchSpaceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgorithmSearchSpaceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AlgorithmSearchSpaceSpec proto.InternalMessageInfo

func (m *Anomaly) Reset()      { *m = Anomaly{} }
func (*Anomaly) ProtoMessage() {}
func (*Anomaly) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{2}
}
func (m *Anomaly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Anomaly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Anomaly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Anomaly.Merge(m, src)
}
func (m *Anomaly) XXX_Size() int {
	return m.Size()
}
func (m *Anomaly) XXX_DiscardUnknown() {
	xxx_messageInfo_Anomaly.DiscardUnknown(m)
}

var xxx_messageInfo_Anomaly proto.InternalMessageInfo

func (m *AudioPipelineSpec) Reset()      { *m = AudioPipelineSpec{} }
func (*AudioPipelineSpec) ProtoMessage() {}
func (*AudioPipelineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{3}
}
func (m *AudioPipelineSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioPipelineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AudioPipelineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioPipelineSpec.Merge(m, src)
}
func (m *AudioPipelineSpec) XXX_Size() int {
	return m.Size()
}
func (m *AudioPipelineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioPipelineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AudioPipelineSpec proto.InternalMessageInfo

func (m *BacktestSpec) Reset()      { *m = BacktestSpec{} }
func (*BacktestSpec) ProtoMessage() {}
func (*BacktestSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{4}
}
func (m *BacktestSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BacktestSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BacktestSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BacktestSpec.Merge(m, src)
}
func (m *BacktestSpec) XXX_Size() int {
	return m.Size()
}
func (m *BacktestSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_BacktestSpec.DiscardUnknown(m)
}

var xxx_messageInfo_BacktestSpec proto.InternalMessageInfo

func (m *BaselineSpec) Reset()      { *m = BaselineSpec{} }
func (*BaselineSpec) ProtoMessage() {}
func (*BaselineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{5}
}
func (m *BaselineSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaselineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BaselineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaselineSpec.Merge(m, src)
}
func (m *BaselineSpec) XXX_Size() int {
	return m.Size()
}
func (m *BaselineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_BaselineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_BaselineSpec proto.InternalMessageInfo

func (m *ChangePoint) Reset()      { *m = ChangePoint{} }
func (*ChangePoint) ProtoMessage() {}
func (*ChangePoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{6}
}
func (m *ChangePoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangePoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChangePoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePoint.Merge(m, src)
}
func (m *ChangePoint) XXX_Size() int {
	return m.Size()
}
func (m *ChangePoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePoint.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePoint proto.InternalMessageInfo

func (m *ChatbotEstimatorSpec) Reset()      { *m = ChatbotEstimatorSpec{} }
func (*ChatbotEstimatorSpec) ProtoMessage() {}
func (*ChatbotEstimatorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{7}
}
func (m *ChatbotEstimatorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatbotEstimatorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChatbotEstimatorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatbotEstimatorSpec.Merge(m, src)
}
func (m *ChatbotEstimatorSpec) XXX_Size() int {
	return m.Size()
}
func (m *ChatbotEstimatorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatbotEstimatorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ChatbotEstimatorSpec proto.InternalMessageInfo

func (m *CheckpointSpec) Reset()      { *m = CheckpointSpec{} }
func (*CheckpointSpec) ProtoMessage() {}
func (*CheckpointSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{8}
}
func (m *CheckpointSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CheckpointSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointSpec.Merge(m, src)
}
func (m *CheckpointSpec) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointSpec proto.InternalMessageInfo

func (m *ClassicalEstimatorSpec) Reset()      { *m = ClassicalEstimatorSpec{} }
func (*ClassicalEstimatorSpec) ProtoMessage() {}
func (*ClassicalEstimatorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{9}
}
func (m *ClassicalEstimatorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassicalEstimatorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClassicalEstimatorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassicalEstimatorSpec.Merge(m, src)
}
func (m *ClassicalEstimatorSpec) XXX_Size() int {
	return m.Size()
}
func (m *ClassicalEstimatorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassicalEstimatorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ClassicalEstimatorSpec proto.InternalMessageInfo

func (m *CustomReportSpec) Reset()      { *m = CustomReportSpec{} }
func (*CustomReportSpec) ProtoMessage() {}
func (*CustomReportSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{10}
}
func (m *CustomReportSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomReportSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomReportSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomReportSpec.Merge(m, src)
}
func (m *CustomReportSpec) XXX_Size() int {
	return m.Size()
}
func (m *CustomReportSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomReportSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CustomReportSpec proto.InternalMessageInfo

func (m *DataHashes) Reset()      { *m = DataHashes{} }
func (*DataHashes) ProtoMessage() {}
func (*DataHashes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{11}
}
func (m *DataHashes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataHashes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DataHashes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataHashes.Merge(m, src)
}
func (m *DataHashes) XXX_Size() int {
	return m.Size()
}
func (m *DataHashes) XXX_DiscardUnknown() {
	xxx_messageInfo_DataHashes.DiscardUnknown(m)
}

var xxx_messageInfo_DataHashes proto.InternalMessageInfo

func (m *DataSplitSpec) Reset()      { *m = DataSplitSpec{} }
func (*DataSplitSpec) ProtoMessage() {}
func (*DataSplitSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{12}
}
func (m *DataSplitSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataSplitSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DataSplitSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSplitSpec.Merge(m, src)
}
func (m *DataSplitSpec) XXX_Size() int {
	return m.Size()
}
func (m *DataSplitSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSplitSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DataSplitSpec proto.InternalMessageInfo

func (m *DeepEstimatorLayer) Reset()      { *m = DeepEstimatorLayer{} }
func (*DeepEstimatorLayer) ProtoMessage() {}
func (*DeepEstimatorLayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{13}
}
func (m *DeepEstimatorLayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeepEstimatorLayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DeepEstimatorLayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeepEstimatorLayer.Merge(m, src)
}
func (m *DeepEstimatorLayer) XXX_Size() int {
	return m.Size()
}
func (m *DeepEstimatorLayer) XXX_DiscardUnknown() {
	xxx_messageInfo_DeepEstimatorLayer.DiscardUnknown(m)
}

var xxx_messageInfo_DeepEstimatorLayer proto.InternalMessageInfo

func (m *DeepEstimatorSpec) Reset()      { *m = DeepEstimatorSpec{} }
func (*DeepEstimatorSpec) ProtoMessage() {}
func (*DeepEstimatorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{14}
}
func (m *DeepEstimatorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeepEstimatorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DeepEstimatorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeepEstimatorSpec.Merge(m, src)
}
func (m *DeepEstimatorSpec) XXX_Size() int {
	return m.Size()
}
func (m *DeepEstimatorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DeepEstimatorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DeepEstimatorSpec proto.InternalMessageInfo

func (m *DriftDetectorStatus) Reset()      { *m = DriftDetectorStatus{} }
func (*DriftDetectorStatus) ProtoMessage() {}
func (*DriftDetectorStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{15}
}
func (m *DriftDetectorStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriftDetectorStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DriftDetectorStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriftDetectorStatus.Merge(m, src)
}
func (m *DriftDetectorStatus) XXX_Size() int {
	return m.Size()
}
func (m *DriftDetectorStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DriftDetectorStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DriftDetectorStatus proto.InternalMessageInfo

func (m *DriftModelSpec) Reset()      { *m = DriftModelSpec{} }
func (*DriftModelSpec) ProtoMessage() {}
func (*DriftModelSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{16}
}
func (m *DriftModelSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriftModelSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DriftModelSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriftModelSpec.Merge(m, src)
}
func (m *DriftModelSpec) XXX_Size() int {
	return m.Size()
}
func (m *DriftModelSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DriftModelSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DriftModelSpec proto.InternalMessageInfo

func (m *EarlyStopSpec) Reset()      { *m = EarlyStopSpec{} }
func (*EarlyStopSpec) ProtoMessage() {}
func (*EarlyStopSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{17}
}
func (m *EarlyStopSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EarlyStopSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EarlyStopSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EarlyStopSpec.Merge(m, src)
}
func (m *EarlyStopSpec) XXX_Size() int {
	return m.Size()
}
func (m *EarlyStopSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EarlyStopSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EarlyStopSpec proto.InternalMessageInfo

func (m *EnsembleRules) Reset()      { *m = EnsembleRules{} }
func (*EnsembleRules) ProtoMessage() {}
func (*EnsembleRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{18}
}
func (m *EnsembleRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnsembleRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnsembleRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsembleRules.Merge(m, src)
}
func (m *EnsembleRules) XXX_Size() int {
	return m.Size()
}
func (m *EnsembleRules) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsembleRules.DiscardUnknown(m)
}

var xxx_messageInfo_EnsembleRules proto.InternalMessageInfo

func (m *EnsembleSpec) Reset()      { *m = EnsembleSpec{} }
func (*EnsembleSpec) ProtoMessage() {}
func (*EnsembleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{19}
}
func (m *EnsembleSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnsembleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnsembleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsembleSpec.Merge(m, src)
}
func (m *EnsembleSpec) XXX_Size() int {
	return m.Size()
}
func (m *EnsembleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsembleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EnsembleSpec proto.InternalMessageInfo

func (m *EnsemblesSpec) Reset()      { *m = EnsemblesSpec{} }
func (*EnsemblesSpec) ProtoMessage() {}
func (*EnsemblesSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{20}
}
func (m *EnsemblesSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnsemblesSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnsemblesSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsemblesSpec.Merge(m, src)
}
func (m *EnsemblesSpec) XXX_Size() int {
	return m.Size()
}
func (m *EnsemblesSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsemblesSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EnsemblesSpec proto.InternalMessageInfo

func (m *EntityRef) Reset()      { *m = EntityRef{} }
func (*EntityRef) ProtoMessage() {}
func (*EntityRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{21}
}
func (m *EntityRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntityRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EntityRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityRef.Merge(m, src)
}
func (m *EntityRef) XXX_Size() int {
	return m.Size()
}
func (m *EntityRef) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityRef.DiscardUnknown(m)
}

var xxx_messageInfo_EntityRef proto.InternalMessageInfo

func (m *EvalMetrics) Reset()      { *m = EvalMetrics{} }
func (*EvalMetrics) ProtoMessage() {}
func (*EvalMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{22}
}
func (m *EvalMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvalMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EvalMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalMetrics.Merge(m, src)
}
func (m *EvalMetrics) XXX_Size() int {
	return m.Size()
}
func (m *EvalMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_EvalMetrics proto.InternalMessageInfo

func (m *EvalPeriod) Reset()      { *m = EvalPeriod{} }
func (*EvalPeriod) ProtoMessage() {}
func (*EvalPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{23}
}
func (m *EvalPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvalPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EvalPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvalPeriod.Merge(m, src)
}
func (m *EvalPeriod) XXX_Size() int {
	return m.Size()
}
func (m *EvalPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_EvalPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_EvalPeriod proto.InternalMessageInfo

func (m *FeatureEngineeringPipeline) Reset()      { *m = FeatureEngineeringPipeline{} }
func (*FeatureEngineeringPipeline) ProtoMessage() {}
func (*FeatureEngineeringPipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{24}
}
func (m *FeatureEngineeringPipeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureEngineeringPipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeatureEngineeringPipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureEngineeringPipeline.Merge(m, src)
}
func (m *FeatureEngineeringPipeline) XXX_Size() int {
	return m.Size()
}
func (m *FeatureEngineeringPipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureEngineeringPipeline.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureEngineeringPipeline proto.InternalMessageInfo

func (m *FeatureEngineeringSearchSpec) Reset()      { *m = FeatureEngineeringSearchSpec{} }
func (*FeatureEngineeringSearchSpec) ProtoMessage() {}
func (*FeatureEngineeringSearchSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{25}
}
func (m *FeatureEngineeringSearchSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureEngineeringSearchSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeatureEngineeringSearchSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureEngineeringSearchSpec.Merge(m, src)
}
func (m *FeatureEngineeringSearchSpec) XXX_Size() int {
	return m.Size()
}
func (m *FeatureEngineeringSearchSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureEngineeringSearchSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureEngineeringSearchSpec proto.InternalMessageInfo

func (m *FeatureEngineeringSearchStatus) Reset()      { *m = FeatureEngineeringSearchStatus{} }
func (*FeatureEngineeringSearchStatus) ProtoMessage() {}
func (*FeatureEngineeringSearchStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{26}
}
func (m *FeatureEngineeringSearchStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureEngineeringSearchStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeatureEngineeringSearchStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureEngineeringSearchStatus.Merge(m, src)
}
func (m *FeatureEngineeringSearchStatus) XXX_Size() int {
	return m.Size()
}
func (m *FeatureEngineeringSearchStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureEngineeringSearchStatus.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureEngineeringSearchStatus proto.InternalMessageInfo

func (m *FeatureEngineeringSpec) Reset()      { *m = FeatureEngineeringSpec{} }
func (*FeatureEngineeringSpec) ProtoMessage() {}
func (*FeatureEngineeringSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{27}
}
func (m *FeatureEngineeringSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureEngineeringSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeatureEngineeringSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureEngineeringSpec.Merge(m, src)
}
func (m *FeatureEngineeringSpec) XXX_Size() int {
	return m.Size()
}
func (m *FeatureEngineeringSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureEngineeringSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureEngineeringSpec proto.InternalMessageInfo

func (m *FeatureImportance) Reset()      { *m = FeatureImportance{} }
func (*FeatureImportance) ProtoMessage() {}
func (*FeatureImportance) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{28}
}
func (m *FeatureImportance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureImportance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeatureImportance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureImportance.Merge(m, src)
}
func (m *FeatureImportance) XXX_Size() int {
	return m.Size()
}
func (m *FeatureImportance) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureImportance.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureImportance proto.InternalMessageInfo

func (m *FeatureInfo) Reset()      { *m = FeatureInfo{} }
func (*FeatureInfo) ProtoMessage() {}
func (*FeatureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{29}
}
func (m *FeatureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeatureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureInfo.Merge(m, src)
}
func (m *FeatureInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeatureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureInfo proto.InternalMessageInfo

func (m *FeaturePair) Reset()      { *m = FeaturePair{} }
func (*FeaturePair) ProtoMessage() {}
func (*FeaturePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{30}
}
func (m *FeaturePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeaturePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeaturePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeaturePair.Merge(m, src)
}
func (m *FeaturePair) XXX_Size() int {
	return m.Size()
}
func (m *FeaturePair) XXX_DiscardUnknown() {
	xxx_messageInfo_FeaturePair.DiscardUnknown(m)
}

var xxx_messageInfo_FeaturePair proto.InternalMessageInfo

func (m *FeatureSelectionSpec) Reset()      { *m = FeatureSelectionSpec{} }
func (*FeatureSelectionSpec) ProtoMessage() {}
func (*FeatureSelectionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{31}
}
func (m *FeatureSelectionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureSelectionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeatureSelectionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureSelectionSpec.Merge(m, src)
}
func (m *FeatureSelectionSpec) XXX_Size() int {
	return m.Size()
}
func (m *FeatureSelectionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureSelectionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureSelectionSpec proto.InternalMessageInfo

func (m *ForecasterSpec) Reset()      { *m = ForecasterSpec{} }
func (*ForecasterSpec) ProtoMessage() {}
func (*ForecasterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{32}
}
func (m *ForecasterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForecasterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ForecasterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForecasterSpec.Merge(m, src)
}
func (m *ForecasterSpec) XXX_Size() int {
	return m.Size()
}
func (m *ForecasterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ForecasterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ForecasterSpec proto.InternalMessageInfo

func (m *GarbageCollectionSpec) Reset()      { *m = GarbageCollectionSpec{} }
func (*GarbageCollectionSpec) ProtoMessage() {}
func (*GarbageCollectionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{33}
}
func (m *GarbageCollectionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GarbageCollectionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GarbageCollectionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GarbageCollectionSpec.Merge(m, src)
}
func (m *GarbageCollectionSpec) XXX_Size() int {
	return m.Size()
}
func (m *GarbageCollectionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GarbageCollectionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GarbageCollectionSpec proto.InternalMessageInfo

func (m *GarbageCollectionStatus) Reset()      { *m = GarbageCollectionStatus{} }
func (*GarbageCollectionStatus) ProtoMessage() {}
func (*GarbageCollectionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{34}
}
func (m *GarbageCollectionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GarbageCollectionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GarbageCollectionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GarbageCollectionStatus.Merge(m, src)
}
func (m *GarbageCollectionStatus) XXX_Size() int {
	return m.Size()
}
func (m *GarbageCollectionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GarbageCollectionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GarbageCollectionStatus proto.InternalMessageInfo

func (m *GeneratedColumnSpec) Reset()      { *m = GeneratedColumnSpec{} }
func (*GeneratedColumnSpec) ProtoMessage() {}
func (*GeneratedColumnSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{35}
}
func (m *GeneratedColumnSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeneratedColumnSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GeneratedColumnSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneratedColumnSpec.Merge(m, src)
}
func (m *GeneratedColumnSpec) XXX_Size() int {
	return m.Size()
}
func (m *GeneratedColumnSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneratedColumnSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GeneratedColumnSpec proto.InternalMessageInfo

func (m *GroupSplitLocationsSpec) Reset()      { *m = GroupSplitLocationsSpec{} }
func (*GroupSplitLocationsSpec) ProtoMessage() {}
func (*GroupSplitLocationsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{36}
}
func (m *GroupSplitLocationsSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupSplitLocationsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GroupSplitLocationsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupSplitLocationsSpec.Merge(m, src)
}
func (m *GroupSplitLocationsSpec) XXX_Size() int {
	return m.Size()
}
func (m *GroupSplitLocationsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupSplitLocationsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GroupSplitLocationsSpec proto.InternalMessageInfo

func (m *HyperParameterValue) Reset()      { *m = HyperParameterValue{} }
func (*HyperParameterValue) ProtoMessage() {}
func (*HyperParameterValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{37}
}
func (m *HyperParameterValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HyperParameterValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HyperParameterValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HyperParameterValue.Merge(m, src)
}
func (m *HyperParameterValue) XXX_Size() int {
	return m.Size()
}
func (m *HyperParameterValue) XXX_DiscardUnknown() {
	xxx_messageInfo_HyperParameterValue.DiscardUnknown(m)
}

var xxx_messageInfo_HyperParameterValue proto.InternalMessageInfo

func (m *HyperbandOptions) Reset()      { *m = HyperbandOptions{} }
func (*HyperbandOptions) ProtoMessage() {}
func (*HyperbandOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{38}
}
func (m *HyperbandOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HyperbandOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HyperbandOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HyperbandOptions.Merge(m, src)
}
func (m *HyperbandOptions) XXX_Size() int {
	return m.Size()
}
func (m *HyperbandOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_HyperbandOptions.DiscardUnknown(m)
}

var xxx_messageInfo_HyperbandOptions proto.InternalMessageInfo

func (m *ImagePipelineSpec) Reset()      { *m = ImagePipelineSpec{} }
func (*ImagePipelineSpec) ProtoMessage() {}
func (*ImagePipelineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{39}
}
func (m *ImagePipelineSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImagePipelineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ImagePipelineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImagePipelineSpec.Merge(m, src)
}
func (m *ImagePipelineSpec) XXX_Size() int {
	return m.Size()
}
func (m *ImagePipelineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ImagePipelineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ImagePipelineSpec proto.InternalMessageInfo

func (m *ImbalanceHandlingSpec) Reset()      { *m = ImbalanceHandlingSpec{} }
func (*ImbalanceHandlingSpec) ProtoMessage() {}
func (*ImbalanceHandlingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{40}
}
func (m *ImbalanceHandlingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImbalanceHandlingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ImbalanceHandlingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImbalanceHandlingSpec.Merge(m, src)
}
func (m *ImbalanceHandlingSpec) XXX_Size() int {
	return m.Size()
}
func (m *ImbalanceHandlingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ImbalanceHandlingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ImbalanceHandlingSpec proto.InternalMessageInfo

func (m *InterpretabilitySpec) Reset()      { *m = InterpretabilitySpec{} }
func (*InterpretabilitySpec) ProtoMessage() {}
func (*InterpretabilitySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{41}
}
func (m *InterpretabilitySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterpretabilitySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InterpretabilitySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterpretabilitySpec.Merge(m, src)
}
func (m *InterpretabilitySpec) XXX_Size() int {
	return m.Size()
}
func (m *InterpretabilitySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_InterpretabilitySpec.DiscardUnknown(m)
}

var xxx_messageInfo_InterpretabilitySpec proto.InternalMessageInfo

func (m *InterpretabilityStatus) Reset()      { *m = InterpretabilityStatus{} }
func (*InterpretabilityStatus) ProtoMessage() {}
func (*InterpretabilityStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{42}
}
func (m *InterpretabilityStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterpretabilityStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InterpretabilityStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterpretabilityStatus.Merge(m, src)
}
func (m *InterpretabilityStatus) XXX_Size() int {
	return m.Size()
}
func (m *InterpretabilityStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_InterpretabilityStatus.DiscardUnknown(m)
}

var xxx_messageInfo_InterpretabilityStatus proto.InternalMessageInfo

func (m *Level) Reset()      { *m = Level{} }
func (*Level) ProtoMessage() {}
func (*Level) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{43}
}
func (m *Level) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Level) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Level) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Level.Merge(m, src)
}
func (m *Level) XXX_Size() int {
	return m.Size()
}
func (m *Level) XXX_DiscardUnknown() {
	xxx_messageInfo_Level.DiscardUnknown(m)
}

var xxx_messageInfo_Level proto.InternalMessageInfo

func (m *MedianPrunerOptions) Reset()      { *m = MedianPrunerOptions{} }
func (*MedianPrunerOptions) ProtoMessage() {}
func (*MedianPrunerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{44}
}
func (m *MedianPrunerOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MedianPrunerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MedianPrunerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedianPrunerOptions.Merge(m, src)
}
func (m *MedianPrunerOptions) XXX_Size() int {
	return m.Size()
}
func (m *MedianPrunerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MedianPrunerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MedianPrunerOptions proto.InternalMessageInfo

func (m *Model) Reset()      { *m = Model{} }
func (*Model) ProtoMessage() {}
func (*Model) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{45}
}
func (m *Model) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Model) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Model) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Model.Merge(m, src)
}
func (m *Model) XXX_Size() int {
	return m.Size()
}
func (m *Model) XXX_DiscardUnknown() {
	xxx_messageInfo_Model.DiscardUnknown(m)
}

var xxx_messageInfo_Model proto.InternalMessageInfo

func (m *ModelClass) Reset()      { *m = ModelClass{} }
func (*ModelClass) ProtoMessage() {}
func (*ModelClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{46}
}
func (m *ModelClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelClass.Merge(m, src)
}
func (m *ModelClass) XXX_Size() int {
	return m.Size()
}
func (m *ModelClass) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelClass.DiscardUnknown(m)
}

var xxx_messageInfo_ModelClass proto.InternalMessageInfo

func (m *ModelClassCondition) Reset()      { *m = ModelClassCondition{} }
func (*ModelClassCondition) ProtoMessage() {}
func (*ModelClassCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{47}
}
func (m *ModelClassCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelClassCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelClassCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelClassCondition.Merge(m, src)
}
func (m *ModelClassCondition) XXX_Size() int {
	return m.Size()
}
func (m *ModelClassCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelClassCondition.DiscardUnknown(m)
}

var xxx_messageInfo_ModelClassCondition proto.InternalMessageInfo

func (m *ModelClassDataSpec) Reset()      { *m = ModelClassDataSpec{} }
func (*ModelClassDataSpec) ProtoMessage() {}
func (*ModelClassDataSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{48}
}
func (m *ModelClassDataSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelClassDataSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelClassDataSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelClassDataSpec.Merge(m, src)
}
func (m *ModelClassDataSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModelClassDataSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelClassDataSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModelClassDataSpec proto.InternalMessageInfo

func (m *ModelClassList) Reset()      { *m = ModelClassList{} }
func (*ModelClassList) ProtoMessage() {}
func (*ModelClassList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{49}
}
func (m *ModelClassList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelClassList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelClassList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelClassList.Merge(m, src)
}
func (m *ModelClassList) XXX_Size() int {
	return m.Size()
}
func (m *ModelClassList) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelClassList.DiscardUnknown(m)
}

var xxx_messageInfo_ModelClassList proto.InternalMessageInfo

func (m *ModelClassServingSpec) Reset()      { *m = ModelClassServingSpec{} }
func (*ModelClassServingSpec) ProtoMessage() {}
func (*ModelClassServingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{50}
}
func (m *ModelClassServingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelClassServingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelClassServingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelClassServingSpec.Merge(m, src)
}
func (m *ModelClassServingSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModelClassServingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelClassServingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModelClassServingSpec proto.InternalMessageInfo

func (m *ModelClassSpec) Reset()      { *m = ModelClassSpec{} }
func (*ModelClassSpec) ProtoMessage() {}
func (*ModelClassSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{51}
}
func (m *ModelClassSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelClassSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelClassSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelClassSpec.Merge(m, src)
}
func (m *ModelClassSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModelClassSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelClassSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModelClassSpec proto.InternalMessageInfo

func (m *ModelClassStatus) Reset()      { *m = ModelClassStatus{} }
func (*ModelClassStatus) ProtoMessage() {}
func (*ModelClassStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{52}
}
func (m *ModelClassStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelClassStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelClassStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelClassStatus.Merge(m, src)
}
func (m *ModelClassStatus) XXX_Size() int {
	return m.Size()
}
func (m *ModelClassStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelClassStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ModelClassStatus proto.InternalMessageInfo

func (m *ModelClassTrainingSpec) Reset()      { *m = ModelClassTrainingSpec{} }
func (*ModelClassTrainingSpec) ProtoMessage() {}
func (*ModelClassTrainingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{53}
}
func (m *ModelClassTrainingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelClassTrainingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelClassTrainingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelClassTrainingSpec.Merge(m, src)
}
func (m *ModelClassTrainingSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModelClassTrainingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelClassTrainingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModelClassTrainingSpec proto.InternalMessageInfo

func (m *ModelCondition) Reset()      { *m = ModelCondition{} }
func (*ModelCondition) ProtoMessage() {}
func (*ModelCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{54}
}
func (m *ModelCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelCondition.Merge(m, src)
}
func (m *ModelCondition) XXX_Size() int {
	return m.Size()
}
func (m *ModelCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelCondition.DiscardUnknown(m)
}

var xxx_messageInfo_ModelCondition proto.InternalMessageInfo

func (m *ModelGroupByStatus) Reset()      { *m = ModelGroupByStatus{} }
func (*ModelGroupByStatus) ProtoMessage() {}
func (*ModelGroupByStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{55}
}
func (m *ModelGroupByStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelGroupByStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelGroupByStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelGroupByStatus.Merge(m, src)
}
func (m *ModelGroupByStatus) XXX_Size() int {
	return m.Size()
}
func (m *ModelGroupByStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelGroupByStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ModelGroupByStatus proto.InternalMessageInfo

func (m *ModelImageSpec) Reset()      { *m = ModelImageSpec{} }
func (*ModelImageSpec) ProtoMessage() {}
func (*ModelImageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{56}
}
func (m *ModelImageSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelImageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelImageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelImageSpec.Merge(m, src)
}
func (m *ModelImageSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModelImageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelImageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModelImageSpec proto.InternalMessageInfo

func (m *ModelList) Reset()      { *m = ModelList{} }
func (*ModelList) ProtoMessage() {}
func (*ModelList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{57}
}
func (m *ModelList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelList.Merge(m, src)
}
func (m *ModelList) XXX_Size() int {
	return m.Size()
}
func (m *ModelList) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelList.DiscardUnknown(m)
}

var xxx_messageInfo_ModelList proto.InternalMessageInfo

func (m *ModelResult) Reset()      { *m = ModelResult{} }
func (*ModelResult) ProtoMessage() {}
func (*ModelResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{58}
}
func (m *ModelResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelResult.Merge(m, src)
}
func (m *ModelResult) XXX_Size() int {
	return m.Size()
}
func (m *ModelResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelResult.DiscardUnknown(m)
}

var xxx_messageInfo_ModelResult proto.InternalMessageInfo

func (m *ModelSpec) Reset()      { *m = ModelSpec{} }
func (*ModelSpec) ProtoMessage() {}
func (*ModelSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{59}
}
func (m *ModelSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelSpec.Merge(m, src)
}
func (m *ModelSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModelSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModelSpec proto.InternalMessageInfo

func (m *ModelStageStatus) Reset()      { *m = ModelStageStatus{} }
func (*ModelStageStatus) ProtoMessage() {}
func (*ModelStageStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{60}
}
func (m *ModelStageStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelStageStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelStageStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelStageStatus.Merge(m, src)
}
func (m *ModelStageStatus) XXX_Size() int {
	return m.Size()
}
func (m *ModelStageStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelStageStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ModelStageStatus proto.InternalMessageInfo

func (m *ModelStatus) Reset()      { *m = ModelStatus{} }
func (*ModelStatus) ProtoMessage() {}
func (*ModelStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{61}
}
func (m *ModelStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelStatus.Merge(m, src)
}
func (m *ModelStatus) XXX_Size() int {
	return m.Size()
}
func (m *ModelStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ModelStatus proto.InternalMessageInfo

func (m *ModelTestSuite) Reset()      { *m = ModelTestSuite{} }
func (*ModelTestSuite) ProtoMessage() {}
func (*ModelTestSuite) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{62}
}
func (m *ModelTestSuite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelTestSuite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelTestSuite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelTestSuite.Merge(m, src)
}
func (m *ModelTestSuite) XXX_Size() int {
	return m.Size()
}
func (m *ModelTestSuite) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelTestSuite.DiscardUnknown(m)
}

var xxx_messageInfo_ModelTestSuite proto.InternalMessageInfo

func (m *NLPEstimatorSpec) Reset()      { *m = NLPEstimatorSpec{} }
func (*NLPEstimatorSpec) ProtoMessage() {}
func (*NLPEstimatorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{63}
}
func (m *NLPEstimatorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NLPEstimatorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NLPEstimatorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NLPEstimatorSpec.Merge(m, src)
}
func (m *NLPEstimatorSpec) XXX_Size() int {
	return m.Size()
}
func (m *NLPEstimatorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_NLPEstimatorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_NLPEstimatorSpec proto.InternalMessageInfo

func (m *NNLayerParameter) Reset()      { *m = NNLayerParameter{} }
func (*NNLayerParameter) ProtoMessage() {}
func (*NNLayerParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{64}
}
func (m *NNLayerParameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NNLayerParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NNLayerParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NNLayerParameter.Merge(m, src)
}
func (m *NNLayerParameter) XXX_Size() int {
	return m.Size()
}
func (m *NNLayerParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_NNLayerParameter.DiscardUnknown(m)
}

var xxx_messageInfo_NNLayerParameter proto.InternalMessageInfo

func (m *PartitionModelLocationsSpec) Reset()      { *m = PartitionModelLocationsSpec{} }
func (*PartitionModelLocationsSpec) ProtoMessage() {}
func (*PartitionModelLocationsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{65}
}
func (m *PartitionModelLocationsSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionModelLocationsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitionModelLocationsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionModelLocationsSpec.Merge(m, src)
}
func (m *PartitionModelLocationsSpec) XXX_Size() int {
	return m.Size()
}
func (m *PartitionModelLocationsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionModelLocationsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionModelLocationsSpec proto.InternalMessageInfo

func (m *PercentilePrunerOptions) Reset()      { *m = PercentilePrunerOptions{} }
func (*PercentilePrunerOptions) ProtoMessage() {}
func (*PercentilePrunerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{66}
}
func (m *PercentilePrunerOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PercentilePrunerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PercentilePrunerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PercentilePrunerOptions.Merge(m, src)
}
func (m *PercentilePrunerOptions) XXX_Size() int {
	return m.Size()
}
func (m *PercentilePrunerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PercentilePrunerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PercentilePrunerOptions proto.InternalMessageInfo

func (m *PipelineStageSpec) Reset()      { *m = PipelineStageSpec{} }
func (*PipelineStageSpec) ProtoMessage() {}
func (*PipelineStageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{67}
}
func (m *PipelineStageSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineStageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PipelineStageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineStageSpec.Merge(m, src)
}
func (m *PipelineStageSpec) XXX_Size() int {
	return m.Size()
}
func (m *PipelineStageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineStageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineStageSpec proto.InternalMessageInfo

func (m *PromotionStatus) Reset()      { *m = PromotionStatus{} }
func (*PromotionStatus) ProtoMessage() {}
func (*PromotionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{68}
}
func (m *PromotionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PromotionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionStatus.Merge(m, src)
}
func (m *PromotionStatus) XXX_Size() int {
	return m.Size()
}
func (m *PromotionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionStatus proto.InternalMessageInfo

func (m *PrunerSpec) Reset()      { *m = PrunerSpec{} }
func (*PrunerSpec) ProtoMessage() {}
func (*PrunerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{69}
}
func (m *PrunerSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrunerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrunerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrunerSpec.Merge(m, src)
}
func (m *PrunerSpec) XXX_Size() int {
	return m.Size()
}
func (m *PrunerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PrunerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PrunerSpec proto.InternalMessageInfo

func (m *RegressionForecasterSpec) Reset()      { *m = RegressionForecasterSpec{} }
func (*RegressionForecasterSpec) ProtoMessage() {}
func (*RegressionForecasterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{70}
}
func (m *RegressionForecasterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegressionForecasterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RegressionForecasterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegressionForecasterSpec.Merge(m, src)
}
func (m *RegressionForecasterSpec) XXX_Size() int {
	return m.Size()
}
func (m *RegressionForecasterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RegressionForecasterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RegressionForecasterSpec proto.InternalMessageInfo

func (m *Report) Reset()      { *m = Report{} }
func (*Report) ProtoMessage() {}
func (*Report) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{71}
}
func (m *Report) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Report) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Report) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Report.Merge(m, src)
}
func (m *Report) XXX_Size() int {
	return m.Size()
}
func (m *Report) XXX_DiscardUnknown() {
	xxx_messageInfo_Report.DiscardUnknown(m)
}

var xxx_messageInfo_Report proto.InternalMessageInfo

func (m *ReportCondition) Reset()      { *m = ReportCondition{} }
func (*ReportCondition) ProtoMessage() {}
func (*ReportCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{72}
}
func (m *ReportCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReportCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportCondition.Merge(m, src)
}
func (m *ReportCondition) XXX_Size() int {
	return m.Size()
}
func (m *ReportCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportCondition.DiscardUnknown(m)
}

var xxx_messageInfo_ReportCondition proto.InternalMessageInfo

func (m *ReportGroupByStatus) Reset()      { *m = ReportGroupByStatus{} }
func (*ReportGroupByStatus) ProtoMessage() {}
func (*ReportGroupByStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{73}
}
func (m *ReportGroupByStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportGroupByStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReportGroupByStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportGroupByStatus.Merge(m, src)
}
func (m *ReportGroupByStatus) XXX_Size() int {
	return m.Size()
}
func (m *ReportGroupByStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportGroupByStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReportGroupByStatus proto.InternalMessageInfo

func (m *ReportList) Reset()      { *m = ReportList{} }
func (*ReportList) ProtoMessage() {}
func (*ReportList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{74}
}
func (m *ReportList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReportList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportList.Merge(m, src)
}
func (m *ReportList) XXX_Size() int {
	return m.Size()
}
func (m *ReportList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportList.DiscardUnknown(m)
}

var xxx_messageInfo_ReportList proto.InternalMessageInfo

func (m *ReportSpec) Reset()      { *m = ReportSpec{} }
func (*ReportSpec) ProtoMessage() {}
func (*ReportSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{75}
}
func (m *ReportSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReportSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportSpec.Merge(m, src)
}
func (m *ReportSpec) XXX_Size() int {
	return m.Size()
}
func (m *ReportSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ReportSpec proto.InternalMessageInfo

func (m *ReportStatus) Reset()      { *m = ReportStatus{} }
func (*ReportStatus) ProtoMessage() {}
func (*ReportStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{76}
}
func (m *ReportStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReportStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportStatus.Merge(m, src)
}
func (m *ReportStatus) XXX_Size() int {
	return m.Size()
}
func (m *ReportStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReportStatus proto.InternalMessageInfo

func (m *ResourceConsumption) Reset()      { *m = ResourceConsumption{} }
func (*ResourceConsumption) ProtoMessage() {}
func (*ResourceConsumption) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{77}
}
func (m *ResourceConsumption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceConsumption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResourceConsumption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceConsumption.Merge(m, src)
}
func (m *ResourceConsumption) XXX_Size() int {
	return m.Size()
}
func (m *ResourceConsumption) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceConsumption.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceConsumption proto.InternalMessageInfo

func (m *RuntimeStatus) Reset()      { *m = RuntimeStatus{} }
func (*RuntimeStatus) ProtoMessage() {}
func (*RuntimeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{78}
}
func (m *RuntimeStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuntimeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RuntimeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeStatus.Merge(m, src)
}
func (m *RuntimeStatus) XXX_Size() int {
	return m.Size()
}
func (m *RuntimeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeStatus proto.InternalMessageInfo

func (m *SearchSpec) Reset()      { *m = SearchSpec{} }
func (*SearchSpec) ProtoMessage() {}
func (*SearchSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{79}
}
func (m *SearchSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SearchSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchSpec.Merge(m, src)
}
func (m *SearchSpec) XXX_Size() int {
	return m.Size()
}
func (m *SearchSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SearchSpec proto.InternalMessageInfo

func (m *SeasonalityPeriodSpec) Reset()      { *m = SeasonalityPeriodSpec{} }
func (*SeasonalityPeriodSpec) ProtoMessage() {}
func (*SeasonalityPeriodSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{80}
}
func (m *SeasonalityPeriodSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonalityPeriodSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SeasonalityPeriodSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonalityPeriodSpec.Merge(m, src)
}
func (m *SeasonalityPeriodSpec) XXX_Size() int {
	return m.Size()
}
func (m *SeasonalityPeriodSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonalityPeriodSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonalityPeriodSpec proto.InternalMessageInfo

func (m *SeasonalitySpec) Reset()      { *m = SeasonalitySpec{} }
func (*SeasonalitySpec) ProtoMessage() {}
func (*SeasonalitySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{81}
}
func (m *SeasonalitySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonalitySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SeasonalitySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonalitySpec.Merge(m, src)
}
func (m *SeasonalitySpec) XXX_Size() int {
	return m.Size()
}
func (m *SeasonalitySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonalitySpec.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonalitySpec proto.InternalMessageInfo

func (m *SegmentSpec) Reset()      { *m = SegmentSpec{} }
func (*SegmentSpec) ProtoMessage() {}
func (*SegmentSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{82}
}
func (m *SegmentSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SegmentSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentSpec.Merge(m, src)
}
func (m *SegmentSpec) XXX_Size() int {
	return m.Size()
}
func (m *SegmentSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentSpec proto.InternalMessageInfo

func (m *ServingSpec) Reset()      { *m = ServingSpec{} }
func (*ServingSpec) ProtoMessage() {}
func (*ServingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{83}
}
func (m *ServingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServingSpec.Merge(m, src)
}
func (m *ServingSpec) XXX_Size() int {
	return m.Size()
}
func (m *ServingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ServingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ServingSpec proto.InternalMessageInfo

func (m *Study) Reset()      { *m = Study{} }
func (*Study) ProtoMessage() {}
func (*Study) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{84}
}
func (m *Study) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Study) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Study) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Study.Merge(m, src)
}
func (m *Study) XXX_Size() int {
	return m.Size()
}
func (m *Study) XXX_DiscardUnknown() {
	xxx_messageInfo_Study.DiscardUnknown(m)
}

var xxx_messageInfo_Study proto.InternalMessageInfo

func (m *StudyCondition) Reset()      { *m = StudyCondition{} }
func (*StudyCondition) ProtoMessage() {}
func (*StudyCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{85}
}
func (m *StudyCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudyCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StudyCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudyCondition.Merge(m, src)
}
func (m *StudyCondition) XXX_Size() int {
	return m.Size()
}
func (m *StudyCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_StudyCondition.DiscardUnknown(m)
}

var xxx_messageInfo_StudyCondition proto.InternalMessageInfo

func (m *StudyGroupByStatus) Reset()      { *m = StudyGroupByStatus{} }
func (*StudyGroupByStatus) ProtoMessage() {}
func (*StudyGroupByStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{86}
}
func (m *StudyGroupByStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudyGroupByStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StudyGroupByStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudyGroupByStatus.Merge(m, src)
}
func (m *StudyGroupByStatus) XXX_Size() int {
	return m.Size()
}
func (m *StudyGroupByStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StudyGroupByStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StudyGroupByStatus proto.InternalMessageInfo

func (m *StudyList) Reset()      { *m = StudyList{} }
func (*StudyList) ProtoMessage() {}
func (*StudyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{87}
}
func (m *StudyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StudyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudyList.Merge(m, src)
}
func (m *StudyList) XXX_Size() int {
	return m.Size()
}
func (m *StudyList) XXX_DiscardUnknown() {
	xxx_messageInfo_StudyList.DiscardUnknown(m)
}

var xxx_messageInfo_StudyList proto.InternalMessageInfo

func (m *StudyPhaseStatus) Reset()      { *m = StudyPhaseStatus{} }
func (*StudyPhaseStatus) ProtoMessage() {}
func (*StudyPhaseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{88}
}
func (m *StudyPhaseStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudyPhaseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StudyPhaseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudyPhaseStatus.Merge(m, src)
}
func (m *StudyPhaseStatus) XXX_Size() int {
	return m.Size()
}
func (m *StudyPhaseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StudyPhaseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StudyPhaseStatus proto.InternalMessageInfo

func (m *StudyScheduleSpec) Reset()      { *m = StudyScheduleSpec{} }
func (*StudyScheduleSpec) ProtoMessage() {}
func (*StudyScheduleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{89}
}
func (m *StudyScheduleSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudyScheduleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StudyScheduleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudyScheduleSpec.Merge(m, src)
}
func (m *StudyScheduleSpec) XXX_Size() int {
	return m.Size()
}
func (m *StudyScheduleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_StudyScheduleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_StudyScheduleSpec proto.InternalMessageInfo

func (m *StudySpec) Reset()      { *m = StudySpec{} }
func (*StudySpec) ProtoMessage() {}
func (*StudySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{90}
}
func (m *StudySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StudySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudySpec.Merge(m, src)
}
func (m *StudySpec) XXX_Size() int {
	return m.Size()
}
func (m *StudySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_StudySpec.DiscardUnknown(m)
}

var xxx_messageInfo_StudySpec proto.InternalMessageInfo

func (m *StudyStatus) Reset()      { *m = StudyStatus{} }
func (*StudyStatus) ProtoMessage() {}
func (*StudyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{91}
}
func (m *StudyStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudyStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StudyStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudyStatus.Merge(m, src)
}
func (m *StudyStatus) XXX_Size() int {
	return m.Size()
}
func (m *StudyStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StudyStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StudyStatus proto.InternalMessageInfo

func (m *SuccessiveHalvingOptions) Reset()      { *m = SuccessiveHalvingOptions{} }
func (*SuccessiveHalvingOptions) ProtoMessage() {}
func (*SuccessiveHalvingOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{92}
}
func (m *SuccessiveHalvingOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuccessiveHalvingOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SuccessiveHalvingOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuccessiveHalvingOptions.Merge(m, src)
}
func (m *SuccessiveHalvingOptions) XXX_Size() int {
	return m.Size()
}
func (m *SuccessiveHalvingOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SuccessiveHalvingOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SuccessiveHalvingOptions proto.InternalMessageInfo

func (m *SuccessiveHalvingSpec) Reset()      { *m = SuccessiveHalvingSpec{} }
func (*SuccessiveHalvingSpec) ProtoMessage() {}
func (*SuccessiveHalvingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{93}
}
func (m *SuccessiveHalvingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuccessiveHalvingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SuccessiveHalvingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuccessiveHalvingSpec.Merge(m, src)
}
func (m *SuccessiveHalvingSpec) XXX_Size() int {
	return m.Size()
}
func (m *SuccessiveHalvingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SuccessiveHalvingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SuccessiveHalvingSpec proto.InternalMessageInfo

func (m *TextPipelineSpec) Reset()      { *m = TextPipelineSpec{} }
func (*TextPipelineSpec) ProtoMessage() {}
func (*TextPipelineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{94}
}
func (m *TextPipelineSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextPipelineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TextPipelineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextPipelineSpec.Merge(m, src)
}
func (m *TextPipelineSpec) XXX_Size() int {
	return m.Size()
}
func (m *TextPipelineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TextPipelineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TextPipelineSpec proto.InternalMessageInfo

func (m *ThresholdPrunerOptions) Reset()      { *m = ThresholdPrunerOptions{} }
func (*ThresholdPrunerOptions) ProtoMessage() {}
func (*ThresholdPrunerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{95}
}
func (m *ThresholdPrunerOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThresholdPrunerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ThresholdPrunerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThresholdPrunerOptions.Merge(m, src)
}
func (m *ThresholdPrunerOptions) XXX_Size() int {
	return m.Size()
}
func (m *ThresholdPrunerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ThresholdPrunerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ThresholdPrunerOptions proto.InternalMessageInfo

func (m *TimeSeriesEvent) Reset()      { *m = TimeSeriesEvent{} }
func (*TimeSeriesEvent) ProtoMessage() {}
func (*TimeSeriesEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{96}
}
func (m *TimeSeriesEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeSeriesEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TimeSeriesEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeSeriesEvent.Merge(m, src)
}
func (m *TimeSeriesEvent) XXX_Size() int {
	return m.Size()
}
func (m *TimeSeriesEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeSeriesEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TimeSeriesEvent proto.InternalMessageInfo

func (m *TrainingSpec) Reset()      { *m = TrainingSpec{} }
func (*TrainingSpec) ProtoMessage() {}
func (*TrainingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{97}
}
func (m *TrainingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TrainingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingSpec.Merge(m, src)
}
func (m *TrainingSpec) XXX_Size() int {
	return m.Size()
}
func (m *TrainingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingSpec proto.InternalMessageInfo

func (m *UnivariateForecastStatus) Reset()      { *m = UnivariateForecastStatus{} }
func (*UnivariateForecastStatus) ProtoMessage() {}
func (*UnivariateForecastStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{98}
}
func (m *UnivariateForecastStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnivariateForecastStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UnivariateForecastStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnivariateForecastStatus.Merge(m, src)
}
func (m *UnivariateForecastStatus) XXX_Size() int {
	return m.Size()
}
func (m *UnivariateForecastStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UnivariateForecastStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UnivariateForecastStatus proto.InternalMessageInfo

func (m *VideoPipelineSpec) Reset()      { *m = VideoPipelineSpec{} }
func (*VideoPipelineSpec) ProtoMessage() {}
func (*VideoPipelineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{99}
}
func (m *VideoPipelineSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoPipelineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VideoPipelineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoPipelineSpec.Merge(m, src)
}
func (m *VideoPipelineSpec) XXX_Size() int {
	return m.Size()
}
func (m *VideoPipelineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoPipelineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VideoPipelineSpec proto.InternalMessageInfo

func (m *WindowSpec) Reset()      { *m = WindowSpec{} }
func (*WindowSpec) ProtoMessage() {}
func (*WindowSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06c1c430b441be9, []int{100}
}
func (m *WindowSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WindowSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WindowSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindowSpec.Merge(m, src)
}
func (m *WindowSpec) XXX_Size() int {
	return m.Size()
}
func (m *WindowSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WindowSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WindowSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AlgorithmParameterRange)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.AlgorithmParameterRange")
	proto.RegisterType((*AlgorithmSearchSpaceSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.AlgorithmSearchSpaceSpec")
	proto.RegisterType((*Anomaly)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Anomaly")
	proto.RegisterType((*AudioPipelineSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.AudioPipelineSpec")
	proto.RegisterType((*BacktestSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.BacktestSpec")
	proto.RegisterType((*BaselineSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.BaselineSpec")
	proto.RegisterType((*ChangePoint)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ChangePoint")
	proto.RegisterType((*ChatbotEstimatorSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ChatbotEstimatorSpec")
	proto.RegisterType((*CheckpointSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.CheckpointSpec")
	proto.RegisterType((*ClassicalEstimatorSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ClassicalEstimatorSpec")
	proto.RegisterType((*CustomReportSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.CustomReportSpec")
	proto.RegisterType((*DataHashes)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.DataHashes")
	proto.RegisterType((*DataSplitSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.DataSplitSpec")
	proto.RegisterType((*DeepEstimatorLayer)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.DeepEstimatorLayer")
	proto.RegisterType((*DeepEstimatorSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.DeepEstimatorSpec")
	proto.RegisterType((*DriftDetectorStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.DriftDetectorStatus")
	proto.RegisterType((*DriftModelSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.DriftModelSpec")
	proto.RegisterType((*EarlyStopSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.EarlyStopSpec")
	proto.RegisterType((*EnsembleRules)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.EnsembleRules")
	proto.RegisterType((*EnsembleSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.EnsembleSpec")
	proto.RegisterType((*EnsemblesSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.EnsemblesSpec")
	proto.RegisterType((*EntityRef)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.EntityRef")
	proto.RegisterType((*EvalMetrics)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.EvalMetrics")
	proto.RegisterType((*EvalPeriod)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.EvalPeriod")
	proto.RegisterType((*FeatureEngineeringPipeline)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.FeatureEngineeringPipeline")
	proto.RegisterType((*FeatureEngineeringSearchSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.FeatureEngineeringSearchSpec")
	proto.RegisterType((*FeatureEngineeringSearchStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.FeatureEngineeringSearchStatus")
	proto.RegisterType((*FeatureEngineeringSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.FeatureEngineeringSpec")
	proto.RegisterType((*FeatureImportance)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.FeatureImportance")
	proto.RegisterType((*FeatureInfo)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.FeatureInfo")
	proto.RegisterType((*FeaturePair)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.FeaturePair")
	proto.RegisterType((*FeatureSelectionSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.FeatureSelectionSpec")
	proto.RegisterType((*ForecasterSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ForecasterSpec")
	proto.RegisterType((*GarbageCollectionSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.GarbageCollectionSpec")
	proto.RegisterType((*GarbageCollectionStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.GarbageCollectionStatus")
	proto.RegisterType((*GeneratedColumnSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.GeneratedColumnSpec")
	proto.RegisterType((*GroupSplitLocationsSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.GroupSplitLocationsSpec")
	proto.RegisterType((*HyperParameterValue)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.HyperParameterValue")
	proto.RegisterType((*HyperbandOptions)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.HyperbandOptions")
	proto.RegisterType((*ImagePipelineSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ImagePipelineSpec")
	proto.RegisterType((*ImbalanceHandlingSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ImbalanceHandlingSpec")
	proto.RegisterType((*InterpretabilitySpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.InterpretabilitySpec")
	proto.RegisterType((*InterpretabilityStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.InterpretabilityStatus")
	proto.RegisterType((*Level)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Level")
	proto.RegisterType((*MedianPrunerOptions)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.MedianPrunerOptions")
	proto.RegisterType((*Model)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Model")
	proto.RegisterType((*ModelClass)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelClass")
	proto.RegisterType((*ModelClassCondition)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelClassCondition")
	proto.RegisterType((*ModelClassDataSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelClassDataSpec")
	proto.RegisterType((*ModelClassList)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelClassList")
	proto.RegisterType((*ModelClassServingSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelClassServingSpec")
	proto.RegisterType((*ModelClassSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelClassSpec")
	proto.RegisterType((*ModelClassStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelClassStatus")
	proto.RegisterType((*ModelClassTrainingSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelClassTrainingSpec")
	proto.RegisterType((*ModelCondition)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelCondition")
	proto.RegisterType((*ModelGroupByStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelGroupByStatus")
	proto.RegisterType((*ModelImageSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelImageSpec")
	proto.RegisterType((*ModelList)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelList")
	proto.RegisterType((*ModelResult)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelResult")
	proto.RegisterType((*ModelSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelSpec")
	proto.RegisterType((*ModelStageStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelStageStatus")
	proto.RegisterType((*ModelStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelStatus")
	proto.RegisterType((*ModelTestSuite)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ModelTestSuite")
	proto.RegisterType((*NLPEstimatorSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.NLPEstimatorSpec")
	proto.RegisterType((*NNLayerParameter)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.NNLayerParameter")
	proto.RegisterType((*PartitionModelLocationsSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.PartitionModelLocationsSpec")
	proto.RegisterType((*PercentilePrunerOptions)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.PercentilePrunerOptions")
	proto.RegisterType((*PipelineStageSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.PipelineStageSpec")
	proto.RegisterType((*PromotionStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.PromotionStatus")
	proto.RegisterType((*PrunerSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.PrunerSpec")
	proto.RegisterType((*RegressionForecasterSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.RegressionForecasterSpec")
	proto.RegisterType((*Report)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Report")
	proto.RegisterType((*ReportCondition)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ReportCondition")
	proto.RegisterType((*ReportGroupByStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ReportGroupByStatus")
	proto.RegisterType((*ReportList)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ReportList")
	proto.RegisterType((*ReportSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ReportSpec")
	proto.RegisterType((*ReportStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ReportStatus")
	proto.RegisterType((*ResourceConsumption)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ResourceConsumption")
	proto.RegisterType((*RuntimeStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.RuntimeStatus")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.RuntimeStatus.PythonPackagesEntry")
	proto.RegisterType((*SearchSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.SearchSpec")
	proto.RegisterType((*SeasonalityPeriodSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.SeasonalityPeriodSpec")
	proto.RegisterType((*SeasonalitySpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.SeasonalitySpec")
	proto.RegisterType((*SegmentSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.SegmentSpec")
	proto.RegisterType((*ServingSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ServingSpec")
	proto.RegisterType((*Study)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.Study")
	proto.RegisterType((*StudyCondition)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.StudyCondition")
	proto.RegisterType((*StudyGroupByStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.StudyGroupByStatus")
	proto.RegisterType((*StudyList)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.StudyList")
	proto.RegisterType((*StudyPhaseStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.StudyPhaseStatus")
	proto.RegisterType((*StudyScheduleSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.StudyScheduleSpec")
	proto.RegisterType((*StudySpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.StudySpec")
	proto.RegisterType((*StudyStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.StudyStatus")
	proto.RegisterType((*SuccessiveHalvingOptions)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.SuccessiveHalvingOptions")
	proto.RegisterType((*SuccessiveHalvingSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.SuccessiveHalvingSpec")
	proto.RegisterType((*TextPipelineSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.TextPipelineSpec")
	proto.RegisterType((*ThresholdPrunerOptions)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.ThresholdPrunerOptions")
	proto.RegisterType((*TimeSeriesEvent)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.TimeSeriesEvent")
	proto.RegisterType((*TrainingSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.TrainingSpec")
	proto.RegisterType((*UnivariateForecastStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.UnivariateForecastStatus")
	proto.RegisterType((*VideoPipelineSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.VideoPipelineSpec")
	proto.RegisterType((*WindowSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1.WindowSpec")
}

func init() {
	proto.RegisterFile("github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1/generated.proto", fileDescriptor_b06c1c430b441be9)
}

var fileDescriptor_b06c1c430b441be9 = []byte{
	// 12992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x69, 0x70, 0x64, 0xd7,
	0x75, 0x18, 0xac, 0x07, 0xa0, 0xb1, 0x5c, 0x0c, 0xb6, 0x3b, 0x5b, 0x73, 0x38, 0x9c, 0xa6, 0x9a,
	0xa2, 0x44, 0x8a, 0x32, 0xc6, 0xa4, 0x29, 0x91, 0xa6, 0x36, 0x02, 0x8d, 0x65, 0x40, 0x02, 0x33,
	0xd0, 0x01, 0x66, 0xa8, 0xcd, 0xb2, 0x1e, 0xba, 0x2f, 0x1a, 0x4f, 0xf3, 0xfa, 0xbd, 0xc7, 0xf7,
	0x5e, 0x63, 0x00, 0x8a, 0xa6, 0xe5, 0xcf, 0xf6, 0x67, 0x25, 0x92, 0x1d, 0xd9, 0xb1, 0x9d, 0xd8,
	0x49, 0x2a, 0xb6, 0xb3, 0xfe, 0x4a, 0xa5, 0x12, 0xa7, 0xb2, 0x55, 0xc5, 0xe5, 0xa4, 0x2a, 0xe5,
	0xfc, 0x88, 0x65, 0xff, 0x48, 0x95, 0xf3, 0xc3, 0x48, 0x34, 0x4e, 0xc5, 0xa9, 0xfc, 0x72, 0x2a,
	0x3f, 0x52, 0x41, 0xa5, 0x5c, 0xa9, 0x7b, 0xee, 0xfa, 0x16, 0x0c, 0x81, 0xee, 0x9e, 0x19, 0xbb,
	0xa2, 0x5f, 0x33, 0x38, 0xe7, 0xdc, 0x73, 0x6e, 0xdf, 0x77, 0x97, 0xb3, 0xdd, 0x73, 0xc9, 0x8d,
	0xb6, 0x97, 0xee, 0x75, 0x77, 0xe6, 0x9b, 0x61, 0xe7, 0x7a, 0x87, 0xa5, 0x6e, 0x14, 0x87, 0xfb,
	0xd7, 0x3b, 0x61, 0x8b, 0xf9, 0xae, 0x1b, 0x79, 0xd7, 0xa3, 0xbb, 0xed, 0xeb, 0x6e, 0xe4, 0x25,
	0xd7, 0xd3, 0xd8, 0xf5, 0x02, 0x2f, 0x68, 0x5f, 0xdf, 0x7f, 0xd1, 0xf5, 0xa3, 0x3d, 0xf7, 0xc5,
	0xeb, 0x6d, 0x16, 0xb0, 0xd8, 0x4d, 0x59, 0x6b, 0x3e, 0x8a, 0xc3, 0x34, 0xa4, 0xaf, 0x1a, 0x4e,
	0xf3, 0x8a, 0xd3, 0xbc, 0xe6, 0x34, 0x1f, 0xdd, 0x6d, 0xcf, 0x73, 0x4e, 0xf3, 0x8a, 0xd3, 0xbc,
	0xe2, 0x74, 0xe5, 0x07, 0xac, 0x3e, 0xb4, 0xc3, 0x76, 0x78, 0x1d, 0x19, 0xee, 0x74, 0x77, 0xf1,
	0x2f, 0xfc, 0x03, 0xff, 0x27, 0x04, 0x5d, 0x59, 0x3d, 0x65, 0x97, 0x9b, 0x6e, 0xea, 0xfa, 0xe1,
	0xc9, 0x3d, 0xbe, 0xb2, 0x74, 0x4a, 0x46, 0x2d, 0x37, 0x75, 0x4f, 0xe6, 0x52, 0xbf, 0xfb, 0x6a,
	0x32, 0xef, 0x85, 0x9c, 0xf4, 0x7a, 0x33, 0x8c, 0xd9, 0xf5, 0xfd, 0x22, 0xcd, 0xcb, 0x86, 0xa6,
	0xe3, 0x36, 0xf7, 0xbc, 0x80, 0xc5, 0x87, 0x86, 0x3f, 0x97, 0x5d, 0xd6, 0xea, 0xfa, 0x49, 0xad,
	0xe2, 0x6e, 0x90, 0x7a, 0x1d, 0x56, 0x68, 0xf0, 0x89, 0xf7, 0x6b, 0x90, 0x34, 0xf7, 0x58, 0xc7,
	0xcd, 0xb7, 0xab, 0xff, 0x1f, 0x87, 0x5c, 0x5e, 0xf0, 0xdb, 0x61, 0xec, 0xa5, 0x7b, 0x9d, 0x4d,
	0x37, 0x76, 0x3b, 0x2c, 0x65, 0x31, 0xb8, 0x41, 0x9b, 0xd1, 0x88, 0x8c, 0x04, 0x6e, 0x87, 0x55,
	0x9d, 0xa7, 0x9d, 0xe7, 0x26, 0x16, 0xbf, 0xfc, 0x3b, 0x47, 0xb5, 0x0f, 0xdc, 0x3f, 0xaa, 0x8d,
	0xdc, 0x74, 0x3b, 0xec, 0xf8, 0xa8, 0xb6, 0xde, 0xe3, 0xb7, 0x98, 0x6f, 0xf8, 0x6e, 0x92, 0x78,
	0xcd, 0xe5, 0x24, 0xf5, 0x3a, 0x6e, 0x1a, 0xc6, 0x9c, 0x1f, 0xa0, 0x24, 0x1a, 0x92, 0xd1, 0x98,
	0x8b, 0x4e, 0xaa, 0x43, 0x4f, 0x0f, 0x3f, 0x37, 0xf9, 0xd2, 0xea, 0xfc, 0x29, 0x67, 0x96, 0x14,
	0xa2, 0x27, 0xd6, 0x7c, 0xf6, 0xa7, 0x2c, 0x4e, 0xcb, 0xce, 0x8f, 0xe2, 0x9f, 0x09, 0x48, 0x31,
	0xf5, 0x9f, 0x1c, 0x26, 0x55, 0xfd, 0xf3, 0xb7, 0x98, 0x1b, 0x37, 0xf7, 0xb6, 0x22, 0xb7, 0xc9,
	0xb6, 0x22, 0xd6, 0xa4, 0x5d, 0x32, 0xe6, 0x05, 0x4d, 0xbf, 0xdb, 0xe2, 0x43, 0x30, 0xfc, 0xdc,
	0xc4, 0xe2, 0x97, 0xee, 0x1f, 0xd5, 0xc6, 0xd6, 0x04, 0x68, 0xe0, 0x23, 0xa0, 0x64, 0x71, 0xb1,
	0xec, 0x40, 0x88, 0x1d, 0x32, 0x62, 0x97, 0x0f, 0x1e, 0x92, 0x58, 0x29, 0x8b, 0x1e, 0x92, 0xd1,
	0x66, 0x37, 0x49, 0xc3, 0x4e, 0x75, 0x18, 0xc7, 0xfe, 0x73, 0xf3, 0xbd, 0xae, 0xea, 0xf9, 0x13,
	0x26, 0x94, 0xf9, 0x0a, 0x0d, 0x14, 0x04, 0x52, 0x60, 0xfd, 0xbf, 0x3a, 0x64, 0x6c, 0x21, 0x08,
	0x3b, 0xae, 0x7f, 0x48, 0x9f, 0xce, 0x4c, 0xba, 0x73, 0xf6, 0xa4, 0x93, 0x93, 0xe4, 0xe3, 0x64,
	0x72, 0xdf, 0xf5, 0xbb, 0xac, 0x11, 0xfa, 0xdd, 0x4e, 0x50, 0x1d, 0x42, 0xc2, 0xf3, 0x92, 0x70,
	0xf2, 0x8e, 0x41, 0x81, 0x4d, 0x47, 0x3f, 0x43, 0xa6, 0xdd, 0xd6, 0xd7, 0x96, 0x98, 0x9f, 0xba,
	0xb2, 0xe5, 0x30, 0xb6, 0xbc, 0x24, 0x5b, 0x4e, 0x2f, 0x64, 0xb0, 0x90, 0xa3, 0xa6, 0xcf, 0x90,
	0x4a, 0x92, 0xba, 0x71, 0x5a, 0x1d, 0xc1, 0x66, 0x53, 0xb2, 0x59, 0x65, 0x8b, 0x03, 0x41, 0xe0,
	0xe8, 0x53, 0x64, 0x98, 0x05, 0xad, 0x6a, 0x05, 0x49, 0x26, 0x25, 0xc9, 0xf0, 0x72, 0xd0, 0x02,
	0x0e, 0xaf, 0xff, 0x9c, 0x43, 0xe6, 0x16, 0xba, 0x2d, 0x2f, 0xdc, 0xf4, 0x22, 0xe6, 0x7b, 0x81,
	0x98, 0x67, 0x87, 0x84, 0xec, 0x32, 0x37, 0xed, 0xc6, 0xde, 0x3b, 0x2c, 0x96, 0x3f, 0xfc, 0x0b,
	0xf7, 0x8f, 0x6a, 0x64, 0x45, 0x43, 0x8f, 0x8f, 0x6a, 0xbd, 0xee, 0x7d, 0xf3, 0x28, 0xd0, 0xb0,
	0x02, 0x4b, 0x18, 0xef, 0xd0, 0xb9, 0x45, 0xb7, 0x79, 0x37, 0x65, 0x49, 0x8a, 0x7d, 0x79, 0x96,
	0x8c, 0x25, 0xbe, 0xd7, 0xf2, 0x82, 0x36, 0x76, 0x64, 0x7c, 0x71, 0x92, 0x4f, 0xbe, 0x2d, 0x01,
	0x02, 0x85, 0xa3, 0x75, 0x32, 0x9a, 0x44, 0xbe, 0x97, 0x26, 0x38, 0xfc, 0x95, 0x45, 0xc2, 0xbf,
	0xea, 0x16, 0x42, 0x40, 0x62, 0x68, 0x95, 0x8c, 0xad, 0x05, 0x5e, 0xea, 0xb9, 0x3e, 0x8e, 0x74,
	0x05, 0xd4, 0x9f, 0xf4, 0x09, 0x32, 0xdc, 0x76, 0x23, 0x1c, 0xa5, 0xca, 0xe2, 0x18, 0x1f, 0xa1,
	0x55, 0x37, 0x02, 0x0e, 0xab, 0xff, 0x7b, 0xec, 0x50, 0x62, 0x06, 0xe7, 0x59, 0x32, 0xc6, 0x02,
	0x77, 0xc7, 0x67, 0x2d, 0xbb, 0x43, 0xcb, 0x02, 0x04, 0x0a, 0x47, 0xbf, 0x4e, 0x26, 0x76, 0x64,
	0xb3, 0x44, 0x2e, 0x9b, 0x1f, 0xb9, 0x7f, 0x54, 0x9b, 0x50, 0xbc, 0x92, 0x81, 0x2f, 0x1c, 0x23,
	0x8f, 0xff, 0x1e, 0xd7, 0x17, 0xbf, 0x72, 0x5c, 0xfc, 0x9e, 0x05, 0xdf, 0x07, 0x0e, 0xab, 0x4f,
	0x91, 0xc9, 0xc6, 0x1e, 0x9f, 0xfc, 0x9b, 0xa1, 0x17, 0xa4, 0xf5, 0x97, 0xc9, 0x85, 0xc6, 0x9e,
	0x9b, 0xee, 0x84, 0xa9, 0x66, 0x86, 0xbf, 0xf2, 0x2a, 0x19, 0xe1, 0xec, 0xe4, 0xc7, 0x1f, 0xe7,
	0x33, 0x9e, 0xf7, 0x1c, 0x10, 0x5a, 0xff, 0x1f, 0x0e, 0x99, 0x6e, 0xec, 0xb1, 0xe6, 0xdd, 0x88,
	0x33, 0x39, 0xcb, 0xb0, 0xac, 0x10, 0xda, 0xd4, 0x0d, 0xd7, 0x82, 0x94, 0xc5, 0xfb, 0xae, 0x2f,
	0xbf, 0xd9, 0xa5, 0xfb, 0x47, 0x35, 0xda, 0x28, 0x60, 0xa1, 0xa4, 0x05, 0x8d, 0xc8, 0xb8, 0x1f,
	0x36, 0xdd, 0xd4, 0x0b, 0xc5, 0xb2, 0x99, 0x7c, 0x69, 0xf1, 0xb4, 0xdb, 0x03, 0x3f, 0x42, 0xcd,
	0xd6, 0xb0, 0xe4, 0xa6, 0xee, 0xba, 0xe4, 0xb4, 0x38, 0x2b, 0x17, 0xc8, 0xb8, 0x82, 0x80, 0x96,
	0x52, 0xff, 0x13, 0x87, 0x5c, 0x92, 0xe3, 0xee, 0xfa, 0xd9, 0xc1, 0xfa, 0x24, 0x99, 0x72, 0xd5,
	0x0e, 0x73, 0xd3, 0xec, 0x15, 0x17, 0x25, 0xb7, 0xa9, 0x05, 0x1b, 0x09, 0x59, 0x5a, 0xfa, 0x57,
	0x1d, 0x42, 0x22, 0xb5, 0x2d, 0xa9, 0x73, 0x66, 0xa3, 0xf7, 0xbd, 0xee, 0xc6, 0x61, 0xc4, 0x62,
	0xbd, 0xcf, 0xe1, 0xee, 0xb3, 0xf8, 0xbc, 0xec, 0x09, 0xd1, 0x70, 0x3e, 0xfd, 0xce, 0x97, 0x90,
	0x82, 0xd5, 0x97, 0xfa, 0x3d, 0x32, 0x2b, 0x37, 0x46, 0x16, 0x85, 0xb1, 0xf8, 0xce, 0x4d, 0x52,
	0x89, 0x5c, 0x7e, 0x20, 0x8e, 0x63, 0x47, 0x3f, 0xd3, 0xdb, 0xa8, 0x6f, 0xba, 0x6d, 0x5c, 0x4d,
	0x66, 0xd7, 0xe2, 0x90, 0x04, 0x04, 0xef, 0xfa, 0x3f, 0x75, 0x08, 0xe1, 0x1f, 0xe6, 0x86, 0x9b,
	0xec, 0xb1, 0x84, 0xbe, 0x44, 0x26, 0xf0, 0x77, 0xf2, 0x3f, 0xe5, 0xd8, 0x5e, 0x90, 0xed, 0xce,
	0x6d, 0xcb, 0x01, 0xe0, 0x38, 0x30, 0x64, 0x7c, 0x53, 0xe6, 0x7b, 0x88, 0xc4, 0xe4, 0x37, 0xe5,
	0x6d, 0x83, 0x02, 0x9b, 0x8e, 0x6f, 0xca, 0xfb, 0xae, 0xef, 0xb5, 0xf0, 0x9b, 0x63, 0xcb, 0xdc,
	0xa6, 0x7c, 0x27, 0x83, 0x85, 0x1c, 0x75, 0xfd, 0xbb, 0x23, 0x64, 0x8a, 0xf7, 0x1c, 0xb7, 0x1e,
	0x1c, 0xb0, 0x0e, 0x19, 0xed, 0xb0, 0x74, 0x2f, 0x6c, 0xc9, 0x9e, 0xdf, 0xe6, 0x3b, 0xd3, 0x06,
	0x42, 0xfa, 0xd9, 0x44, 0xb5, 0x10, 0xc1, 0x0a, 0xa4, 0x10, 0x5a, 0x23, 0x15, 0x1c, 0x04, 0xb9,
	0xa6, 0x26, 0xf8, 0xd8, 0xe2, 0x18, 0x81, 0x80, 0xd3, 0x79, 0x42, 0x4c, 0x9f, 0xc5, 0x46, 0xb8,
	0x38, 0xcd, 0xe7, 0x86, 0xf9, 0x65, 0x60, 0x51, 0xf0, 0x9d, 0x80, 0x0f, 0x10, 0x9e, 0x32, 0x15,
	0xb1, 0x13, 0xf0, 0xd1, 0x03, 0x84, 0xd2, 0x17, 0xc9, 0x24, 0xee, 0xae, 0xf2, 0x04, 0x13, 0xe7,
	0xcc, 0x0c, 0x1f, 0xe2, 0x2d, 0x03, 0x06, 0x9b, 0x86, 0x26, 0x64, 0x3c, 0x61, 0xed, 0x0e, 0x0b,
	0xd2, 0xa4, 0x3a, 0x8a, 0x93, 0x68, 0xb9, 0xf7, 0xd9, 0xbe, 0x25, 0x38, 0xe1, 0x5c, 0xd2, 0xab,
	0x57, 0x02, 0x13, 0xd0, 0x82, 0xe8, 0xab, 0xe4, 0x1c, 0x36, 0xe6, 0xc3, 0x96, 0xb0, 0xb4, 0x3a,
	0x26, 0x66, 0xd1, 0xfd, 0xa3, 0xda, 0xec, 0xb6, 0x05, 0xc7, 0x05, 0x9a, 0xa1, 0x54, 0x13, 0x49,
	0x35, 0x1c, 0x17, 0x13, 0xe9, 0xfe, 0x51, 0x6d, 0x66, 0xdb, 0x80, 0xb1, 0x9d, 0x4d, 0x47, 0x57,
	0xc9, 0x9c, 0x19, 0x44, 0xd5, 0x78, 0x02, 0x1b, 0x3f, 0x71, 0xff, 0xa8, 0x76, 0xf1, 0x4e, 0x1e,
	0x89, 0x2c, 0x8a, 0x6d, 0xea, 0xbf, 0x3a, 0x44, 0xe8, 0x12, 0x63, 0x91, 0xde, 0x72, 0xd6, 0xdd,
	0x43, 0x16, 0x9f, 0x42, 0x2d, 0xb9, 0x4e, 0x46, 0xd2, 0xc3, 0x88, 0xc9, 0xa9, 0xff, 0xa4, 0xa2,
	0xd8, 0x3e, 0x8c, 0xb8, 0xd2, 0x36, 0x79, 0xf3, 0x26, 0x32, 0x12, 0x0d, 0x38, 0x21, 0x7d, 0x2f,
	0xb3, 0x11, 0x09, 0xa5, 0xeb, 0x8d, 0xde, 0x3f, 0x8d, 0x14, 0xa0, 0xf7, 0x97, 0x45, 0x5a, 0xdc,
	0x85, 0xec, 0xed, 0x86, 0xcf, 0x25, 0x2f, 0x88, 0xba, 0x29, 0x36, 0x4b, 0xaa, 0x23, 0x78, 0x68,
	0xe2, 0x5c, 0x5a, 0x33, 0x60, 0xb0, 0x69, 0xea, 0x7f, 0x67, 0x98, 0xcc, 0x65, 0x06, 0x07, 0x97,
	0x5c, 0x4a, 0x46, 0x7d, 0xc1, 0xc3, 0xc1, 0x1f, 0xb1, 0xde, 0xfb, 0x8f, 0x28, 0x8e, 0xbc, 0x51,
	0x1a, 0x65, 0x87, 0xa4, 0x2c, 0xfa, 0x42, 0x66, 0xbc, 0x2f, 0xdb, 0x63, 0xbd, 0x74, 0xf3, 0x26,
	0xff, 0xaf, 0x35, 0xd6, 0x2f, 0x70, 0xf5, 0x20, 0x6d, 0xee, 0x6d, 0x79, 0xef, 0x30, 0xb9, 0x08,
	0xa7, 0x84, 0x7a, 0x20, 0x81, 0x60, 0xf0, 0x5c, 0xb9, 0x61, 0x51, 0xd8, 0xdc, 0x4b, 0xe4, 0x22,
	0x44, 0xe5, 0x66, 0x19, 0x21, 0x20, 0x31, 0xf4, 0xd3, 0x64, 0xc6, 0xcc, 0x1d, 0x5c, 0x7b, 0x52,
	0x9d, 0xc1, 0xa9, 0x7a, 0x27, 0x8b, 0x82, 0x3c, 0x2d, 0x7d, 0x8a, 0x54, 0xbc, 0x64, 0x8b, 0xbd,
	0x5d, 0x1d, 0x35, 0x3a, 0xc3, 0x16, 0x7b, 0x1b, 0x04, 0x94, 0x6f, 0x02, 0xed, 0xa8, 0x9b, 0xe0,
	0xb2, 0x91, 0x9b, 0xc0, 0x6a, 0xd4, 0x4d, 0x00, 0xa1, 0x7c, 0x2e, 0xfa, 0x61, 0x92, 0xc8, 0xb5,
	0xa1, 0xe7, 0xe2, 0x7a, 0x98, 0x24, 0x80, 0x98, 0xfa, 0xe7, 0xc9, 0xf9, 0xa5, 0xd8, 0xdb, 0x4d,
	0x97, 0x58, 0xca, 0x9a, 0xfc, 0x33, 0xa5, 0x6e, 0xda, 0x4d, 0xe8, 0x02, 0x99, 0x09, 0xbb, 0xa9,
	0xef, 0xb1, 0x78, 0x83, 0x7f, 0x8c, 0xdb, 0xb0, 0x26, 0xe7, 0xf3, 0x65, 0xc9, 0x63, 0xe6, 0x56,
	0x16, 0x0d, 0x79, 0xfa, 0xfa, 0xef, 0x3a, 0x64, 0x1a, 0x59, 0x23, 0xe4, 0x2c, 0xaa, 0xc8, 0x2f,
	0x3a, 0x64, 0x56, 0x72, 0xd3, 0x07, 0xb4, 0xfc, 0x78, 0x7b, 0x52, 0xfc, 0xec, 0xad, 0x1c, 0xbe,
	0x1f, 0xa5, 0x2d, 0xcf, 0x0b, 0x67, 0x43, 0xa1, 0x07, 0xf5, 0xdf, 0x74, 0xc8, 0xd4, 0xb2, 0x1b,
	0xfb, 0x87, 0x5b, 0x69, 0x18, 0x9d, 0xe5, 0xf7, 0x3c, 0xcb, 0xad, 0x43, 0xa1, 0xde, 0x8a, 0xbd,
	0x7f, 0x52, 0x58, 0x87, 0x08, 0x02, 0x85, 0xa3, 0xb7, 0xc9, 0xe5, 0x8e, 0x17, 0xe0, 0x68, 0x25,
	0x6f, 0x79, 0xe9, 0xde, 0xcd, 0x70, 0x33, 0x0e, 0xdb, 0x31, 0x4b, 0x12, 0x39, 0x0f, 0x9f, 0xbc,
	0x7f, 0x54, 0xbb, 0xbc, 0x51, 0x4e, 0x02, 0x27, 0xb5, 0xad, 0xcf, 0x90, 0xa9, 0xe5, 0x20, 0x61,
	0x9d, 0x1d, 0x9f, 0x41, 0xd7, 0x67, 0x49, 0xfd, 0x17, 0x86, 0xc9, 0x39, 0x05, 0xc1, 0x9f, 0x51,
	0x27, 0xa3, 0x38, 0x4c, 0x89, 0x34, 0x5e, 0x71, 0x16, 0x0b, 0x5e, 0x20, 0x31, 0xf4, 0xa7, 0x1c,
	0x42, 0x98, 0x5a, 0x6e, 0x4a, 0x19, 0xda, 0xec, 0x7d, 0xf9, 0x96, 0x2b, 0x6c, 0x66, 0x27, 0xd2,
	0xe0, 0x04, 0x2c, 0xb9, 0xf4, 0x6d, 0x52, 0xd9, 0xf5, 0x02, 0x69, 0x27, 0x3c, 0x8c, 0x0e, 0xe0,
	0xb1, 0xbc, 0xc2, 0x45, 0x80, 0x90, 0x44, 0x5b, 0x72, 0xf7, 0x10, 0xc6, 0xdc, 0xa6, 0xb5, 0x7b,
	0x2c, 0xf5, 0x3a, 0xe1, 0xd4, 0xe8, 0x73, 0x3e, 0x62, 0xdb, 0xa9, 0x7f, 0xd7, 0x31, 0x9f, 0x29,
	0x39, 0xcb, 0xe4, 0x7a, 0x8d, 0x4c, 0xef, 0x87, 0x5c, 0x4b, 0x52, 0xad, 0x71, 0x8e, 0x8d, 0x2f,
	0x52, 0xd4, 0x89, 0x32, 0x18, 0xc8, 0x51, 0xd2, 0xd7, 0xc9, 0x6c, 0x92, 0xba, 0xcd, 0xbb, 0x76,
	0x6b, 0x61, 0x9a, 0xe0, 0xf9, 0xbb, 0x95, 0xc3, 0x41, 0x81, 0x9a, 0xdb, 0x33, 0x69, 0x18, 0xc9,
	0xdd, 0x0f, 0xf7, 0xa6, 0xed, 0x30, 0x02, 0x0e, 0xab, 0x6f, 0x93, 0x89, 0xe5, 0x20, 0xf5, 0xd2,
	0x43, 0x60, 0xbb, 0xa7, 0x38, 0x14, 0x9f, 0xcd, 0xfb, 0x32, 0x26, 0x2d, 0x5f, 0x86, 0xf6, 0x3d,
	0xd4, 0x7f, 0x7b, 0x98, 0x4c, 0x2e, 0xef, 0xbb, 0xfe, 0x06, 0x4b, 0x63, 0xaf, 0xc9, 0x27, 0xc4,
	0x44, 0xc2, 0x7c, 0xd6, 0x44, 0x9d, 0x49, 0x70, 0xdf, 0x92, 0xdc, 0x27, 0xb6, 0x14, 0xe2, 0xf8,
	0xa8, 0xf6, 0x99, 0x5e, 0xbf, 0x95, 0x10, 0x04, 0x46, 0x0a, 0xed, 0x90, 0x89, 0x18, 0xd5, 0x6e,
	0x6e, 0xfa, 0x8a, 0xbe, 0xde, 0xe2, 0xe2, 0x40, 0x01, 0x07, 0x21, 0x4e, 0x4b, 0xe0, 0x03, 0xe3,
	0xb6, 0xdb, 0x2b, 0xdd, 0xa0, 0x29, 0x35, 0x5e, 0x1c, 0x98, 0x05, 0x01, 0x02, 0x85, 0xe3, 0xe7,
	0x96, 0xdb, 0x6e, 0x6f, 0xb2, 0xd8, 0x0b, 0x5b, 0xf2, 0x7b, 0xe0, 0xb9, 0xb5, 0xa0, 0x80, 0x60,
	0xf0, 0xfc, 0x4c, 0x0a, 0xba, 0xbe, 0x8f, 0x6b, 0x1c, 0xcf, 0xfc, 0x44, 0x2a, 0x88, 0x78, 0x26,
	0xdd, 0xcc, 0xa2, 0x20, 0x4f, 0xcb, 0x9b, 0xc7, 0xcc, 0x5f, 0x8e, 0xe3, 0xed, 0xd0, 0x67, 0xb1,
	0x1b, 0x34, 0x19, 0x9e, 0x4e, 0x8e, 0x68, 0x0e, 0x59, 0x14, 0xe4, 0x69, 0xeb, 0x7f, 0x7f, 0x84,
	0x10, 0xfe, 0x0d, 0x65, 0x67, 0x5e, 0x14, 0x7a, 0xdc, 0x8d, 0x30, 0xf6, 0xde, 0x91, 0x1f, 0xb1,
	0x22, 0xb4, 0x8b, 0x6d, 0x03, 0x06, 0x9b, 0x86, 0x6f, 0x95, 0x11, 0x36, 0x4e, 0x16, 0x59, 0x7a,
	0x8f, 0xb1, 0x00, 0x55, 0x45, 0x4e, 0x2e, 0x77, 0x58, 0xdc, 0x2a, 0x37, 0xcb, 0x49, 0xe0, 0xa4,
	0xb6, 0x14, 0xc8, 0xa5, 0xe6, 0x7e, 0xb6, 0x95, 0xf0, 0x54, 0xc8, 0x0d, 0xf8, 0xca, 0xfd, 0xa3,
	0xda, 0xa5, 0x46, 0x29, 0x05, 0x9c, 0xd0, 0x12, 0xed, 0xea, 0xfd, 0xe5, 0x83, 0xc8, 0x0d, 0x5a,
	0x5e, 0xd0, 0x7e, 0xcb, 0x0b, 0x5a, 0xe1, 0x3d, 0xa1, 0x2e, 0x8c, 0x4b, 0xbb, 0xba, 0x80, 0x85,
	0x92, 0x16, 0xfc, 0xfb, 0x36, 0xf7, 0xd5, 0x18, 0x55, 0xcc, 0xf7, 0x6d, 0x28, 0x20, 0x18, 0x3c,
	0x6d, 0x90, 0xb9, 0xe6, 0xfe, 0x86, 0x27, 0x7e, 0x9a, 0xec, 0x16, 0x7e, 0xa2, 0xca, 0xe2, 0xc5,
	0xfb, 0x47, 0xb5, 0xb9, 0x46, 0x1e, 0x09, 0x45, 0x7a, 0xfe, 0x5d, 0x9a, 0xfb, 0x1b, 0xee, 0x81,
	0x1c, 0x82, 0x31, 0xf3, 0x5d, 0x1a, 0x06, 0x0c, 0x36, 0x0d, 0xbd, 0x45, 0x2e, 0x36, 0xf7, 0x6f,
	0x27, 0x6c, 0x23, 0x4c, 0x52, 0x60, 0x4d, 0xd4, 0xff, 0xb1, 0xf1, 0x38, 0xfe, 0x5e, 0xd4, 0xaf,
	0x1b, 0x65, 0x04, 0x50, 0xde, 0xae, 0xfe, 0xed, 0x19, 0x72, 0x45, 0x38, 0xa4, 0xd8, 0x72, 0xd0,
	0xf6, 0x02, 0xc6, 0x62, 0x2f, 0x68, 0x2b, 0x9f, 0xd8, 0x29, 0xb6, 0x95, 0x88, 0x8c, 0x73, 0x03,
	0xd7, 0xd2, 0xff, 0xb6, 0x95, 0x31, 0xc2, 0xf5, 0x78, 0xb9, 0x93, 0xbf, 0xde, 0x8f, 0xb1, 0x87,
	0xbb, 0xb8, 0x96, 0xc2, 0xd7, 0x6b, 0x13, 0xed, 0x29, 0xa1, 0xa9, 0xcb, 0xf5, 0x2a, 0x4c, 0xac,
	0x04, 0x14, 0x8e, 0xa6, 0x84, 0x78, 0x9d, 0xa8, 0x9b, 0x0a, 0x6b, 0x4f, 0x1c, 0x2e, 0xdb, 0xfc,
	0xe4, 0x5b, 0xd3, 0xd0, 0xe3, 0xa3, 0xda, 0x62, 0xaf, 0x1d, 0x33, 0x5c, 0xc0, 0x92, 0x43, 0xef,
	0x91, 0x71, 0x16, 0x34, 0x43, 0xf4, 0xda, 0x89, 0x15, 0xff, 0x25, 0x3e, 0x14, 0xcb, 0x12, 0x76,
	0x7c, 0x54, 0x7b, 0xb3, 0x67, 0xd7, 0x97, 0x9b, 0x32, 0xae, 0x2a, 0xf1, 0x23, 0x55, 0xb2, 0x03,
	0x2d, 0x8c, 0xee, 0x91, 0xb1, 0xa4, 0xe9, 0xfa, 0x5c, 0xee, 0x28, 0xca, 0xbd, 0x89, 0xde, 0x42,
	0x01, 0x3a, 0x3e, 0xaa, 0x7d, 0xb6, 0x57, 0xb1, 0x92, 0x05, 0x28, 0xf6, 0x5c, 0x53, 0x99, 0x6e,
	0x79, 0x49, 0x33, 0x66, 0xa9, 0x97, 0x88, 0xd1, 0x15, 0x36, 0xe5, 0x97, 0xf9, 0x89, 0xb8, 0x94,
	0xc1, 0x1c, 0x1f, 0xd5, 0x56, 0x7a, 0xfe, 0xf4, 0x19, 0x4e, 0x90, 0x93, 0x49, 0xff, 0xb6, 0x43,
	0x2e, 0xed, 0xbb, 0xb1, 0xc7, 0x4f, 0xe9, 0xed, 0xd8, 0x0d, 0x92, 0xdd, 0x30, 0xee, 0x88, 0xee,
	0x08, 0x6d, 0xdc, 0xe7, 0x9b, 0xc9, 0x9d, 0x52, 0x8a, 0xe3, 0xa3, 0xda, 0xcd, 0x5e, 0xbb, 0x55,
	0xce, 0x11, 0x4e, 0xe8, 0x0b, 0xfd, 0xa6, 0xa3, 0x35, 0xfd, 0x1b, 0x6e, 0xd0, 0xc2, 0x0f, 0x24,
	0x8c, 0xe1, 0xaf, 0x58, 0x5a, 0xbe, 0x42, 0xf5, 0xe3, 0x17, 0xc9, 0xb1, 0x82, 0xbc, 0x58, 0x1c,
	0xb1, 0x96, 0x9b, 0xb2, 0xd4, 0xeb, 0xe4, 0x47, 0x8c, 0x98, 0x11, 0x5b, 0x2a, 0xa5, 0xe8, 0x67,
	0xc4, 0xca, 0x39, 0xc2, 0x09, 0x7d, 0xa1, 0x7b, 0x64, 0x24, 0x65, 0x07, 0x69, 0x75, 0x12, 0x35,
	0xd0, 0x3e, 0xcc, 0xf0, 0x6d, 0x76, 0x90, 0xda, 0xde, 0x7d, 0xe5, 0xc2, 0x39, 0x40, 0x17, 0xce,
	0x41, 0x4a, 0x7d, 0x52, 0xf1, 0x3a, 0x6e, 0x9b, 0x55, 0xcf, 0xa1, 0xa8, 0x37, 0x7b, 0x17, 0xb5,
	0xc6, 0xd9, 0x64, 0x64, 0xa1, 0x9e, 0x8b, 0x60, 0x10, 0x42, 0xb8, 0x34, 0xb7, 0xdb, 0xf2, 0xc2,
	0xea, 0x54, 0xbf, 0xd2, 0x0a, 0x71, 0x0b, 0x21, 0x0d, 0xc1, 0x20, 0x84, 0x70, 0x69, 0xfb, 0x5e,
	0x8b, 0x85, 0xd5, 0xe9, 0x7e, 0xa5, 0xdd, 0xe1, 0x6c, 0x8a, 0xd2, 0x10, 0x0c, 0x42, 0x08, 0x7d,
	0x8f, 0x4c, 0xe8, 0x70, 0x66, 0x75, 0xb6, 0x5f, 0x47, 0xee, 0xaa, 0x62, 0x25, 0x36, 0x75, 0x94,
	0x39, 0xa7, 0x94, 0x4e, 0x8d, 0x04, 0x23, 0x92, 0x76, 0x75, 0xc4, 0x6c, 0xee, 0x61, 0x08, 0x3f,
	0x21, 0x5a, 0x46, 0xaf, 0x92, 0x91, 0x56, 0x1c, 0x46, 0x55, 0x8a, 0xa7, 0x2f, 0x4e, 0xaf, 0xa5,
	0x38, 0x8c, 0x00, 0xa1, 0xfc, 0x7c, 0x8f, 0xdc, 0x24, 0x49, 0xf7, 0xe2, 0xb0, 0xdb, 0xde, 0xab,
	0x9e, 0x47, 0x22, 0x3c, 0xdf, 0x37, 0x0d, 0x18, 0x6c, 0x9a, 0xfa, 0x1f, 0x8e, 0x92, 0xab, 0xc5,
	0xe3, 0x58, 0x45, 0x43, 0x4f, 0x6f, 0xb4, 0xfc, 0x25, 0x87, 0xcc, 0x79, 0x9d, 0x1d, 0xd7, 0xe7,
	0xfa, 0x60, 0x0b, 0x77, 0x00, 0x16, 0xcb, 0xf3, 0xd9, 0xe5, 0xa6, 0xc7, 0x9a, 0x42, 0x4a, 0xdc,
	0xf1, 0x51, 0x6d, 0xad, 0xf7, 0xa3, 0xd0, 0xe6, 0xc5, 0xb7, 0x9e, 0xa2, 0x6c, 0xfa, 0x75, 0x32,
	0xa1, 0xcd, 0x4c, 0xa9, 0x67, 0x63, 0x54, 0x48, 0x5b, 0x87, 0x83, 0x8f, 0x0a, 0x69, 0x79, 0x5c,
	0xb7, 0xeb, 0xb8, 0x07, 0xc2, 0xe2, 0xb6, 0x75, 0xf7, 0x0d, 0x05, 0x04, 0x83, 0xa7, 0xcf, 0x91,
	0xb1, 0x8e, 0x7b, 0xb0, 0xed, 0x75, 0x98, 0x54, 0x03, 0xd1, 0x47, 0xbc, 0x21, 0x40, 0x5b, 0xac,
	0x09, 0x0a, 0xcd, 0x3f, 0x30, 0xff, 0x2f, 0x9f, 0x42, 0x2c, 0x56, 0xfa, 0x1f, 0x7e, 0xe0, 0x0d,
	0x03, 0x06, 0x9b, 0x86, 0xf7, 0x24, 0x71, 0x3b, 0x91, 0xcf, 0x36, 0x9b, 0xa9, 0xd4, 0xf8, 0xb0,
	0x27, 0x5b, 0x0a, 0x08, 0x06, 0x4f, 0xe7, 0x09, 0x71, 0xbb, 0x69, 0x08, 0xac, 0x13, 0xee, 0x33,
	0xa9, 0xe2, 0x61, 0x67, 0x16, 0x34, 0x14, 0x2c, 0x0a, 0x5a, 0x23, 0x95, 0x98, 0x75, 0x13, 0x86,
	0x07, 0xcc, 0xb8, 0x58, 0xa6, 0xc0, 0x01, 0x20, 0xe0, 0xfc, 0xe8, 0x9e, 0xdc, 0x65, 0xda, 0x6c,
	0xc3, 0x6d, 0x7f, 0xf2, 0xa5, 0x9b, 0xbd, 0x2f, 0x16, 0x39, 0x57, 0x35, 0xc7, 0xac, 0x8f, 0x61,
	0x45, 0xc3, 0xc1, 0x16, 0x4b, 0x0f, 0xc8, 0x04, 0x53, 0x7e, 0x1e, 0xb9, 0xf7, 0xae, 0xf6, 0xde,
	0x87, 0x8c, 0xcb, 0xc8, 0xec, 0x13, 0x1a, 0x0c, 0x46, 0x58, 0xfd, 0x17, 0x1d, 0x72, 0xed, 0xc4,
	0xf5, 0x25, 0x3c, 0x73, 0x31, 0x19, 0xd9, 0xe1, 0x76, 0x8e, 0xd3, 0xaf, 0x03, 0xa4, 0x44, 0x0e,
	0xef, 0xa0, 0x56, 0xa2, 0x17, 0x31, 0x96, 0xc0, 0x65, 0xd5, 0xff, 0xd6, 0x30, 0xb9, 0x54, 0x4e,
	0x4e, 0x7f, 0xda, 0x21, 0x13, 0x91, 0xdc, 0x7c, 0x95, 0x57, 0x77, 0x7b, 0x90, 0x9d, 0x52, 0x3b,
	0xbb, 0x19, 0x39, 0x05, 0x49, 0xc0, 0x48, 0xe6, 0xdf, 0x4c, 0x2f, 0x6a, 0xb9, 0x91, 0x7c, 0x91,
	0x13, 0xeb, 0xc5, 0x3f, 0xd8, 0x1d, 0xc4, 0x08, 0xa3, 0xff, 0xbf, 0x63, 0xbb, 0x20, 0x86, 0x1f,
	0xca, 0x94, 0xad, 0x2a, 0xb7, 0x67, 0x1e, 0x6b, 0xf9, 0x25, 0xea, 0x31, 0x99, 0x93, 0xe8, 0xb5,
	0x4e, 0x14, 0xc6, 0x29, 0xf6, 0xee, 0x79, 0x32, 0x26, 0x82, 0xf8, 0xca, 0x48, 0x9a, 0x91, 0xac,
	0xc6, 0x24, 0x2d, 0x28, 0x3c, 0x7d, 0x09, 0x2d, 0x12, 0xd9, 0x10, 0xc7, 0xd0, 0x31, 0x6b, 0xc5,
	0xb0, 0x04, 0x8b, 0xaa, 0xfe, 0x2e, 0x99, 0x54, 0x32, 0x83, 0xdd, 0xf0, 0x14, 0xf6, 0xd8, 0x87,
	0xc9, 0x68, 0xcc, 0xdc, 0x24, 0x54, 0xd9, 0x18, 0x26, 0xdd, 0x06, 0xa1, 0x20, 0xb1, 0xf4, 0x19,
	0x52, 0xc1, 0x94, 0x0c, 0x1c, 0x50, 0xc7, 0x44, 0x23, 0x45, 0x2c, 0x54, 0xe0, 0xea, 0x9f, 0xd5,
	0xd2, 0x37, 0x5d, 0x2f, 0xa6, 0x97, 0x89, 0x73, 0x20, 0x45, 0x4f, 0x48, 0x7a, 0xe7, 0xf3, 0xe0,
	0x1c, 0x70, 0xc4, 0xa1, 0x94, 0xa7, 0x11, 0x5f, 0x00, 0xe7, 0xb0, 0xfe, 0xf7, 0x46, 0xc8, 0x85,
	0xb2, 0x01, 0x3f, 0xed, 0x39, 0xf6, 0x02, 0x99, 0x60, 0x9d, 0x1d, 0xd6, 0x42, 0x7b, 0x4a, 0x78,
	0xce, 0x70, 0xbb, 0x5c, 0x56, 0x40, 0x30, 0x78, 0x5a, 0x27, 0xa3, 0xbb, 0x9e, 0x9f, 0xb2, 0x58,
	0x5a, 0xff, 0xe8, 0x66, 0x5d, 0x41, 0x08, 0x48, 0x0c, 0x97, 0x7b, 0x2f, 0x76, 0xa3, 0x88, 0xc5,
	0xb8, 0xb9, 0x4b, 0xb9, 0x6f, 0x09, 0x10, 0x28, 0x1c, 0x4d, 0xc9, 0xb8, 0x9a, 0xfa, 0x18, 0xa9,
	0x9b, 0x58, 0xfc, 0x3c, 0x37, 0xe3, 0xd4, 0xca, 0x38, 0x3e, 0xaa, 0xdd, 0xe8, 0x75, 0xae, 0x17,
	0x66, 0x98, 0x96, 0x44, 0x5f, 0x26, 0xe7, 0xf6, 0xdd, 0x78, 0x7b, 0x2f, 0x66, 0xc9, 0x5e, 0xe8,
	0xb7, 0xe4, 0xf9, 0x30, 0x7b, 0xff, 0xa8, 0x76, 0xee, 0x8e, 0x05, 0x87, 0x0c, 0x15, 0x7d, 0x85,
	0x4c, 0x35, 0xc3, 0xd8, 0x6a, 0x36, 0x8e, 0xcd, 0xe6, 0xee, 0x1f, 0xd5, 0xa6, 0x1a, 0x36, 0x02,
	0xb2, 0x74, 0xf2, 0xf8, 0x92, 0xfd, 0x49, 0xf0, 0xd0, 0x30, 0xc7, 0x97, 0x02, 0x83, 0x4d, 0xc3,
	0x4f, 0xa4, 0x88, 0xc5, 0x4d, 0x16, 0xa4, 0x9e, 0xcf, 0xf0, 0xf8, 0x90, 0xc7, 0xe3, 0xa6, 0x86,
	0x82, 0x45, 0x41, 0x9f, 0x23, 0xe3, 0x31, 0x4b, 0x58, 0xbc, 0xcf, 0x5a, 0xd5, 0x73, 0x38, 0x8e,
	0xe7, 0xf8, 0x38, 0x82, 0x84, 0x81, 0xc6, 0xd6, 0xff, 0x68, 0x9a, 0x4c, 0xaf, 0x84, 0x31, 0x6b,
	0xba, 0x49, 0xca, 0x44, 0x30, 0xeb, 0x6d, 0x32, 0xca, 0xf6, 0x31, 0x58, 0x2a, 0xbc, 0xe1, 0x6b,
	0x7d, 0x98, 0x02, 0x78, 0x74, 0xc7, 0x1e, 0x4b, 0x96, 0x39, 0x47, 0xb3, 0x2a, 0xf0, 0xcf, 0x04,
	0xa4, 0x20, 0xba, 0x4b, 0x46, 0x22, 0x37, 0x49, 0xe5, 0x2e, 0xb3, 0xd4, 0xbb, 0x40, 0xe1, 0x55,
	0xca, 0x6e, 0xf8, 0x9b, 0x2e, 0xdf, 0xf0, 0x39, 0x7f, 0xea, 0x93, 0xd1, 0xdd, 0x2e, 0x6e, 0x1a,
	0x23, 0x03, 0x94, 0xa4, 0x7f, 0xd5, 0x0a, 0xf2, 0x06, 0x29, 0x83, 0x7f, 0x85, 0x5d, 0x39, 0xb4,
	0x72, 0xd6, 0xe3, 0x57, 0x50, 0xc3, 0x0d, 0x1a, 0xcb, 0x29, 0x9b, 0xe1, 0x3e, 0x8b, 0xb9, 0x51,
	0x24, 0x3c, 0x8e, 0x48, 0xd9, 0x90, 0x30, 0xd0, 0x58, 0xfa, 0xff, 0x39, 0x64, 0x3a, 0xec, 0xa6,
	0x51, 0x37, 0x55, 0x19, 0x23, 0x38, 0x5d, 0x07, 0x93, 0x8d, 0xa2, 0x73, 0x0e, 0x6e, 0x65, 0x24,
	0x40, 0x4e, 0x22, 0xfd, 0x1a, 0x19, 0xdf, 0x55, 0xd3, 0x77, 0x1c, 0xa7, 0xd7, 0x4d, 0xfc, 0x61,
	0x12, 0x36, 0x00, 0x3f, 0xb1, 0xe6, 0xcf, 0x77, 0x97, 0x76, 0x1c, 0x76, 0x23, 0xbe, 0x50, 0x74,
	0x10, 0x67, 0x15, 0x21, 0x20, 0x31, 0xf4, 0x4b, 0x84, 0x46, 0x31, 0x6b, 0xb1, 0x5d, 0x2f, 0x60,
	0xad, 0x6d, 0xd6, 0x89, 0x7c, 0x37, 0x65, 0xd2, 0xb8, 0x7e, 0x41, 0xfe, 0x26, 0xba, 0x59, 0xa0,
	0x38, 0x3e, 0xaa, 0x4d, 0xa1, 0xf2, 0xa9, 0x00, 0x50, 0xc2, 0x86, 0xc6, 0x64, 0xc2, 0xc5, 0xcc,
	0x3c, 0x8f, 0x25, 0xd5, 0x49, 0x5c, 0x11, 0x0b, 0x7d, 0xd8, 0x90, 0x22, 0xc9, 0xcf, 0x9c, 0xfa,
	0x0b, 0x8a, 0x37, 0x18, 0x31, 0x3a, 0x79, 0x60, 0x39, 0x68, 0xf1, 0x0f, 0x84, 0xca, 0x5a, 0x3e,
	0x05, 0x45, 0xe0, 0x54, 0xf2, 0x80, 0xa4, 0xcc, 0xa7, 0x06, 0x4e, 0x9d, 0x32, 0x35, 0xf0, 0x05,
	0x32, 0xb1, 0x17, 0x85, 0x8b, 0xdd, 0x56, 0x9b, 0xa5, 0x68, 0xba, 0x4a, 0xfd, 0xf8, 0xc6, 0xe6,
	0x2d, 0x01, 0x04, 0x83, 0xa7, 0xdf, 0x74, 0xc8, 0x1c, 0xe3, 0xad, 0x71, 0x36, 0xc8, 0x88, 0x45,
	0x75, 0x06, 0xa7, 0x61, 0x1f, 0x99, 0x15, 0x56, 0xf8, 0xc3, 0xf4, 0xd8, 0x02, 0x42, 0x51, 0x28,
	0xd7, 0xac, 0x67, 0x0d, 0x54, 0x46, 0x09, 0x66, 0xfb, 0x5d, 0xdb, 0xc6, 0x89, 0x6f, 0x05, 0xee,
	0x34, 0x0c, 0x0a, 0x12, 0xe9, 0x37, 0x1c, 0x32, 0x99, 0xe0, 0x01, 0xef, 0xfa, 0x5e, 0x7a, 0x58,
	0x9d, 0xc3, 0x1e, 0xac, 0xf5, 0x93, 0x65, 0xa2, 0x99, 0xe1, 0x16, 0xa3, 0xc7, 0xc3, 0x42, 0x80,
	0x2d, 0x92, 0x1f, 0x11, 0x31, 0xc3, 0xc8, 0x68, 0x18, 0x27, 0x55, 0x8a, 0x6b, 0x05, 0x8f, 0x08,
	0xd0, 0x50, 0xb0, 0x28, 0xe8, 0xeb, 0x64, 0xd6, 0x77, 0xdb, 0x6d, 0xd6, 0x32, 0xf8, 0xea, 0x79,
	0x6c, 0x85, 0x31, 0xb2, 0xf5, 0x1c, 0x0e, 0x0a, 0xd4, 0xf4, 0x65, 0x5c, 0x99, 0xf7, 0xd2, 0xbd,
	0xea, 0x05, 0x9c, 0x65, 0x57, 0xd5, 0x36, 0xb8, 0x8a, 0xd0, 0xe3, 0xa3, 0x1a, 0x11, 0xff, 0xe3,
	0x6b, 0x0c, 0x24, 0x2d, 0x7d, 0x82, 0x0c, 0xdf, 0x65, 0x87, 0xd5, 0x8b, 0x28, 0x0a, 0x23, 0x6b,
	0x6f, 0xb2, 0x43, 0xe0, 0x30, 0xfa, 0x5e, 0x26, 0x14, 0x7b, 0x09, 0x29, 0xbe, 0x92, 0x0d, 0x9a,
	0x0e, 0xdc, 0x5a, 0xb5, 0x83, 0xb0, 0x9f, 0x27, 0xc3, 0x7b, 0x69, 0x52, 0xbd, 0x8c, 0xbf, 0x66,
	0x85, 0x77, 0xed, 0xc6, 0xf6, 0xd6, 0xf1, 0x51, 0xed, 0x93, 0xbd, 0x4a, 0xbc, 0xb1, 0xbd, 0x05,
	0x9c, 0x65, 0xfd, 0x3b, 0x43, 0xe4, 0xe2, 0xaa, 0x1b, 0xef, 0xb8, 0x6d, 0xbe, 0xe0, 0x6c, 0x85,
	0x6c, 0x83, 0x5c, 0x6a, 0x0a, 0xc8, 0x82, 0x48, 0x28, 0xc0, 0x5e, 0x2e, 0x07, 0x4a, 0x3f, 0x13,
	0x61, 0x0d, 0x45, 0xb1, 0x95, 0x76, 0x5b, 0x87, 0xcb, 0x41, 0x0b, 0x4e, 0x68, 0x44, 0xdb, 0xe4,
	0xa9, 0xbb, 0x8c, 0x45, 0xb7, 0x02, 0xff, 0x90, 0xdb, 0x39, 0x22, 0xb8, 0x95, 0x4f, 0x37, 0x18,
	0x5f, 0xfc, 0xe0, 0xfd, 0xa3, 0xda, 0x53, 0x6f, 0x3e, 0x88, 0x10, 0x1e, 0xcc, 0x87, 0x7e, 0x96,
	0xcc, 0x72, 0x82, 0xcd, 0xb8, 0x1b, 0xb0, 0x96, 0xb4, 0xf0, 0x85, 0xa2, 0x88, 0xb1, 0xb2, 0x37,
	0xb3, 0x38, 0x28, 0x10, 0xd7, 0xff, 0xb9, 0x43, 0x2e, 0x17, 0x87, 0x44, 0xd8, 0x82, 0xd7, 0xc9,
	0x84, 0xfc, 0x7d, 0x52, 0x4f, 0xad, 0x98, 0xfd, 0xb2, 0xa1, 0x10, 0x60, 0x68, 0x30, 0xe5, 0x4d,
	0xf4, 0x61, 0xa8, 0xdf, 0xfc, 0x2e, 0xd1, 0x5f, 0x96, 0x74, 0x7d, 0x4b, 0x5d, 0xc9, 0x26, 0x0d,
	0xd4, 0x7f, 0x63, 0x88, 0x9c, 0x2f, 0xf1, 0x57, 0xd1, 0xab, 0x19, 0x33, 0x61, 0xfc, 0xb1, 0x87,
	0x6c, 0x9e, 0x21, 0x95, 0x5d, 0x2f, 0x96, 0x7a, 0x95, 0x95, 0xb0, 0xbd, 0xc2, 0x81, 0x20, 0x70,
	0xdc, 0x72, 0x49, 0x58, 0x33, 0x0c, 0x5a, 0x32, 0x58, 0xa3, 0x7f, 0xf4, 0x16, 0x42, 0x41, 0x62,
	0xe9, 0x3c, 0x19, 0x0f, 0x63, 0xaf, 0x8d, 0x59, 0x0a, 0x22, 0xc4, 0x62, 0xf6, 0xc6, 0x83, 0x88,
	0x6f, 0x0a, 0xa8, 0x55, 0x2b, 0x9a, 0xfa, 0x3f, 0xe4, 0x1f, 0x98, 0x9f, 0xcf, 0x18, 0xf2, 0x52,
	0xba, 0x83, 0xc8, 0x01, 0x78, 0x93, 0x5c, 0xc4, 0xa3, 0x5b, 0xe5, 0x52, 0xf2, 0xbe, 0xaf, 0x70,
	0xd5, 0x56, 0xe6, 0xb1, 0xf2, 0x49, 0xbf, 0x6a, 0x13, 0x70, 0x24, 0x94, 0xb7, 0xa1, 0x37, 0xc8,
	0x05, 0x81, 0x10, 0x59, 0x95, 0x9a, 0xd7, 0x90, 0xc9, 0xb8, 0x5b, 0xb5, 0xf0, 0xc8, 0xaa, 0xb4,
	0x45, 0xfd, 0xcb, 0xa4, 0x2c, 0x43, 0xf5, 0x14, 0xd6, 0x9f, 0xb6, 0xea, 0x86, 0xb2, 0x03, 0x9d,
	0xb1, 0xea, 0xfe, 0xb7, 0x43, 0x66, 0x91, 0xfd, 0x8e, 0x1b, 0xb4, 0x6e, 0x45, 0x38, 0x1a, 0xdc,
	0xf6, 0xe8, 0x78, 0x01, 0xb0, 0x24, 0xec, 0xc6, 0x4d, 0xf4, 0x34, 0x68, 0xdb, 0x63, 0xc3, 0x82,
	0x43, 0x86, 0x0a, 0x5b, 0xb9, 0x07, 0xa6, 0xd5, 0x90, 0xd5, 0xca, 0x82, 0x43, 0x86, 0x4a, 0x84,
	0xb7, 0x5b, 0x5d, 0x5c, 0x69, 0x2b, 0x6e, 0x53, 0x79, 0x04, 0x2b, 0x2a, 0xbc, 0x9d, 0x41, 0x41,
	0x9e, 0x96, 0xbe, 0x46, 0xa6, 0x77, 0xc2, 0x30, 0x4d, 0xd2, 0xd8, 0x8d, 0x1a, 0x61, 0x37, 0x50,
	0x19, 0x9a, 0x98, 0x91, 0xb1, 0x98, 0xc1, 0x40, 0x8e, 0x12, 0xd3, 0xfe, 0x0b, 0xce, 0xfa, 0x87,
	0x9d, 0xf6, 0x8f, 0x02, 0x4f, 0x48, 0xfb, 0xff, 0x67, 0x0e, 0xb9, 0x58, 0x70, 0x7f, 0x9c, 0xc5,
	0x44, 0x7e, 0x6c, 0x8e, 0x99, 0xfa, 0x9f, 0x0e, 0x93, 0x0b, 0x98, 0x96, 0x1e, 0xc5, 0x2c, 0x75,
	0x77, 0x3c, 0xa5, 0x24, 0xf0, 0xa3, 0xd5, 0x6b, 0x32, 0xd9, 0x6b, 0x3c, 0x5a, 0xd7, 0x1a, 0xcb,
	0xc0, 0x61, 0x34, 0x21, 0xe3, 0x5e, 0x93, 0x45, 0xae, 0x17, 0x0f, 0x60, 0x8b, 0xb4, 0x7c, 0x13,
	0x26, 0x05, 0x76, 0xad, 0xb1, 0xcc, 0x01, 0x09, 0x68, 0x41, 0x7c, 0x3b, 0xf4, 0xbd, 0x8e, 0x4a,
	0xbd, 0xc1, 0xed, 0x70, 0xdd, 0xe3, 0x6b, 0x86, 0x43, 0xe9, 0x57, 0xc9, 0x48, 0xb2, 0xe7, 0x46,
	0x72, 0xd7, 0x59, 0xe7, 0xd8, 0xad, 0x3d, 0x37, 0xea, 0x67, 0x0b, 0xe4, 0xed, 0x45, 0xee, 0x11,
	0xe7, 0x4c, 0xf7, 0xc9, 0x04, 0xff, 0x57, 0xfc, 0xea, 0xca, 0x20, 0x7f, 0xb5, 0x3e, 0x8d, 0xb8,
	0x44, 0xf1, 0xb3, 0x8d, 0x28, 0xbe, 0x50, 0x9a, 0x7c, 0xd6, 0xb3, 0x78, 0xd7, 0x6d, 0xa6, 0x5d,
	0xd7, 0x97, 0x39, 0x8e, 0xb8, 0x50, 0x1a, 0x02, 0xb3, 0x22, 0x30, 0x90, 0xa3, 0xe4, 0xe6, 0x8e,
	0x1b, 0x34, 0xf7, 0xc2, 0x18, 0xcd, 0x3a, 0xe9, 0x4c, 0x59, 0x40, 0x08, 0x48, 0x4c, 0xfd, 0x37,
	0x47, 0xc8, 0xa5, 0xc2, 0x04, 0x10, 0x27, 0x67, 0x9b, 0xcc, 0xa9, 0x9e, 0xe3, 0xad, 0x1c, 0x74,
	0xa7, 0x0b, 0x97, 0xea, 0x47, 0xe7, 0xc5, 0x05, 0xb9, 0x79, 0xfb, 0x82, 0x9c, 0xf9, 0xc1, 0x7c,
	0x30, 0xe6, 0xf7, 0x85, 0xc9, 0x2e, 0x7d, 0xe3, 0x8a, 0x01, 0x14, 0x79, 0x52, 0x97, 0xcc, 0x28,
	0xe0, 0x72, 0xd0, 0x42, 0x31, 0x43, 0x67, 0x16, 0x23, 0x57, 0x16, 0x36, 0x87, 0x3c, 0x3f, 0x6e,
	0x04, 0xb1, 0x83, 0xc8, 0x47, 0x0f, 0xfe, 0x6d, 0x58, 0x93, 0x87, 0x98, 0x36, 0x82, 0x96, 0x2d,
	0x1c, 0x64, 0x28, 0xe9, 0x1b, 0x84, 0x22, 0x33, 0xfe, 0x75, 0x70, 0x0b, 0x4e, 0x78, 0x7b, 0x31,
	0xd1, 0xae, 0x28, 0x7b, 0x70, 0xbb, 0x40, 0x01, 0x25, 0xad, 0xe8, 0x2a, 0x99, 0xc3, 0xab, 0x41,
	0x19, 0x56, 0xe2, 0xfc, 0x7b, 0x42, 0xb2, 0x9a, 0xdb, 0xce, 0x13, 0x40, 0xb1, 0x0d, 0xfd, 0xf1,
	0x8c, 0x1b, 0x52, 0xe4, 0xa1, 0xbf, 0xd9, 0xf7, 0x74, 0x34, 0xfe, 0xcb, 0xf7, 0xf5, 0x69, 0xfe,
	0xf6, 0x10, 0xa9, 0xac, 0xb3, 0x7d, 0xe6, 0x9f, 0xe2, 0x40, 0xab, 0x91, 0x8a, 0x17, 0xb4, 0xd8,
	0x81, 0xcc, 0x03, 0x13, 0x51, 0x55, 0x0e, 0x00, 0x01, 0xe7, 0xbb, 0xe4, 0x9e, 0x4c, 0xda, 0x19,
	0x36, 0xb9, 0x9f, 0x2a, 0x65, 0x47, 0xe1, 0xe8, 0x97, 0xc9, 0xc8, 0x6e, 0xcc, 0xde, 0x96, 0x63,
	0x7f, 0x83, 0x4b, 0x59, 0x89, 0xd9, 0xdb, 0xc7, 0x47, 0xb5, 0x4f, 0xf5, 0xec, 0xc8, 0x8b, 0xd9,
	0xdb, 0x80, 0x5c, 0x69, 0x84, 0xb9, 0x61, 0x31, 0x6b, 0x73, 0x73, 0x5f, 0x7c, 0x13, 0x90, 0xb9,
	0x61, 0x02, 0x78, 0x7c, 0x54, 0x5b, 0xe8, 0xf9, 0xd2, 0x98, 0x62, 0x02, 0x46, 0x48, 0xfd, 0x8f,
	0x1d, 0x72, 0x7e, 0x83, 0xb5, 0x3c, 0x37, 0x40, 0x65, 0x36, 0x56, 0xc7, 0xf8, 0x2b, 0x64, 0x0a,
	0xaf, 0xbf, 0x71, 0xf5, 0xc4, 0x73, 0x7d, 0x75, 0x8e, 0xa3, 0x33, 0x70, 0xcb, 0x46, 0x40, 0x96,
	0x8e, 0xbe, 0x48, 0x26, 0xef, 0xb9, 0x71, 0xa7, 0x1b, 0x6d, 0xa5, 0x2c, 0x52, 0x07, 0x39, 0x3a,
	0x03, 0xdf, 0x32, 0x60, 0xb0, 0x69, 0xb8, 0x2c, 0x4f, 0xde, 0x4a, 0x12, 0x8d, 0x86, 0x8d, 0xac,
	0x35, 0x1b, 0x01, 0x59, 0x3a, 0x0c, 0xc7, 0x79, 0x81, 0xec, 0xa0, 0x1d, 0x8e, 0x53, 0x40, 0x30,
	0xf8, 0xfa, 0x6f, 0x0d, 0x91, 0x0a, 0xaa, 0xbd, 0xf4, 0xab, 0x64, 0x9c, 0x0f, 0x1c, 0xd7, 0x2a,
	0xe5, 0x56, 0xf2, 0x83, 0xa7, 0x5b, 0xe3, 0xb7, 0x76, 0xbe, 0xc6, 0x9a, 0xe9, 0x06, 0x4b, 0x5d,
	0x33, 0x37, 0x0d, 0x0c, 0x34, 0x57, 0xca, 0xc8, 0x48, 0x12, 0xb1, 0xa6, 0xdc, 0x41, 0x1a, 0x7d,
	0x2a, 0xef, 0x59, 0xef, 0x1f, 0xff, 0x0b, 0x90, 0x3d, 0xb7, 0x12, 0x12, 0xdc, 0x26, 0xa5, 0x9f,
	0xb1, 0x5f, 0x2b, 0x41, 0xec, 0xb9, 0x96, 0xc2, 0x8c, 0x7f, 0x83, 0x14, 0x52, 0xff, 0xdd, 0x21,
	0x42, 0x8c, 0x75, 0xf6, 0x08, 0x86, 0xf1, 0x6b, 0x99, 0x61, 0xbc, 0xd1, 0xe7, 0xaf, 0xc3, 0x5e,
	0x9f, 0x38, 0x96, 0x71, 0x6e, 0x2c, 0xdf, 0x18, 0x88, 0xb4, 0x07, 0x0f, 0xe8, 0x1f, 0x0f, 0x91,
	0xf3, 0x86, 0xb8, 0x11, 0x06, 0x2d, 0x0f, 0xdd, 0x91, 0x9f, 0x94, 0x99, 0xcc, 0x62, 0x3b, 0xfb,
	0x48, 0xee, 0xde, 0xc9, 0xe5, 0x92, 0x26, 0x26, 0x41, 0x99, 0xae, 0xeb, 0x1f, 0x22, 0x94, 0xb8,
	0x97, 0xb3, 0xc2, 0x8f, 0x8f, 0x6a, 0x25, 0x77, 0xdc, 0xe7, 0x35, 0xa7, 0x6c, 0x17, 0x69, 0x4c,
	0xa8, 0xef, 0x26, 0x29, 0xa6, 0xd6, 0x08, 0x49, 0xfc, 0x64, 0x1c, 0x39, 0xf3, 0xc9, 0x88, 0x19,
	0x94, 0xeb, 0x05, 0x4e, 0x50, 0xc2, 0xdd, 0x0a, 0x3d, 0x55, 0x1e, 0x18, 0x7a, 0x7a, 0x9e, 0x8c,
	0x75, 0x58, 0x92, 0x28, 0x1f, 0xb3, 0x15, 0x32, 0xdb, 0x10, 0x60, 0x50, 0xf8, 0xfa, 0x37, 0xc6,
	0x08, 0x35, 0xc3, 0x26, 0x6e, 0x7e, 0xb1, 0x26, 0x7d, 0x97, 0x9c, 0x0b, 0x77, 0x12, 0xbe, 0xa3,
	0xe0, 0xae, 0x27, 0xa7, 0xf1, 0x20, 0x3c, 0xcf, 0xfa, 0x54, 0xbf, 0x65, 0xf1, 0x87, 0x8c, 0x34,
	0xfa, 0x2d, 0x87, 0xcc, 0x45, 0x31, 0x6b, 0x79, 0x68, 0x94, 0xdc, 0xf0, 0x92, 0x34, 0x8c, 0x0f,
	0xe5, 0x64, 0x1f, 0x44, 0x1f, 0xf4, 0x71, 0xbe, 0x99, 0x17, 0x02, 0x45, 0xb9, 0xf4, 0x90, 0x4c,
	0x1a, 0x60, 0x32, 0xc0, 0x2b, 0xa1, 0xda, 0xd5, 0x67, 0xba, 0x91, 0x80, 0x2d, 0x8b, 0xb6, 0xc8,
	0xa8, 0xa8, 0x65, 0x20, 0x27, 0xd6, 0xa7, 0x7a, 0x93, 0xba, 0x85, 0x3c, 0xac, 0xd5, 0x86, 0x7f,
	0x83, 0xe4, 0x4d, 0x63, 0x32, 0xbe, 0xeb, 0xbb, 0x29, 0x9a, 0xd2, 0x95, 0xb3, 0xed, 0x28, 0x59,
	0x39, 0x2b, 0x92, 0xcb, 0x0a, 0xa6, 0x9a, 0x89, 0x1d, 0x05, 0xc3, 0x05, 0x12, 0x0e, 0x5a, 0x0e,
	0xc6, 0xb9, 0x62, 0xaf, 0xe3, 0xc6, 0x87, 0x6f, 0xb2, 0x43, 0x19, 0x01, 0x14, 0x71, 0x2e, 0x0d,
	0x05, 0x8b, 0x82, 0xae, 0x93, 0x0b, 0x66, 0x60, 0xf8, 0x62, 0x90, 0x6e, 0x6f, 0x91, 0x18, 0x59,
	0xbd, 0x7f, 0x54, 0xbb, 0xb0, 0x59, 0x82, 0x87, 0xd2, 0x56, 0x5c, 0xf7, 0x4e, 0xdd, 0xb8, 0xad,
	0xef, 0xdc, 0xa1, 0xee, 0xbd, 0x8d, 0x10, 0x90, 0x18, 0xda, 0x26, 0x15, 0xae, 0xda, 0x89, 0xb0,
	0xdd, 0x19, 0x3e, 0x78, 0xa1, 0x3c, 0x03, 0xea, 0x8c, 0x5d, 0x2f, 0x65, 0xc6, 0x5b, 0xc0, 0x41,
	0x09, 0x08, 0xfe, 0xf5, 0xff, 0xe8, 0x90, 0x69, 0xb3, 0x04, 0xd7, 0xbd, 0x24, 0xa5, 0x5f, 0x2e,
	0x9c, 0x20, 0xf3, 0xa7, 0xdb, 0x52, 0x78, 0x6b, 0x3c, 0x3f, 0xcc, 0x75, 0x63, 0x09, 0xb1, 0x4e,
	0x0f, 0x8f, 0x54, 0xbc, 0x94, 0x75, 0x94, 0x7d, 0xb8, 0x34, 0x88, 0x0d, 0xdd, 0xfc, 0xb6, 0x35,
	0xce, 0x1a, 0x84, 0x84, 0xfa, 0x77, 0xc6, 0xc9, 0x45, 0x6b, 0xd7, 0x67, 0xf1, 0xbe, 0x32, 0xbe,
	0x0f, 0xad, 0x00, 0xb0, 0xd3, 0xaf, 0x8a, 0xac, 0x7d, 0x0d, 0xa9, 0xba, 0xfc, 0xab, 0x7f, 0xbf,
	0x42, 0x59, 0x51, 0xe0, 0x5b, 0xe4, 0xa2, 0x9c, 0x15, 0x61, 0xac, 0x82, 0x3f, 0x78, 0xb7, 0x7a,
	0xc8, 0xdc, 0xa1, 0xdc, 0x2c, 0x23, 0x80, 0xf2, 0x76, 0xb4, 0x49, 0xa6, 0x13, 0xf9, 0xd3, 0xbc,
	0x94, 0x01, 0xdb, 0x95, 0x9b, 0xc4, 0x33, 0xd6, 0x47, 0x9b, 0xe7, 0x07, 0x8a, 0x39, 0xe4, 0x81,
	0xed, 0xb2, 0x98, 0x71, 0x65, 0x5e, 0x87, 0xe2, 0xb6, 0x32, 0x2c, 0x20, 0xc7, 0x92, 0xcf, 0xd9,
	0x30, 0xc0, 0xe1, 0xb2, 0x82, 0xef, 0xb7, 0x10, 0x02, 0x12, 0xc3, 0xf5, 0xbe, 0x96, 0x9b, 0xec,
	0xed, 0x84, 0x6e, 0xdc, 0x92, 0x81, 0x48, 0xd4, 0xfb, 0x96, 0x14, 0x10, 0x0c, 0x9e, 0xde, 0x25,
	0xa3, 0x6e, 0xb3, 0xc9, 0x12, 0x91, 0x57, 0x75, 0x06, 0x6d, 0xac, 0x30, 0xc3, 0x17, 0x90, 0x4d,
	0x36, 0x42, 0x2a, 0x60, 0x20, 0x45, 0x88, 0x38, 0x75, 0xe4, 0x7b, 0x4d, 0x57, 0xe5, 0xe1, 0xcb,
	0x38, 0xb5, 0x80, 0x81, 0xc6, 0xd2, 0xef, 0x38, 0x84, 0x76, 0xc2, 0xc0, 0x4b, 0x43, 0x4c, 0xd1,
	0x69, 0xee, 0xb1, 0x56, 0xd7, 0x17, 0xc9, 0x59, 0x67, 0x98, 0xab, 0x85, 0x3e, 0x42, 0x37, 0x50,
	0xbc, 0x8c, 0x65, 0xb8, 0x51, 0x90, 0x03, 0x25, 0xb2, 0xe9, 0xdf, 0x74, 0xc8, 0x65, 0xbc, 0x32,
	0x69, 0xb6, 0x18, 0xdd, 0xaf, 0x89, 0x01, 0xf6, 0xab, 0x26, 0xfb, 0x75, 0x79, 0xb1, 0x5c, 0x18,
	0x9c, 0xd4, 0x0b, 0xba, 0x4f, 0x26, 0x62, 0xed, 0x23, 0x24, 0x67, 0xd3, 0x79, 0x8b, 0x5d, 0x92,
	0x9c, 0xb2, 0xe9, 0x5e, 0xc6, 0xd7, 0x68, 0x44, 0xe1, 0x1d, 0xed, 0x3d, 0xb7, 0x15, 0xde, 0x43,
	0x47, 0x33, 0x66, 0x14, 0xcb, 0x0c, 0xcc, 0x2d, 0x03, 0x06, 0x9b, 0xa6, 0xfe, 0x8f, 0x27, 0xed,
	0xed, 0x0e, 0xf7, 0x82, 0x1a, 0xa9, 0x84, 0xf7, 0x02, 0xed, 0x18, 0x44, 0x1b, 0xf4, 0x16, 0x07,
	0x80, 0x80, 0x53, 0xc0, 0xbc, 0x6a, 0x77, 0x33, 0x0e, 0x5b, 0xdd, 0x66, 0x7a, 0x87, 0xc5, 0x89,
	0x17, 0x06, 0xd6, 0x92, 0xbd, 0x22, 0xf3, 0xaa, 0x4b, 0x28, 0xe0, 0x84, 0x96, 0x5c, 0x49, 0xda,
	0x17, 0x7f, 0x4a, 0xb3, 0x4a, 0x2b, 0x49, 0x92, 0x0a, 0x14, 0x9e, 0xff, 0xca, 0x16, 0x4b, 0x9a,
	0xb1, 0x17, 0x59, 0x57, 0x1d, 0xf0, 0x57, 0x2e, 0x19, 0x30, 0xd8, 0x34, 0xf4, 0x2b, 0x64, 0x24,
	0x75, 0x93, 0xbb, 0x52, 0x51, 0x7b, 0x03, 0xb5, 0x54, 0x37, 0xb9, 0xdb, 0x57, 0xc0, 0x7c, 0x9d,
	0x73, 0x00, 0xe4, 0x4b, 0xbf, 0x46, 0xc6, 0x92, 0xee, 0x0e, 0x8a, 0x18, 0xd5, 0xd7, 0xfa, 0xc6,
	0xb6, 0xba, 0x3b, 0x52, 0xca, 0x42, 0xef, 0x52, 0xb6, 0x04, 0x5f, 0x50, 0x02, 0x68, 0x87, 0x4c,
	0x84, 0xb8, 0x69, 0x79, 0xfb, 0x4c, 0x1e, 0xb8, 0x78, 0x5d, 0xec, 0x96, 0x02, 0x0e, 0xe2, 0xba,
	0x98, 0x96, 0x40, 0xdf, 0x26, 0xe3, 0x2c, 0x48, 0xbd, 0xd4, 0xd3, 0x95, 0x20, 0xfa, 0xb0, 0x13,
	0xf5, 0x05, 0x3e, 0x73, 0x22, 0x2c, 0x4b, 0xe6, 0xa0, 0xc5, 0xd0, 0x6f, 0x3a, 0x64, 0xd6, 0x8d,
	0x53, 0x6f, 0xd7, 0x6d, 0x9a, 0x6c, 0x8b, 0x89, 0x81, 0x29, 0x7a, 0x3a, 0xf9, 0x6d, 0x21, 0x27,
	0x03, 0x0a, 0x52, 0x69, 0x40, 0x46, 0xf0, 0xd8, 0x17, 0x8b, 0x78, 0x7d, 0x10, 0x67, 0xb3, 0xd2,
	0xea, 0x8d, 0x79, 0xc7, 0x21, 0x80, 0x72, 0xe8, 0x7b, 0x64, 0x5c, 0xb5, 0x95, 0x17, 0x02, 0x36,
	0x07, 0x21, 0x53, 0xc5, 0x6e, 0xb2, 0x87, 0xb1, 0x82, 0x82, 0x96, 0x49, 0xdf, 0x21, 0x63, 0xf2,
	0xa0, 0x93, 0x89, 0xaa, 0xb7, 0x06, 0x62, 0x5f, 0x1a, 0x4d, 0xc3, 0xac, 0x6b, 0x09, 0x04, 0x25,
	0x90, 0xfe, 0xa4, 0x43, 0xce, 0x05, 0x61, 0xea, 0xed, 0x7a, 0xf2, 0x93, 0x4f, 0x9d, 0x2d, 0x9a,
	0x5f, 0xd8, 0x39, 0x6f, 0x5a, 0xcc, 0x50, 0xb6, 0xb6, 0x76, 0x6c, 0x0c, 0x64, 0x84, 0xe2, 0x75,
	0x1f, 0x71, 0x59, 0x52, 0x1f, 0x2a, 0xd3, 0x03, 0x3c, 0x54, 0xb4, 0x7e, 0x01, 0x19, 0x19, 0x90,
	0x93, 0x49, 0xaf, 0x92, 0x91, 0x5d, 0x37, 0x49, 0x31, 0xbb, 0x43, 0xfa, 0xf0, 0x57, 0x30, 0x9f,
	0x8a, 0x43, 0xeb, 0x3f, 0x3d, 0x4b, 0x66, 0xf3, 0xe6, 0x3b, 0xfd, 0x04, 0xa9, 0x44, 0x7b, 0xa6,
	0x94, 0xcf, 0xd3, 0xba, 0xe0, 0x0a, 0x07, 0x1e, 0x1f, 0xd5, 0x66, 0x4c, 0x0b, 0x04, 0x81, 0x20,
	0xe7, 0x76, 0xac, 0x0e, 0xe2, 0x62, 0x82, 0x5b, 0x79, 0xf4, 0x95, 0xbe, 0x41, 0xa8, 0xb0, 0x0b,
	0x59, 0x4b, 0x06, 0x61, 0xd5, 0x6e, 0x3d, 0x6c, 0xce, 0xf0, 0x5b, 0x05, 0x0a, 0x28, 0x69, 0x45,
	0x7f, 0x84, 0x4c, 0x72, 0x8b, 0xfa, 0x76, 0xd4, 0xc2, 0x2b, 0x14, 0x67, 0x37, 0xd4, 0x71, 0xbf,
	0x5f, 0x37, 0x2c, 0xc0, 0xe6, 0x47, 0x53, 0x32, 0xba, 0xc3, 0x92, 0x74, 0x65, 0x59, 0x5a, 0x50,
	0x83, 0x4f, 0x6b, 0x46, 0x7d, 0x6f, 0x11, 0x65, 0x80, 0x94, 0x45, 0x7f, 0xde, 0x21, 0x17, 0x79,
	0x2f, 0x84, 0x1a, 0xa8, 0xd7, 0x1c, 0x4b, 0xa5, 0x4a, 0x37, 0x88, 0xcd, 0x4b, 0xd7, 0x4b, 0x90,
	0x4e, 0x0a, 0x25, 0x02, 0xca, 0x25, 0xd3, 0xdf, 0x70, 0xc8, 0x25, 0x1d, 0x45, 0x90, 0x93, 0x4b,
	0xcc, 0x17, 0x99, 0xbf, 0xf6, 0xc6, 0x20, 0xa6, 0xb5, 0x74, 0x20, 0x5d, 0x93, 0x9d, 0xbb, 0xb4,
	0x5d, 0x2a, 0x11, 0x4e, 0xe8, 0x09, 0xfd, 0xbb, 0x0e, 0xb9, 0x1c, 0x59, 0x6a, 0x94, 0xdd, 0xcb,
	0xf1, 0x81, 0xf7, 0x52, 0x2d, 0x8c, 0x6a, 0x51, 0x73, 0x93, 0xfd, 0x3c, 0xa9, 0x33, 0xd8, 0x51,
	0x5b, 0x23, 0xb5, 0x3b, 0x3a, 0xf1, 0xf0, 0x3a, 0x5a, 0x54, 0x8c, 0x55, 0x47, 0x4f, 0xe8, 0x0c,
	0xfd, 0x55, 0x87, 0x9c, 0x57, 0x3b, 0x8a, 0xdd, 0x49, 0x32, 0xf0, 0x4e, 0xaa, 0xec, 0xa3, 0x0b,
	0xd9, 0x0d, 0x4d, 0x76, 0xb0, 0xac, 0x13, 0xf4, 0xdb, 0x0e, 0x99, 0x89, 0xe2, 0xb0, 0x13, 0x1a,
	0x47, 0x9e, 0x3c, 0xec, 0xfa, 0xc8, 0xdc, 0xda, 0xcc, 0x32, 0x34, 0x0b, 0x25, 0x87, 0x80, 0xbc,
	0x68, 0xae, 0x7a, 0xb6, 0x64, 0xd9, 0x9e, 0x73, 0x59, 0xff, 0x9c, 0xac, 0xcc, 0x03, 0x0a, 0x2f,
	0x2a, 0xf1, 0x75, 0x5b, 0x87, 0x32, 0xbf, 0xcf, 0xaa, 0xc4, 0xd7, 0x6d, 0x1d, 0x82, 0xc0, 0xd1,
	0xcf, 0x90, 0xe9, 0xa6, 0x1b, 0xb4, 0x3c, 0xbe, 0x15, 0xe1, 0x16, 0x8a, 0x07, 0x88, 0x55, 0x59,
	0xaa, 0x91, 0xc1, 0x42, 0x8e, 0x9a, 0xb7, 0xdf, 0x51, 0xb9, 0x3f, 0x5b, 0xdc, 0x4e, 0xc5, 0x43,
	0xc0, 0x31, 0xed, 0x17, 0x33, 0x58, 0xc8, 0x51, 0xd3, 0x17, 0xc8, 0x58, 0xcc, 0x52, 0x2f, 0x66,
	0x2d, 0xbc, 0x1d, 0x36, 0x21, 0x22, 0x14, 0x20, 0x40, 0x72, 0x4f, 0x57, 0x14, 0xf4, 0x93, 0x64,
	0x4a, 0x5b, 0xd1, 0xa8, 0xc2, 0xd3, 0x6c, 0x45, 0xb3, 0x4d, 0x1b, 0x09, 0x59, 0x5a, 0x6e, 0xe0,
	0xfa, 0xde, 0xbe, 0xfc, 0x91, 0xe7, 0xc5, 0x90, 0x70, 0x55, 0x74, 0x5d, 0x01, 0xc1, 0xe0, 0xb1,
	0xbe, 0x1f, 0x1a, 0x1e, 0x49, 0xf5, 0x82, 0xb9, 0xc7, 0x2c, 0x0c, 0x93, 0x04, 0x14, 0x8e, 0xbe,
	0x4b, 0x26, 0xd3, 0xd8, 0x6b, 0xb7, 0x59, 0xcc, 0x5a, 0x8b, 0x87, 0xd5, 0x8b, 0x22, 0xc2, 0xaf,
	0xcb, 0x79, 0x19, 0xd4, 0xf1, 0x51, 0xad, 0xd1, 0xab, 0x9a, 0x2b, 0xd9, 0xa0, 0x3b, 0xda, 0x16,
	0x67, 0x9b, 0x21, 0x97, 0xde, 0xc7, 0x0c, 0xf9, 0x09, 0x87, 0x90, 0xa6, 0x72, 0x47, 0x27, 0xd5,
	0xcb, 0xfd, 0x5e, 0xc4, 0x2b, 0x71, 0x97, 0x9b, 0xb8, 0x83, 0x06, 0x25, 0x60, 0x09, 0xad, 0xff,
	0x13, 0x42, 0x2e, 0x95, 0x6b, 0x79, 0xf4, 0x4d, 0x32, 0xea, 0xbb, 0x3b, 0xc0, 0x76, 0xa5, 0xcb,
	0xea, 0x54, 0xde, 0x0f, 0xab, 0xe2, 0x11, 0x6f, 0x0a, 0x92, 0x05, 0x5d, 0x25, 0x73, 0x38, 0xb7,
	0xcb, 0xfc, 0x33, 0xca, 0x7b, 0xbb, 0x95, 0x27, 0x80, 0x62, 0x1b, 0x4c, 0xa3, 0xc6, 0xd1, 0xb8,
	0x1d, 0x78, 0x29, 0xfa, 0xdd, 0xce, 0xea, 0xc1, 0x7d, 0x80, 0x43, 0x4f, 0x2f, 0x90, 0x8d, 0x8c,
	0x04, 0xc8, 0x49, 0xa4, 0x7f, 0xd1, 0x21, 0xb3, 0xf9, 0x93, 0xe8, 0xac, 0x89, 0xe9, 0x0f, 0x54,
	0xf2, 0xb4, 0x85, 0x91, 0x3f, 0x07, 0xa1, 0x20, 0x97, 0xbe, 0x4b, 0x08, 0xb2, 0xc7, 0xa4, 0x99,
	0xb3, 0x3a, 0x7c, 0x4f, 0x98, 0x45, 0xc8, 0x2b, 0x7b, 0x37, 0xcd, 0xc0, 0xc1, 0x92, 0xc7, 0x87,
	0xc2, 0xec, 0x87, 0x9b, 0xa1, 0xef, 0x35, 0x0f, 0xa5, 0x05, 0xfb, 0xd5, 0xc2, 0xfe, 0x29, 0xd0,
	0xc7, 0x47, 0xb5, 0xe5, 0x5e, 0x97, 0x9d, 0x66, 0x85, 0x0b, 0x2f, 0x2f, 0x98, 0xef, 0x10, 0x31,
	0x13, 0x35, 0xed, 0xc6, 0x4c, 0x06, 0x10, 0x08, 0x10, 0x28, 0x1c, 0xfd, 0x69, 0x91, 0xf4, 0xab,
	0x0a, 0xe6, 0x4a, 0x0d, 0x01, 0x06, 0x50, 0x34, 0x36, 0x57, 0x86, 0x57, 0xba, 0x4e, 0x0c, 0x10,
	0x6c, 0xb9, 0x59, 0x2f, 0xcf, 0xc4, 0xa3, 0xf3, 0xf2, 0x1c, 0x64, 0x77, 0x48, 0x91, 0x6e, 0x7f,
	0x47, 0xed, 0x53, 0x72, 0x6b, 0x7b, 0x28, 0xbb, 0x63, 0x9d, 0x8c, 0x46, 0x6e, 0x37, 0x61, 0x2d,
	0xe9, 0x5a, 0x42, 0x25, 0x78, 0x13, 0x21, 0x20, 0x31, 0xfc, 0x23, 0xaa, 0xeb, 0xa4, 0xe7, 0x4c,
	0x82, 0x82, 0xbc, 0x4e, 0x6a, 0xee, 0x92, 0x66, 0xae, 0xa8, 0x4e, 0xbd, 0xef, 0x15, 0x55, 0x61,
	0xa1, 0xb2, 0x38, 0x91, 0x49, 0xf2, 0xe7, 0xb4, 0xfd, 0xca, 0xe2, 0x04, 0x34, 0x16, 0x8b, 0xdb,
	0xec, 0x84, 0x31, 0xb7, 0x29, 0x66, 0xcc, 0x14, 0x5a, 0x10, 0x20, 0x50, 0xb8, 0xfa, 0x1f, 0x0e,
	0x29, 0xaf, 0x97, 0x0e, 0x66, 0x7e, 0x22, 0x13, 0xcc, 0xac, 0xe7, 0x82, 0x99, 0x34, 0x4b, 0xfd,
	0xfd, 0x38, 0xe6, 0x83, 0xe3, 0x98, 0xff, 0x6a, 0x48, 0xc6, 0x31, 0x31, 0x01, 0x74, 0xf1, 0xd0,
	0xe4, 0x17, 0x0b, 0x5b, 0xd2, 0xd4, 0x7f, 0xd3, 0x53, 0x7d, 0x43, 0x21, 0xc0, 0xd0, 0xd0, 0x8f,
	0x93, 0xc9, 0x28, 0x0e, 0x77, 0x3d, 0x5f, 0xa4, 0xff, 0xe4, 0x6a, 0x7b, 0x6e, 0x1a, 0x14, 0xd8,
	0x74, 0xf4, 0x55, 0x72, 0x4e, 0x5d, 0xf1, 0x49, 0x4a, 0x32, 0x98, 0x56, 0x2c, 0x1c, 0x64, 0x28,
	0xf9, 0xde, 0x32, 0x75, 0x2f, 0x8c, 0xef, 0xb2, 0x58, 0xa4, 0x22, 0x8b, 0xe2, 0x84, 0x67, 0xd8,
	0x91, 0x0b, 0x0b, 0xfb, 0x2d, 0xc1, 0xad, 0x1b, 0xc8, 0xdc, 0x66, 0xad, 0x59, 0xbd, 0x65, 0x8b,
	0x81, 0xac, 0xd4, 0xfa, 0x3f, 0x50, 0x51, 0x28, 0xbd, 0x95, 0xd3, 0x1a, 0xa9, 0xb0, 0x03, 0x4f,
	0xde, 0xd4, 0x95, 0xb7, 0x9d, 0x97, 0x39, 0x00, 0x04, 0x9c, 0x2f, 0x29, 0xac, 0xbc, 0x60, 0x1d,
	0xce, 0x53, 0x22, 0x33, 0x52, 0x02, 0xc1, 0xe0, 0xe9, 0x4d, 0x72, 0x29, 0x66, 0x6d, 0x2f, 0x49,
	0xe3, 0xc3, 0x46, 0x18, 0x04, 0x22, 0x0d, 0x1c, 0x5b, 0xca, 0x32, 0xa8, 0x7c, 0x02, 0x41, 0x81,
	0x02, 0x4e, 0x68, 0x55, 0xff, 0xae, 0x43, 0xc4, 0x27, 0x7c, 0x04, 0x11, 0xb3, 0x56, 0x36, 0x62,
	0xf6, 0xd9, 0x3e, 0x4f, 0xcb, 0x13, 0x82, 0x65, 0xff, 0xc6, 0x21, 0x93, 0x56, 0x52, 0xfa, 0x29,
	0x92, 0xb7, 0x9e, 0x22, 0xc3, 0xae, 0xdf, 0x96, 0x43, 0xaf, 0x4b, 0x70, 0x2f, 0xf8, 0x6d, 0xe0,
	0x70, 0x34, 0x1e, 0x50, 0x9d, 0xcf, 0x5d, 0x41, 0x15, 0x5a, 0xbc, 0xc0, 0x71, 0x22, 0x16, 0xc7,
	0xa1, 0xba, 0xd3, 0xa9, 0x89, 0x96, 0x39, 0x10, 0x04, 0x8e, 0xaf, 0xc4, 0x34, 0xf6, 0x5c, 0x7f,
	0x6d, 0x49, 0x5e, 0xd9, 0x9f, 0xb1, 0x76, 0x7f, 0x0e, 0x06, 0x85, 0xaf, 0xff, 0x87, 0x9a, 0xfc,
	0x2e, 0xa7, 0x73, 0xed, 0xbf, 0x48, 0x26, 0xf7, 0x0b, 0xfe, 0x7c, 0x3c, 0x06, 0x6d, 0x27, 0xbe,
	0x4d, 0x43, 0x5f, 0x93, 0x1a, 0x1d, 0xaa, 0xa0, 0xd6, 0x0c, 0xa2, 0x5a, 0x13, 0xd3, 0x18, 0xc8,
	0x51, 0x62, 0x3e, 0x35, 0x87, 0x48, 0xe6, 0xd2, 0x97, 0x2f, 0xf2, 0xa9, 0x2d, 0x38, 0x64, 0xa8,
	0xb0, 0xa8, 0x00, 0xd7, 0x2c, 0x51, 0x58, 0xc5, 0x4c, 0xf4, 0x2d, 0x05, 0x04, 0x83, 0xc7, 0x68,
	0x81, 0xa9, 0xbb, 0xaa, 0x76, 0x2e, 0x8c, 0x16, 0xd8, 0x15, 0x5d, 0x2d, 0x1a, 0x1d, 0x2d, 0x18,
	0x7b, 0xf8, 0xd1, 0x82, 0xf1, 0x47, 0x1a, 0x2d, 0x98, 0x78, 0xe8, 0xd1, 0x82, 0xbf, 0xee, 0x10,
	0xba, 0x5b, 0xf0, 0x98, 0x49, 0xb7, 0xc3, 0xe0, 0xbd, 0x70, 0xda, 0xed, 0x58, 0xc4, 0x43, 0x49,
	0x3f, 0xe8, 0x8f, 0xd9, 0x55, 0x39, 0x26, 0x1f, 0x52, 0xc9, 0xc7, 0xa9, 0x4c, 0x9d, 0x0f, 0xbb,
	0x2e, 0xc7, 0x2e, 0x19, 0x6e, 0x05, 0x41, 0xff, 0xe5, 0x77, 0x0a, 0x85, 0x70, 0x45, 0xd6, 0xf9,
	0x52, 0x10, 0x00, 0x17, 0x40, 0xbb, 0x64, 0xac, 0x29, 0x6a, 0xbd, 0x4b, 0x1f, 0x7a, 0x1f, 0xf5,
	0x03, 0xca, 0x8a, 0xc6, 0xcb, 0x12, 0x64, 0x02, 0x03, 0x4a, 0x16, 0xfd, 0x86, 0x43, 0xce, 0x05,
	0xbe, 0xe9, 0x99, 0x74, 0x9c, 0xf7, 0x53, 0x59, 0x78, 0x7d, 0x33, 0x2b, 0x18, 0xb7, 0x06, 0x1b,
	0x0a, 0x19, 0x89, 0x34, 0x25, 0xe3, 0x4c, 0x55, 0x9e, 0x14, 0x17, 0x23, 0x57, 0xfa, 0x89, 0x56,
	0x99, 0xa2, 0xa6, 0x76, 0xc0, 0x4a, 0x56, 0xaf, 0xd4, 0x92, 0xb8, 0x54, 0x1d, 0xb5, 0x99, 0xed,
	0x57, 0xea, 0xa9, 0x63, 0x35, 0x91, 0x89, 0xd5, 0xcc, 0xf5, 0x9b, 0x57, 0x79, 0xba, 0x08, 0x4d,
	0x9d, 0x8c, 0xa6, 0x2c, 0xe1, 0xca, 0x35, 0x35, 0xfa, 0xff, 0x36, 0x42, 0x40, 0x62, 0x6c, 0x0d,
	0xfc, 0xfc, 0xc9, 0x1a, 0x38, 0x57, 0xe9, 0x23, 0xb7, 0x79, 0xd7, 0x6d, 0xb3, 0x16, 0x5e, 0x63,
	0x94, 0x77, 0xb4, 0x37, 0x25, 0x0c, 0x34, 0x96, 0xef, 0xf6, 0x51, 0x77, 0xc7, 0xf7, 0x92, 0x3d,
	0xd6, 0x42, 0x77, 0x90, 0xcc, 0xa2, 0xd8, 0x54, 0x40, 0x30, 0x78, 0xb4, 0x50, 0xba, 0x48, 0x79,
	0xc9, 0xb2, 0x50, 0x10, 0x02, 0x12, 0x23, 0x93, 0x1f, 0x44, 0x17, 0x2f, 0x1b, 0xd1, 0x20, 0x61,
	0xa0, 0xb1, 0x96, 0xbd, 0x53, 0x3d, 0xd1, 0xde, 0xe1, 0x3f, 0x44, 0xa8, 0x9e, 0xad, 0xea, 0x13,
	0xd6, 0x0f, 0x91, 0x30, 0xd0, 0x58, 0x4e, 0xc9, 0x8d, 0x47, 0x6f, 0x9f, 0xb5, 0xaa, 0x57, 0x0c,
	0xe5, 0x82, 0x84, 0x81, 0xc6, 0xd2, 0x79, 0x42, 0x94, 0x56, 0xca, 0x5a, 0xd5, 0x27, 0x4d, 0x21,
	0x1c, 0x5d, 0x31, 0xa0, 0x05, 0x16, 0x85, 0xf8, 0x45, 0x3e, 0x73, 0x79, 0x4f, 0xaf, 0xda, 0xbf,
	0x48, 0xc0, 0x40, 0x63, 0xe5, 0x6d, 0x55, 0x2f, 0x49, 0xb9, 0x45, 0x57, 0x7d, 0xca, 0x70, 0x06,
	0x0d, 0x05, 0x8b, 0x82, 0x7e, 0x84, 0x8c, 0x49, 0x97, 0x5f, 0xf5, 0x9a, 0x35, 0xf4, 0x02, 0xc4,
	0xbf, 0xa7, 0xc4, 0x62, 0x35, 0xfa, 0x6e, 0xc0, 0x5a, 0xd5, 0x9a, 0xd1, 0x4e, 0xb7, 0x39, 0x00,
	0x04, 0x1c, 0x4b, 0x5b, 0xc8, 0xbb, 0x02, 0xad, 0xea, 0xd3, 0x56, 0x69, 0x0b, 0x05, 0x04, 0x83,
	0x17, 0x35, 0x1e, 0x5a, 0x4c, 0xdf, 0xf5, 0xab, 0x7e, 0x10, 0x1b, 0xc8, 0x1a, 0x0f, 0x16, 0x02,
	0xb2, 0x74, 0x7c, 0x24, 0xd4, 0xe3, 0x18, 0xd5, 0xba, 0x19, 0x09, 0xf5, 0x16, 0x07, 0x68, 0x2c,
	0x7d, 0x9d, 0xcc, 0xb6, 0x59, 0x90, 0xa9, 0x55, 0x5d, 0x7d, 0xc6, 0xd4, 0xaa, 0x5d, 0xcd, 0xe1,
	0xa0, 0x40, 0xad, 0x43, 0x74, 0x1f, 0x2a, 0x0b, 0xd1, 0xf1, 0x91, 0xee, 0x4a, 0x8f, 0x13, 0x6b,
	0x55, 0x9f, 0x35, 0x23, 0x7d, 0x5b, 0x43, 0xc1, 0xa2, 0xa0, 0x77, 0xf9, 0xc1, 0xc9, 0x5a, 0x3b,
	0x6e, 0xf3, 0xae, 0x72, 0x3b, 0xb3, 0xdd, 0xea, 0x87, 0xcf, 0x90, 0xb9, 0x24, 0xce, 0xc1, 0x3c,
	0x0b, 0x28, 0x61, 0xcb, 0x17, 0xe9, 0xae, 0xb8, 0x57, 0x5c, 0xfd, 0x88, 0x59, 0xa4, 0x2b, 0xf2,
	0xaa, 0xb1, 0xc2, 0x51, 0xdf, 0x7a, 0x7b, 0xe3, 0xb9, 0x81, 0x85, 0xb0, 0xce, 0x95, 0xbf, 0xbb,
	0x41, 0xbf, 0x4e, 0x26, 0xd5, 0x9c, 0xe6, 0x7b, 0xda, 0xf3, 0xfd, 0xba, 0xc2, 0xb2, 0xe5, 0x35,
	0x84, 0xce, 0xb7, 0x62, 0x04, 0x80, 0x2d, 0x8d, 0x1e, 0x90, 0xc9, 0x66, 0xd8, 0x89, 0x3c, 0x5f,
	0xfc, 0xda, 0x8f, 0xf6, 0xe9, 0xce, 0x69, 0x20, 0x2f, 0x5b, 0x72, 0xc3, 0x70, 0x07, 0x5b, 0x14,
	0xbd, 0x45, 0x2e, 0xba, 0xa8, 0x3c, 0x2d, 0x31, 0xb7, 0x85, 0x69, 0x73, 0x78, 0xef, 0x33, 0xa9,
	0xbe, 0x80, 0x91, 0x55, 0xcc, 0x7f, 0x5b, 0x28, 0x23, 0x80, 0xf2, 0x76, 0xf4, 0x5d, 0x32, 0xa5,
	0x55, 0x8e, 0xed, 0xc3, 0x88, 0x55, 0x3f, 0x26, 0x3c, 0x44, 0x7c, 0xf1, 0x2c, 0xdb, 0x88, 0xbe,
	0x54, 0x4d, 0xac, 0xdf, 0x70, 0x18, 0x31, 0xc8, 0x0a, 0xc3, 0x0a, 0xce, 0xa9, 0x5f, 0xfd, 0x01,
	0xab, 0x82, 0xf3, 0xf6, 0x3a, 0x70, 0x98, 0x76, 0x75, 0xa2, 0xde, 0x54, 0x9d, 0xcf, 0xbc, 0xed,
	0x65, 0x65, 0xec, 0xf7, 0x53, 0x44, 0xd3, 0x72, 0x86, 0xf3, 0xbe, 0x59, 0xf2, 0xf8, 0x9c, 0x57,
	0x46, 0xd3, 0x75, 0xe3, 0x98, 0xca, 0x1b, 0x4c, 0x34, 0x25, 0xa4, 0x1d, 0xee, 0xb3, 0x38, 0xc0,
	0xeb, 0x42, 0x3f, 0x78, 0x36, 0xaf, 0x70, 0x76, 0xd6, 0xaf, 0x6a, 0x3e, 0x22, 0x19, 0x8f, 0xff,
	0x4c, 0x03, 0x03, 0x4b, 0x0e, 0x96, 0xa8, 0xf7, 0x72, 0x57, 0xcb, 0xaa, 0x2f, 0xf6, 0xab, 0xbb,
	0x95, 0xdd, 0x56, 0x34, 0xce, 0xe9, 0x3c, 0x16, 0x0a, 0x3d, 0xa0, 0x09, 0x99, 0xe8, 0x6a, 0x47,
	0xfd, 0x4b, 0x03, 0x73, 0xd4, 0x6b, 0xa7, 0x8f, 0xf1, 0xd1, 0x1b, 0x39, 0xf4, 0xc7, 0xc9, 0x94,
	0xda, 0xb2, 0x84, 0xe0, 0x1f, 0x1a, 0x98, 0x60, 0xed, 0x7c, 0x59, 0xb1, 0x05, 0x40, 0x56, 0x1e,
	0xfd, 0x75, 0x87, 0xd0, 0xc8, 0x8d, 0x53, 0x74, 0x91, 0xe9, 0x0b, 0xd4, 0xd5, 0x97, 0xb1, 0x1b,
	0xb7, 0xfb, 0x08, 0x51, 0x2a, 0x9e, 0xc2, 0x51, 0x62, 0xdf, 0xcc, 0x36, 0x96, 0x8c, 0x26, 0x4a,
	0xf4, 0x16, 0x59, 0xd2, 0x99, 0xfa, 0x7f, 0x1b, 0x91, 0x19, 0x20, 0x22, 0xc9, 0x56, 0xf8, 0xd7,
	0x5e, 0xc9, 0x66, 0x80, 0x7c, 0x30, 0x9f, 0x01, 0x32, 0x6b, 0x11, 0x67, 0x52, 0x40, 0x3e, 0x46,
	0xc6, 0xdd, 0x88, 0xff, 0x10, 0xd6, 0x92, 0x95, 0x0a, 0xb4, 0xe2, 0xb9, 0x20, 0xe1, 0xa0, 0x29,
	0xe8, 0x4b, 0x84, 0xa8, 0xff, 0x2f, 0x1e, 0x2a, 0x6b, 0x5f, 0xad, 0xe3, 0x05, 0x8d, 0x01, 0x8b,
	0x8a, 0x7e, 0xd1, 0xb4, 0x59, 0x48, 0x7b, 0x70, 0x68, 0x4e, 0xdb, 0xbc, 0x17, 0x52, 0xb0, 0xb8,
	0xd1, 0xb7, 0xc8, 0x44, 0xa2, 0x2f, 0x5d, 0x8e, 0xf5, 0x7b, 0xe9, 0xd2, 0xf0, 0xa2, 0x9f, 0x23,
	0x63, 0x4c, 0x5e, 0xb2, 0x1c, 0xef, 0xef, 0x92, 0xa5, 0xe2, 0x43, 0xbf, 0xe5, 0x90, 0x19, 0x3d,
	0xd5, 0x85, 0x67, 0x49, 0xc6, 0x0e, 0x6e, 0xf4, 0x3f, 0xbf, 0xa5, 0x8b, 0x51, 0x87, 0xbe, 0x6f,
	0x67, 0x05, 0x41, 0x5e, 0xb2, 0xf1, 0x36, 0x91, 0x6c, 0x3c, 0xdb, 0xf6, 0x36, 0xd5, 0x7f, 0xed,
	0xe3, 0xd2, 0x11, 0x26, 0x67, 0x59, 0x66, 0xb8, 0x9d, 0x01, 0x0e, 0x77, 0x58, 0x76, 0x89, 0xf6,
	0xec, 0xb7, 0x5b, 0xb1, 0x8a, 0xc1, 0x76, 0x9e, 0x51, 0xd9, 0x65, 0x5a, 0xaf, 0x78, 0x99, 0x76,
	0xf8, 0xcc, 0xe2, 0xc4, 0x0b, 0x41, 0x59, 0x36, 0xc5, 0x4b, 0xb5, 0x3e, 0x99, 0x95, 0xaf, 0x4f,
	0x99, 0x9f, 0x76, 0xf6, 0x55, 0x20, 0x9e, 0x31, 0xca, 0xf1, 0x81, 0x02, 0x67, 0xba, 0x4b, 0xa6,
	0x25, 0x4c, 0xfd, 0xae, 0xca, 0x99, 0x65, 0xa1, 0xff, 0x6e, 0x3b, 0xc3, 0x05, 0x72, 0x5c, 0x71,
	0x00, 0xbb, 0xd9, 0xef, 0x35, 0xda, 0xe3, 0x00, 0x66, 0xd9, 0x40, 0x9e, 0x2f, 0x6d, 0x92, 0x29,
	0x01, 0x52, 0xbf, 0xe8, 0xec, 0x0b, 0x1d, 0xcd, 0x87, 0x6d, 0x9b, 0x09, 0x64, 0x79, 0x3e, 0x8c,
	0x05, 0xff, 0x3c, 0x19, 0x6b, 0xee, 0x8b, 0x34, 0x8e, 0x09, 0xf4, 0xfb, 0x6a, 0xf3, 0xba, 0x71,
	0x47, 0x78, 0x7e, 0x15, 0x9e, 0x7e, 0x92, 0x4c, 0x99, 0xf0, 0x30, 0x6f, 0x40, 0xb0, 0x81, 0x3e,
	0xb4, 0xb6, 0x6d, 0x24, 0x64, 0x69, 0xe9, 0x75, 0x32, 0x81, 0x77, 0x9f, 0xb1, 0xe1, 0x24, 0x36,
	0xd4, 0xc7, 0xec, 0xb6, 0x42, 0x80, 0xa1, 0xa1, 0x4f, 0x93, 0x91, 0x66, 0x98, 0x88, 0x9c, 0x17,
	0xc7, 0xf8, 0xb3, 0x1b, 0x21, 0x37, 0x61, 0x38, 0x86, 0x53, 0x60, 0x69, 0xd0, 0x29, 0x61, 0x48,
	0x15, 0x0b, 0x79, 0xd2, 0xaf, 0x92, 0xa1, 0xe6, 0x7e, 0x75, 0xfa, 0x6c, 0x17, 0x57, 0x0a, 0xfb,
	0xd7, 0x06, 0x73, 0x93, 0x6e, 0xcc, 0x3a, 0x2c, 0x48, 0x17, 0x89, 0x94, 0x32, 0xd4, 0xb8, 0x03,
	0x43, 0xcd, 0x7d, 0xea, 0xa9, 0x57, 0xce, 0x66, 0x06, 0x28, 0xc4, 0xdc, 0xfc, 0xb1, 0xdf, 0x4b,
	0xdb, 0x95, 0xef, 0x9f, 0xcd, 0x0e, 0x50, 0x92, 0x1e, 0x34, 0xeb, 0x25, 0x35, 0x2e, 0xa7, 0x1b,
	0x30, 0x59, 0xba, 0x79, 0xd0, 0x72, 0xba, 0x01, 0x03, 0xe4, 0x8f, 0x17, 0xc9, 0xa4, 0x5e, 0x83,
	0x75, 0xa9, 0x06, 0x25, 0x4b, 0xab, 0x06, 0x4a, 0x89, 0x02, 0x2d, 0x87, 0x7e, 0x9d, 0x5c, 0xf2,
	0xdd, 0x24, 0x2d, 0x9a, 0xa1, 0xe8, 0x0c, 0x3a, 0xa5, 0x25, 0xab, 0xd3, 0x08, 0xd7, 0x4b, 0x59,
	0xc1, 0x09, 0x22, 0xe8, 0x8b, 0x4a, 0xfd, 0xb9, 0x90, 0x79, 0x08, 0x4d, 0xab, 0x3f, 0xc2, 0xc6,
	0xc8, 0x28, 0x3e, 0x2f, 0x11, 0x22, 0xbc, 0x3d, 0x18, 0x1c, 0xb8, 0x98, 0x55, 0x65, 0x40, 0x63,
	0xc0, 0xa2, 0xe2, 0x2b, 0x4d, 0xfc, 0x75, 0x3b, 0xf6, 0xd0, 0xcd, 0x34, 0x61, 0x07, 0xec, 0x25,
	0x02, 0x0c, 0x0d, 0xfd, 0x38, 0x99, 0xec, 0xb8, 0x81, 0xb7, 0xcb, 0x12, 0x6c, 0x72, 0x39, 0x1b,
	0xc5, 0xdc, 0x30, 0x28, 0xb0, 0xe9, 0x78, 0xdf, 0xee, 0x31, 0xaf, 0xbd, 0x97, 0x26, 0xbc, 0x55,
	0x35, 0xdb, 0xb7, 0xb7, 0x34, 0x06, 0x2c, 0x2a, 0xba, 0x40, 0x66, 0x7c, 0x77, 0x87, 0x89, 0x17,
	0x13, 0x58, 0xcc, 0x1b, 0x3e, 0x91, 0x7d, 0x67, 0x6b, 0x3d, 0x8b, 0x86, 0x3c, 0x3d, 0xdf, 0xb0,
	0xfc, 0xb0, 0x8d, 0x32, 0xaf, 0x64, 0xc3, 0xbc, 0xeb, 0x02, 0x0c, 0x0a, 0xcf, 0x7b, 0x28, 0xbd,
	0x5b, 0x9c, 0xfa, 0xc9, 0x6c, 0x0f, 0x37, 0x35, 0x06, 0x2c, 0x2a, 0xba, 0x49, 0x2e, 0x74, 0xbc,
	0xa4, 0x89, 0xae, 0x73, 0x95, 0x74, 0xcd, 0x5b, 0x5f, 0xcd, 0xd4, 0x32, 0xbb, 0xb0, 0x51, 0x42,
	0x03, 0xa5, 0x2d, 0xe9, 0x87, 0xf1, 0xfa, 0x20, 0xe7, 0xf1, 0x54, 0x36, 0x7e, 0xbd, 0x8d, 0x50,
	0x90, 0x58, 0x4e, 0xe7, 0x46, 0x11, 0xa7, 0xbb, 0x96, 0xa5, 0x5b, 0x40, 0x28, 0x48, 0x2c, 0xff,
	0xbe, 0x26, 0x8e, 0x5a, 0xcb, 0x7e, 0xdf, 0xd2, 0x58, 0xea, 0xcf, 0x38, 0x99, 0x12, 0x13, 0x4f,
	0x0f, 0xbe, 0xc4, 0x84, 0xb6, 0x0e, 0xd6, 0x3a, 0x51, 0x37, 0xf6, 0xd2, 0xc3, 0xf2, 0x52, 0x13,
	0xf4, 0xd7, 0x1c, 0x72, 0x31, 0x62, 0x71, 0x47, 0x3e, 0xcf, 0x61, 0xa8, 0xaa, 0x1f, 0x1c, 0x7c,
	0xa7, 0x9e, 0x92, 0x9d, 0xba, 0xb8, 0x59, 0x26, 0x11, 0xca, 0x3b, 0xc2, 0x17, 0x83, 0xf2, 0xbb,
	0xf0, 0x4f, 0x51, 0xcf, 0x2e, 0x86, 0x15, 0x83, 0x02, 0x9b, 0x8e, 0xc6, 0x64, 0x4c, 0xbe, 0x27,
	0x8e, 0x5e, 0xba, 0xbe, 0x2a, 0x68, 0x83, 0x60, 0x24, 0x13, 0x45, 0xf5, 0xf4, 0x96, 0x60, 0x50,
	0x82, 0xe8, 0x4f, 0x39, 0xb9, 0xb7, 0x24, 0x3f, 0x34, 0x30, 0x1f, 0x98, 0x9e, 0xe7, 0xf6, 0x9b,
	0x94, 0xda, 0xe0, 0xcb, 0xbe, 0x4b, 0xf9, 0x13, 0x4e, 0xf6, 0x61, 0xca, 0x67, 0x07, 0xd6, 0x0b,
	0xb5, 0x43, 0x9e, 0xb7, 0x1e, 0xb8, 0xd4, 0x9d, 0xc8, 0x3c, 0x72, 0xf9, 0x2d, 0xa7, 0xec, 0x95,
	0xcb, 0x0f, 0x0f, 0xfe, 0x0e, 0x78, 0xe1, 0xb5, 0xcc, 0x92, 0x97, 0x32, 0x4f, 0xb8, 0x89, 0xf0,
	0x91, 0x9e, 0x6e, 0x22, 0xa8, 0x92, 0x9f, 0x5e, 0xd0, 0x86, 0xf0, 0x5e, 0x82, 0x7e, 0xce, 0x4a,
	0xf1, 0xd5, 0x59, 0x8e, 0x83, 0x0c, 0xa5, 0xf5, 0xf0, 0x2c, 0x36, 0x7c, 0x5e, 0x94, 0xf4, 0xca,
	0x3d, 0x3c, 0x8b, 0xed, 0x6c, 0xba, 0xec, 0xc3, 0xb3, 0xd8, 0xf2, 0xa3, 0xe2, 0x51, 0xe4, 0xe2,
	0xc3, 0xb3, 0xd8, 0x38, 0x47, 0x4d, 0xdf, 0x23, 0x53, 0xbb, 0xae, 0xe7, 0x77, 0x63, 0x26, 0xf2,
	0x73, 0xd0, 0x4f, 0x28, 0x0a, 0x36, 0x4f, 0xad, 0xd8, 0x88, 0x7e, 0x52, 0xc0, 0xc4, 0xda, 0x10,
	0x66, 0x60, 0x56, 0x1c, 0x7d, 0x8d, 0x4c, 0x4b, 0x80, 0x4c, 0xfb, 0x91, 0xfe, 0x45, 0xb4, 0x17,
	0x56, 0x32, 0x18, 0xc8, 0x51, 0xd2, 0x8f, 0x61, 0xb0, 0x44, 0xbc, 0x41, 0x28, 0x3c, 0x84, 0xe6,
	0x66, 0xb0, 0x7a, 0x78, 0x50, 0x53, 0xf0, 0x01, 0x4e, 0xbc, 0x77, 0xd8, 0x5a, 0xb0, 0x78, 0x98,
	0x32, 0xe1, 0x30, 0xb4, 0x06, 0x78, 0xcb, 0xa0, 0xc0, 0xa6, 0xc3, 0x03, 0xcc, 0x4d, 0x59, 0xd0,
	0x3c, 0x44, 0x47, 0x9f, 0xa5, 0x71, 0xaf, 0x0b, 0x30, 0x28, 0x3c, 0x7d, 0x8a, 0x0c, 0x77, 0x63,
	0x1f, 0xbd, 0x7c, 0x56, 0xc6, 0xc6, 0x6d, 0x58, 0x07, 0x0e, 0x2f, 0x26, 0x47, 0xbf, 0x78, 0x86,
	0xe4, 0xe8, 0x2f, 0x72, 0xd5, 0x42, 0x84, 0x5d, 0x16, 0x52, 0xe9, 0x3c, 0x3b, 0xb3, 0xc7, 0x03,
	0x34, 0x07, 0xb0, 0xb8, 0xd1, 0x1f, 0xd1, 0x45, 0x10, 0x90, 0xf9, 0x0f, 0xf5, 0x76, 0x7d, 0x66,
	0xd3, 0xb0, 0x00, 0x9b, 0x1f, 0xce, 0x6c, 0x37, 0x5e, 0xf1, 0x7c, 0x86, 0x0f, 0x23, 0xbf, 0x9c,
	0x7b, 0x52, 0xd9, 0xa0, 0xc0, 0xa6, 0xd3, 0x07, 0x27, 0x36, 0xfa, 0x78, 0xc9, 0xc1, 0x29, 0x9e,
	0x6e, 0xd6, 0x34, 0x99, 0x44, 0x5c, 0xf5, 0x0a, 0x74, 0xf5, 0x13, 0xfd, 0x56, 0x91, 0x35, 0xef,
	0x49, 0x17, 0x13, 0x71, 0x15, 0x0e, 0x0a, 0x72, 0xe9, 0x2f, 0x3b, 0xc6, 0xfd, 0x60, 0x2a, 0xfc,
	0xbd, 0x82, 0xbd, 0xe9, 0x23, 0xad, 0x5b, 0xb1, 0x6a, 0x84, 0x41, 0xd2, 0xed, 0x44, 0xd9, 0xdd,
	0x6e, 0x3b, 0x2f, 0x0f, 0x8a, 0x5d, 0xa0, 0x7f, 0xd9, 0xd1, 0xbe, 0x03, 0xd3, 0xaf, 0x57, 0x1f,
	0x46, 0xbf, 0xcc, 0x70, 0xe5, 0xc4, 0x41, 0xa1, 0x03, 0x68, 0x6f, 0x62, 0xd6, 0x65, 0x6b, 0xf1,
	0xb0, 0xfa, 0xc3, 0xd9, 0x8f, 0xbd, 0xad, 0x10, 0x60, 0x68, 0xb8, 0x35, 0x99, 0x32, 0xb7, 0x53,
	0x7d, 0x2d, 0x9b, 0x3f, 0xb5, 0xcd, 0xdc, 0x0e, 0x20, 0x86, 0xef, 0x0e, 0x2c, 0x68, 0xe1, 0xf3,
	0xef, 0xd5, 0x4f, 0x8a, 0x4c, 0x20, 0x13, 0x74, 0x6f, 0xe1, 0x33, 0xf6, 0xa0, 0x29, 0xe8, 0x8f,
	0x92, 0x11, 0xae, 0x87, 0x56, 0x3f, 0x85, 0x23, 0xf1, 0xe9, 0x9e, 0x4d, 0x1b, 0xae, 0xd5, 0xda,
	0x4f, 0xd9, 0xb6, 0xf1, 0x29, 0xdb, 0x76, 0xc2, 0xed, 0xa7, 0x38, 0x6c, 0x36, 0xba, 0xf1, 0x3e,
	0xab, 0x7e, 0xba, 0xdf, 0xec, 0xf0, 0xb0, 0xb9, 0xd0, 0x15, 0xbc, 0xcc, 0x8f, 0x02, 0xc9, 0x1d,
	0xb4, 0x1c, 0x7a, 0x97, 0x8c, 0x45, 0xb1, 0x10, 0xf9, 0x19, 0x14, 0xf9, 0x7a, 0xcf, 0x22, 0x37,
	0x41, 0x88, 0xd3, 0xbb, 0x9f, 0x04, 0x80, 0x92, 0x40, 0x7f, 0xd5, 0x21, 0x17, 0xf0, 0xfb, 0x34,
	0xc2, 0x60, 0xb7, 0x9b, 0x78, 0x61, 0xb0, 0xe1, 0xa6, 0xb1, 0x77, 0x50, 0xfd, 0x6c, 0x9f, 0x0e,
	0xc9, 0x1c, 0xbf, 0x9c, 0xb6, 0x93, 0xc3, 0x42, 0x69, 0x1f, 0xe8, 0x5f, 0x71, 0xc8, 0x79, 0x3e,
	0xe9, 0xf2, 0x7d, 0x7b, 0x7d, 0xc0, 0x7d, 0xcb, 0xe8, 0x40, 0xf9, 0xae, 0x95, 0xf5, 0x80, 0xfe,
	0x8a, 0x43, 0x2e, 0x35, 0xc3, 0x38, 0x66, 0x22, 0x80, 0x87, 0xef, 0xe3, 0x8a, 0x6a, 0x25, 0xd5,
	0x85, 0xb3, 0x95, 0x29, 0xcf, 0x2a, 0x44, 0x0d, 0xc3, 0xd3, 0x98, 0xc0, 0x8d, 0x52, 0x41, 0x70,
	0x42, 0x07, 0xb8, 0xca, 0x3a, 0x93, 0x86, 0x91, 0xdd, 0xaa, 0xba, 0x38, 0xa8, 0x4e, 0x69, 0x1b,
	0x72, 0x3b, 0x2b, 0x01, 0xf2, 0x22, 0xf3, 0xd7, 0x3b, 0x1b, 0x03, 0xbe, 0xde, 0xf9, 0x4e, 0x26,
	0x46, 0xb7, 0x74, 0xb6, 0x8c, 0x9b, 0x13, 0x63, 0x74, 0xc2, 0x1c, 0xd0, 0xf6, 0xeb, 0x09, 0x91,
	0xba, 0x5f, 0x2e, 0x8b, 0xd4, 0x2d, 0xf7, 0x9b, 0x4a, 0x56, 0x5e, 0x56, 0xf2, 0x4c, 0xb1, 0xba,
	0x36, 0x19, 0xc5, 0x93, 0x35, 0xa9, 0xae, 0x60, 0x6f, 0x3e, 0xdb, 0xf3, 0x12, 0xc1, 0xb3, 0xda,
	0x2a, 0x07, 0x26, 0xfe, 0x06, 0xc9, 0xbe, 0x34, 0x84, 0xb1, 0xfa, 0xd8, 0x42, 0x18, 0x7c, 0x9f,
	0xc8, 0x84, 0xef, 0x64, 0x8f, 0x6e, 0x0c, 0xb8, 0x47, 0x7a, 0x9f, 0x58, 0x29, 0x0a, 0x83, 0xb2,
	0x1e, 0xd0, 0x7b, 0x64, 0x0c, 0xab, 0x1d, 0xef, 0x1c, 0x56, 0xd7, 0x06, 0x52, 0x3e, 0x20, 0x93,
	0x4c, 0x6f, 0xf6, 0x75, 0x09, 0x06, 0x25, 0x4d, 0xd6, 0x88, 0xe3, 0x33, 0xe1, 0x8d, 0x7e, 0x9f,
	0xf6, 0xcf, 0x87, 0x18, 0x33, 0x35, 0xe2, 0x70, 0x52, 0x08, 0x49, 0xf4, 0xdd, 0xcc, 0x65, 0xb8,
	0x37, 0xcf, 0x96, 0x34, 0x7f, 0xd2, 0x65, 0xb8, 0x53, 0xdf, 0x83, 0xfb, 0x77, 0xea, 0x3e, 0x87,
	0xfe, 0x6a, 0xd4, 0x23, 0xb3, 0x2a, 0xd7, 0x47, 0x66, 0x71, 0x9f, 0xe9, 0x26, 0x9c, 0x5e, 0x79,
	0x8b, 0x39, 0x26, 0x50, 0x60, 0x4b, 0xdf, 0x22, 0xa4, 0x65, 0x1c, 0x9d, 0x43, 0xa7, 0x17, 0xa2,
	0x7f, 0x96, 0xe5, 0xdc, 0xb4, 0x58, 0x65, 0xc3, 0xef, 0xc3, 0x8f, 0x26, 0xfc, 0x5e, 0xff, 0x41,
	0x32, 0x9b, 0x4f, 0xbb, 0xa4, 0x57, 0xc9, 0xc8, 0x8e, 0x89, 0x2b, 0x63, 0xaa, 0x13, 0x1f, 0x17,
	0x40, 0x68, 0xfd, 0x0b, 0x64, 0xf6, 0xe6, 0xcd, 0x75, 0xf7, 0xd0, 0x2a, 0xe0, 0x3d, 0xa8, 0xda,
	0xdd, 0xf7, 0x87, 0xc9, 0x93, 0x0f, 0x08, 0x9b, 0xd3, 0x4f, 0x93, 0x19, 0x1d, 0x1c, 0x5f, 0x09,
	0xfd, 0x96, 0x4e, 0x6d, 0xc7, 0xa0, 0xd2, 0x66, 0x16, 0x05, 0x79, 0x5a, 0x0a, 0xe4, 0x92, 0x06,
	0x49, 0x7f, 0xa5, 0xe4, 0x62, 0x55, 0xb2, 0xd9, 0x2c, 0xa5, 0x80, 0x13, 0x5a, 0xd2, 0x35, 0x72,
	0x5e, 0x63, 0x84, 0x3b, 0x18, 0x4b, 0xb9, 0x89, 0x30, 0xf9, 0x65, 0xbe, 0x83, 0x6c, 0x16, 0xd1,
	0x50, 0xd6, 0x06, 0xcb, 0xac, 0x65, 0x7e, 0xbc, 0xec, 0xdc, 0x88, 0x55, 0x66, 0xad, 0x04, 0x0f,
	0xa5, 0xad, 0xe8, 0x8a, 0x95, 0xd5, 0x20, 0xe0, 0xaa, 0xc4, 0x9c, 0xbc, 0xee, 0xb1, 0x59, 0xc0,
	0x42, 0x49, 0x0b, 0x2c, 0xd8, 0x65, 0xc6, 0x51, 0xb8, 0xe8, 0x90, 0xd5, 0xa8, 0x55, 0xb0, 0xab,
	0x8c, 0x00, 0xca, 0xdb, 0xd5, 0xff, 0xc6, 0x10, 0xb9, 0x6c, 0x1e, 0x54, 0xca, 0x16, 0x78, 0xcd,
	0xbe, 0xc0, 0xe4, 0xbc, 0xef, 0x0b, 0x4c, 0x85, 0x82, 0xb0, 0x43, 0xbd, 0x15, 0x84, 0x1d, 0x3e,
	0x45, 0x41, 0xd8, 0x1f, 0x26, 0xd3, 0xaa, 0xd0, 0x6b, 0xa6, 0xb8, 0x6b, 0x49, 0x45, 0xd8, 0x1c,
	0x61, 0xb6, 0x24, 0x6c, 0xe5, 0x7d, 0x4a, 0xc2, 0xfe, 0xcf, 0x21, 0x32, 0x57, 0xa8, 0xa9, 0x76,
	0x8a, 0x15, 0xa6, 0x6b, 0xe6, 0x0d, 0x3d, 0xdc, 0x9a, 0x79, 0xf4, 0x47, 0xfb, 0xa9, 0xb8, 0x46,
	0x4f, 0x51, 0x6d, 0x2d, 0xb6, 0xaf, 0x5a, 0x8e, 0x0c, 0xf2, 0xaa, 0xe5, 0xd4, 0x49, 0xd7, 0x2c,
	0xeb, 0xff, 0xc5, 0x21, 0xf9, 0xda, 0x01, 0xf4, 0x8b, 0x18, 0xf0, 0xe8, 0x84, 0xc2, 0xed, 0xe2,
	0xf4, 0xe6, 0xd3, 0xd9, 0xd4, 0x1c, 0xc0, 0xe2, 0xc6, 0xf7, 0x58, 0xb7, 0x9b, 0x86, 0x32, 0xff,
	0x06, 0xf7, 0x58, 0x7c, 0xf7, 0x12, 0xa1, 0xfc, 0x8c, 0xc9, 0xe5, 0xdc, 0x9c, 0xf5, 0x8c, 0x29,
	0x4f, 0xcc, 0xa9, 0xff, 0x8b, 0x0a, 0x21, 0x62, 0xc9, 0xe1, 0xac, 0xfa, 0x68, 0xe6, 0x1a, 0xe4,
	0x25, 0xeb, 0x0a, 0xa4, 0xa4, 0x12, 0xf3, 0x0b, 0xaf, 0x3e, 0xbe, 0x4d, 0x46, 0x3b, 0x58, 0x93,
	0x59, 0x4e, 0xb0, 0x7e, 0x2e, 0xbf, 0x17, 0x6b, 0x3b, 0x8b, 0x6c, 0x6b, 0x81, 0x00, 0x29, 0x08,
	0x2f, 0xdd, 0x5b, 0xfb, 0x81, 0x18, 0x87, 0xcf, 0xf5, 0x91, 0x92, 0x55, 0xbe, 0xed, 0x3c, 0x70,
	0x8b, 0xf9, 0x8e, 0x43, 0xe6, 0x92, 0x2e, 0x16, 0xd2, 0xf3, 0xf6, 0xd9, 0x0d, 0xd7, 0xc7, 0x14,
	0xfc, 0x91, 0x7e, 0x6f, 0x21, 0x6f, 0xe5, 0x59, 0x66, 0xfa, 0x62, 0xb0, 0x50, 0x14, 0x4e, 0xef,
	0x91, 0x89, 0x3d, 0xf5, 0xc2, 0x85, 0x4c, 0xf5, 0xe8, 0x43, 0xe9, 0xcb, 0x3f, 0x96, 0x21, 0x9f,
	0xa4, 0x52, 0x50, 0x30, 0xb2, 0xe8, 0x8f, 0x91, 0x89, 0x54, 0x3f, 0xc4, 0x37, 0xda, 0xaf, 0x15,
	0xa4, 0xdf, 0xea, 0xcb, 0x7e, 0x0c, 0x14, 0x6f, 0x9e, 0xf5, 0x33, 0x12, 0xeb, 0xff, 0xbd, 0x42,
	0xaa, 0xf2, 0x65, 0x24, 0xeb, 0x50, 0x91, 0x53, 0xf9, 0x39, 0xeb, 0x2e, 0x88, 0x63, 0x72, 0xc1,
	0x4b, 0xef, 0x6f, 0xd8, 0x6f, 0xe7, 0x0f, 0x3d, 0x86, 0xb7, 0xf3, 0x87, 0x1f, 0xd3, 0xdb, 0xf9,
	0x23, 0x0f, 0xf7, 0xed, 0xfc, 0xab, 0x58, 0x3e, 0x8d, 0xc9, 0xe2, 0x97, 0xe3, 0xb2, 0xd8, 0x19,
	0xc3, 0x62, 0x67, 0x0c, 0x1f, 0xa7, 0xc4, 0xd7, 0xfc, 0x12, 0x2c, 0x39, 0x2b, 0x33, 0x72, 0xc5,
	0x03, 0x7f, 0x09, 0x28, 0x1c, 0x3e, 0x67, 0xe1, 0xb6, 0x93, 0xea, 0x18, 0xd2, 0x88, 0xe7, 0x2c,
	0x5c, 0xf4, 0xd2, 0xb9, 0xed, 0x84, 0x76, 0xc8, 0xc4, 0x6e, 0x37, 0x90, 0xd5, 0x80, 0xc5, 0xa3,
	0x78, 0x78, 0xc1, 0x6d, 0x45, 0x01, 0x07, 0x71, 0xc1, 0x4d, 0x4b, 0xa0, 0x4f, 0x90, 0x61, 0xd6,
	0x71, 0xe5, 0x8b, 0xc3, 0x98, 0xde, 0xbc, 0xbc, 0xb1, 0x00, 0x1c, 0xc6, 0x51, 0x7e, 0x28, 0xee,
	0xba, 0x49, 0xd4, 0x7a, 0xd8, 0x06, 0x0e, 0xa3, 0x0d, 0x7e, 0x7e, 0xc9, 0x57, 0x5d, 0x30, 0x39,
	0x67, 0x62, 0xf1, 0x59, 0x93, 0x32, 0x20, 0x11, 0xc7, 0x47, 0xb5, 0x59, 0x35, 0x85, 0xb7, 0xd2,
	0x98, 0x7f, 0xc2, 0x43, 0x30, 0xed, 0xea, 0xff, 0x7a, 0x88, 0x8c, 0x0a, 0xe5, 0xf0, 0x11, 0xd4,
	0x34, 0xdf, 0xcd, 0xd4, 0x34, 0x5f, 0xea, 0xc7, 0xcf, 0x8c, 0x05, 0x80, 0x4e, 0xaa, 0x67, 0x1e,
	0xe4, 0xea, 0x99, 0xaf, 0xf4, 0x2d, 0xe9, 0xc1, 0xb5, 0xcc, 0xff, 0xd3, 0x10, 0x99, 0x11, 0x84,
	0xe6, 0xea, 0xff, 0x2b, 0x99, 0x33, 0xef, 0x99, 0xdc, 0xd5, 0xff, 0xf3, 0x39, 0xf2, 0xef, 0xdf,
	0xfd, 0x7f, 0xf0, 0xdd, 0xff, 0xdf, 0x77, 0x88, 0x1c, 0xb2, 0xec, 0xe5, 0x7f, 0x9d, 0x6a, 0x63,
	0xdd, 0xfe, 0xcf, 0xa5, 0xda, 0xe0, 0x85, 0x7c, 0x8b, 0xea, 0xcf, 0xcc, 0x75, 0xfc, 0xdf, 0x77,
	0x88, 0xec, 0xe2, 0x23, 0xb8, 0xde, 0xce, 0xb2, 0xd7, 0xdb, 0x5f, 0xef, 0x77, 0x45, 0x9c, 0x70,
	0xbf, 0xfd, 0x1f, 0x8d, 0xab, 0xdf, 0x84, 0xa7, 0x65, 0xee, 0xe6, 0xb7, 0x73, 0x8a, 0x9b, 0xdf,
	0xdb, 0x64, 0x82, 0xa9, 0x82, 0x9e, 0x67, 0x71, 0x7b, 0x98, 0x37, 0xcb, 0x55, 0x6b, 0x30, 0x8c,
	0xfa, 0xba, 0x4f, 0xde, 0x20, 0x73, 0x06, 0x62, 0x5f, 0x2a, 0xaf, 0x88, 0xac, 0xe0, 0x8d, 0x3c,
	0x12, 0x8a, 0xf4, 0x34, 0xb2, 0x6e, 0x3d, 0x55, 0x06, 0x96, 0xe1, 0x60, 0xbe, 0x78, 0xf1, 0xe6,
	0xd3, 0xa7, 0xd4, 0xd2, 0xc0, 0xeb, 0x3a, 0x62, 0x81, 0x5d, 0x35, 0xcb, 0x42, 0x29, 0xe0, 0xe6,
	0x2f, 0xb0, 0xe8, 0xe9, 0x4b, 0x64, 0x74, 0x17, 0x4b, 0xbc, 0xcb, 0x0b, 0xeb, 0x57, 0xf0, 0x49,
	0x5c, 0x84, 0x1c, 0x1f, 0xd5, 0xce, 0x49, 0x7f, 0x02, 0xfe, 0x0d, 0x92, 0x92, 0xbe, 0xac, 0x4a,
	0x6d, 0x0a, 0x85, 0x5e, 0xde, 0x43, 0x9f, 0x35, 0xb5, 0x31, 0xa5, 0xa2, 0x9f, 0xa1, 0x32, 0xe5,
	0x03, 0x26, 0x4e, 0x28, 0x1f, 0xf0, 0xb8, 0x0a, 0x1f, 0x9f, 0x78, 0x87, 0x6a, 0xb2, 0xc7, 0x3b,
	0x54, 0x31, 0x19, 0x6d, 0x76, 0x93, 0x34, 0xec, 0xc8, 0xcb, 0xda, 0x7d, 0x68, 0xd3, 0x0d, 0xe4,
	0x63, 0x1d, 0x83, 0x7a, 0x8f, 0x95, 0x18, 0x29, 0x09, 0x9f, 0xaf, 0x8a, 0x95, 0xff, 0x07, 0xbf,
	0xca, 0x94, 0x99, 0xf8, 0x8d, 0x0c, 0x06, 0x72, 0x94, 0x56, 0xb5, 0xaf, 0xe9, 0xfe, 0xab, 0x7d,
	0xc9, 0xa7, 0x42, 0x67, 0x8a, 0x4f, 0x85, 0xd6, 0x7f, 0x77, 0x8c, 0x9c, 0xb3, 0xcf, 0xd9, 0xec,
	0x65, 0x80, 0xa1, 0x87, 0x73, 0xf7, 0x62, 0x78, 0x40, 0xa9, 0xd8, 0x2f, 0xa9, 0xfc, 0xd0, 0x91,
	0x4c, 0xae, 0xa1, 0xce, 0x0f, 0x9d, 0x14, 0xbf, 0x2c, 0x93, 0x20, 0x8a, 0x19, 0x22, 0x9e, 0x3c,
	0x1d, 0xad, 0x0c, 0x91, 0x35, 0xe0, 0xf0, 0x13, 0x32, 0x91, 0x46, 0x7b, 0xca, 0x44, 0x2a, 0x24,
	0xf6, 0x8c, 0x3d, 0xee, 0xc4, 0x9e, 0xf1, 0x53, 0x27, 0xf6, 0xa8, 0x60, 0xfc, 0xc4, 0xc3, 0x0a,
	0xc6, 0xe7, 0x22, 0x8a, 0x64, 0xc0, 0x11, 0xc5, 0x03, 0x13, 0xab, 0x99, 0xec, 0x3f, 0xb3, 0xa2,
	0xa0, 0xfc, 0x3c, 0x20, 0x58, 0xf3, 0x63, 0x99, 0xc0, 0xc9, 0xb9, 0x7e, 0x5f, 0x7e, 0xcf, 0x29,
	0xab, 0xef, 0x1b, 0x39, 0x89, 0xb9, 0xb2, 0x56, 0xc8, 0x04, 0xe1, 0xd3, 0xbe, 0x19, 0x75, 0x51,
	0x0b, 0x70, 0xcc, 0xb4, 0x6f, 0x44, 0x5d, 0xe0, 0x70, 0x8e, 0xee, 0x30, 0xf1, 0xa8, 0xad, 0x85,
	0xde, 0x60, 0x1d, 0xe0, 0x70, 0x8e, 0x6e, 0x47, 0x5d, 0x59, 0xe7, 0x46, 0xa3, 0x57, 0x79, 0xeb,
	0x76, 0xd4, 0xad, 0x1f, 0x0f, 0x91, 0xa9, 0x4c, 0x0e, 0x26, 0x26, 0x5a, 0x1d, 0xa6, 0x7b, 0x61,
	0xa0, 0xce, 0x6c, 0x27, 0x97, 0x68, 0x65, 0x23, 0x21, 0x4b, 0x4b, 0xaf, 0x93, 0x09, 0x01, 0x68,
	0x74, 0x5a, 0x52, 0x11, 0xd7, 0xa7, 0x85, 0x68, 0xd8, 0xd8, 0x58, 0x02, 0x43, 0x43, 0xaf, 0x90,
	0xa1, 0x30, 0x91, 0x5a, 0x85, 0xbe, 0x6f, 0x70, 0x6b, 0x0b, 0x86, 0xc2, 0x84, 0xfe, 0x35, 0x87,
	0x4c, 0x0b, 0x4a, 0x59, 0x8a, 0x40, 0xa9, 0x9c, 0x5f, 0x1a, 0x50, 0xbe, 0xe9, 0xfc, 0x66, 0x86,
	0xfb, 0x72, 0x90, 0xc6, 0x87, 0x26, 0xf7, 0x2f, 0x8b, 0x84, 0x5c, 0x57, 0xae, 0x2c, 0x90, 0xf3,
	0x25, 0xcd, 0xe9, 0xac, 0xd8, 0xb0, 0x71, 0xd0, 0xc4, 0x93, 0xce, 0x17, 0x32, 0xc1, 0x15, 0x19,
	0x4d, 0x79, 0x6d, 0xe8, 0x55, 0xa7, 0xfe, 0xed, 0x71, 0x42, 0x54, 0x49, 0x3b, 0xd6, 0xa4, 0x2f,
	0x93, 0xb1, 0xc4, 0xed, 0x44, 0xbe, 0x0e, 0x9c, 0x5c, 0x41, 0x5f, 0x80, 0x00, 0xf1, 0x3d, 0x51,
	0xfe, 0x17, 0x4f, 0x1d, 0x45, 0x4a, 0x7d, 0x32, 0x1a, 0xa1, 0x8b, 0xa6, 0x7f, 0xfb, 0xd0, 0xf8,
	0x1e, 0xcd, 0x79, 0x24, 0x60, 0x20, 0x65, 0xc8, 0x92, 0x72, 0x8d, 0x50, 0x3e, 0xa8, 0x6b, 0x4a,
	0xca, 0xe1, 0x5d, 0x15, 0x85, 0xb3, 0x2b, 0xcf, 0x8d, 0x9c, 0xb6, 0xf2, 0x5c, 0xe5, 0x7d, 0x2a,
	0xcf, 0x89, 0x67, 0x62, 0x17, 0xf5, 0xc5, 0x9a, 0x51, 0x9c, 0xd2, 0xea, 0x99, 0x58, 0x0d, 0x87,
	0x0c, 0x55, 0xa6, 0x5e, 0xdd, 0xd8, 0x03, 0xeb, 0xd5, 0x5d, 0x95, 0x77, 0x4e, 0xc6, 0x91, 0x6a,
	0x3c, 0x77, 0x53, 0xe4, 0x05, 0xae, 0x4e, 0xa5, 0xae, 0x17, 0x6c, 0x87, 0x11, 0x6e, 0xad, 0x15,
	0xe5, 0xaf, 0x96, 0x40, 0x30, 0x78, 0x7a, 0x9d, 0x4c, 0x8a, 0x3f, 0x58, 0x6b, 0x45, 0xde, 0xe8,
	0xcb, 0x90, 0xaf, 0x84, 0x31, 0xd8, 0x14, 0xf4, 0x2f, 0xe4, 0xea, 0x28, 0x4e, 0x3e, 0xb4, 0x3a,
	0x8a, 0xf6, 0x2b, 0xea, 0xe5, 0xb5, 0x14, 0x0f, 0xc8, 0x04, 0x73, 0x63, 0xff, 0x70, 0x2b, 0x0d,
	0x23, 0xa9, 0x72, 0xf5, 0x91, 0xe0, 0xbd, 0xac, 0x58, 0x65, 0x55, 0x47, 0x0d, 0x06, 0x23, 0x2c,
	0x5b, 0x20, 0x69, 0xfa, 0xa1, 0x17, 0x48, 0x8a, 0x08, 0xd1, 0x7f, 0xbc, 0x84, 0x25, 0x6a, 0x44,
	0xf9, 0x27, 0xa2, 0xe5, 0xbd, 0x34, 0x00, 0x81, 0x96, 0x0c, 0x9c, 0x62, 0xdd, 0x80, 0x61, 0x61,
	0x1a, 0xe9, 0x83, 0x33, 0x97, 0x84, 0xea, 0xbf, 0xe0, 0x90, 0x8b, 0xd6, 0xdb, 0xf6, 0xe2, 0x5d,
	0xfd, 0xb3, 0xbc, 0xc7, 0xfb, 0xe0, 0xb0, 0xc5, 0xcb, 0xe4, 0xdc, 0x6e, 0xd8, 0x8d, 0x3d, 0x16,
	0xdf, 0x8a, 0x5b, 0x4c, 0xbd, 0x7b, 0x3c, 0x2b, 0xaa, 0xf0, 0x19, 0x38, 0x64, 0xa8, 0xea, 0x3f,
	0x51, 0x21, 0x33, 0xb9, 0x97, 0xf8, 0xb5, 0x1c, 0xa7, 0x54, 0x4e, 0x42, 0x46, 0x0f, 0xf1, 0x9b,
	0xca, 0x0d, 0xe9, 0x56, 0x3f, 0xa5, 0x70, 0x4a, 0x46, 0x43, 0x04, 0x23, 0xbe, 0x80, 0x22, 0x40,
	0x8a, 0xa2, 0xef, 0x92, 0x89, 0xb7, 0xbb, 0x6e, 0x9c, 0x32, 0x2e, 0x77, 0xf8, 0xe1, 0xc8, 0xc5,
	0x05, 0xfc, 0x39, 0x25, 0x05, 0x8c, 0x40, 0xba, 0x4f, 0xc6, 0x3a, 0x61, 0x90, 0xee, 0xf9, 0x87,
	0xd2, 0x47, 0x34, 0x70, 0xd9, 0x62, 0xff, 0x14, 0x32, 0x40, 0x09, 0xe3, 0x43, 0x7d, 0x8f, 0xb1,
	0xbb, 0xfe, 0xa1, 0x34, 0x8e, 0x1f, 0xce, 0x50, 0xbf, 0x85, 0x22, 0x40, 0x8a, 0xa2, 0x11, 0xa9,
	0xb4, 0x5c, 0xcf, 0x3f, 0x94, 0x31, 0x86, 0x81, 0xcb, 0x44, 0x53, 0x76, 0x89, 0x4b, 0x00, 0x21,
	0xa8, 0xfe, 0x9b, 0x0e, 0x99, 0xdc, 0x62, 0xed, 0x0e, 0x0b, 0x84, 0x7f, 0x64, 0x9e, 0xeb, 0x69,
	0x7e, 0xb7, 0x63, 0xbb, 0x47, 0xa6, 0x85, 0x62, 0xa5, 0xa0, 0x60, 0x51, 0xd0, 0x6d, 0x32, 0x14,
	0x46, 0x52, 0x1d, 0x59, 0x42, 0x05, 0x63, 0xf3, 0xf8, 0xa8, 0xf6, 0x5a, 0xaf, 0x0b, 0xfb, 0x56,
	0x04, 0x43, 0x61, 0xc4, 0x2d, 0x70, 0x71, 0xae, 0x0f, 0x1b, 0x0b, 0x3c, 0x93, 0x30, 0xf1, 0xbf,
	0xb0, 0xdb, 0xe6, 0x61, 0xaf, 0x8c, 0x45, 0xee, 0x3c, 0x3a, 0x8b, 0x3c, 0xd2, 0x4e, 0x89, 0x21,
	0x6d, 0xc5, 0x18, 0xa7, 0xc4, 0x1b, 0x7d, 0xd5, 0xf7, 0x90, 0xbf, 0x2f, 0xeb, 0xd2, 0xc0, 0x87,
	0x53, 0xb1, 0x02, 0xe0, 0x9f, 0xa7, 0x87, 0x53, 0xb1, 0xc3, 0x8f, 0xe2, 0xe1, 0x54, 0x21, 0xe8,
	0xc1, 0xbe, 0xf1, 0x3f, 0x1c, 0x22, 0xd3, 0x48, 0x77, 0xea, 0xaa, 0xb8, 0x59, 0xea, 0xef, 0x7b,
	0xc6, 0x1f, 0xec, 0x19, 0xff, 0x3d, 0x87, 0x88, 0x11, 0x2b, 0x38, 0xc6, 0x93, 0xb4, 0xdb, 0xf2,
	0x58, 0x99, 0x63, 0x7c, 0x4b, 0x63, 0xc0, 0xa2, 0x2a, 0x71, 0x8c, 0x0f, 0x3d, 0x16, 0xc7, 0xf8,
	0x77, 0x1d, 0x22, 0xca, 0x6e, 0xfe, 0xb9, 0x2a, 0xfb, 0x8a, 0x3d, 0x3e, 0xc1, 0x2d, 0xfe, 0x27,
	0xc3, 0x64, 0x16, 0xf1, 0xe8, 0x06, 0x7a, 0xd8, 0x25, 0x2f, 0x2c, 0x2f, 0xd7, 0xd0, 0xe0, 0x0a,
	0x0e, 0xdc, 0x73, 0xbd, 0x54, 0x45, 0x95, 0xad, 0xe2, 0xb0, 0x6f, 0x09, 0x30, 0x28, 0x3c, 0x27,
	0x8d, 0xbb, 0x41, 0xa0, 0x02, 0xc1, 0x95, 0xcc, 0x5d, 0x48, 0xbc, 0x84, 0xa2, 0xf0, 0x7c, 0x39,
	0xec, 0xba, 0x58, 0xe4, 0xae, 0x92, 0x7d, 0x24, 0x68, 0x05, 0xa1, 0x20, 0xb1, 0xdc, 0x18, 0x6f,
	0x86, 0xdc, 0x48, 0x4c, 0x99, 0x48, 0x08, 0xa8, 0x98, 0x83, 0xa2, 0xa1, 0x10, 0x60, 0x68, 0x78,
	0x83, 0x1d, 0x6d, 0x5e, 0x8d, 0x65, 0xeb, 0x16, 0x18, 0xfb, 0xca, 0xd0, 0xe0, 0x05, 0x62, 0x34,
	0xce, 0xde, 0xf2, 0xd2, 0xbd, 0x9b, 0xa1, 0xba, 0x37, 0x26, 0x4d, 0x28, 0x73, 0x81, 0xb8, 0x84,
	0x06, 0x4a, 0x5b, 0xd6, 0x7f, 0xd6, 0x21, 0xe2, 0xf5, 0x02, 0xfd, 0x78, 0xc9, 0x19, 0xf4, 0xdf,
	0xcf, 0x91, 0x31, 0xfc, 0x9c, 0x0b, 0x69, 0xaf, 0x5f, 0x70, 0x4b, 0x34, 0x07, 0xc5, 0xa7, 0xfe,
	0xeb, 0x57, 0xe5, 0xa2, 0xea, 0x35, 0x30, 0x53, 0x0c, 0xa1, 0x0c, 0xf5, 0x17, 0x42, 0x19, 0x3e,
	0x63, 0x08, 0xa5, 0x87, 0x27, 0xfa, 0x8c, 0x07, 0xbb, 0xd2, 0xbf, 0x07, 0xfb, 0xff, 0xf1, 0xa2,
	0xbf, 0x3f, 0xe5, 0x90, 0xf1, 0x5d, 0x26, 0x8c, 0x6d, 0xe9, 0x92, 0xbd, 0x33, 0xd0, 0xda, 0xbb,
	0xda, 0x7f, 0x64, 0x15, 0x83, 0x58, 0x16, 0x50, 0xd0, 0x92, 0xe9, 0x2f, 0x39, 0x64, 0xd6, 0xeb,
	0xec, 0xb8, 0xbe, 0x1b, 0x34, 0xd9, 0x0d, 0x37, 0x68, 0xf9, 0x2c, 0x96, 0x9e, 0xdb, 0x3e, 0x14,
	0xf8, 0xb5, 0x0c, 0x47, 0x55, 0xb4, 0xd4, 0xdc, 0x94, 0xc8, 0x09, 0x84, 0x42, 0x17, 0x68, 0x6a,
	0x15, 0x89, 0x9c, 0xec, 0x37, 0xeb, 0x40, 0xe5, 0x87, 0x67, 0x47, 0xa3, 0xa4, 0xe0, 0xa4, 0x4f,
	0x46, 0x85, 0xc7, 0x43, 0xfa, 0x37, 0x96, 0xfa, 0xb2, 0x61, 0xd4, 0xf8, 0x1b, 0x5d, 0x4e, 0x8c,
	0xbe, 0x94, 0x81, 0x0e, 0x15, 0x99, 0xde, 0x94, 0xc8, 0x22, 0xc0, 0xab, 0xfd, 0x57, 0xc2, 0x4d,
	0x72, 0x0e, 0x15, 0x05, 0x06, 0x23, 0x8c, 0x7e, 0xdb, 0xba, 0xd4, 0xa9, 0xde, 0x7e, 0x91, 0x51,
	0xa9, 0x41, 0x55, 0xc5, 0x2d, 0x5c, 0xeb, 0x54, 0x72, 0xa0, 0x20, 0x99, 0x7e, 0xd3, 0x21, 0x33,
	0x32, 0x9b, 0x54, 0xf7, 0x66, 0x66, 0x90, 0xe5, 0x72, 0xf5, 0x55, 0x95, 0xad, 0xac, 0x14, 0xc8,
	0x8b, 0xa5, 0x3f, 0x4e, 0x26, 0x77, 0x9b, 0xa9, 0xee, 0xc5, 0xec, 0x80, 0x0b, 0x5c, 0x9a, 0x22,
	0x0a, 0x46, 0x08, 0xd8, 0x12, 0xe9, 0x21, 0x19, 0x4f, 0xd4, 0x7b, 0x37, 0x73, 0xfd, 0x16, 0xa1,
	0x2e, 0x9c, 0x98, 0x66, 0xf6, 0xeb, 0xe7, 0x6e, 0xb4, 0xb8, 0xf2, 0x02, 0x87, 0xf4, 0xb1, 0x17,
	0x38, 0xfc, 0x19, 0x87, 0x4c, 0xb7, 0x4c, 0x55, 0x57, 0x7e, 0x58, 0x9d, 0xef, 0xf7, 0xb3, 0x60,
	0x95, 0x58, 0x5d, 0x73, 0xdf, 0x28, 0xd2, 0xd9, 0x7a, 0xb2, 0x39, 0xb1, 0x76, 0xdd, 0xe4, 0x0b,
	0x0f, 0xae, 0x9b, 0xac, 0x8b, 0x17, 0x5f, 0x3c, 0x65, 0xf1, 0xe2, 0x4b, 0xa7, 0x2a, 0x5e, 0x7c,
	0xf9, 0x81, 0xc5, 0x8b, 0x95, 0x4a, 0xa1, 0xab, 0x2e, 0xcb, 0x92, 0xc8, 0x46, 0xa5, 0x30, 0xf5,
	0x98, 0x73, 0x94, 0xf4, 0x75, 0x32, 0x6b, 0x9e, 0x1c, 0x12, 0xc5, 0x98, 0x65, 0xa9, 0x64, 0xac,
	0x67, 0xb6, 0x91, 0xc3, 0x41, 0x81, 0x5a, 0x4b, 0xd7, 0xc5, 0x82, 0x65, 0x01, 0x65, 0x23, 0xdd,
	0x94, 0x11, 0xce, 0x51, 0xea, 0x32, 0xbd, 0x4f, 0x96, 0x96, 0xe9, 0xb5, 0x93, 0x3d, 0xae, 0x3e,
	0x92, 0x64, 0x0f, 0x9d, 0x44, 0xf1, 0xd4, 0x09, 0x49, 0x14, 0xef, 0x66, 0x4b, 0xd1, 0x5e, 0x1b,
	0x64, 0x29, 0x5a, 0xbd, 0x47, 0x9c, 0x58, 0x8e, 0xf6, 0x39, 0x32, 0x9e, 0xaa, 0x1d, 0xaa, 0x66,
	0xa6, 0x84, 0xde, 0x50, 0x34, 0xd6, 0x2e, 0x22, 0xfc, 0xf4, 0x03, 0x8a, 0x08, 0x17, 0x9e, 0x75,
	0xfd, 0xe0, 0xe3, 0x78, 0xd6, 0x35, 0xfb, 0xcc, 0x56, 0xfd, 0x11, 0x3f, 0xb3, 0x75, 0x97, 0x0c,
	0xb5, 0x9b, 0xb2, 0x70, 0x4d, 0x1f, 0xaa, 0xcf, 0xaa, 0x1b, 0xef, 0xb8, 0x6d, 0xd6, 0x08, 0x7d,
	0x5f, 0xec, 0x1a, 0xc2, 0x5f, 0xaa, 0x42, 0x98, 0xab, 0x0d, 0x18, 0x6a, 0x37, 0x55, 0x05, 0xde,
	0x0f, 0x95, 0x54, 0xe0, 0xcd, 0xbf, 0xb7, 0xf1, 0xec, 0xa9, 0xde, 0xdb, 0x78, 0x85, 0x4c, 0xa5,
	0x5e, 0x87, 0x85, 0xdd, 0x74, 0x2d, 0xd8, 0x62, 0xcd, 0x04, 0xeb, 0xbe, 0xc8, 0x6b, 0x2e, 0xdb,
	0x36, 0x02, 0xb2, 0x74, 0xc5, 0x32, 0xde, 0x1f, 0x39, 0x65, 0x19, 0xef, 0x6f, 0x39, 0x64, 0x4e,
	0xdf, 0x48, 0xd3, 0x07, 0xe6, 0x73, 0x03, 0xbb, 0xc6, 0xa2, 0x0b, 0x30, 0xdc, 0xce, 0x0b, 0x81,
	0xa2, 0x5c, 0xfa, 0xf3, 0x0e, 0x99, 0xc6, 0x70, 0xbd, 0xa9, 0x05, 0xfb, 0x7c, 0xbf, 0x17, 0x0f,
	0xd0, 0x05, 0xb4, 0x15, 0xf9, 0x5e, 0x9a, 0xad, 0x03, 0xab, 0x23, 0xc1, 0xab, 0x19, 0x81, 0x90,
	0xeb, 0x40, 0xfd, 0x17, 0xae, 0x90, 0x49, 0xcb, 0xa7, 0x67, 0x3d, 0xe2, 0xeb, 0x3c, 0xf0, 0x11,
	0xdf, 0x3f, 0x4f, 0xf9, 0x3a, 0xd2, 0x35, 0x20, 0x9e, 0x97, 0x1c, 0xc9, 0x06, 0xf6, 0xf5, 0x1b,
	0x98, 0x60, 0x68, 0x4a, 0x5e, 0xce, 0xac, 0x9c, 0xe9, 0xe5, 0xcc, 0x6c, 0x3d, 0xb3, 0xd1, 0x53,
	0xd5, 0x33, 0xcb, 0x54, 0x83, 0x1b, 0x3b, 0x45, 0x35, 0xb8, 0x6c, 0xc9, 0xb9, 0xf1, 0x53, 0x95,
	0x9c, 0xd3, 0x95, 0xed, 0x26, 0x4e, 0xa8, 0x6c, 0x67, 0x3c, 0x56, 0x2a, 0x71, 0xa9, 0x3c, 0x33,
	0x89, 0xf4, 0x94, 0x99, 0x54, 0x28, 0x84, 0x35, 0xf9, 0x67, 0xa2, 0x10, 0xd6, 0xb9, 0x3f, 0x33,
	0x85, 0xb0, 0xa6, 0x1e, 0x53, 0x21, 0xac, 0x17, 0x45, 0x56, 0x94, 0x38, 0x75, 0x96, 0xd0, 0xca,
	0x1a, 0x36, 0x99, 0x4e, 0x12, 0x0c, 0x36, 0x4d, 0x31, 0xcb, 0x6c, 0xe6, 0x71, 0x67, 0x99, 0xcd,
	0x9e, 0x3a, 0xcb, 0x2c, 0x5f, 0xab, 0x6b, 0xae, 0xd7, 0x5a, 0x5d, 0xb4, 0xe7, 0x5a, 0x5d, 0xe7,
	0xcf, 0x54, 0xab, 0xcb, 0xae, 0x77, 0x75, 0xe1, 0x7d, 0xeb, 0x5d, 0x95, 0x96, 0x43, 0xba, 0xf4,
	0x98, 0xca, 0x21, 0xe5, 0xde, 0xe1, 0xbd, 0xfc, 0x68, 0xdf, 0xe1, 0x55, 0xf9, 0x84, 0xd5, 0x87,
	0x95, 0x4f, 0x78, 0xc2, 0x43, 0x55, 0x4f, 0xf4, 0x9b, 0xed, 0x9b, 0x0f, 0x1d, 0x98, 0x47, 0xbc,
	0x4b, 0xdc, 0x68, 0x22, 0xca, 0x55, 0xf6, 0x50, 0xd5, 0x7b, 0x96, 0x8b, 0xea, 0xca, 0xc0, 0xfb,
	0x64, 0xce, 0x43, 0xe5, 0xbc, 0x12, 0x3d, 0x31, 0xce, 0xaa, 0x03, 0xed, 0xac, 0x7a, 0x72, 0xe0,
	0xd2, 0xf5, 0x7a, 0x95, 0x6e, 0x2c, 0x15, 0xeb, 0x13, 0x8e, 0xab, 0xf7, 0xac, 0x5b, 0x7b, 0x57,
	0x1f, 0xde, 0x2f, 0xd7, 0x6f, 0x3b, 0xc9, 0x5f, 0xae, 0xef, 0x02, 0xc6, 0x32, 0x23, 0xeb, 0xa9,
	0x81, 0xcb, 0xd6, 0x87, 0x3c, 0xea, 0xa1, 0x42, 0xae, 0xc8, 0xf3, 0xfa, 0x3a, 0x19, 0x93, 0x6f,
	0xdf, 0x48, 0x6b, 0x6f, 0x90, 0x62, 0xb5, 0xff, 0x41, 0x9a, 0xc4, 0x52, 0xb2, 0x92, 0x48, 0x7f,
	0xb6, 0xe8, 0x02, 0xa9, 0xf5, 0x9b, 0x02, 0x9b, 0x71, 0x75, 0xe4, 0x87, 0x7e, 0x29, 0x23, 0xac,
	0xe0, 0x08, 0xc9, 0x65, 0xfa, 0x3e, 0x3d, 0xe0, 0x4c, 0xdf, 0x94, 0x8c, 0x72, 0xad, 0x6f, 0x65,
	0x59, 0xda, 0xa1, 0x83, 0x7f, 0x94, 0x0e, 0x1d, 0x2d, 0x8b, 0x28, 0x03, 0xa4, 0x2c, 0xda, 0x41,
	0x03, 0xb0, 0xde, 0xb7, 0xd5, 0x50, 0x30, 0x00, 0xc5, 0xd8, 0xe6, 0x4d, 0x40, 0xab, 0xf4, 0xcc,
	0x33, 0xfd, 0x96, 0x9e, 0x29, 0x46, 0xac, 0x73, 0xd9, 0xcc, 0x3b, 0x56, 0x36, 0x73, 0xb6, 0x0c,
	0xcc, 0x87, 0xfa, 0x2d, 0x03, 0x93, 0xcd, 0x2f, 0x78, 0xdf, 0x64, 0xe6, 0x5f, 0x19, 0x22, 0xd5,
	0x93, 0xae, 0x51, 0xcb, 0x54, 0x4e, 0xc8, 0x24, 0xc3, 0x54, 0x74, 0x2a, 0xa7, 0x49, 0x62, 0xc9,
	0x50, 0xd1, 0x4f, 0x93, 0x19, 0x7d, 0x03, 0x73, 0xc5, 0xc5, 0x57, 0xa2, 0x44, 0x45, 0x09, 0x2c,
	0x30, 0x02, 0x59, 0x14, 0xe4, 0x69, 0xe9, 0x3a, 0xb9, 0xd0, 0xf1, 0x02, 0x9d, 0x78, 0x18, 0x71,
	0xc5, 0x82, 0x9b, 0xb2, 0x22, 0xa0, 0x56, 0x15, 0x95, 0x8e, 0x8b, 0x78, 0x28, 0x6d, 0xc5, 0x75,
	0xa7, 0x9d, 0x30, 0x4c, 0x93, 0x34, 0x76, 0xa3, 0x46, 0xd8, 0x0d, 0x52, 0x19, 0xb6, 0x45, 0xdd,
	0x69, 0x31, 0x83, 0x81, 0x1c, 0x65, 0xfd, 0x97, 0x87, 0xc8, 0xc5, 0xc2, 0xd8, 0x60, 0x80, 0xb1,
	0x4e, 0x46, 0x77, 0xba, 0xad, 0x36, 0x4b, 0xe5, 0x90, 0x88, 0xf9, 0x8b, 0x10, 0x90, 0x18, 0xfa,
	0x2c, 0x19, 0xdb, 0x89, 0xdd, 0xe6, 0x5d, 0x96, 0xca, 0x9f, 0x8f, 0x16, 0xdb, 0xa2, 0x00, 0x81,
	0xc2, 0xd1, 0xab, 0x64, 0x24, 0xee, 0xea, 0xc0, 0x33, 0xfa, 0xda, 0xa0, 0x1b, 0xb4, 0x01, 0xa1,
	0x5c, 0x50, 0x33, 0x0c, 0x76, 0xd7, 0x96, 0x64, 0xb7, 0x51, 0x50, 0x03, 0x21, 0x20, 0x31, 0x34,
	0x22, 0xe3, 0x9d, 0xb0, 0x85, 0xe9, 0x59, 0xb2, 0xfc, 0xf4, 0x36, 0xd7, 0x96, 0x36, 0x24, 0xec,
	0xf8, 0xa8, 0xb6, 0xd4, 0x47, 0xee, 0x10, 0xf2, 0x40, 0x6d, 0x43, 0x4b, 0xa9, 0xff, 0xd6, 0x30,
	0x99, 0xdd, 0x66, 0x07, 0xa9, 0xae, 0xb0, 0x21, 0x32, 0x6f, 0xc6, 0x98, 0x28, 0x89, 0x2d, 0x03,
	0xae, 0x5b, 0xc2, 0x42, 0x45, 0x50, 0x3f, 0x9d, 0xe0, 0x92, 0xf4, 0x95, 0x6c, 0x25, 0x83, 0xbe,
	0x40, 0x26, 0xd2, 0xf0, 0x2e, 0x0b, 0xbc, 0x77, 0x74, 0xe9, 0x19, 0x71, 0xe9, 0x5d, 0x01, 0xc1,
	0xe0, 0xc5, 0xf3, 0xa7, 0x61, 0x74, 0x2f, 0x8c, 0x5b, 0x22, 0x31, 0x68, 0x5c, 0x99, 0xe5, 0x61,
	0xf4, 0x16, 0x07, 0x82, 0xc1, 0xd3, 0x27, 0xc8, 0x70, 0x14, 0x26, 0xf2, 0x35, 0x59, 0x74, 0x06,
	0x6d, 0x86, 0x09, 0x70, 0x18, 0xad, 0x91, 0x8a, 0xcf, 0x3a, 0x1d, 0x57, 0xde, 0xce, 0x46, 0x47,
	0xe4, 0x3a, 0x07, 0x80, 0x80, 0xf3, 0xaf, 0x99, 0xa4, 0xac, 0x83, 0x86, 0xb0, 0xf4, 0x9c, 0x6e,
	0xa5, 0xac, 0x03, 0x08, 0xc5, 0x07, 0xdd, 0x3a, 0x3b, 0xac, 0x85, 0xf7, 0xd7, 0xc7, 0x4c, 0x9f,
	0x97, 0x15, 0x10, 0x0c, 0x9e, 0x77, 0x23, 0xd9, 0x6f, 0xa1, 0xb5, 0x2b, 0xbb, 0xb1, 0xb5, 0xdf,
	0x02, 0x0e, 0x43, 0xef, 0xb0, 0x7b, 0xb0, 0xb5, 0xdf, 0x6a, 0x84, 0x9d, 0x28, 0x0c, 0x58, 0x90,
	0x26, 0x32, 0xd7, 0x59, 0x78, 0x87, 0x73, 0x38, 0x28, 0x50, 0xd7, 0xff, 0xad, 0x43, 0x2e, 0x95,
	0x97, 0x0e, 0xc0, 0xdf, 0x18, 0xde, 0x93, 0x5f, 0xd1, 0x91, 0xbf, 0x91, 0x03, 0x40, 0xc0, 0x39,
	0x41, 0x37, 0x8a, 0xe4, 0xa8, 0x4b, 0x82, 0xdb, 0x1c, 0x00, 0x02, 0xde, 0x4b, 0x5d, 0x98, 0x57,
	0xc8, 0x94, 0x67, 0x57, 0x7f, 0x39, 0xb9, 0x2c, 0x4c, 0x96, 0xae, 0xfe, 0xa7, 0x43, 0x64, 0x86,
	0x1f, 0x61, 0x5b, 0x2c, 0xf6, 0x58, 0xb2, 0xbc, 0xcf, 0x82, 0xd3, 0x3c, 0x3b, 0xfc, 0x61, 0x32,
	0xda, 0x61, 0xe9, 0x5e, 0xa8, 0x2e, 0x3f, 0x18, 0xd7, 0x0f, 0x42, 0x41, 0x62, 0xf9, 0x1a, 0xde,
	0x0b, 0xb9, 0x79, 0x72, 0x28, 0x67, 0x0d, 0xae, 0xe1, 0x1b, 0x02, 0x04, 0x0a, 0x47, 0x13, 0x32,
	0xd6, 0xe4, 0x3b, 0x46, 0x7c, 0x28, 0x7d, 0x2e, 0x5f, 0xd0, 0x0f, 0x56, 0x08, 0x70, 0x3f, 0xef,
	0x73, 0x49, 0x69, 0x92, 0x13, 0x28, 0x49, 0x22, 0x10, 0xc1, 0xf0, 0x17, 0xcb, 0x04, 0x13, 0x19,
	0x88, 0x10, 0x30, 0xd0, 0x58, 0x7c, 0x0e, 0x32, 0x4c, 0x52, 0x41, 0x3a, 0x6a, 0x92, 0xdc, 0x37,
	0x15, 0x10, 0x0c, 0x9e, 0xce, 0x13, 0x92, 0x7a, 0x1d, 0x86, 0xa5, 0x43, 0x45, 0x01, 0x01, 0x99,
	0xb4, 0xb9, 0xad, 0xa1, 0x60, 0x51, 0xd4, 0xbf, 0x47, 0xc8, 0x39, 0x3b, 0xd2, 0x68, 0x65, 0x25,
	0x38, 0xfd, 0x67, 0x25, 0xbc, 0xcd, 0x7f, 0xa4, 0x17, 0xc6, 0x7c, 0x6f, 0x13, 0x9f, 0xea, 0xb6,
	0xf8, 0x91, 0x02, 0x76, 0x7c, 0x54, 0x5b, 0xee, 0x75, 0x5c, 0x15, 0x8f, 0x75, 0xb6, 0xcf, 0x7c,
	0xd0, 0x62, 0x68, 0x8b, 0x8c, 0x36, 0xf7, 0x31, 0x83, 0x4f, 0x24, 0x8c, 0xae, 0xe3, 0x96, 0xbb,
	0x2f, 0xf3, 0xf7, 0x7a, 0xce, 0x6c, 0x10, 0x1c, 0x40, 0xf2, 0xa6, 0x97, 0xc8, 0x50, 0xf3, 0x8e,
	0xdc, 0x63, 0x46, 0xf5, 0xe3, 0x1d, 0x77, 0xf8, 0xe2, 0xda, 0x0d, 0xfd, 0x96, 0xba, 0x66, 0x81,
	0x8b, 0x6b, 0x85, 0x03, 0x40, 0xc0, 0xa9, 0x4f, 0x2a, 0x49, 0xe4, 0x7b, 0xa9, 0x4c, 0xeb, 0x5d,
	0xed, 0xcf, 0xca, 0x45, 0x77, 0xaa, 0xc8, 0x9a, 0xd6, 0x6f, 0x6b, 0x73, 0x10, 0x08, 0x21, 0x34,
	0x21, 0x93, 0x6c, 0xdf, 0xf5, 0x45, 0x8e, 0xbc, 0x9a, 0x0e, 0x9f, 0xe3, 0x4b, 0x79, 0xd9, 0x80,
	0x07, 0x90, 0x7d, 0x6f, 0x4b, 0xa1, 0x6d, 0x32, 0x94, 0xec, 0xf5, 0x9f, 0xf5, 0x50, 0x7a, 0x74,
	0x8b, 0xc1, 0xde, 0xba, 0x01, 0x43, 0xc9, 0x1e, 0xee, 0xd6, 0x8c, 0xb5, 0xe4, 0xdb, 0x2f, 0x62,
	0xb7, 0x66, 0xac, 0x05, 0x08, 0xcd, 0xe6, 0x01, 0x9f, 0x7b, 0x74, 0x79, 0xc0, 0x4f, 0x88, 0xab,
	0x60, 0x53, 0x66, 0xe3, 0x57, 0xd7, 0xc0, 0x30, 0x49, 0xc7, 0x4b, 0xd2, 0xd8, 0xdb, 0xe9, 0x72,
	0x45, 0x7f, 0x1a, 0x49, 0x44, 0x92, 0x8e, 0x01, 0x83, 0x4d, 0x43, 0x1b, 0x64, 0x6e, 0x37, 0xff,
	0x0e, 0x01, 0x3a, 0xb0, 0xc6, 0x45, 0x72, 0x52, 0xe1, 0x91, 0x02, 0x28, 0xd2, 0xf3, 0x1d, 0x24,
	0x08, 0x5b, 0x4c, 0x28, 0x50, 0xb3, 0x66, 0x07, 0xb9, 0xa9, 0x80, 0x60, 0xf0, 0x78, 0xd8, 0xe2,
	0xa5, 0xa7, 0xcd, 0x66, 0x2a, 0xfd, 0x4d, 0xe2, 0xb0, 0x55, 0x40, 0x30, 0x78, 0xd4, 0x7e, 0xf7,
	0x58, 0xf3, 0xae, 0x28, 0x61, 0x4c, 0xfb, 0x0d, 0x32, 0x35, 0x34, 0xaf, 0x6c, 0x90, 0xc9, 0xc0,
	0xc1, 0x92, 0x27, 0x5e, 0xeb, 0x6c, 0xe3, 0x0e, 0x80, 0x6e, 0x2a, 0x91, 0x62, 0x34, 0xbe, 0x2e,
	0x61, 0xc7, 0x47, 0xb5, 0xd7, 0x7b, 0x9d, 0xd8, 0x8a, 0x07, 0x68, 0x09, 0xc5, 0xa0, 0xd0, 0x85,
	0xd3, 0x05, 0x85, 0xea, 0xbf, 0x34, 0x4c, 0xaa, 0xb7, 0x03, 0x6f, 0xdf, 0x8d, 0x3d, 0x37, 0x65,
	0xa6, 0xe0, 0x09, 0x86, 0x31, 0x36, 0xc8, 0xf9, 0x76, 0xec, 0xb5, 0x64, 0x32, 0x0b, 0x26, 0x99,
	0x9a, 0xa4, 0x58, 0xed, 0xa5, 0x5d, 0x2d, 0x92, 0x40, 0x59, 0x3b, 0x6e, 0xdb, 0x4e, 0xed, 0xb8,
	0x09, 0x33, 0x4f, 0x52, 0x0f, 0x3d, 0xa4, 0x47, 0xbf, 0xb5, 0x95, 0xcd, 0x0d, 0x3f, 0xf3, 0x3a,
	0x75, 0x56, 0x3a, 0xfd, 0x18, 0x6a, 0xb7, 0xcc, 0xe7, 0xbf, 0x69, 0x38, 0x5b, 0xe1, 0x7a, 0x43,
	0xc2, 0x41, 0x53, 0xd0, 0x8f, 0x93, 0xc9, 0xe6, 0xbe, 0x19, 0x84, 0x91, 0x6c, 0x19, 0xf6, 0xc6,
	0x1d, 0xf3, 0xe3, 0x6d, 0xba, 0xcc, 0x0b, 0x1b, 0xb0, 0x26, 0xd3, 0x97, 0x8b, 0x2f, 0x6c, 0xf0,
	0x66, 0x16, 0x5d, 0xfd, 0xe7, 0x1c, 0x32, 0x77, 0xc7, 0x6b, 0xb1, 0x30, 0xa3, 0x08, 0x1f, 0x12,
	0x22, 0x56, 0x10, 0xaa, 0xa6, 0xe2, 0x3b, 0x7c, 0x01, 0x9f, 0x22, 0xd6, 0xd0, 0xe3, 0xa3, 0xda,
	0x6a, 0xaf, 0x13, 0x0b, 0x05, 0x1a, 0x56, 0x60, 0x09, 0xab, 0xff, 0x4b, 0x87, 0x10, 0x51, 0x0c,
	0x08, 0x7b, 0xb2, 0x47, 0xc6, 0x95, 0xb6, 0x24, 0xfb, 0xc1, 0x0f, 0xb3, 0x71, 0xa5, 0x50, 0x1d,
	0x1f, 0xd5, 0x3e, 0xd5, 0x6b, 0x2f, 0x56, 0x62, 0xf6, 0x36, 0x68, 0xee, 0xfc, 0xd8, 0xc2, 0xb8,
	0x96, 0x34, 0x75, 0xf0, 0xd8, 0xc2, 0x98, 0x17, 0x08, 0x38, 0x37, 0x64, 0x7c, 0x16, 0xb4, 0xd3,
	0x3d, 0xa9, 0x0e, 0xa2, 0x21, 0xb3, 0x8e, 0x10, 0x90, 0x98, 0xc5, 0xaf, 0xfc, 0xce, 0xf7, 0xae,
	0x7d, 0xe0, 0xf7, 0xbe, 0x77, 0xed, 0x03, 0x7f, 0xf0, 0xbd, 0x6b, 0x1f, 0xf8, 0xc6, 0xfd, 0x6b,
	0xce, 0xef, 0xdc, 0xbf, 0xe6, 0xfc, 0xde, 0xfd, 0x6b, 0xce, 0x1f, 0xdc, 0xbf, 0xe6, 0xfc, 0xe7,
	0xfb, 0xd7, 0x9c, 0xef, 0xfc, 0xd1, 0xb5, 0x0f, 0x7c, 0xf1, 0xd5, 0x53, 0x76, 0x59, 0xcd, 0x43,
	0xdd, 0xe7, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x96, 0xa8, 0x0a, 0x44, 0xe3, 0x00, 0x00,
}

func (m *AlgorithmParameterRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgorithmParameterRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgorithmParameterRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ranges) > 0 {
		for iNdEx := len(m.Ranges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ranges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AlgorithmSearchSpaceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgorithmSearchSpaceSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgorithmSearchSpaceSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Custom) > 0 {
		for iNdEx := len(m.Custom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Custom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Exclude) > 0 {
		for iNdEx := len(m.Exclude) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Exclude[iNdEx])
			copy(dAtA[i:], m.Exclude[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Exclude[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Include) > 0 {
		for iNdEx := len(m.Include) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Include[iNdEx])
			copy(dAtA[i:], m.Include[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Include[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Anomaly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Anomaly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Anomaly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.End)
	copy(dAtA[i:], m.End)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.End)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Start)
	copy(dAtA[i:], m.Start)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Start)))
	i--
	dAtA[i] = 0x22
	i -= len(m.AdjDeltaColumn)
	copy(dAtA[i:], m.AdjDeltaColumn)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AdjDeltaColumn)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ValueColumn)
	copy(dAtA[i:], m.ValueColumn)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ValueColumn)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AudioPipelineSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioPipelineSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioPipelineSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Featurizer != nil {
		i -= len(*m.Featurizer)
		copy(dAtA[i:], *m.Featurizer)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Featurizer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BacktestSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BacktestSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BacktestSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gap != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Gap))
		i--
		dAtA[i] = 0x28
	}
	if m.Initial != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Initial))
		i--
		dAtA[i] = 0x18
	}
	if m.Splits != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Splits))
		i--
		dAtA[i] = 0x10
	}
	if m.Sliding != nil {
		i--
		if *m.Sliding {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BaselineSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaselineSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaselineSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.All != nil {
		i--
		if *m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Baselines) > 0 {
		for iNdEx := len(m.Baselines) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Baselines[iNdEx])
			copy(dAtA[i:], m.Baselines[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Baselines[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChangePoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangePoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChatbotEstimatorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatbotEstimatorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatbotEstimatorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		i -= len(*m.Base)
		copy(dAtA[i:], *m.Base)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Base)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckpointSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckpointSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CheckpointInterval != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.CheckpointInterval))
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClassicalEstimatorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassicalEstimatorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassicalEstimatorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		for iNdEx := len(m.Parameters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parameters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.AlgorithmName)
	copy(dAtA[i:], m.AlgorithmName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AlgorithmName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CustomReportSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomReportSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomReportSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pages) > 0 {
		for iNdEx := len(m.Pages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	return len(dAtA) - i, nil
}

func (m *DataHashes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataHashes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataHashes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ValidationHash)
	copy(dAtA[i:], m.ValidationHash)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ValidationHash)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.TestingHash)
	copy(dAtA[i:], m.TestingHash)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TestingHash)))
	i--
	dAtA[i] = 0x12
	i -= len(m.TrainingHash)
	copy(dAtA[i:], m.TrainingHash)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TrainingHash)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DataSplitSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataSplitSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataSplitSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidationDatasetName != nil {
		i -= len(*m.ValidationDatasetName)
		copy(dAtA[i:], *m.ValidationDatasetName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ValidationDatasetName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TestDatasetName != nil {
		i -= len(*m.TestDatasetName)
		copy(dAtA[i:], *m.TestDatasetName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.TestDatasetName)))
		i--
		dAtA[i] = 0x42
	}
	if m.TrainDatasetName != nil {
		i -= len(*m.TrainDatasetName)
		copy(dAtA[i:], *m.TrainDatasetName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.TrainDatasetName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Segments) > 0 {
		for iNdEx := len(m.Segments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Segments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SplitColumn != nil {
		i -= len(*m.SplitColumn)
		copy(dAtA[i:], *m.SplitColumn)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SplitColumn)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Test != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Test))
		i--
		dAtA[i] = 0x20
	}
	if m.Validation != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Validation))
		i--
		dAtA[i] = 0x18
	}
	if m.Train != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Train))
		i--
		dAtA[i] = 0x10
	}
	if m.Method != nil {
		i -= len(*m.Method)
		copy(dAtA[i:], *m.Method)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Method)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeepEstimatorLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeepEstimatorLayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeepEstimatorLayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InputLayers) > 0 {
		for iNdEx := len(m.InputLayers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InputLayers[iNdEx])
			copy(dAtA[i:], m.InputLayers[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.InputLayers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Parameters) > 0 {
		for iNdEx := len(m.Parameters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parameters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DeepEstimatorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeepEstimatorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeepEstimatorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Loss)
	copy(dAtA[i:], m.Loss)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Loss)))
	i--
	dAtA[i] = 0x42
	if m.Gpus != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Gpus))
		i--
		dAtA[i] = 0x38
	}
	if m.Seq != nil {
		i--
		if *m.Seq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ValidationSplit != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ValidationSplit))
		i--
		dAtA[i] = 0x28
	}
	if m.Epochs != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Epochs))
		i--
		dAtA[i] = 0x20
	}
	if m.BatchSize != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.BatchSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Layers) > 0 {
		for iNdEx := len(m.Layers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Layers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DriftDetectorStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriftDetectorStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriftDetectorStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.OutlierModelURI)
	copy(dAtA[i:], m.OutlierModelURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OutlierModelURI)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DriftModelSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriftModelSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriftModelSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.OutlierAlgorithm)
	copy(dAtA[i:], m.OutlierAlgorithm)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OutlierAlgorithm)))
	i--
	dAtA[i] = 0x12
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EarlyStopSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EarlyStopSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EarlyStopSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinModelsWithNoProgress != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MinModelsWithNoProgress))
		i--
		dAtA[i] = 0x18
	}
	if m.Initial != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Initial))
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnsembleRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnsembleRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnsembleRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EnsembleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnsembleSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnsembleSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.Final != nil {
		{
			size, err := m.Final.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Estimators) > 0 {
		for iNdEx := len(m.Estimators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Estimators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Models) > 0 {
		for iNdEx := len(m.Models) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Models[iNdEx])
			copy(dAtA[i:], m.Models[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Models[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EnsemblesSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnsemblesSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnsemblesSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Top != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Top))
		i--
		dAtA[i] = 0x20
	}
	if m.StackingEnsemble != nil {
		i--
		if *m.StackingEnsemble {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.VotingEnsemble != nil {
		i--
		if *m.VotingEnsemble {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EntityRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntityRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Exclude) > 0 {
		for iNdEx := len(m.Exclude) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Exclude[iNdEx])
			copy(dAtA[i:], m.Exclude[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Exclude[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EvalMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvalMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvalMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelErrTolerance != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.RelErrTolerance))))
		i--
		dAtA[i] = 0x31
	}
	if m.NullModelParams != nil {
		i -= len(*m.NullModelParams)
		copy(dAtA[i:], *m.NullModelParams)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.NullModelParams)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AggPeriod != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.AggPeriod))
		i--
		dAtA[i] = 0x20
	}
	if m.AggFunc != nil {
		i -= len(*m.AggFunc)
		copy(dAtA[i:], *m.AggFunc)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.AggFunc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reporting) > 0 {
		for iNdEx := len(m.Reporting) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Reporting[iNdEx])
			copy(dAtA[i:], m.Reporting[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reporting[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Selection)
	copy(dAtA[i:], m.Selection)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Selection)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EvalPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvalPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvalPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CvUseMostRecentSplits != nil {
		i--
		if *m.CvUseMostRecentSplits {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.CvMaxSplits != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.CvMaxSplits))
		i--
		dAtA[i] = 0x38
	}
	if m.CvMinTrainPeriods != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.CvMinTrainPeriods))
		i--
		dAtA[i] = 0x30
	}
	if m.CvHorizon != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.CvHorizon))
		i--
		dAtA[i] = 0x28
	}
	if m.CvExpandingWindows != nil {
		i--
		if *m.CvExpandingWindows {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CvPeriodsBetweenSplits != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.CvPeriodsBetweenSplits))
		i--
		dAtA[i] = 0x18
	}
	if m.PeriodsBetweenTrainTest != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.PeriodsBetweenTrainTest))
		i--
		dAtA[i] = 0x10
	}
	if m.TestHorizon != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TestHorizon))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeatureEngineeringPipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureEngineeringPipeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeatureEngineeringPipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Passthrough != nil {
		i--
		if *m.Passthrough {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Drop != nil {
		i--
		if *m.Drop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.Custom) > 0 {
		for iNdEx := len(m.Custom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Custom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Generated) > 0 {
		for iNdEx := len(m.Generated) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Generated[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Video != nil {
		{
			size, err := m.Video.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Audio != nil {
		{
			size, err := m.Audio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.DatetimeTransformation != nil {
		i -= len(*m.DatetimeTransformation)
		copy(dAtA[i:], *m.DatetimeTransformation)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DatetimeTransformation)))
		i--
		dAtA[i] = 0x52
	}
	if m.OutlierHandling != nil {
		i -= len(*m.OutlierHandling)
		copy(dAtA[i:], *m.OutlierHandling)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.OutlierHandling)))
		i--
		dAtA[i] = 0x4a
	}
	if m.VariableTransformation != nil {
		i -= len(*m.VariableTransformation)
		copy(dAtA[i:], *m.VariableTransformation)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VariableTransformation)))
		i--
		dAtA[i] = 0x42
	}
	if m.Discretisation != nil {
		i -= len(*m.Discretisation)
		copy(dAtA[i:], *m.Discretisation)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Discretisation)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Scaling != nil {
		i -= len(*m.Scaling)
		copy(dAtA[i:], *m.Scaling)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Scaling)))
		i--
		dAtA[i] = 0x32
	}
	if m.Encoding != nil {
		i -= len(*m.Encoding)
		copy(dAtA[i:], *m.Encoding)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Encoding)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Imputation != nil {
		i -= len(*m.Imputation)
		copy(dAtA[i:], *m.Imputation)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Imputation)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Columns[iNdEx])
			copy(dAtA[i:], m.Columns[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Columns[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.DataType)
	copy(dAtA[i:], m.DataType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DataType)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FeatureEngineeringSearchSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureEngineeringSearchSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeatureEngineeringSearchSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EarlyStop.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.FSelection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.Reuse != nil {
		i--
		if *m.Reuse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.AutoRemove != nil {
		i--
		if *m.AutoRemove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.SamplePct != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.SamplePct))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxTrainers != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxTrainers))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxTimeSec != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxTimeSec))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxModels != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxModels))
		i--
		dAtA[i] = 0x20
	}
	if m.Estimator != nil {
		i -= len(*m.Estimator)
		copy(dAtA[i:], *m.Estimator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Estimator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImbalanceHandler != nil {
		i -= len(*m.ImbalanceHandler)
		copy(dAtA[i:], *m.ImbalanceHandler)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ImbalanceHandler)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeatureEngineeringSearchStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureEngineeringSearchStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeatureEngineeringSearchStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Best.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FeatureEngineeringSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureEngineeringSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeatureEngineeringSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeatureSelection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Imbalance != nil {
		i -= len(*m.Imbalance)
		copy(dAtA[i:], *m.Imbalance)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Imbalance)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pipelines) > 0 {
		for iNdEx := len(m.Pipelines) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pipelines[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeatureImportance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureImportance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeatureImportance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Importance))))
	i--
	dAtA[i] = 0x11
	i -= len(m.Feature)
	copy(dAtA[i:], m.Feature)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Feature)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FeatureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeatureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
	i--
	dAtA[i] = 0x19
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FeaturePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeaturePair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeaturePair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Y)
	copy(dAtA[i:], m.Y)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Y)))
	i--
	dAtA[i] = 0x12
	i -= len(m.X)
	copy(dAtA[i:], m.X)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.X)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FeatureSelectionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureSelectionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeatureSelectionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserved) > 0 {
		for iNdEx := len(m.Reserved) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Reserved[iNdEx])
			copy(dAtA[i:], m.Reserved[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reserved[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Percentile != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Percentile))
		i--
		dAtA[i] = 0x50
	}
	if m.MaxFeatures != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxFeatures))
		i--
		dAtA[i] = 0x48
	}
	if m.CorrThreshold != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.CorrThreshold))
		i--
		dAtA[i] = 0x40
	}
	if m.VarThreshold != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.VarThreshold))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Pipeline) > 0 {
		for iNdEx := len(m.Pipeline) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Pipeline[iNdEx])
			copy(dAtA[i:], m.Pipeline[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Pipeline[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Wrapper != nil {
		i--
		if *m.Wrapper {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Filter != nil {
		i--
		if *m.Filter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Embedding != nil {
		i--
		if *m.Embedding {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForecasterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForecasterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForecasterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HTS != nil {
		i -= len(*m.HTS)
		copy(dAtA[i:], *m.HTS)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.HTS)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.Estimators) > 0 {
		for iNdEx := len(m.Estimators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Estimators[iNdEx])
			copy(dAtA[i:], m.Estimators[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Estimators[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.Key) > 0 {
		for iNdEx := len(m.Key) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Key[iNdEx])
			copy(dAtA[i:], m.Key[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Key[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	i -= len(m.Growth)
	copy(dAtA[i:], m.Growth)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Growth)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	if len(m.LaggedRegressors) > 0 {
		for iNdEx := len(m.LaggedRegressors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LaggedRegressors[iNdEx])
			copy(dAtA[i:], m.LaggedRegressors[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.LaggedRegressors[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Regressors) > 0 {
		for iNdEx := len(m.Regressors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Regressors[iNdEx])
			copy(dAtA[i:], m.Regressors[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Regressors[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	{
		size, err := m.Seasonality.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size, err := m.EvalPeriod.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.EvalMetrics.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.HPOBudget != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.HPOBudget))
		i--
		dAtA[i] = 0x70
	}
	i -= len(m.ValueColumn)
	copy(dAtA[i:], m.ValueColumn)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ValueColumn)))
	i--
	dAtA[i] = 0x6a
	i -= len(m.TrainEndDate)
	copy(dAtA[i:], m.TrainEndDate)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TrainEndDate)))
	i--
	dAtA[i] = 0x62
	if len(m.Anomalies) > 0 {
		for iNdEx := len(m.Anomalies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Anomalies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	i -= len(m.PredefinedTemplate)
	copy(dAtA[i:], m.PredefinedTemplate)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PredefinedTemplate)))
	i--
	dAtA[i] = 0x52
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Groups[iNdEx])
			copy(dAtA[i:], m.Groups[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Groups[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Features[iNdEx])
			copy(dAtA[i:], m.Features[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Features[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size, err := m.OutputLocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Coverage != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Coverage))))
		i--
		dAtA[i] = 0x31
	}
	if m.Forecast != nil {
		i--
		if *m.Forecast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Future.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Past.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *GarbageCollectionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GarbageCollectionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GarbageCollectionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeepPrunedModel != nil {
		i--
		if *m.KeepPrunedModel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.KeepOnlyBestModelPerAlgorithm != nil {
		i--
		if *m.KeepOnlyBestModelPerAlgorithm {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.CollectAtStudyEnd != nil {
		i--
		if *m.CollectAtStudyEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GarbageCollectionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GarbageCollectionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GarbageCollectionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Models) > 0 {
		for iNdEx := len(m.Models) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Models[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Collected))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GeneratedColumnSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneratedColumnSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneratedColumnSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Expression)
	copy(dAtA[i:], m.Expression)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Expression)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Second)
	copy(dAtA[i:], m.Second)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Second)))
	i--
	dAtA[i] = 0x22
	i -= len(m.First)
	copy(dAtA[i:], m.First)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.First)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.DataType)
	copy(dAtA[i:], m.DataType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DataType)))
	i--
	dAtA[i] = 0x12
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupSplitLocationsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupSplitLocationsSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupSplitLocationsSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupTestingFile != nil {
		i -= len(*m.GroupTestingFile)
		copy(dAtA[i:], *m.GroupTestingFile)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.GroupTestingFile)))
		i--
		dAtA[i] = 0x12
	}
	if m.GroupTrainingFile != nil {
		i -= len(*m.GroupTrainingFile)
		copy(dAtA[i:], *m.GroupTrainingFile)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.GroupTrainingFile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HyperParameterValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HyperParameterValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HyperParameterValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Value)
	copy(dAtA[i:], m.Value)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Value)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HyperbandOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HyperbandOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HyperbandOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BootstrapCount != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.BootstrapCount))
		i--
		dAtA[i] = 0x20
	}
	if m.ReductionFactor != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ReductionFactor))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxResources != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxResources))
		i--
		dAtA[i] = 0x10
	}
	if m.MinResources != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MinResources))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImagePipelineSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImagePipelineSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImagePipelineSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Featurizer != nil {
		i -= len(*m.Featurizer)
		copy(dAtA[i:], *m.Featurizer)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Featurizer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImbalanceHandlingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImbalanceHandlingSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImbalanceHandlingSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Imbalance != nil {
		i -= len(*m.Imbalance)
		copy(dAtA[i:], *m.Imbalance)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Imbalance)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InterpretabilitySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterpretabilitySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterpretabilitySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Anchor != nil {
		i--
		if *m.Anchor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CounterFactual != nil {
		i--
		if *m.CounterFactual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.ShapPairs) > 0 {
		for iNdEx := len(m.ShapPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShapPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Shap != nil {
		i -= len(*m.Shap)
		copy(dAtA[i:], *m.Shap)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Shap)))
		i--
		dAtA[i] = 0x22
	}
	if m.Lime != nil {
		i--
		if *m.Lime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ICEPairs) > 0 {
		for iNdEx := len(m.ICEPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ICEPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ICE != nil {
		i--
		if *m.ICE {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InterpretabilityStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterpretabilityStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterpretabilityStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Importance) > 0 {
		for iNdEx := len(m.Importance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Importance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i -= len(m.TestShapValuesURI)
	copy(dAtA[i:], m.TestShapValuesURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TestShapValuesURI)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.TrainShapValuesURI)
	copy(dAtA[i:], m.TrainShapValuesURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TrainShapValuesURI)))
	i--
	dAtA[i] = 0x22
	i -= len(m.ExplainerURI)
	copy(dAtA[i:], m.ExplainerURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExplainerURI)))
	i--
	dAtA[i] = 0x1a
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Level) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Level) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Level) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Aggregate != nil {
		i -= len(*m.Aggregate)
		copy(dAtA[i:], *m.Aggregate)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Aggregate)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Freq != nil {
		i -= len(*m.Freq)
		copy(dAtA[i:], *m.Freq)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Freq)))
		i--
		dAtA[i] = 0x22
	}
	if m.Horizon != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Horizon))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Index) > 0 {
		for iNdEx := len(m.Index) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Index[iNdEx])
			copy(dAtA[i:], m.Index[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Index[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MedianPrunerOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MedianPrunerOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MedianPrunerOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinTrials != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MinTrials))
		i--
		dAtA[i] = 0x20
	}
	if m.IntervalSteps != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.IntervalSteps))
		i--
		dAtA[i] = 0x18
	}
	if m.WarmupSteps != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.WarmupSteps))
		i--
		dAtA[i] = 0x10
	}
	if m.StartupTrials != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.StartupTrials))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Model) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelClassCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelClassCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelClassCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x2a
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelClassDataSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelClassDataSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelClassDataSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Tests.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Target != nil {
		i -= len(*m.Target)
		copy(dAtA[i:], *m.Target)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Target)))
		i--
		dAtA[i] = 0x42
	}
	if m.PredictionTimeColumn != nil {
		i -= len(*m.PredictionTimeColumn)
		copy(dAtA[i:], *m.PredictionTimeColumn)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PredictionTimeColumn)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PrimaryKey) > 0 {
		for iNdEx := len(m.PrimaryKey) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrimaryKey[iNdEx])
			copy(dAtA[i:], m.PrimaryKey[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.PrimaryKey[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.FlatFile != nil {
		{
			size, err := m.FlatFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Predictions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.PredictionHistory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Observations.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelClassList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelClassList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelClassList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelClassServingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelClassServingSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelClassServingSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShadowFirst != nil {
		i--
		if *m.ShadowFirst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	{
		size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.BatchPredictionSchedule.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.MonitoringSchedule.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Replicas != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Replicas))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Access.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Dashboard != nil {
		i--
		if *m.Dashboard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Online != nil {
		i--
		if *m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.ServingSiteRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PredictorTemplateName != nil {
		i -= len(*m.PredictorTemplateName)
		copy(dAtA[i:], *m.PredictorTemplateName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PredictorTemplateName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pipeline) > 0 {
		for iNdEx := len(m.Pipeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pipeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModelClassSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelClassSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelClassSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fast != nil {
		i--
		if *m.Fast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	{
		size, err := m.ReportSchedule.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.Notification.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.Serving.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.Training.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.ArtifactLocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Objective != nil {
		i -= len(*m.Objective)
		copy(dAtA[i:], *m.Objective)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Objective)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SubTask != nil {
		i -= len(*m.SubTask)
		copy(dAtA[i:], *m.SubTask)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SubTask)))
		i--
		dAtA[i] = 0x32
	}
	if m.Task != nil {
		i -= len(*m.Task)
		copy(dAtA[i:], *m.Task)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Task)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x18
	if m.DataProductVersionName != nil {
		i -= len(*m.DataProductVersionName)
		copy(dAtA[i:], *m.DataProductVersionName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DataProductVersionName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModelClassStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelClassStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelClassStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb0
	i -= len(m.TriggeredBy)
	copy(dAtA[i:], m.TriggeredBy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TriggeredBy)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if len(m.Shadows) > 0 {
		for iNdEx := len(m.Shadows) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Shadows[iNdEx])
			copy(dAtA[i:], m.Shadows[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Shadows[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.LiveModel != nil {
		i -= len(*m.LiveModel)
		copy(dAtA[i:], *m.LiveModel)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.LiveModel)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	i -= len(m.PredictorName)
	copy(dAtA[i:], m.PredictorName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PredictorName)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if len(m.RetiredModels) > 0 {
		for iNdEx := len(m.RetiredModels) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RetiredModels[iNdEx])
			copy(dAtA[i:], m.RetiredModels[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.RetiredModels[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BestModelScore))))
	i--
	dAtA[i] = 0x79
	i -= len(m.CandidateModel)
	copy(dAtA[i:], m.CandidateModel)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CandidateModel)))
	i--
	dAtA[i] = 0x72
	i -= len(m.Study)
	copy(dAtA[i:], m.Study)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Study)))
	i--
	dAtA[i] = 0x6a
	i -= len(m.Dataset)
	copy(dAtA[i:], m.Dataset)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Dataset)))
	i--
	dAtA[i] = 0x62
	{
		size, err := m.PromotionStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.ReportScheduleStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.MonitoringScheduleStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.PredictionScheduleStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.TrainingScheduleStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.LastTrainingSet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.BestFE != nil {
		{
			size, err := m.BestFE.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.Models))
	i--
	dAtA[i] = 0x10
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelClassTrainingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelClassTrainingSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelClassTrainingSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Aborted != nil {
		i--
		if *m.Aborted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.Trainers != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Trainers))
		i--
		dAtA[i] = 0x70
	}
	if m.MaxModels != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxModels))
		i--
		dAtA[i] = 0x68
	}
	if m.MaxTime != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxTime))
		i--
		dAtA[i] = 0x60
	}
	if m.Paused != nil {
		i--
		if *m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	i -= len(m.Trigger)
	copy(dAtA[i:], m.Trigger)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Trigger)))
	i--
	dAtA[i] = 0x52
	{
		size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.SearchSpace != nil {
		{
			size, err := m.SearchSpace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Retrain != nil {
		i--
		if *m.Retrain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	i -= len(m.PromotionPolicy)
	copy(dAtA[i:], m.PromotionPolicy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PromotionPolicy)))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.ModelImage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.TrainingSchedule.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.ModelUnitTests.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i -= len(m.StudyTemplateName)
	copy(dAtA[i:], m.StudyTemplateName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StudyTemplateName)))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.LabRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x2a
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelGroupByStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelGroupByStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelGroupByStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerResults) > 0 {
		for iNdEx := len(m.WorkerResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkerResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.ForecastsURI)
	copy(dAtA[i:], m.ForecastsURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ForecastsURI)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ProfilesURI)
	copy(dAtA[i:], m.ProfilesURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProfilesURI)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ModelsURI)
	copy(dAtA[i:], m.ModelsURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ModelsURI)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelImageSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelImageSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelImageSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegistryConnection != nil {
		i -= len(*m.RegistryConnection)
		copy(dAtA[i:], *m.RegistryConnection)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.RegistryConnection)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImageName != nil {
		i -= len(*m.ImageName)
		copy(dAtA[i:], *m.ImageName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ImageName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Exist != nil {
		i--
		if *m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModelList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.TrialID))
	i--
	dAtA[i] = 0x28
	i--
	if m.Error {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
	i--
	dAtA[i] = 0x19
	i -= len(m.Alg)
	copy(dAtA[i:], m.Alg)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Alg)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PartitionsLocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xa2
	{
		size, err := m.FeedbackTests.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x9a
	{
		size, err := m.UnitTests.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x92
	{
		size, err := m.Interpretability.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x8a
	if m.Governance != nil {
		{
			size, err := m.Governance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if m.TrialID != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TrialID))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	i -= len(m.ModelClass)
	copy(dAtA[i:], m.ModelClass)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ModelClass)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xf2
	if m.TTL != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TTL))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.EstimatorType != nil {
		i -= len(*m.EstimatorType)
		copy(dAtA[i:], *m.EstimatorType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.EstimatorType)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.ActiveDeadlineSeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ActiveDeadlineSeconds))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.Compilation != nil {
		{
			size, err := m.Compilation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if m.Forecasting != nil {
		{
			size, err := m.Forecasting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.Flagged != nil {
		i--
		if *m.Flagged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.FeedbackDatasetRef != nil {
		{
			size, err := m.FeedbackDatasetRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if m.UnitTested != nil {
		i--
		if *m.UnitTested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.Fast != nil {
		i--
		if *m.Fast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.GenDriftDetector != nil {
		i--
		if *m.GenDriftDetector {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.Baseline != nil {
		i--
		if *m.Baseline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.CodeGenerated != nil {
		i--
		if *m.CodeGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.Explained != nil {
		i--
		if *m.Explained {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.Tuned != nil {
		i--
		if *m.Tuned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.Predicted != nil {
		i--
		if *m.Predicted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.Registered != nil {
		i--
		if *m.Registered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.Released != nil {
		i--
		if *m.Released {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.Forecasted != nil {
		i--
		if *m.Forecasted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.Archived != nil {
		i--
		if *m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.Profiled != nil {
		i--
		if *m.Profiled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.Paused != nil {
		i--
		if *m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.Reported != nil {
		i--
		if *m.Reported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Pushed != nil {
		i--
		if *m.Pushed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Published != nil {
		i--
		if *m.Published {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Packaged != nil {
		i--
		if *m.Packaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Aborted != nil {
		i--
		if *m.Aborted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Tested != nil {
		i--
		if *m.Tested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	{
		size, err := m.Serving.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size, err := m.Training.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.Ensemble.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.NLPEstimator != nil {
		{
			size, err := m.NLPEstimator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Chatbot != nil {
		{
			size, err := m.Chatbot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Dnn != nil {
		{
			size, err := m.Dnn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Estimator != nil {
		{
			size, err := m.Estimator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	{
		size, err := m.FeatureEngineering.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.Objective != nil {
		i -= len(*m.Objective)
		copy(dAtA[i:], *m.Objective)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Objective)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SubTask != nil {
		i -= len(*m.SubTask)
		copy(dAtA[i:], *m.SubTask)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SubTask)))
		i--
		dAtA[i] = 0x42
	}
	if m.Task != nil {
		i -= len(*m.Task)
		copy(dAtA[i:], *m.Task)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Task)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DatasetName != nil {
		i -= len(*m.DatasetName)
		copy(dAtA[i:], *m.DatasetName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DatasetName)))
		i--
		dAtA[i] = 0x32
	}
	if m.StudyName != nil {
		i -= len(*m.StudyName)
		copy(dAtA[i:], *m.StudyName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.StudyName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ModelVersion != nil {
		i -= len(*m.ModelVersion)
		copy(dAtA[i:], *m.ModelVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ModelVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.ModelClassName != nil {
		i -= len(*m.ModelClassName)
		copy(dAtA[i:], *m.ModelClassName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ModelClassName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VersionName != nil {
		i -= len(*m.VersionName)
		copy(dAtA[i:], *m.VersionName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VersionName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModelStageStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelStageStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelStageStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Error)
	copy(dAtA[i:], m.Error)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Error)))
	i--
	dAtA[i] = 0x52
	{
		size, err := m.UnitTestsResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ApprovedAt != nil {
		{
			size, err := m.ApprovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.ApprovedBy)
	copy(dAtA[i:], m.ApprovedBy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ApprovedBy)))
	i--
	dAtA[i] = 0x1a
	i--
	if m.Approved {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModelStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.Stages) > 0 {
		for iNdEx := len(m.Stages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xd2
		}
	}
	{
		size, err := m.GroupBy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xca
	{
		size, err := m.FeedbackTestsResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xc2
	{
		size, err := m.UnitTestsResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xba
	{
		size, err := m.Images.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xb2
	{
		size, err := m.Interpretability.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xaa
	{
		size, err := m.Governance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xa2
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	if len(m.TopCorrelations) > 0 {
		for iNdEx := len(m.TopCorrelations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopCorrelations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.CorrelationsWithTarget) > 0 {
		for iNdEx := len(m.CorrelationsWithTarget) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CorrelationsWithTarget[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0x8a
		}
	}
	{
		size, err := m.TestConfusionMatrix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0x82
	{
		size, err := m.TrainConfusionMatrix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xfa
	{
		size, err := m.PRCurve.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xf2
	{
		size, err := m.RocCurve.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xea
	{
		size, err := m.Logs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xe2
	i -= len(m.EndPoint)
	copy(dAtA[i:], m.EndPoint)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.EndPoint)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xda
	i -= len(m.Team)
	copy(dAtA[i:], m.Team)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Team)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xd2
	i -= len(m.TrainedBy)
	copy(dAtA[i:], m.TrainedBy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TrainedBy)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xca
	{
		size, err := m.TestingResources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xc2
	{
		size, err := m.TrainingResources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xba
	{
		size, err := m.TrainingDataHash.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xb2
	i -= len(m.ImageHash)
	copy(dAtA[i:], m.ImageHash)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ImageHash)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xaa
	i -= len(m.TarFileHash)
	copy(dAtA[i:], m.TarFileHash)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TarFileHash)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xa2
	if m.PredictedAt != nil {
		{
			size, err := m.PredictedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if m.ReleasedAt != nil {
		{
			size, err := m.ReleasedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	i -= len(m.PredictorName)
	copy(dAtA[i:], m.PredictorName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PredictorName)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x8a
	i -= len(m.URL)
	copy(dAtA[i:], m.URL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.URL)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x82
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latency))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xf9
	i = encodeVarintGenerated(dAtA, i, uint64(m.SizeInBytes))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xf0
	i = encodeVarintGenerated(dAtA, i, uint64(m.Progress))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe8
	if m.FailureMessage != nil {
		i -= len(*m.FailureMessage)
		copy(dAtA[i:], *m.FailureMessage)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FailureMessage)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.FailureReason != nil {
		i -= len(*m.FailureReason)
		copy(dAtA[i:], *m.FailureReason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FailureReason)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ValidationRows))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xd0
	i = encodeVarintGenerated(dAtA, i, uint64(m.TestingRows))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc8
	i = encodeVarintGenerated(dAtA, i, uint64(m.TrainingRows))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc0
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb8
	{
		size, err := m.ValidationDataset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb2
	{
		size, err := m.TestDatasetLocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xaa
	{
		size, err := m.TrainDatasetLocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa2
	{
		size, err := m.Runtime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	i -= len(m.ForecastUri)
	copy(dAtA[i:], m.ForecastUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ForecastUri)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x92
	if len(m.PermutationImportance) > 0 {
		for iNdEx := len(m.PermutationImportance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PermutationImportance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.ImpurityImportance) > 0 {
		for iNdEx := len(m.ImpurityImportance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ImpurityImportance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
	}
	i -= len(m.ImageName)
	copy(dAtA[i:], m.ImageName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ImageName)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	i -= len(m.AppUri)
	copy(dAtA[i:], m.AppUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AppUri)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf2
	i -= len(m.TarUri)
	copy(dAtA[i:], m.TarUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TarUri)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	i -= len(m.MisclassificationUri)
	copy(dAtA[i:], m.MisclassificationUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MisclassificationUri)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	i -= len(m.ProfileUri)
	copy(dAtA[i:], m.ProfileUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProfileUri)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	i -= len(m.LogsUri)
	copy(dAtA[i:], m.LogsUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LogsUri)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	i -= len(m.LabelEncoderUri)
	copy(dAtA[i:], m.LabelEncoderUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LabelEncoderUri)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	i -= len(m.WeightsUri)
	copy(dAtA[i:], m.WeightsUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.WeightsUri)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	i -= len(m.ManifestUri)
	copy(dAtA[i:], m.ManifestUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ManifestUri)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	i -= len(m.ReportUri)
	copy(dAtA[i:], m.ReportUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ReportUri)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	i -= len(m.ReportName)
	copy(dAtA[i:], m.ReportName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ReportName)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size, err := m.LastFeedbackDatasetRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if len(m.Feedback) > 0 {
		for iNdEx := len(m.Feedback) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feedback[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Tune) > 0 {
		for iNdEx := len(m.Tune) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tune[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Test) > 0 {
		for iNdEx := len(m.Test) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Test[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.Train) > 0 {
		for iNdEx := len(m.Train) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Train[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.CV) > 0 {
		for iNdEx := len(m.CV) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CV[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	i--
	if m.Best {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Cost))))
	i--
	dAtA[i] = 0x61
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TestScore))))
	i--
	dAtA[i] = 0x59
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TrainingScore))))
	i--
	dAtA[i] = 0x51
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CVScore))))
	i--
	dAtA[i] = 0x49
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TuningEndTime != nil {
		{
			size, err := m.TuningEndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TuningStartTime != nil {
		{
			size, err := m.TuningStartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TestingEndTime != nil {
		{
			size, err := m.TestingEndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TestingStartTime != nil {
		{
			size, err := m.TestingStartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TrainingEndTime != nil {
		{
			size, err := m.TrainingEndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TrainingStartTime != nil {
		{
			size, err := m.TrainingStartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModelTestSuite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelTestSuite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelTestSuite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnitTests.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.DatasetRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BaselineModelRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NLPEstimatorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NLPEstimatorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NLPEstimatorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		i -= len(*m.Base)
		copy(dAtA[i:], *m.Base)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Base)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NNLayerParameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNLayerParameter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NNLayerParameter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Value)
	copy(dAtA[i:], m.Value)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Value)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PartitionModelLocationsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionModelLocationsSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionModelLocationsSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartitionForecastFile != nil {
		i -= len(*m.PartitionForecastFile)
		copy(dAtA[i:], *m.PartitionForecastFile)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PartitionForecastFile)))
		i--
		dAtA[i] = 0x32
	}
	if m.PartitionModelFile != nil {
		i -= len(*m.PartitionModelFile)
		copy(dAtA[i:], *m.PartitionModelFile)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PartitionModelFile)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PartitionModelFolder != nil {
		i -= len(*m.PartitionModelFolder)
		copy(dAtA[i:], *m.PartitionModelFolder)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PartitionModelFolder)))
		i--
		dAtA[i] = 0x22
	}
	if m.PartitionReportFile != nil {
		i -= len(*m.PartitionReportFile)
		copy(dAtA[i:], *m.PartitionReportFile)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PartitionReportFile)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PartitionProfileFolder != nil {
		i -= len(*m.PartitionProfileFolder)
		copy(dAtA[i:], *m.PartitionProfileFolder)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PartitionProfileFolder)))
		i--
		dAtA[i] = 0x12
	}
	if m.PartitionFolder != nil {
		i -= len(*m.PartitionFolder)
		copy(dAtA[i:], *m.PartitionFolder)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PartitionFolder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PercentilePrunerOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PercentilePrunerOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PercentilePrunerOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinTrials != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MinTrials))
		i--
		dAtA[i] = 0x28
	}
	if m.IntervalSteps != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.IntervalSteps))
		i--
		dAtA[i] = 0x20
	}
	if m.WarmupSteps != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.WarmupSteps))
		i--
		dAtA[i] = 0x18
	}
	if m.StartupTrials != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.StartupTrials))
		i--
		dAtA[i] = 0x10
	}
	if m.Percentile != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Percentile))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PipelineStageSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineStageSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineStageSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ServingSiteRef != nil {
		{
			size, err := m.ServingSiteRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Tests.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PromotionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ApprovedBy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Auto != nil {
		i--
		if *m.Auto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PromotedAt != nil {
		{
			size, err := m.PromotedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrunerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrunerSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrunerSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != nil {
		{
			size, err := m.Threshold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Hyperband != nil {
		{
			size, err := m.Hyperband.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Successive != nil {
		{
			size, err := m.Successive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Percentile != nil {
		{
			size, err := m.Percentile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Median != nil {
		{
			size, err := m.Median.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegressionForecasterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegressionForecasterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegressionForecasterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reduction)
	copy(dAtA[i:], m.Reduction)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reduction)))
	i--
	dAtA[i] = 0x5a
	if m.Log != nil {
		i--
		if *m.Log {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.EMA != nil {
		i--
		if *m.EMA {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Functions) > 0 {
		for iNdEx := len(m.Functions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Functions[iNdEx])
			copy(dAtA[i:], m.Functions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Functions[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Lags) > 0 {
		for iNdEx := len(m.Lags) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintGenerated(dAtA, i, uint64(m.Lags[iNdEx]))
			i--
			dAtA[i] = 0x38
		}
	}
	if len(m.Windows) > 0 {
		for iNdEx := len(m.Windows) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintGenerated(dAtA, i, uint64(m.Windows[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if m.Date != nil {
		i--
		if *m.Date {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Scaling != nil {
		i -= len(*m.Scaling)
		copy(dAtA[i:], *m.Scaling)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Scaling)))
		i--
		dAtA[i] = 0x22
	}
	if m.Encoding != nil {
		i -= len(*m.Encoding)
		copy(dAtA[i:], *m.Encoding)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Encoding)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Imputation != nil {
		i -= len(*m.Imputation)
		copy(dAtA[i:], *m.Imputation)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Imputation)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ensemble != nil {
		i--
		if *m.Ensemble {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Report) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Report) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Report) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReportCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x2a
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReportGroupByStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportGroupByStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportGroupByStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerResults) > 0 {
		for iNdEx := len(m.WorkerResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkerResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.ReportsURI)
	copy(dAtA[i:], m.ReportsURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ReportsURI)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReportList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReportSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		for iNdEx := len(m.Key) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Key[iNdEx])
			copy(dAtA[i:], m.Key[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Key[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	{
		size, err := m.LabRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if m.CronReportName != nil {
		i -= len(*m.CronReportName)
		copy(dAtA[i:], *m.CronReportName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.CronReportName)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size, err := m.Custom.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.ActiveDeadlineSeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ActiveDeadlineSeconds))
		i--
		dAtA[i] = 0x58
	}
	{
		size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0x4a
	}
	if m.NotifierName != nil {
		i -= len(*m.NotifierName)
		copy(dAtA[i:], *m.NotifierName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.NotifierName)))
		i--
		dAtA[i] = 0x42
	}
	if m.Format != nil {
		i -= len(*m.Format)
		copy(dAtA[i:], *m.Format)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Format)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ReportType != nil {
		i -= len(*m.ReportType)
		copy(dAtA[i:], *m.ReportType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ReportType)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ModelClassVersion != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ModelClassVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.ModelClassName != nil {
		i -= len(*m.ModelClassName)
		copy(dAtA[i:], *m.ModelClassName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ModelClassName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.EntityRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VersionName != nil {
		i -= len(*m.VersionName)
		copy(dAtA[i:], *m.VersionName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VersionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	{
		size, err := m.GroupBy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.Logs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.FailureMessage != nil {
		i -= len(*m.FailureMessage)
		copy(dAtA[i:], *m.FailureMessage)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FailureMessage)))
		i--
		dAtA[i] = 0x42
	}
	if m.FailureReason != nil {
		i -= len(*m.FailureReason)
		copy(dAtA[i:], *m.FailureReason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FailureReason)))
		i--
		dAtA[i] = 0x3a
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x30
	i -= len(m.URI)
	copy(dAtA[i:], m.URI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.URI)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0x22
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ResourceConsumption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceConsumption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceConsumption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Gpu))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Mem))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Cpu))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *RuntimeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PythonPackages) > 0 {
		keysForPythonPackages := make([]string, 0, len(m.PythonPackages))
		for k := range m.PythonPackages {
			keysForPythonPackages = append(keysForPythonPackages, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForPythonPackages)
		for iNdEx := len(keysForPythonPackages) - 1; iNdEx >= 0; iNdEx-- {
			v := m.PythonPackages[string(keysForPythonPackages[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForPythonPackages[iNdEx])
			copy(dAtA[i:], keysForPythonPackages[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForPythonPackages[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.OS)
	copy(dAtA[i:], m.OS)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OS)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.PythonCMD)
	copy(dAtA[i:], m.PythonCMD)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PythonCMD)))
	i--
	dAtA[i] = 0x12
	i -= len(m.PythonVersion)
	copy(dAtA[i:], m.PythonVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PythonVersion)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SearchSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tune != nil {
		i--
		if *m.Tune {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Objective2 != nil {
		i -= len(*m.Objective2)
		copy(dAtA[i:], *m.Objective2)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Objective2)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Objective != nil {
		i -= len(*m.Objective)
		copy(dAtA[i:], *m.Objective)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Objective)))
		i--
		dAtA[i] = 0x72
	}
	{
		size, err := m.EarlyStop.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.SearchSpace.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.RetainFor != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.RetainFor))
		i--
		dAtA[i] = 0x50
	}
	if m.RetainTop != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.RetainTop))
		i--
		dAtA[i] = 0x48
	}
	if m.Test != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Test))
		i--
		dAtA[i] = 0x40
	}
	if m.Trainers != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Trainers))
		i--
		dAtA[i] = 0x38
	}
	if m.MinBestScore != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MinBestScore))))
		i--
		dAtA[i] = 0x31
	}
	if m.MaxModels != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxModels))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxTime != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxTime))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxCost != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxCost))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Pruner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Sampler != nil {
		i -= len(*m.Sampler)
		copy(dAtA[i:], *m.Sampler)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Sampler)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonalityPeriodSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonalityPeriodSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonalityPeriodSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FourierOrder != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.FourierOrder))
		i--
		dAtA[i] = 0x18
	}
	if m.Auto != nil {
		i--
		if *m.Auto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonalitySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonalitySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonalitySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Daily != nil {
		{
			size, err := m.Daily.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Weekly != nil {
		{
			size, err := m.Weekly.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Monthly != nil {
		{
			size, err := m.Monthly.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Quarterly != nil {
		{
			size, err := m.Quarterly.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Yearly != nil {
		{
			size, err := m.Yearly.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Auto != nil {
		i--
		if *m.Auto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SegmentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OP != nil {
		i -= len(*m.OP)
		copy(dAtA[i:], *m.OP)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.OP)))
		i--
		dAtA[i] = 0x12
	}
	if m.ColumnName != nil {
		i -= len(*m.ColumnName)
		copy(dAtA[i:], *m.ColumnName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ColumnName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServingSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServingSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Format != nil {
		i -= len(*m.Format)
		copy(dAtA[i:], *m.Format)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Format)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Study) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Study) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Study) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StudyCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudyCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudyCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x2a
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StudyGroupByStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudyGroupByStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudyGroupByStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerResults) > 0 {
		for iNdEx := len(m.WorkerResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkerResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.StudiesURI)
	copy(dAtA[i:], m.StudiesURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StudiesURI)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StudyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StudyPhaseStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudyPhaseStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudyPhaseStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.ModelsWithNoProgress))
	i--
	dAtA[i] = 0x40
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BestScore))))
	i--
	dAtA[i] = 0x39
	i = encodeVarintGenerated(dAtA, i, uint64(m.Completed))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.Failed))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.Running))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.Waiting))
	i--
	dAtA[i] = 0x18
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudyScheduleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudyScheduleSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudyScheduleSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartAt != nil {
		{
			size, err := m.StartAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StudySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GroupLocations.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xca
	{
		size, err := m.UnitTestsTemplate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc2
	if m.CodeGenerated != nil {
		i--
		if *m.CodeGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.TimeoutInSecs != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TimeoutInSecs))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.ModelVersion != nil {
		i -= len(*m.ModelVersion)
		copy(dAtA[i:], *m.ModelVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ModelVersion)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.TTL != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TTL))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.GC.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	{
		size, err := m.ModelImage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x92
	{
		size, err := m.Notification.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x8a
	if m.Flagged != nil {
		i--
		if *m.Flagged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.Template != nil {
		i--
		if *m.Template {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	{
		size, err := m.Compilation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf2
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	{
		size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	if m.Fast != nil {
		i--
		if *m.Fast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.ModelExplained != nil {
		i--
		if *m.ModelExplained {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.ModelImagePushed != nil {
		i--
		if *m.ModelImagePushed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.ModelPublished != nil {
		i--
		if *m.ModelPublished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.Profiled != nil {
		i--
		if *m.Profiled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Paused != nil {
		i--
		if *m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Reported != nil {
		i--
		if *m.Reported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Aborted != nil {
		i--
		if *m.Aborted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.DriftDetector.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size, err := m.Interpretability.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size, err := m.FctTemplate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.ServingTemplate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.TrainingTemplate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.Ensembles.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.Search.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.Baseline.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.ImbalanceHandler.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.FESearch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.SubTask != nil {
		i -= len(*m.SubTask)
		copy(dAtA[i:], *m.SubTask)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SubTask)))
		i--
		dAtA[i] = 0x42
	}
	if m.Task != nil {
		i -= len(*m.Task)
		copy(dAtA[i:], *m.Task)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Task)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DatasetName != nil {
		i -= len(*m.DatasetName)
		copy(dAtA[i:], *m.DatasetName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DatasetName)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.LabRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if m.ModelClassVersion != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ModelClassVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.ModelClassName != nil {
		i -= len(*m.ModelClassName)
		copy(dAtA[i:], *m.ModelClassName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ModelClassName)))
		i--
		dAtA[i] = 0x12
	}
	if m.VersionName != nil {
		i -= len(*m.VersionName)
		copy(dAtA[i:], *m.VersionName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VersionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudyStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudyStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	{
		size, err := m.Groupby.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	{
		size, err := m.GC.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x92
	if m.BestFE != nil {
		{
			size, err := m.BestFE.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	{
		size, err := m.DriftDetection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	{
		size, err := m.ExplainStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf2
	{
		size, err := m.TestStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	{
		size, err := m.EnsembleStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	{
		size, err := m.SearchStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	{
		size, err := m.BaselineStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	{
		size, err := m.FeatureEngineeringStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	{
		size, err := m.Logs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	i -= len(m.TriggeredBy)
	copy(dAtA[i:], m.TriggeredBy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TriggeredBy)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size, err := m.TrainingDataHash.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	i = encodeVarintGenerated(dAtA, i, uint64(m.Progress))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa0
	i = encodeVarintGenerated(dAtA, i, uint64(m.ValidationRows))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	i = encodeVarintGenerated(dAtA, i, uint64(m.TestingRows))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	i = encodeVarintGenerated(dAtA, i, uint64(m.TrainingRows))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	if m.FailureMessage != nil {
		i -= len(*m.FailureMessage)
		copy(dAtA[i:], *m.FailureMessage)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FailureMessage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.FailureReason != nil {
		i -= len(*m.FailureReason)
		copy(dAtA[i:], *m.FailureReason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FailureReason)))
		i--
		dAtA[i] = 0x7a
	}
	if m.LastModelID != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.LastModelID))
		i--
		dAtA[i] = 0x70
	}
	{
		size, err := m.ValidationDataset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.TestDatasetLocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.TrainDatasetLocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x50
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.ReportName)
	copy(dAtA[i:], m.ReportName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ReportName)))
	i--
	dAtA[i] = 0x42
	i -= len(m.ReportUri)
	copy(dAtA[i:], m.ReportUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ReportUri)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.ProfileUri)
	copy(dAtA[i:], m.ProfileUri)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProfileUri)))
	i--
	dAtA[i] = 0x32
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BestModelScore))))
	i--
	dAtA[i] = 0x29
	i -= len(m.BestModel)
	copy(dAtA[i:], m.BestModel)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BestModel)))
	i--
	dAtA[i] = 0x22
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Models))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SuccessiveHalvingOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuccessiveHalvingOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuccessiveHalvingOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BootstrapCount != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.BootstrapCount))
		i--
		dAtA[i] = 0x20
	}
	if m.MinEarlyStoppingRate != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MinEarlyStoppingRate))
		i--
		dAtA[i] = 0x18
	}
	if m.ReductionFactor != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ReductionFactor))
		i--
		dAtA[i] = 0x10
	}
	if m.MinResources != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MinResources))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SuccessiveHalvingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuccessiveHalvingSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuccessiveHalvingSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Modality != nil {
		i -= len(*m.Modality)
		copy(dAtA[i:], *m.Modality)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Modality)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.ConfID != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ConfID))
		i--
		dAtA[i] = 0x20
	}
	if m.Rung != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Rung))
		i--
		dAtA[i] = 0x18
	}
	if m.Bracket != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Bracket))
		i--
		dAtA[i] = 0x10
	}
	if m.Budget != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Budget))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TextPipelineSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextPipelineSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextPipelineSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSvdComponents != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxSvdComponents))
		i--
		dAtA[i] = 0x48
	}
	if m.Svd != nil {
		i--
		if *m.Svd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Embedding != nil {
		i -= len(*m.Embedding)
		copy(dAtA[i:], *m.Embedding)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Embedding)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Stem != nil {
		i--
		if *m.Stem {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Lemma != nil {
		i--
		if *m.Lemma {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Pos != nil {
		i--
		if *m.Pos {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.StopWords != nil {
		i--
		if *m.StopWords {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Tokenizer != nil {
		i -= len(*m.Tokenizer)
		copy(dAtA[i:], *m.Tokenizer)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Tokenizer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Encoder != nil {
		i -= len(*m.Encoder)
		copy(dAtA[i:], *m.Encoder)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Encoder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThresholdPrunerOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThresholdPrunerOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThresholdPrunerOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IntervalSteps != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.IntervalSteps))
		i--
		dAtA[i] = 0x20
	}
	if m.WarmupSteps != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.WarmupSteps))
		i--
		dAtA[i] = 0x18
	}
	if m.Upper != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Upper))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lower != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Lower))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *TimeSeriesEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeSeriesEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeSeriesEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimePoints) > 0 {
		for iNdEx := len(m.TimePoints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TimePoints[iNdEx])
			copy(dAtA[i:], m.TimePoints[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.TimePoints[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.PostEvent != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.PostEvent))
		i--
		dAtA[i] = 0x30
	}
	if m.PreEvent != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.PreEvent))
		i--
		dAtA[i] = 0x28
	}
	i -= len(m.Country)
	copy(dAtA[i:], m.Country)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Country)))
	i--
	dAtA[i] = 0x22
	if m.Holiday != nil {
		i--
		if *m.Holiday {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	i -= len(m.Method)
	copy(dAtA[i:], m.Method)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Method)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TrainingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainingSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrainingSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutInSecs != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TimeoutInSecs))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.LogLevel != nil {
		i -= len(*m.LogLevel)
		copy(dAtA[i:], *m.LogLevel)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.LogLevel)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	{
		size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if m.SamplePct != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.SamplePct))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.NodeCount != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.NodeCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.FeatureImportance != nil {
		i--
		if *m.FeatureImportance {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.Distributed != nil {
		i--
		if *m.Distributed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.Gpu != nil {
		i--
		if *m.Gpu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	{
		size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.Seed != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Seed))))
		i--
		dAtA[i] = 0x59
	}
	if m.SH != nil {
		{
			size, err := m.SH.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.EvalMetrics) > 0 {
		for iNdEx := len(m.EvalMetrics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EvalMetrics[iNdEx])
			copy(dAtA[i:], m.EvalMetrics[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.EvalMetrics[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.Split.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Folds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Folds))
		i--
		dAtA[i] = 0x28
	}
	if m.CV != nil {
		i--
		if *m.CV {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CvType != nil {
		i -= len(*m.CvType)
		copy(dAtA[i:], *m.CvType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.CvType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Priority != nil {
		i -= len(*m.Priority)
		copy(dAtA[i:], *m.Priority)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Priority)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.LabRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UnivariateForecastStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnivariateForecastStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnivariateForecastStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ForecastURI)
	copy(dAtA[i:], m.ForecastURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ForecastURI)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.CVResultURI)
	copy(dAtA[i:], m.CVResultURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CVResultURI)))
	i--
	dAtA[i] = 0x22
	i -= len(m.ModelURI)
	copy(dAtA[i:], m.ModelURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ModelURI)))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.BestEstimator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.GridSearchResultURI)
	copy(dAtA[i:], m.GridSearchResultURI)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.GridSearchResultURI)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VideoPipelineSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoPipelineSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoPipelineSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Featurizer != nil {
		i -= len(*m.Featurizer)
		copy(dAtA[i:], *m.Featurizer)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Featurizer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WindowSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WindowSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WindowSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Length))
		i--
		dAtA[i] = 0x18
	}
	if m.Start != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Start))
		i--
		dAtA[i] = 0x10
	}
	if m.Interval != nil {
		i -= len(*m.Interval)
		copy(dAtA[i:], *m.Interval)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Interval)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AlgorithmParameterRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Ranges) > 0 {
		for _, e := range m.Ranges {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AlgorithmSearchSpaceSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Include) > 0 {
		for _, s := range m.Include {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Exclude) > 0 {
		for _, s := range m.Exclude {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Custom) > 0 {
		for _, e := range m.Custom {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *Anomaly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ValueColumn)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AdjDeltaColumn)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Start)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.End)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AudioPipelineSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Featurizer != nil {
		l = len(*m.Featurizer)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *BacktestSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sliding != nil {
		n += 2
	}
	if m.Splits != nil {
		n += 1 + sovGenerated(uint64(*m.Splits))
	}
	if m.Initial != nil {
		n += 1 + sovGenerated(uint64(*m.Initial))
	}
	if m.Gap != nil {
		n += 1 + sovGenerated(uint64(*m.Gap))
	}
	return n
}

func (m *BaselineSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	if len(m.Baselines) > 0 {
		for _, s := range m.Baselines {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.All != nil {
		n += 2
	}
	return n
}

func (m *ChangePoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChatbotEstimatorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = len(*m.Base)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *CheckpointSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	if m.CheckpointInterval != nil {
		n += 1 + sovGenerated(uint64(*m.CheckpointInterval))
	}
	l = m.Location.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClassicalEstimatorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AlgorithmName)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *CustomReportSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *DataHashes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TrainingHash)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TestingHash)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ValidationHash)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *DataSplitSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != nil {
		l = len(*m.Method)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Train != nil {
		n += 1 + sovGenerated(uint64(*m.Train))
	}
	if m.Validation != nil {
		n += 1 + sovGenerated(uint64(*m.Validation))
	}
	if m.Test != nil {
		n += 1 + sovGenerated(uint64(*m.Test))
	}
	if m.SplitColumn != nil {
		l = len(*m.SplitColumn)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.TrainDatasetName != nil {
		l = len(*m.TrainDatasetName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TestDatasetName != nil {
		l = len(*m.TestDatasetName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ValidationDatasetName != nil {
		l = len(*m.ValidationDatasetName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *DeepEstimatorLayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.InputLayers) > 0 {
		for _, s := range m.InputLayers {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *DeepEstimatorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Layers) > 0 {
		for _, e := range m.Layers {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.BatchSize != nil {
		n += 1 + sovGenerated(uint64(*m.BatchSize))
	}
	if m.Epochs != nil {
		n += 1 + sovGenerated(uint64(*m.Epochs))
	}
	if m.ValidationSplit != nil {
		n += 1 + sovGenerated(uint64(*m.ValidationSplit))
	}
	if m.Seq != nil {
		n += 2
	}
	if m.Gpus != nil {
		n += 1 + sovGenerated(uint64(*m.Gpus))
	}
	l = len(m.Loss)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *DriftDetectorStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutlierModelURI)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *DriftModelSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	l = len(m.OutlierAlgorithm)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *EarlyStopSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	if m.Initial != nil {
		n += 1 + sovGenerated(uint64(*m.Initial))
	}
	if m.MinModelsWithNoProgress != nil {
		n += 1 + sovGenerated(uint64(*m.MinModelsWithNoProgress))
	}
	return n
}

func (m *EnsembleRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EnsembleSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Models) > 0 {
		for _, s := range m.Models {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Estimators) > 0 {
		for _, e := range m.Estimators {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Final != nil {
		l = m.Final.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EnsemblesSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	if m.VotingEnsemble != nil {
		n += 2
	}
	if m.StackingEnsemble != nil {
		n += 2
	}
	if m.Top != nil {
		n += 1 + sovGenerated(uint64(*m.Top))
	}
	return n
}

func (m *EntityRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Exclude) > 0 {
		for _, s := range m.Exclude {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *EvalMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Selection)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Reporting) > 0 {
		for _, s := range m.Reporting {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.AggFunc != nil {
		l = len(*m.AggFunc)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.AggPeriod != nil {
		n += 1 + sovGenerated(uint64(*m.AggPeriod))
	}
	if m.NullModelParams != nil {
		l = len(*m.NullModelParams)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RelErrTolerance != nil {
		n += 9
	}
	return n
}

func (m *EvalPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestHorizon != nil {
		n += 1 + sovGenerated(uint64(*m.TestHorizon))
	}
	if m.PeriodsBetweenTrainTest != nil {
		n += 1 + sovGenerated(uint64(*m.PeriodsBetweenTrainTest))
	}
	if m.CvPeriodsBetweenSplits != nil {
		n += 1 + sovGenerated(uint64(*m.CvPeriodsBetweenSplits))
	}
	if m.CvExpandingWindows != nil {
		n += 2
	}
	if m.CvHorizon != nil {
		n += 1 + sovGenerated(uint64(*m.CvHorizon))
	}
	if m.CvMinTrainPeriods != nil {
		n += 1 + sovGenerated(uint64(*m.CvMinTrainPeriods))
	}
	if m.CvMaxSplits != nil {
		n += 1 + sovGenerated(uint64(*m.CvMaxSplits))
	}
	if m.CvUseMostRecentSplits != nil {
		n += 2
	}
	return n
}

func (m *FeatureEngineeringPipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DataType)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Imputation != nil {
		l = len(*m.Imputation)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Encoding != nil {
		l = len(*m.Encoding)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Scaling != nil {
		l = len(*m.Scaling)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Discretisation != nil {
		l = len(*m.Discretisation)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.VariableTransformation != nil {
		l = len(*m.VariableTransformation)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.OutlierHandling != nil {
		l = len(*m.OutlierHandling)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DatetimeTransformation != nil {
		l = len(*m.DatetimeTransformation)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Video != nil {
		l = m.Video.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Generated) > 0 {
		for _, e := range m.Generated {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Custom) > 0 {
		for _, e := range m.Custom {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if m.Drop != nil {
		n += 3
	}
	if m.Passthrough != nil {
		n += 3
	}
	return n
}

func (m *FeatureEngineeringSearchSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	if m.ImbalanceHandler != nil {
		l = len(*m.ImbalanceHandler)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Estimator != nil {
		l = len(*m.Estimator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.MaxModels != nil {
		n += 1 + sovGenerated(uint64(*m.MaxModels))
	}
	if m.MaxTimeSec != nil {
		n += 1 + sovGenerated(uint64(*m.MaxTimeSec))
	}
	if m.MaxTrainers != nil {
		n += 1 + sovGenerated(uint64(*m.MaxTrainers))
	}
	if m.SamplePct != nil {
		n += 1 + sovGenerated(uint64(*m.SamplePct))
	}
	if m.AutoRemove != nil {
		n += 2
	}
	if m.Reuse != nil {
		n += 2
	}
	l = m.FSelection.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.EarlyStop.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FeatureEngineeringSearchStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Best.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FeatureEngineeringSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pipelines) > 0 {
		for _, e := range m.Pipelines {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Imbalance != nil {
		l = len(*m.Imbalance)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.FeatureSelection.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FeatureImportance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Feature)
	n += 1 + l + sovGenerated(uint64(l))
	n += 9
	return n
}

func (m *FeatureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	n += 9
	return n
}

func (m *FeaturePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.X)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Y)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FeatureSelectionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	if m.Embedding != nil {
		n += 2
	}
	if m.Filter != nil {
		n += 2
	}
	if m.Wrapper != nil {
		n += 2
	}
	if len(m.Pipeline) > 0 {
		for _, s := range m.Pipeline {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.VarThreshold != nil {
		n += 1 + sovGenerated(uint64(*m.VarThreshold))
	}
	if m.CorrThreshold != nil {
		n += 1 + sovGenerated(uint64(*m.CorrThreshold))
	}
	if m.MaxFeatures != nil {
		n += 1 + sovGenerated(uint64(*m.MaxFeatures))
	}
	if m.Percentile != nil {
		n += 1 + sovGenerated(uint64(*m.Percentile))
	}
	if len(m.Reserved) > 0 {
		for _, s := range m.Reserved {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ForecasterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.Past.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Future.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Forecast != nil {
		n += 2
	}
	if m.Coverage != nil {
		n += 9
	}
	l = m.OutputLocation.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Features) > 0 {
		for _, s := range m.Features {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, s := range m.Groups {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.PredefinedTemplate)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Anomalies) > 0 {
		for _, e := range m.Anomalies {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.TrainEndDate)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ValueColumn)
	n += 1 + l + sovGenerated(uint64(l))
	if m.HPOBudget != nil {
		n += 1 + sovGenerated(uint64(*m.HPOBudget))
	}
	l = m.EvalMetrics.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.EvalPeriod.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Seasonality.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.Regressors) > 0 {
		for _, s := range m.Regressors {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.LaggedRegressors) > 0 {
		for _, s := range m.LaggedRegressors {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.Growth)
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.Key) > 0 {
		for _, s := range m.Key {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Estimators) > 0 {
		for _, s := range m.Estimators {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if m.HTS != nil {
		l = len(*m.HTS)
		n += 2 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *GarbageCollectionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectAtStudyEnd != nil {
		n += 2
	}
	if m.KeepOnlyBestModelPerAlgorithm != nil {
		n += 2
	}
	if m.KeepPrunedModel != nil {
		n += 2
	}
	return n
}

func (m *GarbageCollectionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Collected))
	if len(m.Models) > 0 {
		for _, e := range m.Models {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *GeneratedColumnSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.DataType)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.First)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Second)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Expression)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GroupSplitLocationsSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupTrainingFile != nil {
		l = len(*m.GroupTrainingFile)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.GroupTestingFile != nil {
		l = len(*m.GroupTestingFile)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *HyperParameterValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Value)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *HyperbandOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinResources != nil {
		n += 1 + sovGenerated(uint64(*m.MinResources))
	}
	if m.MaxResources != nil {
		n += 1 + sovGenerated(uint64(*m.MaxResources))
	}
	if m.ReductionFactor != nil {
		n += 1 + sovGenerated(uint64(*m.ReductionFactor))
	}
	if m.BootstrapCount != nil {
		n += 1 + sovGenerated(uint64(*m.BootstrapCount))
	}
	return n
}

func (m *ImagePipelineSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Featurizer != nil {
		l = len(*m.Featurizer)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ImbalanceHandlingSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	if m.Imbalance != nil {
		l = len(*m.Imbalance)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *InterpretabilitySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ICE != nil {
		n += 2
	}
	if len(m.ICEPairs) > 0 {
		for _, e := range m.ICEPairs {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Lime != nil {
		n += 2
	}
	if m.Shap != nil {
		l = len(*m.Shap)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.ShapPairs) > 0 {
		for _, e := range m.ShapPairs {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.CounterFactual != nil {
		n += 2
	}
	if m.Anchor != nil {
		n += 2
	}
	return n
}

func (m *InterpretabilityStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.ExplainerURI)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TrainShapValuesURI)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TestShapValuesURI)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Importance) > 0 {
		for _, e := range m.Importance {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *Level) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Index) > 0 {
		for _, s := range m.Index {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Horizon != nil {
		n += 1 + sovGenerated(uint64(*m.Horizon))
	}
	if m.Freq != nil {
		l = len(*m.Freq)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Aggregate != nil {
		l = len(*m.Aggregate)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *MedianPrunerOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartupTrials != nil {
		n += 1 + sovGenerated(uint64(*m.StartupTrials))
	}
	if m.WarmupSteps != nil {
		n += 1 + sovGenerated(uint64(*m.WarmupSteps))
	}
	if m.IntervalSteps != nil {
		n += 1 + sovGenerated(uint64(*m.IntervalSteps))
	}
	if m.MinTrials != nil {
		n += 1 + sovGenerated(uint64(*m.MinTrials))
	}
	return n
}

func (m *Model) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ModelClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ModelClassCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ModelClassDataSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Observations.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.PredictionHistory.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Predictions.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Schema.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.FlatFile != nil {
		l = m.FlatFile.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.PrimaryKey) > 0 {
		for _, s := range m.PrimaryKey {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.PredictionTimeColumn != nil {
		l = len(*m.PredictionTimeColumn)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Target != nil {
		l = len(*m.Target)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Tests.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ModelClassList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ModelClassServingSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pipeline) > 0 {
		for _, e := range m.Pipeline {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.PredictorTemplateName != nil {
		l = len(*m.PredictorTemplateName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.ServingSiteRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Online != nil {
		n += 2
	}
	if m.Dashboard != nil {
		n += 2
	}
	l = m.Access.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Replicas != nil {
		n += 1 + sovGenerated(uint64(*m.Replicas))
	}
	l = m.MonitoringSchedule.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.BatchPredictionSchedule.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Resources.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ShadowFirst != nil {
		n += 2
	}
	return n
}

func (m *ModelClassSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DataProductVersionName != nil {
		l = len(*m.DataProductVersionName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 1 + sovGenerated(uint64(m.Version))
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Task != nil {
		l = len(*m.Task)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SubTask != nil {
		l = len(*m.SubTask)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Objective != nil {
		l = len(*m.Objective)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.ArtifactLocation.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Training.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Serving.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Notification.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ReportSchedule.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Fast != nil {
		n += 2
	}
	return n
}

func (m *ModelClassStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Models))
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.BestFE != nil {
		l = m.BestFE.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.LastTrainingSet.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.TrainingScheduleStatus.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.PredictionScheduleStatus.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.MonitoringScheduleStatus.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ReportScheduleStatus.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.PromotionStatus.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Dataset)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Study)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CandidateModel)
	n += 1 + l + sovGenerated(uint64(l))
	n += 9
	if len(m.RetiredModels) > 0 {
		for _, s := range m.RetiredModels {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.PredictorName)
	n += 2 + l + sovGenerated(uint64(l))
	if m.LiveModel != nil {
		l = len(*m.LiveModel)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if len(m.Shadows) > 0 {
		for _, s := range m.Shadows {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.TriggeredBy)
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.Version))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ModelClassTrainingSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LabRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.StudyTemplateName)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ModelUnitTests.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.TrainingSchedule.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ModelImage.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PromotionPolicy)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Retrain != nil {
		n += 2
	}
	if m.SearchSpace != nil {
		l = m.SearchSpace.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Resources.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Trigger)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Paused != nil {
		n += 2
	}
	if m.MaxTime != nil {
		n += 1 + sovGenerated(uint64(*m.MaxTime))
	}
	if m.MaxModels != nil {
		n += 1 + sovGenerated(uint64(*m.MaxModels))
	}
	if m.Trainers != nil {
		n += 1 + sovGenerated(uint64(*m.Trainers))
	}
	if m.Aborted != nil {
		n += 2
	}
	return n
}

func (m *ModelCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ModelGroupByStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModelsURI)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProfilesURI)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ForecastsURI)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.WorkerResults) > 0 {
		for _, e := range m.WorkerResults {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ModelImageSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist != nil {
		n += 2
	}
	if m.ImageName != nil {
		l = len(*m.ImageName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RegistryConnection != nil {
		l = len(*m.RegistryConnection)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ModelList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ModelResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Alg)
	n += 1 + l + sovGenerated(uint64(l))
	n += 9
	n += 2
	n += 1 + sovGenerated(uint64(m.TrialID))
	return n
}

func (m *ModelSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.VersionName != nil {
		l = len(*m.VersionName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ModelClassName != nil {
		l = len(*m.ModelClassName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ModelVersion != nil {
		l = len(*m.ModelVersion)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StudyName != nil {
		l = len(*m.StudyName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DatasetName != nil {
		l = len(*m.DatasetName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Task != nil {
		l = len(*m.Task)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SubTask != nil {
		l = len(*m.SubTask)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Objective != nil {
		l = len(*m.Objective)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.FeatureEngineering.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Estimator != nil {
		l = m.Estimator.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Dnn != nil {
		l = m.Dnn.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Chatbot != nil {
		l = m.Chatbot.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NLPEstimator != nil {
		l = m.NLPEstimator.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Ensemble.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Training.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Serving.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if m.Tested != nil {
		n += 3
	}
	if m.Aborted != nil {
		n += 3
	}
	if m.Packaged != nil {
		n += 3
	}
	if m.Published != nil {
		n += 3
	}
	if m.Pushed != nil {
		n += 3
	}
	if m.Reported != nil {
		n += 3
	}
	if m.Paused != nil {
		n += 3
	}
	if m.Profiled != nil {
		n += 3
	}
	if m.Archived != nil {
		n += 3
	}
	if m.Forecasted != nil {
		n += 3
	}
	if m.Released != nil {
		n += 3
	}
	if m.Registered != nil {
		n += 3
	}
	if m.Predicted != nil {
		n += 3
	}
	if m.Tuned != nil {
		n += 3
	}
	if m.Explained != nil {
		n += 3
	}
	if m.CodeGenerated != nil {
		n += 3
	}
	if m.Baseline != nil {
		n += 3
	}
	if m.GenDriftDetector != nil {
		n += 3
	}
	if m.Fast != nil {
		n += 3
	}
	if m.UnitTested != nil {
		n += 3
	}
	if m.FeedbackDatasetRef != nil {
		l = m.FeedbackDatasetRef.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.Flagged != nil {
		n += 3
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.Forecasting != nil {
		l = m.Forecasting.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.Compilation != nil {
		l = m.Compilation.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.ActiveDeadlineSeconds != nil {
		n += 2 + sovGenerated(uint64(*m.ActiveDeadlineSeconds))
	}
	if m.EstimatorType != nil {
		l = len(*m.EstimatorType)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.TTL != nil {
		n += 2 + sovGenerated(uint64(*m.TTL))
	}
	l = len(m.ModelClass)
	n += 2 + l + sovGenerated(uint64(l))
	if m.TrialID != nil {
		n += 2 + sovGenerated(uint64(*m.TrialID))
	}
	if m.Governance != nil {
		l = m.Governance.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.Interpretability.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.UnitTests.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.FeedbackTests.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.PartitionsLocation.Size()
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *ModelStageStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.ApprovedBy)
	n += 1 + l + sovGenerated(uint64(l))
	if m.ApprovedAt != nil {
		l = m.ApprovedAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.UnitTestsResult.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Error)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ModelStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TrainingStartTime != nil {
		l = m.TrainingStartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TrainingEndTime != nil {
		l = m.TrainingEndTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TestingStartTime != nil {
		l = m.TestingStartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TestingEndTime != nil {
		l = m.TestingEndTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TuningStartTime != nil {
		l = m.TuningStartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TuningEndTime != nil {
		l = m.TuningEndTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 9
	n += 9
	n += 9
	n += 9
	n += 2
	if len(m.CV) > 0 {
		for _, e := range m.CV {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Train) > 0 {
		for _, e := range m.Train {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Test) > 0 {
		for _, e := range m.Test {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Tune) > 0 {
		for _, e := range m.Tune {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Feedback) > 0 {
		for _, e := range m.Feedback {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	l = m.LastFeedbackDatasetRef.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Phase)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ReportName)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ReportUri)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ManifestUri)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.WeightsUri)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.LabelEncoderUri)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.LogsUri)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ProfileUri)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MisclassificationUri)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.TarUri)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.AppUri)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ImageName)
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.ImpurityImportance) > 0 {
		for _, e := range m.ImpurityImportance {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.PermutationImportance) > 0 {
		for _, e := range m.PermutationImportance {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.ForecastUri)
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Runtime.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.TrainDatasetLocation.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.TestDatasetLocation.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.ValidationDataset.Size()
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.ObservedGeneration))
	n += 2 + sovGenerated(uint64(m.TrainingRows))
	n += 2 + sovGenerated(uint64(m.TestingRows))
	n += 2 + sovGenerated(uint64(m.ValidationRows))
	if m.FailureReason != nil {
		l = len(*m.FailureReason)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.FailureMessage != nil {
		l = len(*m.FailureMessage)
		n += 2 + l + sovGenerated(uint64(l))
	}
	n += 2 + sovGenerated(uint64(m.Progress))
	n += 2 + sovGenerated(uint64(m.SizeInBytes))
	n += 10
	l = len(m.URL)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.PredictorName)
	n += 2 + l + sovGenerated(uint64(l))
	if m.ReleasedAt != nil {
		l = m.ReleasedAt.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.PredictedAt != nil {
		l = m.PredictedAt.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.TarFileHash)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ImageHash)
	n += 2 + l + sovGenerated(uint64(l))
	l = m.TrainingDataHash.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.TrainingResources.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.TestingResources.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.TrainedBy)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Team)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.EndPoint)
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Logs.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.RocCurve.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.PRCurve.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.TrainConfusionMatrix.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.TestConfusionMatrix.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.CorrelationsWithTarget) > 0 {
		for _, e := range m.CorrelationsWithTarget {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.TopCorrelations) > 0 {
		for _, e := range m.TopCorrelations {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.Governance.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Interpretability.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Images.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.UnitTestsResult.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.FeedbackTestsResult.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.GroupBy.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.Stages) > 0 {
		for _, e := range m.Stages {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ModelTestSuite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaselineModelRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.DatasetRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.UnitTests.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NLPEstimatorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = len(*m.Base)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NNLayerParameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Value)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PartitionModelLocationsSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionFolder != nil {
		l = len(*m.PartitionFolder)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.PartitionProfileFolder != nil {
		l = len(*m.PartitionProfileFolder)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.PartitionReportFile != nil {
		l = len(*m.PartitionReportFile)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.PartitionModelFolder != nil {
		l = len(*m.PartitionModelFolder)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.PartitionModelFile != nil {
		l = len(*m.PartitionModelFile)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.PartitionForecastFile != nil {
		l = len(*m.PartitionForecastFile)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PercentilePrunerOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Percentile != nil {
		n += 1 + sovGenerated(uint64(*m.Percentile))
	}
	if m.StartupTrials != nil {
		n += 1 + sovGenerated(uint64(*m.StartupTrials))
	}
	if m.WarmupSteps != nil {
		n += 1 + sovGenerated(uint64(*m.WarmupSteps))
	}
	if m.IntervalSteps != nil {
		n += 1 + sovGenerated(uint64(*m.IntervalSteps))
	}
	if m.MinTrials != nil {
		n += 1 + sovGenerated(uint64(*m.MinTrials))
	}
	return n
}

func (m *PipelineStageSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Tests.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ServingSiteRef != nil {
		l = m.ServingSiteRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PromotionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PromotedAt != nil {
		l = m.PromotedAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Auto != nil {
		n += 2
	}
	l = m.ApprovedBy.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PrunerSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Median != nil {
		l = m.Median.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Percentile != nil {
		l = m.Percentile.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Successive != nil {
		l = m.Successive.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Hyperband != nil {
		l = m.Hyperband.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Threshold != nil {
		l = m.Threshold.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *RegressionForecasterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ensemble != nil {
		n += 2
	}
	if m.Imputation != nil {
		l = len(*m.Imputation)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Encoding != nil {
		l = len(*m.Encoding)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Scaling != nil {
		l = len(*m.Scaling)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Date != nil {
		n += 2
	}
	if len(m.Windows) > 0 {
		for _, e := range m.Windows {
			n += 1 + sovGenerated(uint64(e))
		}
	}
	if len(m.Lags) > 0 {
		for _, e := range m.Lags {
			n += 1 + sovGenerated(uint64(e))
		}
	}
	if len(m.Functions) > 0 {
		for _, s := range m.Functions {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.EMA != nil {
		n += 2
	}
	if m.Log != nil {
		n += 2
	}
	l = len(m.Reduction)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Report) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ReportCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ReportGroupByStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReportsURI)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.WorkerResults) > 0 {
		for _, e := range m.WorkerResults {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ReportList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ReportSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VersionName != nil {
		l = len(*m.VersionName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.EntityRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ModelClassName != nil {
		l = len(*m.ModelClassName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ModelClassVersion != nil {
		n += 1 + sovGenerated(uint64(*m.ModelClassVersion))
	}
	l = m.Location.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ReportType != nil {
		l = len(*m.ReportType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Format != nil {
		l = len(*m.Format)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NotifierName != nil {
		l = len(*m.NotifierName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Resources.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ActiveDeadlineSeconds != nil {
		n += 1 + sovGenerated(uint64(*m.ActiveDeadlineSeconds))
	}
	l = m.Custom.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.CronReportName != nil {
		l = len(*m.CronReportName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.LabRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Key) > 0 {
		for _, s := range m.Key {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ReportStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.URI)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if m.FailureReason != nil {
		l = len(*m.FailureReason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FailureMessage != nil {
		l = len(*m.FailureMessage)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Logs.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.GroupBy.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ResourceConsumption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	return n
}

func (m *RuntimeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PythonVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PythonCMD)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.OS)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.PythonPackages) > 0 {
		for k, v := range m.PythonPackages {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SearchSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sampler != nil {
		l = len(*m.Sampler)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Pruner.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.MaxCost != nil {
		n += 1 + sovGenerated(uint64(*m.MaxCost))
	}
	if m.MaxTime != nil {
		n += 1 + sovGenerated(uint64(*m.MaxTime))
	}
	if m.MaxModels != nil {
		n += 1 + sovGenerated(uint64(*m.MaxModels))
	}
	if m.MinBestScore != nil {
		n += 9
	}
	if m.Trainers != nil {
		n += 1 + sovGenerated(uint64(*m.Trainers))
	}
	if m.Test != nil {
		n += 1 + sovGenerated(uint64(*m.Test))
	}
	if m.RetainTop != nil {
		n += 1 + sovGenerated(uint64(*m.RetainTop))
	}
	if m.RetainFor != nil {
		n += 1 + sovGenerated(uint64(*m.RetainFor))
	}
	l = m.SearchSpace.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.EarlyStop.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Objective != nil {
		l = len(*m.Objective)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Objective2 != nil {
		l = len(*m.Objective2)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Tune != nil {
		n += 3
	}
	return n
}

func (m *SeasonalityPeriodSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	if m.Auto != nil {
		n += 2
	}
	if m.FourierOrder != nil {
		n += 1 + sovGenerated(uint64(*m.FourierOrder))
	}
	return n
}

func (m *SeasonalitySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auto != nil {
		n += 2
	}
	if m.Yearly != nil {
		l = m.Yearly.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Quarterly != nil {
		l = m.Quarterly.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Monthly != nil {
		l = m.Monthly.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Weekly != nil {
		l = m.Weekly.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Daily != nil {
		l = m.Daily.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SegmentSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ColumnName != nil {
		l = len(*m.ColumnName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.OP != nil {
		l = len(*m.OP)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ServingSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Resources.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Format != nil {
		l = len(*m.Format)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *Study) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *StudyCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *StudyGroupByStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudiesURI)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.WorkerResults) > 0 {
		for _, e := range m.WorkerResults {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *StudyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *StudyPhaseStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 1 + sovGenerated(uint64(m.Waiting))
	n += 1 + sovGenerated(uint64(m.Running))
	n += 1 + sovGenerated(uint64(m.Failed))
	n += 1 + sovGenerated(uint64(m.Completed))
	n += 9
	n += 1 + sovGenerated(uint64(m.ModelsWithNoProgress))
	return n
}

func (m *StudyScheduleSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	if m.StartAt != nil {
		l = m.StartAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *StudySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VersionName != nil {
		l = len(*m.VersionName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ModelClassName != nil {
		l = len(*m.ModelClassName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ModelClassVersion != nil {
		n += 1 + sovGenerated(uint64(*m.ModelClassVersion))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.LabRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.DatasetName != nil {
		l = len(*m.DatasetName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Task != nil {
		l = len(*m.Task)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SubTask != nil {
		l = len(*m.SubTask)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.FESearch.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ImbalanceHandler.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Baseline.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Search.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Ensembles.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.TrainingTemplate.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ServingTemplate.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.FctTemplate.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Schedule.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Interpretability.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.DriftDetector.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if m.Aborted != nil {
		n += 3
	}
	if m.Reported != nil {
		n += 3
	}
	if m.Paused != nil {
		n += 3
	}
	if m.Profiled != nil {
		n += 3
	}
	if m.ModelPublished != nil {
		n += 3
	}
	if m.ModelImagePushed != nil {
		n += 3
	}
	if m.ModelExplained != nil {
		n += 3
	}
	if m.Fast != nil {
		n += 3
	}
	l = m.Location.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.Compilation.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if m.Template != nil {
		n += 3
	}
	if m.Flagged != nil {
		n += 3
	}
	l = m.Notification.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.ModelImage.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.GC.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if m.TTL != nil {
		n += 2 + sovGenerated(uint64(*m.TTL))
	}
	if m.ModelVersion != nil {
		l = len(*m.ModelVersion)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.TimeoutInSecs != nil {
		n += 2 + sovGenerated(uint64(*m.TimeoutInSecs))
	}
	if m.CodeGenerated != nil {
		n += 3
	}
	l = m.UnitTestsTemplate.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.GroupLocations.Size()
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *StudyStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Models))
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.BestModel)
	n += 1 + l + sovGenerated(uint64(l))
	n += 9
	l = len(m.ProfileUri)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ReportUri)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ReportName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	l = m.TrainDatasetLocation.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.TestDatasetLocation.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ValidationDataset.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.LastModelID != nil {
		n += 1 + sovGenerated(uint64(*m.LastModelID))
	}
	if m.FailureReason != nil {
		l = len(*m.FailureReason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FailureMessage != nil {
		l = len(*m.FailureMessage)
		n += 2 + l + sovGenerated(uint64(l))
	}
	n += 2 + sovGenerated(uint64(m.TrainingRows))
	n += 2 + sovGenerated(uint64(m.TestingRows))
	n += 2 + sovGenerated(uint64(m.ValidationRows))
	n += 2 + sovGenerated(uint64(m.Progress))
	l = m.TrainingDataHash.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.TriggeredBy)
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Logs.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.FeatureEngineeringStatus.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.BaselineStatus.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.SearchStatus.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.EnsembleStatus.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.TestStatus.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.ExplainStatus.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.DriftDetection.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.BestFE != nil {
		l = m.BestFE.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.GC.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Groupby.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *SuccessiveHalvingOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinResources != nil {
		n += 1 + sovGenerated(uint64(*m.MinResources))
	}
	if m.ReductionFactor != nil {
		n += 1 + sovGenerated(uint64(*m.ReductionFactor))
	}
	if m.MinEarlyStoppingRate != nil {
		n += 1 + sovGenerated(uint64(*m.MinEarlyStoppingRate))
	}
	if m.BootstrapCount != nil {
		n += 1 + sovGenerated(uint64(*m.BootstrapCount))
	}
	return n
}

func (m *SuccessiveHalvingSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Budget != nil {
		n += 1 + sovGenerated(uint64(*m.Budget))
	}
	if m.Bracket != nil {
		n += 1 + sovGenerated(uint64(*m.Bracket))
	}
	if m.Rung != nil {
		n += 1 + sovGenerated(uint64(*m.Rung))
	}
	if m.ConfID != nil {
		n += 1 + sovGenerated(uint64(*m.ConfID))
	}
	if m.Modality != nil {
		l = len(*m.Modality)
		n += 2 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *TextPipelineSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Encoder != nil {
		l = len(*m.Encoder)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Tokenizer != nil {
		l = len(*m.Tokenizer)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StopWords != nil {
		n += 2
	}
	if m.Pos != nil {
		n += 2
	}
	if m.Lemma != nil {
		n += 2
	}
	if m.Stem != nil {
		n += 2
	}
	if m.Embedding != nil {
		l = len(*m.Embedding)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Svd != nil {
		n += 2
	}
	if m.MaxSvdComponents != nil {
		n += 1 + sovGenerated(uint64(*m.MaxSvdComponents))
	}
	return n
}

func (m *ThresholdPrunerOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lower != nil {
		n += 9
	}
	if m.Upper != nil {
		n += 9
	}
	if m.WarmupSteps != nil {
		n += 1 + sovGenerated(uint64(*m.WarmupSteps))
	}
	if m.IntervalSteps != nil {
		n += 1 + sovGenerated(uint64(*m.IntervalSteps))
	}
	return n
}

func (m *TimeSeriesEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Method)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Holiday != nil {
		n += 2
	}
	l = len(m.Country)
	n += 1 + l + sovGenerated(uint64(l))
	if m.PreEvent != nil {
		n += 1 + sovGenerated(uint64(*m.PreEvent))
	}
	if m.PostEvent != nil {
		n += 1 + sovGenerated(uint64(*m.PostEvent))
	}
	if len(m.TimePoints) > 0 {
		for _, s := range m.TimePoints {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *TrainingSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LabRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Priority != nil {
		l = len(*m.Priority)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CvType != nil {
		l = len(*m.CvType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CV != nil {
		n += 2
	}
	if m.Folds != nil {
		n += 1 + sovGenerated(uint64(*m.Folds))
	}
	l = m.Split.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.EvalMetrics) > 0 {
		for _, s := range m.EvalMetrics {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.SH != nil {
		l = m.SH.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Seed != nil {
		n += 9
	}
	l = m.Resources.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Gpu != nil {
		n += 2
	}
	if m.Distributed != nil {
		n += 2
	}
	if m.FeatureImportance != nil {
		n += 2
	}
	if m.NodeCount != nil {
		n += 2 + sovGenerated(uint64(*m.NodeCount))
	}
	if m.SamplePct != nil {
		n += 2 + sovGenerated(uint64(*m.SamplePct))
	}
	l = m.Checkpoint.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if m.LogLevel != nil {
		l = len(*m.LogLevel)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.TimeoutInSecs != nil {
		n += 2 + sovGenerated(uint64(*m.TimeoutInSecs))
	}
	return n
}

func (m *UnivariateForecastStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GridSearchResultURI)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.BestEstimator.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ModelURI)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CVResultURI)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ForecastURI)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VideoPipelineSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Featurizer != nil {
		l = len(*m.Featurizer)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *WindowSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != nil {
		l = len(*m.Interval)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Start != nil {
		n += 1 + sovGenerated(uint64(*m.Start))
	}
	if m.Length != nil {
		n += 1 + sovGenerated(uint64(*m.Length))
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AlgorithmParameterRange) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRanges := "[]ParameterRange{"
	for _, f := range this.Ranges {
		repeatedStringForRanges += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForRanges += "}"
	s := strings.Join([]string{`&AlgorithmParameterRange{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Ranges:` + repeatedStringForRanges + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlgorithmSearchSpaceSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCustom := "[]AlgorithmParameterRange{"
	for _, f := range this.Custom {
		repeatedStringForCustom += strings.Replace(strings.Replace(f.String(), "AlgorithmParameterRange", "AlgorithmParameterRange", 1), `&`, ``, 1) + ","
	}
	repeatedStringForCustom += "}"
	s := strings.Join([]string{`&AlgorithmSearchSpaceSpec{`,
		`Include:` + fmt.Sprintf("%v", this.Include) + `,`,
		`Exclude:` + fmt.Sprintf("%v", this.Exclude) + `,`,
		`Custom:` + repeatedStringForCustom + `,`,
		`}`,
	}, "")
	return s
}
func (this *Anomaly) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Anomaly{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ValueColumn:` + fmt.Sprintf("%v", this.ValueColumn) + `,`,
		`AdjDeltaColumn:` + fmt.Sprintf("%v", this.AdjDeltaColumn) + `,`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`End:` + fmt.Sprintf("%v", this.End) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AudioPipelineSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AudioPipelineSpec{`,
		`Featurizer:` + valueToStringGenerated(this.Featurizer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BacktestSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BacktestSpec{`,
		`Sliding:` + valueToStringGenerated(this.Sliding) + `,`,
		`Splits:` + valueToStringGenerated(this.Splits) + `,`,
		`Initial:` + valueToStringGenerated(this.Initial) + `,`,
		`Gap:` + valueToStringGenerated(this.Gap) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BaselineSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BaselineSpec{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`Baselines:` + fmt.Sprintf("%v", this.Baselines) + `,`,
		`All:` + valueToStringGenerated(this.All) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangePoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangePoint{`,
		`}`,
	}, "")
	return s
}
func (this *ChatbotEstimatorSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChatbotEstimatorSpec{`,
		`Base:` + valueToStringGenerated(this.Base) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckpointSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckpointSpec{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`CheckpointInterval:` + valueToStringGenerated(this.CheckpointInterval) + `,`,
		`Location:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Location), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClassicalEstimatorSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForParameters := "[]HyperParameterValue{"
	for _, f := range this.Parameters {
		repeatedStringForParameters += strings.Replace(strings.Replace(f.String(), "HyperParameterValue", "HyperParameterValue", 1), `&`, ``, 1) + ","
	}
	repeatedStringForParameters += "}"
	s := strings.Join([]string{`&ClassicalEstimatorSpec{`,
		`AlgorithmName:` + fmt.Sprintf("%v", this.AlgorithmName) + `,`,
		`Parameters:` + repeatedStringForParameters + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomReportSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPages := "[]PageSpec{"
	for _, f := range this.Pages {
		repeatedStringForPages += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForPages += "}"
	s := strings.Join([]string{`&CustomReportSpec{`,
		`Pages:` + repeatedStringForPages + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataHashes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataHashes{`,
		`TrainingHash:` + fmt.Sprintf("%v", this.TrainingHash) + `,`,
		`TestingHash:` + fmt.Sprintf("%v", this.TestingHash) + `,`,
		`ValidationHash:` + fmt.Sprintf("%v", this.ValidationHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataSplitSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSegments := "[]SegmentSpec{"
	for _, f := range this.Segments {
		repeatedStringForSegments += strings.Replace(strings.Replace(f.String(), "SegmentSpec", "SegmentSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForSegments += "}"
	s := strings.Join([]string{`&DataSplitSpec{`,
		`Method:` + valueToStringGenerated(this.Method) + `,`,
		`Train:` + valueToStringGenerated(this.Train) + `,`,
		`Validation:` + valueToStringGenerated(this.Validation) + `,`,
		`Test:` + valueToStringGenerated(this.Test) + `,`,
		`SplitColumn:` + valueToStringGenerated(this.SplitColumn) + `,`,
		`Segments:` + repeatedStringForSegments + `,`,
		`TrainDatasetName:` + valueToStringGenerated(this.TrainDatasetName) + `,`,
		`TestDatasetName:` + valueToStringGenerated(this.TestDatasetName) + `,`,
		`ValidationDatasetName:` + valueToStringGenerated(this.ValidationDatasetName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeepEstimatorLayer) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForParameters := "[]NNLayerParameter{"
	for _, f := range this.Parameters {
		repeatedStringForParameters += strings.Replace(strings.Replace(f.String(), "NNLayerParameter", "NNLayerParameter", 1), `&`, ``, 1) + ","
	}
	repeatedStringForParameters += "}"
	s := strings.Join([]string{`&DeepEstimatorLayer{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Parameters:` + repeatedStringForParameters + `,`,
		`InputLayers:` + fmt.Sprintf("%v", this.InputLayers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeepEstimatorSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLayers := "[]DeepEstimatorLayer{"
	for _, f := range this.Layers {
		repeatedStringForLayers += strings.Replace(strings.Replace(f.String(), "DeepEstimatorLayer", "DeepEstimatorLayer", 1), `&`, ``, 1) + ","
	}
	repeatedStringForLayers += "}"
	s := strings.Join([]string{`&DeepEstimatorSpec{`,
		`Layers:` + repeatedStringForLayers + `,`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`BatchSize:` + valueToStringGenerated(this.BatchSize) + `,`,
		`Epochs:` + valueToStringGenerated(this.Epochs) + `,`,
		`ValidationSplit:` + valueToStringGenerated(this.ValidationSplit) + `,`,
		`Seq:` + valueToStringGenerated(this.Seq) + `,`,
		`Gpus:` + valueToStringGenerated(this.Gpus) + `,`,
		`Loss:` + fmt.Sprintf("%v", this.Loss) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DriftDetectorStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DriftDetectorStatus{`,
		`OutlierModelURI:` + fmt.Sprintf("%v", this.OutlierModelURI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DriftModelSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DriftModelSpec{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`OutlierAlgorithm:` + fmt.Sprintf("%v", this.OutlierAlgorithm) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EarlyStopSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EarlyStopSpec{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`Initial:` + valueToStringGenerated(this.Initial) + `,`,
		`MinModelsWithNoProgress:` + valueToStringGenerated(this.MinModelsWithNoProgress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnsembleRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnsembleRules{`,
		`}`,
	}, "")
	return s
}
func (this *EnsembleSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEstimators := "[]ClassicalEstimatorSpec{"
	for _, f := range this.Estimators {
		repeatedStringForEstimators += strings.Replace(strings.Replace(f.String(), "ClassicalEstimatorSpec", "ClassicalEstimatorSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEstimators += "}"
	s := strings.Join([]string{`&EnsembleSpec{`,
		`Models:` + fmt.Sprintf("%v", this.Models) + `,`,
		`Estimators:` + repeatedStringForEstimators + `,`,
		`Final:` + strings.Replace(this.Final.String(), "ClassicalEstimatorSpec", "ClassicalEstimatorSpec", 1) + `,`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnsemblesSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnsemblesSpec{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`VotingEnsemble:` + valueToStringGenerated(this.VotingEnsemble) + `,`,
		`StackingEnsemble:` + valueToStringGenerated(this.StackingEnsemble) + `,`,
		`Top:` + valueToStringGenerated(this.Top) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EntityRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EntityRef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Exclude:` + fmt.Sprintf("%v", this.Exclude) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvalMetrics) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvalMetrics{`,
		`Selection:` + fmt.Sprintf("%v", this.Selection) + `,`,
		`Reporting:` + fmt.Sprintf("%v", this.Reporting) + `,`,
		`AggFunc:` + valueToStringGenerated(this.AggFunc) + `,`,
		`AggPeriod:` + valueToStringGenerated(this.AggPeriod) + `,`,
		`NullModelParams:` + valueToStringGenerated(this.NullModelParams) + `,`,
		`RelErrTolerance:` + valueToStringGenerated(this.RelErrTolerance) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvalPeriod) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvalPeriod{`,
		`TestHorizon:` + valueToStringGenerated(this.TestHorizon) + `,`,
		`PeriodsBetweenTrainTest:` + valueToStringGenerated(this.PeriodsBetweenTrainTest) + `,`,
		`CvPeriodsBetweenSplits:` + valueToStringGenerated(this.CvPeriodsBetweenSplits) + `,`,
		`CvExpandingWindows:` + valueToStringGenerated(this.CvExpandingWindows) + `,`,
		`CvHorizon:` + valueToStringGenerated(this.CvHorizon) + `,`,
		`CvMinTrainPeriods:` + valueToStringGenerated(this.CvMinTrainPeriods) + `,`,
		`CvMaxSplits:` + valueToStringGenerated(this.CvMaxSplits) + `,`,
		`CvUseMostRecentSplits:` + valueToStringGenerated(this.CvUseMostRecentSplits) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureEngineeringPipeline) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGenerated := "[]GeneratedColumnSpec{"
	for _, f := range this.Generated {
		repeatedStringForGenerated += strings.Replace(strings.Replace(f.String(), "GeneratedColumnSpec", "GeneratedColumnSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForGenerated += "}"
	repeatedStringForCustom := "[]GeneratedColumnSpec{"
	for _, f := range this.Custom {
		repeatedStringForCustom += strings.Replace(strings.Replace(f.String(), "GeneratedColumnSpec", "GeneratedColumnSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForCustom += "}"
	s := strings.Join([]string{`&FeatureEngineeringPipeline{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DataType:` + fmt.Sprintf("%v", this.DataType) + `,`,
		`Columns:` + fmt.Sprintf("%v", this.Columns) + `,`,
		`Imputation:` + valueToStringGenerated(this.Imputation) + `,`,
		`Encoding:` + valueToStringGenerated(this.Encoding) + `,`,
		`Scaling:` + valueToStringGenerated(this.Scaling) + `,`,
		`Discretisation:` + valueToStringGenerated(this.Discretisation) + `,`,
		`VariableTransformation:` + valueToStringGenerated(this.VariableTransformation) + `,`,
		`OutlierHandling:` + valueToStringGenerated(this.OutlierHandling) + `,`,
		`DatetimeTransformation:` + valueToStringGenerated(this.DatetimeTransformation) + `,`,
		`Text:` + strings.Replace(this.Text.String(), "TextPipelineSpec", "TextPipelineSpec", 1) + `,`,
		`Image:` + strings.Replace(this.Image.String(), "ImagePipelineSpec", "ImagePipelineSpec", 1) + `,`,
		`Audio:` + strings.Replace(this.Audio.String(), "AudioPipelineSpec", "AudioPipelineSpec", 1) + `,`,
		`Video:` + strings.Replace(this.Video.String(), "VideoPipelineSpec", "VideoPipelineSpec", 1) + `,`,
		`Generated:` + repeatedStringForGenerated + `,`,
		`Custom:` + repeatedStringForCustom + `,`,
		`Drop:` + valueToStringGenerated(this.Drop) + `,`,
		`Passthrough:` + valueToStringGenerated(this.Passthrough) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureEngineeringSearchSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureEngineeringSearchSpec{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`ImbalanceHandler:` + valueToStringGenerated(this.ImbalanceHandler) + `,`,
		`Estimator:` + valueToStringGenerated(this.Estimator) + `,`,
		`MaxModels:` + valueToStringGenerated(this.MaxModels) + `,`,
		`MaxTimeSec:` + valueToStringGenerated(this.MaxTimeSec) + `,`,
		`MaxTrainers:` + valueToStringGenerated(this.MaxTrainers) + `,`,
		`SamplePct:` + valueToStringGenerated(this.SamplePct) + `,`,
		`AutoRemove:` + valueToStringGenerated(this.AutoRemove) + `,`,
		`Reuse:` + valueToStringGenerated(this.Reuse) + `,`,
		`FSelection:` + strings.Replace(strings.Replace(this.FSelection.String(), "FeatureSelectionSpec", "FeatureSelectionSpec", 1), `&`, ``, 1) + `,`,
		`EarlyStop:` + strings.Replace(strings.Replace(this.EarlyStop.String(), "EarlyStopSpec", "EarlyStopSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureEngineeringSearchStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureEngineeringSearchStatus{`,
		`Best:` + strings.Replace(strings.Replace(this.Best.String(), "FeatureEngineeringSpec", "FeatureEngineeringSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureEngineeringSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPipelines := "[]FeatureEngineeringPipeline{"
	for _, f := range this.Pipelines {
		repeatedStringForPipelines += strings.Replace(strings.Replace(f.String(), "FeatureEngineeringPipeline", "FeatureEngineeringPipeline", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPipelines += "}"
	s := strings.Join([]string{`&FeatureEngineeringSpec{`,
		`Pipelines:` + repeatedStringForPipelines + `,`,
		`Imbalance:` + valueToStringGenerated(this.Imbalance) + `,`,
		`FeatureSelection:` + strings.Replace(strings.Replace(this.FeatureSelection.String(), "FeatureSelectionSpec", "FeatureSelectionSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureImportance) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureImportance{`,
		`Feature:` + fmt.Sprintf("%v", this.Feature) + `,`,
		`Importance:` + fmt.Sprintf("%v", this.Importance) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeaturePair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeaturePair{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureSelectionSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureSelectionSpec{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`Embedding:` + valueToStringGenerated(this.Embedding) + `,`,
		`Filter:` + valueToStringGenerated(this.Filter) + `,`,
		`Wrapper:` + valueToStringGenerated(this.Wrapper) + `,`,
		`Pipeline:` + fmt.Sprintf("%v", this.Pipeline) + `,`,
		`VarThreshold:` + valueToStringGenerated(this.VarThreshold) + `,`,
		`CorrThreshold:` + valueToStringGenerated(this.CorrThreshold) + `,`,
		`MaxFeatures:` + valueToStringGenerated(this.MaxFeatures) + `,`,
		`Percentile:` + valueToStringGenerated(this.Percentile) + `,`,
		`Reserved:` + fmt.Sprintf("%v", this.Reserved) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForecasterSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]TimeSeriesEvent{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(strings.Replace(f.String(), "TimeSeriesEvent", "TimeSeriesEvent", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEvents += "}"
	repeatedStringForAnomalies := "[]Anomaly{"
	for _, f := range this.Anomalies {
		repeatedStringForAnomalies += strings.Replace(strings.Replace(f.String(), "Anomaly", "Anomaly", 1), `&`, ``, 1) + ","
	}
	repeatedStringForAnomalies += "}"
	s := strings.Join([]string{`&ForecasterSpec{`,
		`Events:` + repeatedStringForEvents + `,`,
		`Past:` + strings.Replace(strings.Replace(this.Past.String(), "WindowSpec", "WindowSpec", 1), `&`, ``, 1) + `,`,
		`Future:` + strings.Replace(strings.Replace(this.Future.String(), "WindowSpec", "WindowSpec", 1), `&`, ``, 1) + `,`,
		`Forecast:` + valueToStringGenerated(this.Forecast) + `,`,
		`Coverage:` + valueToStringGenerated(this.Coverage) + `,`,
		`OutputLocation:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.OutputLocation), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`Features:` + fmt.Sprintf("%v", this.Features) + `,`,
		`Groups:` + fmt.Sprintf("%v", this.Groups) + `,`,
		`PredefinedTemplate:` + fmt.Sprintf("%v", this.PredefinedTemplate) + `,`,
		`Anomalies:` + repeatedStringForAnomalies + `,`,
		`TrainEndDate:` + fmt.Sprintf("%v", this.TrainEndDate) + `,`,
		`ValueColumn:` + fmt.Sprintf("%v", this.ValueColumn) + `,`,
		`HPOBudget:` + valueToStringGenerated(this.HPOBudget) + `,`,
		`EvalMetrics:` + strings.Replace(strings.Replace(this.EvalMetrics.String(), "EvalMetrics", "EvalMetrics", 1), `&`, ``, 1) + `,`,
		`EvalPeriod:` + strings.Replace(strings.Replace(this.EvalPeriod.String(), "EvalPeriod", "EvalPeriod", 1), `&`, ``, 1) + `,`,
		`Seasonality:` + strings.Replace(strings.Replace(this.Seasonality.String(), "SeasonalitySpec", "SeasonalitySpec", 1), `&`, ``, 1) + `,`,
		`Regressors:` + fmt.Sprintf("%v", this.Regressors) + `,`,
		`LaggedRegressors:` + fmt.Sprintf("%v", this.LaggedRegressors) + `,`,
		`Growth:` + fmt.Sprintf("%v", this.Growth) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Estimators:` + fmt.Sprintf("%v", this.Estimators) + `,`,
		`HTS:` + valueToStringGenerated(this.HTS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GarbageCollectionSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GarbageCollectionSpec{`,
		`CollectAtStudyEnd:` + valueToStringGenerated(this.CollectAtStudyEnd) + `,`,
		`KeepOnlyBestModelPerAlgorithm:` + valueToStringGenerated(this.KeepOnlyBestModelPerAlgorithm) + `,`,
		`KeepPrunedModel:` + valueToStringGenerated(this.KeepPrunedModel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GarbageCollectionStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForModels := "[]ModelResult{"
	for _, f := range this.Models {
		repeatedStringForModels += strings.Replace(strings.Replace(f.String(), "ModelResult", "ModelResult", 1), `&`, ``, 1) + ","
	}
	repeatedStringForModels += "}"
	s := strings.Join([]string{`&GarbageCollectionStatus{`,
		`Collected:` + fmt.Sprintf("%v", this.Collected) + `,`,
		`Models:` + repeatedStringForModels + `,`,
		`}`,
	}, "")
	return s
}
func (this *GeneratedColumnSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GeneratedColumnSpec{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`DataType:` + fmt.Sprintf("%v", this.DataType) + `,`,
		`First:` + fmt.Sprintf("%v", this.First) + `,`,
		`Second:` + fmt.Sprintf("%v", this.Second) + `,`,
		`Expression:` + fmt.Sprintf("%v", this.Expression) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupSplitLocationsSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupSplitLocationsSpec{`,
		`GroupTrainingFile:` + valueToStringGenerated(this.GroupTrainingFile) + `,`,
		`GroupTestingFile:` + valueToStringGenerated(this.GroupTestingFile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HyperParameterValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HyperParameterValue{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HyperbandOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HyperbandOptions{`,
		`MinResources:` + valueToStringGenerated(this.MinResources) + `,`,
		`MaxResources:` + valueToStringGenerated(this.MaxResources) + `,`,
		`ReductionFactor:` + valueToStringGenerated(this.ReductionFactor) + `,`,
		`BootstrapCount:` + valueToStringGenerated(this.BootstrapCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImagePipelineSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImagePipelineSpec{`,
		`Featurizer:` + valueToStringGenerated(this.Featurizer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImbalanceHandlingSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImbalanceHandlingSpec{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`Imbalance:` + valueToStringGenerated(this.Imbalance) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterpretabilitySpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForICEPairs := "[]FeaturePair{"
	for _, f := range this.ICEPairs {
		repeatedStringForICEPairs += strings.Replace(strings.Replace(f.String(), "FeaturePair", "FeaturePair", 1), `&`, ``, 1) + ","
	}
	repeatedStringForICEPairs += "}"
	repeatedStringForShapPairs := "[]FeaturePair{"
	for _, f := range this.ShapPairs {
		repeatedStringForShapPairs += strings.Replace(strings.Replace(f.String(), "FeaturePair", "FeaturePair", 1), `&`, ``, 1) + ","
	}
	repeatedStringForShapPairs += "}"
	s := strings.Join([]string{`&InterpretabilitySpec{`,
		`ICE:` + valueToStringGenerated(this.ICE) + `,`,
		`ICEPairs:` + repeatedStringForICEPairs + `,`,
		`Lime:` + valueToStringGenerated(this.Lime) + `,`,
		`Shap:` + valueToStringGenerated(this.Shap) + `,`,
		`ShapPairs:` + repeatedStringForShapPairs + `,`,
		`CounterFactual:` + valueToStringGenerated(this.CounterFactual) + `,`,
		`Anchor:` + valueToStringGenerated(this.Anchor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterpretabilityStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImportance := "[]FeatureImportance{"
	for _, f := range this.Importance {
		repeatedStringForImportance += strings.Replace(strings.Replace(f.String(), "FeatureImportance", "FeatureImportance", 1), `&`, ``, 1) + ","
	}
	repeatedStringForImportance += "}"
	s := strings.Join([]string{`&InterpretabilityStatus{`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Time", "v1.Time", 1) + `,`,
		`EndTime:` + strings.Replace(fmt.Sprintf("%v", this.EndTime), "Time", "v1.Time", 1) + `,`,
		`ExplainerURI:` + fmt.Sprintf("%v", this.ExplainerURI) + `,`,
		`TrainShapValuesURI:` + fmt.Sprintf("%v", this.TrainShapValuesURI) + `,`,
		`TestShapValuesURI:` + fmt.Sprintf("%v", this.TestShapValuesURI) + `,`,
		`Importance:` + repeatedStringForImportance + `,`,
		`}`,
	}, "")
	return s
}
func (this *Level) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Level{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Horizon:` + valueToStringGenerated(this.Horizon) + `,`,
		`Freq:` + valueToStringGenerated(this.Freq) + `,`,
		`Aggregate:` + valueToStringGenerated(this.Aggregate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MedianPrunerOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MedianPrunerOptions{`,
		`StartupTrials:` + valueToStringGenerated(this.StartupTrials) + `,`,
		`WarmupSteps:` + valueToStringGenerated(this.WarmupSteps) + `,`,
		`IntervalSteps:` + valueToStringGenerated(this.IntervalSteps) + `,`,
		`MinTrials:` + valueToStringGenerated(this.MinTrials) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Model{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ModelSpec", "ModelSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ModelStatus", "ModelStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelClass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelClass{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ModelClassSpec", "ModelClassSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ModelClassStatus", "ModelClassStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelClassCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelClassCondition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastTransitionTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTransitionTime), "Time", "v1.Time", 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelClassDataSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelClassDataSpec{`,
		`Observations:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Observations), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`PredictionHistory:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.PredictionHistory), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`Predictions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Predictions), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`Schema:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Schema), "Schema", "v1alpha11.Schema", 1), `&`, ``, 1) + `,`,
		`FlatFile:` + strings.Replace(fmt.Sprintf("%v", this.FlatFile), "FlatFileFormatSpec", "v1alpha11.FlatFileFormatSpec", 1) + `,`,
		`PrimaryKey:` + fmt.Sprintf("%v", this.PrimaryKey) + `,`,
		`PredictionTimeColumn:` + valueToStringGenerated(this.PredictionTimeColumn) + `,`,
		`Target:` + valueToStringGenerated(this.Target) + `,`,
		`Tests:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Tests), "TestSuite", "v1alpha1.TestSuite", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelClassList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]ModelClass{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "ModelClass", "ModelClass", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ModelClassList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelClassServingSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPipeline := "[]PipelineStageSpec{"
	for _, f := range this.Pipeline {
		repeatedStringForPipeline += strings.Replace(strings.Replace(f.String(), "PipelineStageSpec", "PipelineStageSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPipeline += "}"
	s := strings.Join([]string{`&ModelClassServingSpec{`,
		`Pipeline:` + repeatedStringForPipeline + `,`,
		`PredictorTemplateName:` + valueToStringGenerated(this.PredictorTemplateName) + `,`,
		`ServingSiteRef:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ServingSiteRef), "ObjectReference", "v11.ObjectReference", 1), `&`, ``, 1) + `,`,
		`Online:` + valueToStringGenerated(this.Online) + `,`,
		`Dashboard:` + valueToStringGenerated(this.Dashboard) + `,`,
		`Access:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Access), "AccessSpec", "v1alpha1.AccessSpec", 1), `&`, ``, 1) + `,`,
		`Replicas:` + valueToStringGenerated(this.Replicas) + `,`,
		`MonitoringSchedule:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.MonitoringSchedule), "RunSchedule", "v1alpha1.RunSchedule", 1), `&`, ``, 1) + `,`,
		`BatchPredictionSchedule:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.BatchPredictionSchedule), "RunSchedule", "v1alpha1.RunSchedule", 1), `&`, ``, 1) + `,`,
		`Resources:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Resources), "ResourceSpec", "v1alpha1.ResourceSpec", 1), `&`, ``, 1) + `,`,
		`ShadowFirst:` + valueToStringGenerated(this.ShadowFirst) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelClassSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEntities := "[]EntityRef{"
	for _, f := range this.Entities {
		repeatedStringForEntities += strings.Replace(strings.Replace(f.String(), "EntityRef", "EntityRef", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEntities += "}"
	s := strings.Join([]string{`&ModelClassSpec{`,
		`Owner:` + valueToStringGenerated(this.Owner) + `,`,
		`DataProductVersionName:` + valueToStringGenerated(this.DataProductVersionName) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Description:` + valueToStringGenerated(this.Description) + `,`,
		`Task:` + valueToStringGenerated(this.Task) + `,`,
		`SubTask:` + valueToStringGenerated(this.SubTask) + `,`,
		`Objective:` + valueToStringGenerated(this.Objective) + `,`,
		`Entities:` + repeatedStringForEntities + `,`,
		`ArtifactLocation:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ArtifactLocation), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "ModelClassDataSpec", "ModelClassDataSpec", 1), `&`, ``, 1) + `,`,
		`Training:` + strings.Replace(strings.Replace(this.Training.String(), "ModelClassTrainingSpec", "ModelClassTrainingSpec", 1), `&`, ``, 1) + `,`,
		`Serving:` + strings.Replace(strings.Replace(this.Serving.String(), "ModelClassServingSpec", "ModelClassServingSpec", 1), `&`, ``, 1) + `,`,
		`Notification:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Notification), "NotificationSpec", "v1alpha1.NotificationSpec", 1), `&`, ``, 1) + `,`,
		`ReportSchedule:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ReportSchedule), "RunSchedule", "v1alpha1.RunSchedule", 1), `&`, ``, 1) + `,`,
		`Fast:` + valueToStringGenerated(this.Fast) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelClassStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]ModelClassCondition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "ModelClassCondition", "ModelClassCondition", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&ModelClassStatus{`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Models:` + fmt.Sprintf("%v", this.Models) + `,`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`LastUpdated:` + strings.Replace(fmt.Sprintf("%v", this.LastUpdated), "Time", "v1.Time", 1) + `,`,
		`BestFE:` + strings.Replace(this.BestFE.String(), "FeatureEngineeringSpec", "FeatureEngineeringSpec", 1) + `,`,
		`LastTrainingSet:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LastTrainingSet), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`TrainingScheduleStatus:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TrainingScheduleStatus), "RunScheduleStatus", "v1alpha1.RunScheduleStatus", 1), `&`, ``, 1) + `,`,
		`PredictionScheduleStatus:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.PredictionScheduleStatus), "RunScheduleStatus", "v1alpha1.RunScheduleStatus", 1), `&`, ``, 1) + `,`,
		`MonitoringScheduleStatus:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.MonitoringScheduleStatus), "RunScheduleStatus", "v1alpha1.RunScheduleStatus", 1), `&`, ``, 1) + `,`,
		`ReportScheduleStatus:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ReportScheduleStatus), "RunScheduleStatus", "v1alpha1.RunScheduleStatus", 1), `&`, ``, 1) + `,`,
		`PromotionStatus:` + strings.Replace(strings.Replace(this.PromotionStatus.String(), "PromotionStatus", "PromotionStatus", 1), `&`, ``, 1) + `,`,
		`Dataset:` + fmt.Sprintf("%v", this.Dataset) + `,`,
		`Study:` + fmt.Sprintf("%v", this.Study) + `,`,
		`CandidateModel:` + fmt.Sprintf("%v", this.CandidateModel) + `,`,
		`BestModelScore:` + fmt.Sprintf("%v", this.BestModelScore) + `,`,
		`RetiredModels:` + fmt.Sprintf("%v", this.RetiredModels) + `,`,
		`PredictorName:` + fmt.Sprintf("%v", this.PredictorName) + `,`,
		`LiveModel:` + valueToStringGenerated(this.LiveModel) + `,`,
		`Shadows:` + fmt.Sprintf("%v", this.Shadows) + `,`,
		`TriggeredBy:` + fmt.Sprintf("%v", this.TriggeredBy) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelClassTrainingSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelClassTrainingSpec{`,
		`LabRef:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LabRef), "ObjectReference", "v11.ObjectReference", 1), `&`, ``, 1) + `,`,
		`StudyTemplateName:` + fmt.Sprintf("%v", this.StudyTemplateName) + `,`,
		`ModelUnitTests:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ModelUnitTests), "TestSuite", "v1alpha1.TestSuite", 1), `&`, ``, 1) + `,`,
		`TrainingSchedule:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TrainingSchedule), "RunSchedule", "v1alpha1.RunSchedule", 1), `&`, ``, 1) + `,`,
		`ModelImage:` + strings.Replace(strings.Replace(this.ModelImage.String(), "ModelImageSpec", "ModelImageSpec", 1), `&`, ``, 1) + `,`,
		`PromotionPolicy:` + fmt.Sprintf("%v", this.PromotionPolicy) + `,`,
		`Retrain:` + valueToStringGenerated(this.Retrain) + `,`,
		`SearchSpace:` + strings.Replace(this.SearchSpace.String(), "AlgorithmSearchSpaceSpec", "AlgorithmSearchSpaceSpec", 1) + `,`,
		`Resources:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Resources), "ResourceSpec", "v1alpha1.ResourceSpec", 1), `&`, ``, 1) + `,`,
		`Trigger:` + fmt.Sprintf("%v", this.Trigger) + `,`,
		`Paused:` + valueToStringGenerated(this.Paused) + `,`,
		`MaxTime:` + valueToStringGenerated(this.MaxTime) + `,`,
		`MaxModels:` + valueToStringGenerated(this.MaxModels) + `,`,
		`Trainers:` + valueToStringGenerated(this.Trainers) + `,`,
		`Aborted:` + valueToStringGenerated(this.Aborted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelCondition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastTransitionTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTransitionTime), "Time", "v1.Time", 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelGroupByStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWorkerResults := "[]WorkerRunResult{"
	for _, f := range this.WorkerResults {
		repeatedStringForWorkerResults += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForWorkerResults += "}"
	s := strings.Join([]string{`&ModelGroupByStatus{`,
		`ModelsURI:` + fmt.Sprintf("%v", this.ModelsURI) + `,`,
		`ProfilesURI:` + fmt.Sprintf("%v", this.ProfilesURI) + `,`,
		`ForecastsURI:` + fmt.Sprintf("%v", this.ForecastsURI) + `,`,
		`WorkerResults:` + repeatedStringForWorkerResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelImageSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelImageSpec{`,
		`Exist:` + valueToStringGenerated(this.Exist) + `,`,
		`ImageName:` + valueToStringGenerated(this.ImageName) + `,`,
		`RegistryConnection:` + valueToStringGenerated(this.RegistryConnection) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]Model{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "Model", "Model", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ModelList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelResult{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Alg:` + fmt.Sprintf("%v", this.Alg) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`TrialID:` + fmt.Sprintf("%v", this.TrialID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelSpec{`,
		`Owner:` + valueToStringGenerated(this.Owner) + `,`,
		`VersionName:` + valueToStringGenerated(this.VersionName) + `,`,
		`ModelClassName:` + valueToStringGenerated(this.ModelClassName) + `,`,
		`ModelVersion:` + valueToStringGenerated(this.ModelVersion) + `,`,
		`StudyName:` + valueToStringGenerated(this.StudyName) + `,`,
		`DatasetName:` + valueToStringGenerated(this.DatasetName) + `,`,
		`Task:` + valueToStringGenerated(this.Task) + `,`,
		`SubTask:` + valueToStringGenerated(this.SubTask) + `,`,
		`Objective:` + valueToStringGenerated(this.Objective) + `,`,
		`FeatureEngineering:` + strings.Replace(strings.Replace(this.FeatureEngineering.String(), "FeatureEngineeringSpec", "FeatureEngineeringSpec", 1), `&`, ``, 1) + `,`,
		`Estimator:` + strings.Replace(this.Estimator.String(), "ClassicalEstimatorSpec", "ClassicalEstimatorSpec", 1) + `,`,
		`Dnn:` + strings.Replace(this.Dnn.String(), "DeepEstimatorSpec", "DeepEstimatorSpec", 1) + `,`,
		`Chatbot:` + strings.Replace(this.Chatbot.String(), "ChatbotEstimatorSpec", "ChatbotEstimatorSpec", 1) + `,`,
		`NLPEstimator:` + strings.Replace(this.NLPEstimator.String(), "NLPEstimatorSpec", "NLPEstimatorSpec", 1) + `,`,
		`Ensemble:` + strings.Replace(strings.Replace(this.Ensemble.String(), "EnsembleSpec", "EnsembleSpec", 1), `&`, ``, 1) + `,`,
		`Training:` + strings.Replace(strings.Replace(this.Training.String(), "TrainingSpec", "TrainingSpec", 1), `&`, ``, 1) + `,`,
		`Serving:` + strings.Replace(strings.Replace(this.Serving.String(), "ServingSpec", "ServingSpec", 1), `&`, ``, 1) + `,`,
		`Tested:` + valueToStringGenerated(this.Tested) + `,`,
		`Aborted:` + valueToStringGenerated(this.Aborted) + `,`,
		`Packaged:` + valueToStringGenerated(this.Packaged) + `,`,
		`Published:` + valueToStringGenerated(this.Published) + `,`,
		`Pushed:` + valueToStringGenerated(this.Pushed) + `,`,
		`Reported:` + valueToStringGenerated(this.Reported) + `,`,
		`Paused:` + valueToStringGenerated(this.Paused) + `,`,
		`Profiled:` + valueToStringGenerated(this.Profiled) + `,`,
		`Archived:` + valueToStringGenerated(this.Archived) + `,`,
		`Forecasted:` + valueToStringGenerated(this.Forecasted) + `,`,
		`Released:` + valueToStringGenerated(this.Released) + `,`,
		`Registered:` + valueToStringGenerated(this.Registered) + `,`,
		`Predicted:` + valueToStringGenerated(this.Predicted) + `,`,
		`Tuned:` + valueToStringGenerated(this.Tuned) + `,`,
		`Explained:` + valueToStringGenerated(this.Explained) + `,`,
		`CodeGenerated:` + valueToStringGenerated(this.CodeGenerated) + `,`,
		`Baseline:` + valueToStringGenerated(this.Baseline) + `,`,
		`GenDriftDetector:` + valueToStringGenerated(this.GenDriftDetector) + `,`,
		`Fast:` + valueToStringGenerated(this.Fast) + `,`,
		`UnitTested:` + valueToStringGenerated(this.UnitTested) + `,`,
		`FeedbackDatasetRef:` + strings.Replace(fmt.Sprintf("%v", this.FeedbackDatasetRef), "ObjectReference", "v11.ObjectReference", 1) + `,`,
		`Flagged:` + valueToStringGenerated(this.Flagged) + `,`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "DataLocation", "v1alpha11.DataLocation", 1) + `,`,
		`Forecasting:` + strings.Replace(this.Forecasting.String(), "ForecasterSpec", "ForecasterSpec", 1) + `,`,
		`Compilation:` + strings.Replace(fmt.Sprintf("%v", this.Compilation), "CompilerSpec", "v1alpha1.CompilerSpec", 1) + `,`,
		`ActiveDeadlineSeconds:` + valueToStringGenerated(this.ActiveDeadlineSeconds) + `,`,
		`EstimatorType:` + valueToStringGenerated(this.EstimatorType) + `,`,
		`TTL:` + valueToStringGenerated(this.TTL) + `,`,
		`ModelClass:` + fmt.Sprintf("%v", this.ModelClass) + `,`,
		`TrialID:` + valueToStringGenerated(this.TrialID) + `,`,
		`Governance:` + strings.Replace(fmt.Sprintf("%v", this.Governance), "GovernanceSpec", "v1alpha11.GovernanceSpec", 1) + `,`,
		`Interpretability:` + strings.Replace(strings.Replace(this.Interpretability.String(), "InterpretabilitySpec", "InterpretabilitySpec", 1), `&`, ``, 1) + `,`,
		`UnitTests:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UnitTests), "TestSuite", "v1alpha1.TestSuite", 1), `&`, ``, 1) + `,`,
		`FeedbackTests:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FeedbackTests), "TestSuite", "v1alpha1.TestSuite", 1), `&`, ``, 1) + `,`,
		`PartitionsLocation:` + strings.Replace(strings.Replace(this.PartitionsLocation.String(), "PartitionModelLocationsSpec", "PartitionModelLocationsSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelStageStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelStageStatus{`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Approved:` + fmt.Sprintf("%v", this.Approved) + `,`,
		`ApprovedBy:` + fmt.Sprintf("%v", this.ApprovedBy) + `,`,
		`ApprovedAt:` + strings.Replace(fmt.Sprintf("%v", this.ApprovedAt), "Time", "v1.Time", 1) + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Time", "v1.Time", 1) + `,`,
		`EndTime:` + strings.Replace(fmt.Sprintf("%v", this.EndTime), "Time", "v1.Time", 1) + `,`,
		`UnitTestsResult:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UnitTestsResult), "TestSuiteResult", "v1alpha1.TestSuiteResult", 1), `&`, ``, 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCV := "[]Measurement{"
	for _, f := range this.CV {
		repeatedStringForCV += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForCV += "}"
	repeatedStringForTrain := "[]Measurement{"
	for _, f := range this.Train {
		repeatedStringForTrain += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForTrain += "}"
	repeatedStringForTest := "[]Measurement{"
	for _, f := range this.Test {
		repeatedStringForTest += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForTest += "}"
	repeatedStringForTune := "[]Measurement{"
	for _, f := range this.Tune {
		repeatedStringForTune += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForTune += "}"
	repeatedStringForFeedback := "[]Measurement{"
	for _, f := range this.Feedback {
		repeatedStringForFeedback += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForFeedback += "}"
	repeatedStringForImpurityImportance := "[]FeatureImportance{"
	for _, f := range this.ImpurityImportance {
		repeatedStringForImpurityImportance += strings.Replace(strings.Replace(f.String(), "FeatureImportance", "FeatureImportance", 1), `&`, ``, 1) + ","
	}
	repeatedStringForImpurityImportance += "}"
	repeatedStringForPermutationImportance := "[]FeatureImportance{"
	for _, f := range this.PermutationImportance {
		repeatedStringForPermutationImportance += strings.Replace(strings.Replace(f.String(), "FeatureImportance", "FeatureImportance", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPermutationImportance += "}"
	repeatedStringForCorrelationsWithTarget := "[]Correlation{"
	for _, f := range this.CorrelationsWithTarget {
		repeatedStringForCorrelationsWithTarget += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForCorrelationsWithTarget += "}"
	repeatedStringForTopCorrelations := "[]Correlation{"
	for _, f := range this.TopCorrelations {
		repeatedStringForTopCorrelations += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForTopCorrelations += "}"
	repeatedStringForStages := "[]ModelStageStatus{"
	for _, f := range this.Stages {
		repeatedStringForStages += strings.Replace(strings.Replace(f.String(), "ModelStageStatus", "ModelStageStatus", 1), `&`, ``, 1) + ","
	}
	repeatedStringForStages += "}"
	repeatedStringForConditions := "[]ModelCondition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "ModelCondition", "ModelCondition", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&ModelStatus{`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Time", "v1.Time", 1) + `,`,
		`TrainingStartTime:` + strings.Replace(fmt.Sprintf("%v", this.TrainingStartTime), "Time", "v1.Time", 1) + `,`,
		`TrainingEndTime:` + strings.Replace(fmt.Sprintf("%v", this.TrainingEndTime), "Time", "v1.Time", 1) + `,`,
		`TestingStartTime:` + strings.Replace(fmt.Sprintf("%v", this.TestingStartTime), "Time", "v1.Time", 1) + `,`,
		`TestingEndTime:` + strings.Replace(fmt.Sprintf("%v", this.TestingEndTime), "Time", "v1.Time", 1) + `,`,
		`TuningStartTime:` + strings.Replace(fmt.Sprintf("%v", this.TuningStartTime), "Time", "v1.Time", 1) + `,`,
		`TuningEndTime:` + strings.Replace(fmt.Sprintf("%v", this.TuningEndTime), "Time", "v1.Time", 1) + `,`,
		`EndTime:` + strings.Replace(fmt.Sprintf("%v", this.EndTime), "Time", "v1.Time", 1) + `,`,
		`CVScore:` + fmt.Sprintf("%v", this.CVScore) + `,`,
		`TrainingScore:` + fmt.Sprintf("%v", this.TrainingScore) + `,`,
		`TestScore:` + fmt.Sprintf("%v", this.TestScore) + `,`,
		`Cost:` + fmt.Sprintf("%v", this.Cost) + `,`,
		`Best:` + fmt.Sprintf("%v", this.Best) + `,`,
		`CV:` + repeatedStringForCV + `,`,
		`Train:` + repeatedStringForTrain + `,`,
		`Test:` + repeatedStringForTest + `,`,
		`Tune:` + repeatedStringForTune + `,`,
		`Feedback:` + repeatedStringForFeedback + `,`,
		`LastFeedbackDatasetRef:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LastFeedbackDatasetRef), "ObjectReference", "v11.ObjectReference", 1), `&`, ``, 1) + `,`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`ReportName:` + fmt.Sprintf("%v", this.ReportName) + `,`,
		`ReportUri:` + fmt.Sprintf("%v", this.ReportUri) + `,`,
		`ManifestUri:` + fmt.Sprintf("%v", this.ManifestUri) + `,`,
		`WeightsUri:` + fmt.Sprintf("%v", this.WeightsUri) + `,`,
		`LabelEncoderUri:` + fmt.Sprintf("%v", this.LabelEncoderUri) + `,`,
		`LogsUri:` + fmt.Sprintf("%v", this.LogsUri) + `,`,
		`ProfileUri:` + fmt.Sprintf("%v", this.ProfileUri) + `,`,
		`MisclassificationUri:` + fmt.Sprintf("%v", this.MisclassificationUri) + `,`,
		`TarUri:` + fmt.Sprintf("%v", this.TarUri) + `,`,
		`AppUri:` + fmt.Sprintf("%v", this.AppUri) + `,`,
		`ImageName:` + fmt.Sprintf("%v", this.ImageName) + `,`,
		`ImpurityImportance:` + repeatedStringForImpurityImportance + `,`,
		`PermutationImportance:` + repeatedStringForPermutationImportance + `,`,
		`ForecastUri:` + fmt.Sprintf("%v", this.ForecastUri) + `,`,
		`Runtime:` + strings.Replace(strings.Replace(this.Runtime.String(), "RuntimeStatus", "RuntimeStatus", 1), `&`, ``, 1) + `,`,
		`TrainDatasetLocation:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TrainDatasetLocation), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`TestDatasetLocation:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TestDatasetLocation), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`ValidationDataset:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ValidationDataset), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`TrainingRows:` + fmt.Sprintf("%v", this.TrainingRows) + `,`,
		`TestingRows:` + fmt.Sprintf("%v", this.TestingRows) + `,`,
		`ValidationRows:` + fmt.Sprintf("%v", this.ValidationRows) + `,`,
		`FailureReason:` + valueToStringGenerated(this.FailureReason) + `,`,
		`FailureMessage:` + valueToStringGenerated(this.FailureMessage) + `,`,
		`Progress:` + fmt.Sprintf("%v", this.Progress) + `,`,
		`SizeInBytes:` + fmt.Sprintf("%v", this.SizeInBytes) + `,`,
		`Latency:` + fmt.Sprintf("%v", this.Latency) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`PredictorName:` + fmt.Sprintf("%v", this.PredictorName) + `,`,
		`ReleasedAt:` + strings.Replace(fmt.Sprintf("%v", this.ReleasedAt), "Time", "v1.Time", 1) + `,`,
		`PredictedAt:` + strings.Replace(fmt.Sprintf("%v", this.PredictedAt), "Time", "v1.Time", 1) + `,`,
		`TarFileHash:` + fmt.Sprintf("%v", this.TarFileHash) + `,`,
		`ImageHash:` + fmt.Sprintf("%v", this.ImageHash) + `,`,
		`TrainingDataHash:` + strings.Replace(strings.Replace(this.TrainingDataHash.String(), "DataHashes", "DataHashes", 1), `&`, ``, 1) + `,`,
		`TrainingResources:` + strings.Replace(strings.Replace(this.TrainingResources.String(), "ResourceConsumption", "ResourceConsumption", 1), `&`, ``, 1) + `,`,
		`TestingResources:` + strings.Replace(strings.Replace(this.TestingResources.String(), "ResourceConsumption", "ResourceConsumption", 1), `&`, ``, 1) + `,`,
		`TrainedBy:` + fmt.Sprintf("%v", this.TrainedBy) + `,`,
		`Team:` + fmt.Sprintf("%v", this.Team) + `,`,
		`EndPoint:` + fmt.Sprintf("%v", this.EndPoint) + `,`,
		`Logs:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Logs), "Logs", "v1alpha1.Logs", 1), `&`, ``, 1) + `,`,
		`RocCurve:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.RocCurve), "RocAucCurve", "v1alpha1.RocAucCurve", 1), `&`, ``, 1) + `,`,
		`PRCurve:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.PRCurve), "PRCurve", "v1alpha1.PRCurve", 1), `&`, ``, 1) + `,`,
		`TrainConfusionMatrix:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TrainConfusionMatrix), "ConfusionMatrix", "v1alpha1.ConfusionMatrix", 1), `&`, ``, 1) + `,`,
		`TestConfusionMatrix:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TestConfusionMatrix), "ConfusionMatrix", "v1alpha1.ConfusionMatrix", 1), `&`, ``, 1) + `,`,
		`CorrelationsWithTarget:` + repeatedStringForCorrelationsWithTarget + `,`,
		`TopCorrelations:` + repeatedStringForTopCorrelations + `,`,
		`LastUpdated:` + strings.Replace(fmt.Sprintf("%v", this.LastUpdated), "Time", "v1.Time", 1) + `,`,
		`Governance:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Governance), "GovernanceStatus", "v1alpha11.GovernanceStatus", 1), `&`, ``, 1) + `,`,
		`Interpretability:` + strings.Replace(strings.Replace(this.Interpretability.String(), "InterpretabilityStatus", "InterpretabilityStatus", 1), `&`, ``, 1) + `,`,
		`Images:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Images), "Images", "v1alpha1.Images", 1), `&`, ``, 1) + `,`,
		`UnitTestsResult:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UnitTestsResult), "TestSuiteResult", "v1alpha1.TestSuiteResult", 1), `&`, ``, 1) + `,`,
		`FeedbackTestsResult:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FeedbackTestsResult), "TestSuiteResult", "v1alpha1.TestSuiteResult", 1), `&`, ``, 1) + `,`,
		`GroupBy:` + strings.Replace(strings.Replace(this.GroupBy.String(), "ModelGroupByStatus", "ModelGroupByStatus", 1), `&`, ``, 1) + `,`,
		`Stages:` + repeatedStringForStages + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelTestSuite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelTestSuite{`,
		`BaselineModelRef:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.BaselineModelRef), "ObjectReference", "v11.ObjectReference", 1), `&`, ``, 1) + `,`,
		`DatasetRef:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.DatasetRef), "ObjectReference", "v11.ObjectReference", 1), `&`, ``, 1) + `,`,
		`UnitTests:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UnitTests), "TestSuite", "v1alpha1.TestSuite", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NLPEstimatorSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NLPEstimatorSpec{`,
		`Base:` + valueToStringGenerated(this.Base) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNLayerParameter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNLayerParameter{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionModelLocationsSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionModelLocationsSpec{`,
		`PartitionFolder:` + valueToStringGenerated(this.PartitionFolder) + `,`,
		`PartitionProfileFolder:` + valueToStringGenerated(this.PartitionProfileFolder) + `,`,
		`PartitionReportFile:` + valueToStringGenerated(this.PartitionReportFile) + `,`,
		`PartitionModelFolder:` + valueToStringGenerated(this.PartitionModelFolder) + `,`,
		`PartitionModelFile:` + valueToStringGenerated(this.PartitionModelFile) + `,`,
		`PartitionForecastFile:` + valueToStringGenerated(this.PartitionForecastFile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PercentilePrunerOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PercentilePrunerOptions{`,
		`Percentile:` + valueToStringGenerated(this.Percentile) + `,`,
		`StartupTrials:` + valueToStringGenerated(this.StartupTrials) + `,`,
		`WarmupSteps:` + valueToStringGenerated(this.WarmupSteps) + `,`,
		`IntervalSteps:` + valueToStringGenerated(this.IntervalSteps) + `,`,
		`MinTrials:` + valueToStringGenerated(this.MinTrials) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PipelineStageSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PipelineStageSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Tests:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Tests), "TestSuite", "v1alpha1.TestSuite", 1), `&`, ``, 1) + `,`,
		`ServingSiteRef:` + strings.Replace(fmt.Sprintf("%v", this.ServingSiteRef), "ObjectReference", "v11.ObjectReference", 1) + `,`,
		`Resources:` + strings.Replace(fmt.Sprintf("%v", this.Resources), "ResourceSpec", "v1alpha1.ResourceSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromotionStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromotionStatus{`,
		`PromotedAt:` + strings.Replace(fmt.Sprintf("%v", this.PromotedAt), "Time", "v1.Time", 1) + `,`,
		`Auto:` + valueToStringGenerated(this.Auto) + `,`,
		`ApprovedBy:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ApprovedBy), "ObjectReference", "v11.ObjectReference", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrunerSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrunerSpec{`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Median:` + strings.Replace(this.Median.String(), "MedianPrunerOptions", "MedianPrunerOptions", 1) + `,`,
		`Percentile:` + strings.Replace(this.Percentile.String(), "PercentilePrunerOptions", "PercentilePrunerOptions", 1) + `,`,
		`Successive:` + strings.Replace(this.Successive.String(), "SuccessiveHalvingOptions", "SuccessiveHalvingOptions", 1) + `,`,
		`Hyperband:` + strings.Replace(this.Hyperband.String(), "HyperbandOptions", "HyperbandOptions", 1) + `,`,
		`Threshold:` + strings.Replace(this.Threshold.String(), "ThresholdPrunerOptions", "ThresholdPrunerOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegressionForecasterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegressionForecasterSpec{`,
		`Ensemble:` + valueToStringGenerated(this.Ensemble) + `,`,
		`Imputation:` + valueToStringGenerated(this.Imputation) + `,`,
		`Encoding:` + valueToStringGenerated(this.Encoding) + `,`,
		`Scaling:` + valueToStringGenerated(this.Scaling) + `,`,
		`Date:` + valueToStringGenerated(this.Date) + `,`,
		`Windows:` + fmt.Sprintf("%v", this.Windows) + `,`,
		`Lags:` + fmt.Sprintf("%v", this.Lags) + `,`,
		`Functions:` + fmt.Sprintf("%v", this.Functions) + `,`,
		`EMA:` + valueToStringGenerated(this.EMA) + `,`,
		`Log:` + valueToStringGenerated(this.Log) + `,`,
		`Reduction:` + fmt.Sprintf("%v", this.Reduction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Report) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Report{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ReportSpec", "ReportSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ReportStatus", "ReportStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportCondition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastTransitionTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTransitionTime), "Time", "v1.Time", 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportGroupByStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWorkerResults := "[]WorkerRunResult{"
	for _, f := range this.WorkerResults {
		repeatedStringForWorkerResults += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForWorkerResults += "}"
	s := strings.Join([]string{`&ReportGroupByStatus{`,
		`ReportsURI:` + fmt.Sprintf("%v", this.ReportsURI) + `,`,
		`WorkerResults:` + repeatedStringForWorkerResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]Report{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "Report", "Report", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ReportList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportSpec{`,
		`VersionName:` + valueToStringGenerated(this.VersionName) + `,`,
		`EntityRef:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.EntityRef), "ObjectReference", "v11.ObjectReference", 1), `&`, ``, 1) + `,`,
		`ModelClassName:` + valueToStringGenerated(this.ModelClassName) + `,`,
		`ModelClassVersion:` + valueToStringGenerated(this.ModelClassVersion) + `,`,
		`Location:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Location), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`ReportType:` + valueToStringGenerated(this.ReportType) + `,`,
		`Format:` + valueToStringGenerated(this.Format) + `,`,
		`NotifierName:` + valueToStringGenerated(this.NotifierName) + `,`,
		`Owner:` + valueToStringGenerated(this.Owner) + `,`,
		`Resources:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Resources), "ResourceSpec", "v1alpha1.ResourceSpec", 1), `&`, ``, 1) + `,`,
		`ActiveDeadlineSeconds:` + valueToStringGenerated(this.ActiveDeadlineSeconds) + `,`,
		`Custom:` + strings.Replace(strings.Replace(this.Custom.String(), "CustomReportSpec", "CustomReportSpec", 1), `&`, ``, 1) + `,`,
		`CronReportName:` + valueToStringGenerated(this.CronReportName) + `,`,
		`LabRef:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LabRef), "ObjectReference", "v11.ObjectReference", 1), `&`, ``, 1) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]ReportCondition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "ReportCondition", "ReportCondition", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&ReportStatus{`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Time", "v1.Time", 1) + `,`,
		`EndTime:` + strings.Replace(fmt.Sprintf("%v", this.EndTime), "Time", "v1.Time", 1) + `,`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`URI:` + fmt.Sprintf("%v", this.URI) + `,`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`FailureReason:` + valueToStringGenerated(this.FailureReason) + `,`,
		`FailureMessage:` + valueToStringGenerated(this.FailureMessage) + `,`,
		`Logs:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Logs), "Logs", "v1alpha1.Logs", 1), `&`, ``, 1) + `,`,
		`LastUpdated:` + strings.Replace(fmt.Sprintf("%v", this.LastUpdated), "Time", "v1.Time", 1) + `,`,
		`GroupBy:` + strings.Replace(strings.Replace(this.GroupBy.String(), "ReportGroupByStatus", "ReportGroupByStatus", 1), `&`, ``, 1) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceConsumption) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceConsumption{`,
		`Cpu:` + fmt.Sprintf("%v", this.Cpu) + `,`,
		`Mem:` + fmt.Sprintf("%v", this.Mem) + `,`,
		`Gpu:` + fmt.Sprintf("%v", this.Gpu) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuntimeStatus) String() string {
	if this == nil {
		return "nil"
	}
	keysForPythonPackages := make([]string, 0, len(this.PythonPackages))
	for k := range this.PythonPackages {
		keysForPythonPackages = append(keysForPythonPackages, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPythonPackages)
	mapStringForPythonPackages := "map[string]string{"
	for _, k := range keysForPythonPackages {
		mapStringForPythonPackages += fmt.Sprintf("%v: %v,", k, this.PythonPackages[k])
	}
	mapStringForPythonPackages += "}"
	s := strings.Join([]string{`&RuntimeStatus{`,
		`PythonVersion:` + fmt.Sprintf("%v", this.PythonVersion) + `,`,
		`PythonCMD:` + fmt.Sprintf("%v", this.PythonCMD) + `,`,
		`OS:` + fmt.Sprintf("%v", this.OS) + `,`,
		`PythonPackages:` + mapStringForPythonPackages + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchSpec{`,
		`Sampler:` + valueToStringGenerated(this.Sampler) + `,`,
		`Pruner:` + strings.Replace(strings.Replace(this.Pruner.String(), "PrunerSpec", "PrunerSpec", 1), `&`, ``, 1) + `,`,
		`MaxCost:` + valueToStringGenerated(this.MaxCost) + `,`,
		`MaxTime:` + valueToStringGenerated(this.MaxTime) + `,`,
		`MaxModels:` + valueToStringGenerated(this.MaxModels) + `,`,
		`MinBestScore:` + valueToStringGenerated(this.MinBestScore) + `,`,
		`Trainers:` + valueToStringGenerated(this.Trainers) + `,`,
		`Test:` + valueToStringGenerated(this.Test) + `,`,
		`RetainTop:` + valueToStringGenerated(this.RetainTop) + `,`,
		`RetainFor:` + valueToStringGenerated(this.RetainFor) + `,`,
		`SearchSpace:` + strings.Replace(strings.Replace(this.SearchSpace.String(), "AlgorithmSearchSpaceSpec", "AlgorithmSearchSpaceSpec", 1), `&`, ``, 1) + `,`,
		`EarlyStop:` + strings.Replace(strings.Replace(this.EarlyStop.String(), "EarlyStopSpec", "EarlyStopSpec", 1), `&`, ``, 1) + `,`,
		`Objective:` + valueToStringGenerated(this.Objective) + `,`,
		`Objective2:` + valueToStringGenerated(this.Objective2) + `,`,
		`Tune:` + valueToStringGenerated(this.Tune) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SeasonalityPeriodSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SeasonalityPeriodSpec{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`Auto:` + valueToStringGenerated(this.Auto) + `,`,
		`FourierOrder:` + valueToStringGenerated(this.FourierOrder) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SeasonalitySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SeasonalitySpec{`,
		`Auto:` + valueToStringGenerated(this.Auto) + `,`,
		`Yearly:` + strings.Replace(this.Yearly.String(), "SeasonalityPeriodSpec", "SeasonalityPeriodSpec", 1) + `,`,
		`Quarterly:` + strings.Replace(this.Quarterly.String(), "SeasonalityPeriodSpec", "SeasonalityPeriodSpec", 1) + `,`,
		`Monthly:` + strings.Replace(this.Monthly.String(), "SeasonalityPeriodSpec", "SeasonalityPeriodSpec", 1) + `,`,
		`Weekly:` + strings.Replace(this.Weekly.String(), "SeasonalityPeriodSpec", "SeasonalityPeriodSpec", 1) + `,`,
		`Daily:` + strings.Replace(this.Daily.String(), "SeasonalityPeriodSpec", "SeasonalityPeriodSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentSpec{`,
		`ColumnName:` + valueToStringGenerated(this.ColumnName) + `,`,
		`OP:` + valueToStringGenerated(this.OP) + `,`,
		`Value:` + valueToStringGenerated(this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServingSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServingSpec{`,
		`Resources:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Resources), "ResourceSpec", "v1alpha1.ResourceSpec", 1), `&`, ``, 1) + `,`,
		`Format:` + valueToStringGenerated(this.Format) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Study) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Study{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "StudySpec", "StudySpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "StudyStatus", "StudyStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudyCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudyCondition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastTransitionTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTransitionTime), "Time", "v1.Time", 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudyGroupByStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWorkerResults := "[]WorkerRunResult{"
	for _, f := range this.WorkerResults {
		repeatedStringForWorkerResults += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForWorkerResults += "}"
	s := strings.Join([]string{`&StudyGroupByStatus{`,
		`StudiesURI:` + fmt.Sprintf("%v", this.StudiesURI) + `,`,
		`WorkerResults:` + repeatedStringForWorkerResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudyList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]Study{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "Study", "Study", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&StudyList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudyPhaseStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudyPhaseStatus{`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Time", "v1.Time", 1) + `,`,
		`EndTime:` + strings.Replace(fmt.Sprintf("%v", this.EndTime), "Time", "v1.Time", 1) + `,`,
		`Waiting:` + fmt.Sprintf("%v", this.Waiting) + `,`,
		`Running:` + fmt.Sprintf("%v", this.Running) + `,`,
		`Failed:` + fmt.Sprintf("%v", this.Failed) + `,`,
		`Completed:` + fmt.Sprintf("%v", this.Completed) + `,`,
		`BestScore:` + fmt.Sprintf("%v", this.BestScore) + `,`,
		`ModelsWithNoProgress:` + fmt.Sprintf("%v", this.ModelsWithNoProgress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudyScheduleSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudyScheduleSpec{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`StartAt:` + strings.Replace(fmt.Sprintf("%v", this.StartAt), "Time", "v1.Time", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudySpec{`,
		`VersionName:` + valueToStringGenerated(this.VersionName) + `,`,
		`ModelClassName:` + valueToStringGenerated(this.ModelClassName) + `,`,
		`ModelClassVersion:` + valueToStringGenerated(this.ModelClassVersion) + `,`,
		`Description:` + valueToStringGenerated(this.Description) + `,`,
		`LabRef:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LabRef), "ObjectReference", "v11.ObjectReference", 1), `&`, ``, 1) + `,`,
		`DatasetName:` + valueToStringGenerated(this.DatasetName) + `,`,
		`Task:` + valueToStringGenerated(this.Task) + `,`,
		`SubTask:` + valueToStringGenerated(this.SubTask) + `,`,
		`FESearch:` + strings.Replace(strings.Replace(this.FESearch.String(), "FeatureEngineeringSearchSpec", "FeatureEngineeringSearchSpec", 1), `&`, ``, 1) + `,`,
		`ImbalanceHandler:` + strings.Replace(strings.Replace(this.ImbalanceHandler.String(), "ImbalanceHandlingSpec", "ImbalanceHandlingSpec", 1), `&`, ``, 1) + `,`,
		`Baseline:` + strings.Replace(strings.Replace(this.Baseline.String(), "BaselineSpec", "BaselineSpec", 1), `&`, ``, 1) + `,`,
		`Search:` + strings.Replace(strings.Replace(this.Search.String(), "SearchSpec", "SearchSpec", 1), `&`, ``, 1) + `,`,
		`Ensembles:` + strings.Replace(strings.Replace(this.Ensembles.String(), "EnsemblesSpec", "EnsemblesSpec", 1), `&`, ``, 1) + `,`,
		`TrainingTemplate:` + strings.Replace(strings.Replace(this.TrainingTemplate.String(), "TrainingSpec", "TrainingSpec", 1), `&`, ``, 1) + `,`,
		`ServingTemplate:` + strings.Replace(strings.Replace(this.ServingTemplate.String(), "ServingSpec", "ServingSpec", 1), `&`, ``, 1) + `,`,
		`FctTemplate:` + strings.Replace(strings.Replace(this.FctTemplate.String(), "ForecasterSpec", "ForecasterSpec", 1), `&`, ``, 1) + `,`,
		`Schedule:` + strings.Replace(strings.Replace(this.Schedule.String(), "StudyScheduleSpec", "StudyScheduleSpec", 1), `&`, ``, 1) + `,`,
		`Interpretability:` + strings.Replace(strings.Replace(this.Interpretability.String(), "InterpretabilitySpec", "InterpretabilitySpec", 1), `&`, ``, 1) + `,`,
		`DriftDetector:` + strings.Replace(strings.Replace(this.DriftDetector.String(), "DriftModelSpec", "DriftModelSpec", 1), `&`, ``, 1) + `,`,
		`Aborted:` + valueToStringGenerated(this.Aborted) + `,`,
		`Reported:` + valueToStringGenerated(this.Reported) + `,`,
		`Paused:` + valueToStringGenerated(this.Paused) + `,`,
		`Profiled:` + valueToStringGenerated(this.Profiled) + `,`,
		`ModelPublished:` + valueToStringGenerated(this.ModelPublished) + `,`,
		`ModelImagePushed:` + valueToStringGenerated(this.ModelImagePushed) + `,`,
		`ModelExplained:` + valueToStringGenerated(this.ModelExplained) + `,`,
		`Fast:` + valueToStringGenerated(this.Fast) + `,`,
		`Location:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Location), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`Owner:` + valueToStringGenerated(this.Owner) + `,`,
		`Compilation:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Compilation), "CompilerSpec", "v1alpha1.CompilerSpec", 1), `&`, ``, 1) + `,`,
		`Template:` + valueToStringGenerated(this.Template) + `,`,
		`Flagged:` + valueToStringGenerated(this.Flagged) + `,`,
		`Notification:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Notification), "NotificationSpec", "v1alpha1.NotificationSpec", 1), `&`, ``, 1) + `,`,
		`ModelImage:` + strings.Replace(strings.Replace(this.ModelImage.String(), "ModelImageSpec", "ModelImageSpec", 1), `&`, ``, 1) + `,`,
		`GC:` + strings.Replace(strings.Replace(this.GC.String(), "GarbageCollectionSpec", "GarbageCollectionSpec", 1), `&`, ``, 1) + `,`,
		`TTL:` + valueToStringGenerated(this.TTL) + `,`,
		`ModelVersion:` + valueToStringGenerated(this.ModelVersion) + `,`,
		`TimeoutInSecs:` + valueToStringGenerated(this.TimeoutInSecs) + `,`,
		`CodeGenerated:` + valueToStringGenerated(this.CodeGenerated) + `,`,
		`UnitTestsTemplate:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UnitTestsTemplate), "TestSuite", "v1alpha1.TestSuite", 1), `&`, ``, 1) + `,`,
		`GroupLocations:` + strings.Replace(strings.Replace(this.GroupLocations.String(), "GroupSplitLocationsSpec", "GroupSplitLocationsSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudyStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]StudyCondition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "StudyCondition", "StudyCondition", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&StudyStatus{`,
		`Models:` + fmt.Sprintf("%v", this.Models) + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Time", "v1.Time", 1) + `,`,
		`EndTime:` + strings.Replace(fmt.Sprintf("%v", this.EndTime), "Time", "v1.Time", 1) + `,`,
		`BestModel:` + fmt.Sprintf("%v", this.BestModel) + `,`,
		`BestModelScore:` + fmt.Sprintf("%v", this.BestModelScore) + `,`,
		`ProfileUri:` + fmt.Sprintf("%v", this.ProfileUri) + `,`,
		`ReportUri:` + fmt.Sprintf("%v", this.ReportUri) + `,`,
		`ReportName:` + fmt.Sprintf("%v", this.ReportName) + `,`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`TrainDatasetLocation:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TrainDatasetLocation), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`TestDatasetLocation:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TestDatasetLocation), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`ValidationDataset:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ValidationDataset), "DataLocation", "v1alpha11.DataLocation", 1), `&`, ``, 1) + `,`,
		`LastModelID:` + valueToStringGenerated(this.LastModelID) + `,`,
		`FailureReason:` + valueToStringGenerated(this.FailureReason) + `,`,
		`FailureMessage:` + valueToStringGenerated(this.FailureMessage) + `,`,
		`TrainingRows:` + fmt.Sprintf("%v", this.TrainingRows) + `,`,
		`TestingRows:` + fmt.Sprintf("%v", this.TestingRows) + `,`,
		`ValidationRows:` + fmt.Sprintf("%v", this.ValidationRows) + `,`,
		`Progress:` + fmt.Sprintf("%v", this.Progress) + `,`,
		`TrainingDataHash:` + strings.Replace(strings.Replace(this.TrainingDataHash.String(), "DataHashes", "DataHashes", 1), `&`, ``, 1) + `,`,
		`TriggeredBy:` + fmt.Sprintf("%v", this.TriggeredBy) + `,`,
		`Logs:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Logs), "Logs", "v1alpha1.Logs", 1), `&`, ``, 1) + `,`,
		`FeatureEngineeringStatus:` + strings.Replace(strings.Replace(this.FeatureEngineeringStatus.String(), "StudyPhaseStatus", "StudyPhaseStatus", 1), `&`, ``, 1) + `,`,
		`BaselineStatus:` + strings.Replace(strings.Replace(this.BaselineStatus.String(), "StudyPhaseStatus", "StudyPhaseStatus", 1), `&`, ``, 1) + `,`,
		`SearchStatus:` + strings.Replace(strings.Replace(this.SearchStatus.String(), "StudyPhaseStatus", "StudyPhaseStatus", 1), `&`, ``, 1) + `,`,
		`EnsembleStatus:` + strings.Replace(strings.Replace(this.EnsembleStatus.String(), "StudyPhaseStatus", "StudyPhaseStatus", 1), `&`, ``, 1) + `,`,
		`TestStatus:` + strings.Replace(strings.Replace(this.TestStatus.String(), "StudyPhaseStatus", "StudyPhaseStatus", 1), `&`, ``, 1) + `,`,
		`ExplainStatus:` + strings.Replace(strings.Replace(this.ExplainStatus.String(), "StudyPhaseStatus", "StudyPhaseStatus", 1), `&`, ``, 1) + `,`,
		`DriftDetection:` + strings.Replace(strings.Replace(this.DriftDetection.String(), "DriftDetectorStatus", "DriftDetectorStatus", 1), `&`, ``, 1) + `,`,
		`LastUpdated:` + strings.Replace(fmt.Sprintf("%v", this.LastUpdated), "Time", "v1.Time", 1) + `,`,
		`BestFE:` + strings.Replace(this.BestFE.String(), "FeatureEngineeringSpec", "FeatureEngineeringSpec", 1) + `,`,
		`GC:` + strings.Replace(strings.Replace(this.GC.String(), "GarbageCollectionStatus", "GarbageCollectionStatus", 1), `&`, ``, 1) + `,`,
		`Groupby:` + strings.Replace(strings.Replace(this.Groupby.String(), "StudyGroupByStatus", "StudyGroupByStatus", 1), `&`, ``, 1) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuccessiveHalvingOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuccessiveHalvingOptions{`,
		`MinResources:` + valueToStringGenerated(this.MinResources) + `,`,
		`ReductionFactor:` + valueToStringGenerated(this.ReductionFactor) + `,`,
		`MinEarlyStoppingRate:` + valueToStringGenerated(this.MinEarlyStoppingRate) + `,`,
		`BootstrapCount:` + valueToStringGenerated(this.BootstrapCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuccessiveHalvingSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuccessiveHalvingSpec{`,
		`Budget:` + valueToStringGenerated(this.Budget) + `,`,
		`Bracket:` + valueToStringGenerated(this.Bracket) + `,`,
		`Rung:` + valueToStringGenerated(this.Rung) + `,`,
		`ConfID:` + valueToStringGenerated(this.ConfID) + `,`,
		`Modality:` + valueToStringGenerated(this.Modality) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextPipelineSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextPipelineSpec{`,
		`Encoder:` + valueToStringGenerated(this.Encoder) + `,`,
		`Tokenizer:` + valueToStringGenerated(this.Tokenizer) + `,`,
		`StopWords:` + valueToStringGenerated(this.StopWords) + `,`,
		`Pos:` + valueToStringGenerated(this.Pos) + `,`,
		`Lemma:` + valueToStringGenerated(this.Lemma) + `,`,
		`Stem:` + valueToStringGenerated(this.Stem) + `,`,
		`Embedding:` + valueToStringGenerated(this.Embedding) + `,`,
		`Svd:` + valueToStringGenerated(this.Svd) + `,`,
		`MaxSvdComponents:` + valueToStringGenerated(this.MaxSvdComponents) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThresholdPrunerOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThresholdPrunerOptions{`,
		`Lower:` + valueToStringGenerated(this.Lower) + `,`,
		`Upper:` + valueToStringGenerated(this.Upper) + `,`,
		`WarmupSteps:` + valueToStringGenerated(this.WarmupSteps) + `,`,
		`IntervalSteps:` + valueToStringGenerated(this.IntervalSteps) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimeSeriesEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimeSeriesEvent{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Holiday:` + valueToStringGenerated(this.Holiday) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`PreEvent:` + valueToStringGenerated(this.PreEvent) + `,`,
		`PostEvent:` + valueToStringGenerated(this.PostEvent) + `,`,
		`TimePoints:` + fmt.Sprintf("%v", this.TimePoints) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrainingSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrainingSpec{`,
		`LabRef:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LabRef), "ObjectReference", "v11.ObjectReference", 1), `&`, ``, 1) + `,`,
		`Priority:` + valueToStringGenerated(this.Priority) + `,`,
		`CvType:` + valueToStringGenerated(this.CvType) + `,`,
		`CV:` + valueToStringGenerated(this.CV) + `,`,
		`Folds:` + valueToStringGenerated(this.Folds) + `,`,
		`Split:` + strings.Replace(strings.Replace(this.Split.String(), "DataSplitSpec", "DataSplitSpec", 1), `&`, ``, 1) + `,`,
		`EvalMetrics:` + fmt.Sprintf("%v", this.EvalMetrics) + `,`,
		`SH:` + strings.Replace(this.SH.String(), "SuccessiveHalvingSpec", "SuccessiveHalvingSpec", 1) + `,`,
		`Seed:` + valueToStringGenerated(this.Seed) + `,`,
		`Resources:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Resources), "ResourceSpec", "v1alpha1.ResourceSpec", 1), `&`, ``, 1) + `,`,
		`Gpu:` + valueToStringGenerated(this.Gpu) + `,`,
		`Distributed:` + valueToStringGenerated(this.Distributed) + `,`,
		`FeatureImportance:` + valueToStringGenerated(this.FeatureImportance) + `,`,
		`NodeCount:` + valueToStringGenerated(this.NodeCount) + `,`,
		`SamplePct:` + valueToStringGenerated(this.SamplePct) + `,`,
		`Checkpoint:` + strings.Replace(strings.Replace(this.Checkpoint.String(), "CheckpointSpec", "CheckpointSpec", 1), `&`, ``, 1) + `,`,
		`LogLevel:` + valueToStringGenerated(this.LogLevel) + `,`,
		`TimeoutInSecs:` + valueToStringGenerated(this.TimeoutInSecs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnivariateForecastStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnivariateForecastStatus{`,
		`GridSearchResultURI:` + fmt.Sprintf("%v", this.GridSearchResultURI) + `,`,
		`BestEstimator:` + strings.Replace(strings.Replace(this.BestEstimator.String(), "ClassicalEstimatorSpec", "ClassicalEstimatorSpec", 1), `&`, ``, 1) + `,`,
		`ModelURI:` + fmt.Sprintf("%v", this.ModelURI) + `,`,
		`CVResultURI:` + fmt.Sprintf("%v", this.CVResultURI) + `,`,
		`ForecastURI:` + fmt.Sprintf("%v", this.ForecastURI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VideoPipelineSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VideoPipelineSpec{`,
		`Featurizer:` + valueToStringGenerated(this.Featurizer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WindowSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WindowSpec{`,
		`Interval:` + valueToStringGenerated(this.Interval) + `,`,
		`Start:` + valueToStringGenerated(this.Start) + `,`,
		`Length:` + valueToStringGenerated(this.Length) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AlgorithmParameterRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlgorithmParameterRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlgorithmParameterRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ClassicEstimatorName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranges = append(m.Ranges, v1alpha1.ParameterRange{})
			if err := m.Ranges[len(m.Ranges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgorithmSearchSpaceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlgorithmSearchSpaceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlgorithmSearchSpaceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Include", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Include = append(m.Include, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ClassicEstimatorName(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exclude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exclude = append(m.Exclude, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ClassicEstimatorName(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Custom = append(m.Custom, AlgorithmParameterRange{})
			if err := m.Custom[len(m.Custom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Anomaly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Anomaly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Anomaly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueColumn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueColumn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdjDeltaColumn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdjDeltaColumn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioPipelineSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioPipelineSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioPipelineSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Featurizer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.AudioFeaturizer(dAtA[iNdEx:postIndex])
			m.Featurizer = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BacktestSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BacktestSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BacktestSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sliding", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Sliding = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Splits", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Splits = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initial", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initial = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gap", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gap = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaselineSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaselineSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaselineSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baselines", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Baselines = append(m.Baselines, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ClassicEstimatorName(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.All = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatbotEstimatorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatbotEstimatorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatbotEstimatorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Base = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckpointSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckpointSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckpointSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointInterval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckpointInterval = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassicalEstimatorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassicalEstimatorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassicalEstimatorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlgorithmName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlgorithmName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, HyperParameterValue{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomReportSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomReportSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomReportSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, v1alpha11.PageSpec{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataHashes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataHashes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataHashes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrainingHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestingHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataSplitSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSplitSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSplitSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.DataSplitMethod(dAtA[iNdEx:postIndex])
			m.Method = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Train", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Train = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validation", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Validation = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Test = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitColumn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SplitColumn = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, SegmentSpec{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainDatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TrainDatasetName = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestDatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TestDatasetName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationDatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ValidationDatasetName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeepEstimatorLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeepEstimatorLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeepEstimatorLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = NNLayerName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, NNLayerParameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputLayers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputLayers = append(m.InputLayers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeepEstimatorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeepEstimatorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeepEstimatorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Layers = append(m.Layers, DeepEstimatorLayer{})
			if err := m.Layers[len(m.Layers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := DNNTypeName(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BatchSize = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochs", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Epochs = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationSplit", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidationSplit = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Seq = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gpus = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loss = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriftDetectorStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriftDetectorStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriftDetectorStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlierModelURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutlierModelURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriftModelSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriftModelSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriftModelSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlierAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutlierAlgorithm = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.OutlierAlgorithmName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EarlyStopSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EarlyStopSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EarlyStopSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initial", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initial = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinModelsWithNoProgress", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinModelsWithNoProgress = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnsembleRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnsembleRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnsembleRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnsembleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnsembleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnsembleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Models = append(m.Models, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimators = append(m.Estimators, ClassicalEstimatorSpec{})
			if err := m.Estimators[len(m.Estimators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Final == nil {
				m.Final = &ClassicalEstimatorSpec{}
			}
			if err := m.Final.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.EnsembleType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnsemblesSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnsemblesSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnsemblesSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEnsemble", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.VotingEnsemble = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackingEnsemble", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.StackingEnsemble = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Top = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exclude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exclude = append(m.Exclude, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvalMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvalMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvalMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selection = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Metric(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporting = append(m.Reporting, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Metric(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggFunc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AggFunc = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggPeriod", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AggPeriod = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullModelParams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NullModelParams = &s
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelErrTolerance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.RelErrTolerance = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvalPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvalPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvalPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestHorizon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestHorizon = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodsBetweenTrainTest", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PeriodsBetweenTrainTest = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CvPeriodsBetweenSplits", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CvPeriodsBetweenSplits = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CvExpandingWindows", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CvExpandingWindows = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CvHorizon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CvHorizon = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CvMinTrainPeriods", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CvMinTrainPeriods = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CvMaxSplits", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CvMaxSplits = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CvUseMostRecentSplits", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CvUseMostRecentSplits = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureEngineeringPipeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureEngineeringPipeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureEngineeringPipeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataType = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.DataType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imputation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Imputation(dAtA[iNdEx:postIndex])
			m.Imputation = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.CategoricalEncoding(dAtA[iNdEx:postIndex])
			m.Encoding = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scaling", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Scaling(dAtA[iNdEx:postIndex])
			m.Scaling = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discretisation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Discretisation(dAtA[iNdEx:postIndex])
			m.Discretisation = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VariableTransformation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.VariableTransformation(dAtA[iNdEx:postIndex])
			m.VariableTransformation = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlierHandling", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.OutlierHandling(dAtA[iNdEx:postIndex])
			m.OutlierHandling = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatetimeTransformation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.DatetimeTransformation(dAtA[iNdEx:postIndex])
			m.DatetimeTransformation = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &TextPipelineSpec{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &ImagePipelineSpec{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Audio == nil {
				m.Audio = &AudioPipelineSpec{}
			}
			if err := m.Audio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Video == nil {
				m.Video = &VideoPipelineSpec{}
			}
			if err := m.Video.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Generated = append(m.Generated, GeneratedColumnSpec{})
			if err := m.Generated[len(m.Generated)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Custom = append(m.Custom, GeneratedColumnSpec{})
			if err := m.Custom[len(m.Custom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Drop = &b
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passthrough", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Passthrough = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureEngineeringSearchSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureEngineeringSearchSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureEngineeringSearchSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImbalanceHandler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ImbalanceHandling(dAtA[iNdEx:postIndex])
			m.ImbalanceHandler = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ClassicEstimatorName(dAtA[iNdEx:postIndex])
			m.Estimator = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxModels", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxModels = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTimeSec", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxTimeSec = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTrainers", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxTrainers = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplePct", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SamplePct = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRemove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AutoRemove = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reuse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Reuse = &b
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSelection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FSelection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarlyStop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EarlyStop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureEngineeringSearchStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureEngineeringSearchStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureEngineeringSearchStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Best", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Best.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureEngineeringSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureEngineeringSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureEngineeringSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipelines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pipelines = append(m.Pipelines, FeatureEngineeringPipeline{})
			if err := m.Pipelines[len(m.Pipelines)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imbalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ImbalanceHandling(dAtA[iNdEx:postIndex])
			m.Imbalance = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureSelection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeatureSelection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureImportance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureImportance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureImportance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Importance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Importance = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeaturePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeaturePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeaturePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.X = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureSelectionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureSelectionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureSelectionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedding", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Embedding = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Filter = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wrapper", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Wrapper = &b
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pipeline = append(m.Pipeline, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.FeatureSelection(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarThreshold", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VarThreshold = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrThreshold", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CorrThreshold = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeatures", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxFeatures = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Percentile = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = append(m.Reserved, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForecasterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForecasterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForecasterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, TimeSeriesEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Past", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Past.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Future", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Future.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Forecast = &b
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coverage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Coverage = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutputLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Metric(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredefinedTemplate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredefinedTemplate = ModelTemplate(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anomalies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Anomalies = append(m.Anomalies, Anomaly{})
			if err := m.Anomalies[len(m.Anomalies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainEndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrainEndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueColumn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueColumn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HPOBudget", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HPOBudget = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvalMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EvalMetrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvalPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EvalPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasonality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Seasonality.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regressors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regressors = append(m.Regressors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaggedRegressors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LaggedRegressors = append(m.LaggedRegressors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Growth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Growth = GrowthMode(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimators = append(m.Estimators, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ClassicEstimatorName(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.HTS(dAtA[iNdEx:postIndex])
			m.HTS = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GarbageCollectionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GarbageCollectionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GarbageCollectionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectAtStudyEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CollectAtStudyEnd = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepOnlyBestModelPerAlgorithm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.KeepOnlyBestModelPerAlgorithm = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepPrunedModel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.KeepPrunedModel = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GarbageCollectionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GarbageCollectionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GarbageCollectionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collected", wireType)
			}
			m.Collected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Models = append(m.Models, ModelResult{})
			if err := m.Models[len(m.Models)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeneratedColumnSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneratedColumnSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneratedColumnSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataType = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.DataType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.First = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Second = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupSplitLocationsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupSplitLocationsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupSplitLocationsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupTrainingFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupTrainingFile = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupTestingFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupTestingFile = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HyperParameterValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HyperParameterValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HyperParameterValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HyperbandOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HyperbandOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HyperbandOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinResources", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinResources = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResources", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxResources = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReductionFactor", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReductionFactor = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BootstrapCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImagePipelineSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImagePipelineSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImagePipelineSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Featurizer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ImageFeaturizer(dAtA[iNdEx:postIndex])
			m.Featurizer = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImbalanceHandlingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImbalanceHandlingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImbalanceHandlingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imbalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ImbalanceHandling(dAtA[iNdEx:postIndex])
			m.Imbalance = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterpretabilitySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterpretabilitySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterpretabilitySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICE", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ICE = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICEPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ICEPairs = append(m.ICEPairs, FeaturePair{})
			if err := m.ICEPairs[len(m.ICEPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Lime = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ShapType(dAtA[iNdEx:postIndex])
			m.Shap = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShapPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShapPairs = append(m.ShapPairs, FeaturePair{})
			if err := m.ShapPairs[len(m.ShapPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterFactual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CounterFactual = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Anchor = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterpretabilityStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterpretabilityStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterpretabilityStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &v1.Time{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &v1.Time{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplainerURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplainerURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainShapValuesURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrainShapValuesURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestShapValuesURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestShapValuesURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Importance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Importance = append(m.Importance, FeatureImportance{})
			if err := m.Importance[len(m.Importance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Level) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Horizon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Horizon = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Freq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Freq(dAtA[iNdEx:postIndex])
			m.Freq = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Aggregate(dAtA[iNdEx:postIndex])
			m.Aggregate = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MedianPrunerOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedianPrunerOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedianPrunerOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartupTrials", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartupTrials = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarmupSteps", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WarmupSteps = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalSteps", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntervalSteps = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTrials", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinTrials = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelClassCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelClassCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelClassCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = ModelClassConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v1.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelClassDataSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelClassDataSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelClassDataSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Observations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Observations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictionHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PredictionHistory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predictions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Predictions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlatFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlatFile == nil {
				m.FlatFile = &v1alpha11.FlatFileFormatSpec{}
			}
			if err := m.FlatFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKey = append(m.PrimaryKey, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictionTimeColumn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PredictionTimeColumn = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Target = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tests.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelClassList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelClassList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelClassList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, ModelClass{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelClassServingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelClassServingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelClassServingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pipeline = append(m.Pipeline, PipelineStageSpec{})
			if err := m.Pipeline[len(m.Pipeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictorTemplateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PredictorTemplateName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingSiteRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServingSiteRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Online = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dashboard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Dashboard = &b
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Access", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Access.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Replicas = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MonitoringSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPredictionSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BatchPredictionSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShadowFirst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ShadowFirst = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelClassSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelClassSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelClassSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataProductVersionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DataProductVersionName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.MLTask(dAtA[iNdEx:postIndex])
			m.Task = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.MLSubtask(dAtA[iNdEx:postIndex])
			m.SubTask = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objective", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Metric(dAtA[iNdEx:postIndex])
			m.Objective = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, EntityRef{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ArtifactLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Training", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Training.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serving", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Serving.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Notification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReportSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Fast = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelClassStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelClassStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelClassStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = ModelClassPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			m.Models = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Models |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &v1.Time{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestFE", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BestFE == nil {
				m.BestFE = &FeatureEngineeringSpec{}
			}
			if err := m.BestFE.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTrainingSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastTrainingSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingScheduleStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrainingScheduleStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictionScheduleStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PredictionScheduleStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringScheduleStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MonitoringScheduleStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportScheduleStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReportScheduleStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PromotionStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dataset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dataset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Study", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Study = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CandidateModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestModelScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BestModelScore = float64(math.Float64frombits(v))
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetiredModels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetiredModels = append(m.RetiredModels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredictorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LiveModel = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shadows", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shadows = append(m.Shadows, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggeredBy = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.TriggerType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, ModelClassCondition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelClassTrainingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelClassTrainingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelClassTrainingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LabRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyTemplateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudyTemplateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelUnitTests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModelUnitTests.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrainingSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModelImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromotionPolicy = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.PromotionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retrain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Retrain = &b
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchSpace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchSpace == nil {
				m.SearchSpace = &AlgorithmSearchSpaceSpec{}
			}
			if err := m.SearchSpace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trigger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trigger = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.TriggerType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Paused = &b
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxModels", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxModels = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trainers", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Trainers = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aborted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Aborted = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = ModelConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v1.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelGroupByStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelGroupByStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelGroupByStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelsURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelsURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfilesURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfilesURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecastsURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecastsURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerResults = append(m.WorkerResults, v1alpha1.WorkerRunResult{})
			if err := m.WorkerResults[len(m.WorkerResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelImageSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelImageSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelImageSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Exist = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryConnection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RegistryConnection = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Model{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialID", wireType)
			}
			m.TrialID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrialID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VersionName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ModelClassName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ModelVersion = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StudyName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DatasetName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.MLTask(dAtA[iNdEx:postIndex])
			m.Task = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.MLSubtask(dAtA[iNdEx:postIndex])
			m.SubTask = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objective", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Metric(dAtA[iNdEx:postIndex])
			m.Objective = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureEngineering", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeatureEngineering.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Estimator == nil {
				m.Estimator = &ClassicalEstimatorSpec{}
			}
			if err := m.Estimator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dnn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dnn == nil {
				m.Dnn = &DeepEstimatorSpec{}
			}
			if err := m.Dnn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatbot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chatbot == nil {
				m.Chatbot = &ChatbotEstimatorSpec{}
			}
			if err := m.Chatbot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NLPEstimator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NLPEstimator == nil {
				m.NLPEstimator = &NLPEstimatorSpec{}
			}
			if err := m.NLPEstimator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ensemble", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ensemble.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Training", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Training.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serving", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Serving.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Tested = &b
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aborted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Aborted = &b
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Packaged = &b
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Published", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Published = &b
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pushed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Pushed = &b
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Reported = &b
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Paused = &b
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Profiled = &b
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Archived = &b
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecasted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Forecasted = &b
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Released", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Released = &b
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Registered = &b
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Predicted = &b
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tuned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Tuned = &b
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explained", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Explained = &b
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CodeGenerated = &b
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Baseline = &b
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenDriftDetector", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.GenDriftDetector = &b
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Fast = &b
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UnitTested = &b
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedbackDatasetRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedbackDatasetRef == nil {
				m.FeedbackDatasetRef = &v11.ObjectReference{}
			}
			if err := m.FeedbackDatasetRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flagged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Flagged = &b
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &v1alpha11.DataLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecasting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Forecasting == nil {
				m.Forecasting = &ForecasterSpec{}
			}
			if err := m.Forecasting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compilation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compilation == nil {
				m.Compilation = &v1alpha1.CompilerSpec{}
			}
			if err := m.Compilation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveDeadlineSeconds", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActiveDeadlineSeconds = &v
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatorType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ModelType(dAtA[iNdEx:postIndex])
			m.EstimatorType = &s
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TTL = &v
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelClass = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ModelClassType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialID", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TrialID = &v
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Governance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Governance == nil {
				m.Governance = &v1alpha11.GovernanceSpec{}
			}
			if err := m.Governance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interpretability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interpretability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnitTests.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedbackTests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeedbackTests.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionsLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartitionsLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelStageStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelStageStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelStageStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = StageStatusPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approved = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApprovedAt == nil {
				m.ApprovedAt = &v1.Time{}
			}
			if err := m.ApprovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &v1.Time{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &v1.Time{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTestsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnitTestsResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &v1.Time{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrainingStartTime == nil {
				m.TrainingStartTime = &v1.Time{}
			}
			if err := m.TrainingStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrainingEndTime == nil {
				m.TrainingEndTime = &v1.Time{}
			}
			if err := m.TrainingEndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestingStartTime == nil {
				m.TestingStartTime = &v1.Time{}
			}
			if err := m.TestingStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestingEndTime == nil {
				m.TestingEndTime = &v1.Time{}
			}
			if err := m.TestingEndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuningStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TuningStartTime == nil {
				m.TuningStartTime = &v1.Time{}
			}
			if err := m.TuningStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuningEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TuningEndTime == nil {
				m.TuningEndTime = &v1.Time{}
			}
			if err := m.TuningEndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &v1.Time{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CVScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CVScore = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TrainingScore = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TestScore = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Cost = float64(math.Float64frombits(v))
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Best", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Best = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CV", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CV = append(m.CV, v1alpha1.Measurement{})
			if err := m.CV[len(m.CV)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Train", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Train = append(m.Train, v1alpha1.Measurement{})
			if err := m.Train[len(m.Train)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Test = append(m.Test, v1alpha1.Measurement{})
			if err := m.Test[len(m.Test)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tune", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tune = append(m.Tune, v1alpha1.Measurement{})
			if err := m.Tune[len(m.Tune)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feedback = append(m.Feedback, v1alpha1.Measurement{})
			if err := m.Feedback[len(m.Feedback)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFeedbackDatasetRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastFeedbackDatasetRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = ModelPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManifestUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManifestUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightsUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightsUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelEncoderUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelEncoderUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogsUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MisclassificationUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MisclassificationUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TarUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpurityImportance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImpurityImportance = append(m.ImpurityImportance, FeatureImportance{})
			if err := m.ImpurityImportance[len(m.ImpurityImportance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermutationImportance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermutationImportance = append(m.PermutationImportance, FeatureImportance{})
			if err := m.PermutationImportance[len(m.PermutationImportance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecastUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecastUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Runtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainDatasetLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrainDatasetLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestDatasetLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TestDatasetLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationDataset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidationDataset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingRows", wireType)
			}
			m.TrainingRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrainingRows |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingRows", wireType)
			}
			m.TestingRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestingRows |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationRows", wireType)
			}
			m.ValidationRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationRows |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.StatusError(dAtA[iNdEx:postIndex])
			m.FailureReason = &s
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FailureMessage = &s
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeInBytes", wireType)
			}
			m.SizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeInBytes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latency = float64(math.Float64frombits(v))
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredictorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleasedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReleasedAt == nil {
				m.ReleasedAt = &v1.Time{}
			}
			if err := m.ReleasedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PredictedAt == nil {
				m.PredictedAt = &v1.Time{}
			}
			if err := m.PredictedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarFileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TarFileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingDataHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrainingDataHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrainingResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TestingResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrainedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Team = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Logs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RocCurve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RocCurve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PRCurve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PRCurve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainConfusionMatrix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrainConfusionMatrix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestConfusionMatrix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TestConfusionMatrix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationsWithTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationsWithTarget = append(m.CorrelationsWithTarget, v1alpha11.Correlation{})
			if err := m.CorrelationsWithTarget[len(m.CorrelationsWithTarget)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopCorrelations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopCorrelations = append(m.TopCorrelations, v1alpha11.Correlation{})
			if err := m.TopCorrelations[len(m.TopCorrelations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &v1.Time{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Governance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Governance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interpretability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interpretability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Images.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTestsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnitTestsResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedbackTestsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeedbackTestsResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stages = append(m.Stages, ModelStageStatus{})
			if err := m.Stages[len(m.Stages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, ModelCondition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelTestSuite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelTestSuite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelTestSuite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaselineModelRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaselineModelRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DatasetRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnitTests.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NLPEstimatorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NLPEstimatorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NLPEstimatorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Base = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNLayerParameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNLayerParameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNLayerParameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionModelLocationsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionModelLocationsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionModelLocationsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionFolder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PartitionFolder = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionProfileFolder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PartitionProfileFolder = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionReportFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PartitionReportFile = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionModelFolder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PartitionModelFolder = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionModelFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PartitionModelFile = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionForecastFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PartitionForecastFile = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PercentilePrunerOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PercentilePrunerOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PercentilePrunerOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Percentile = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartupTrials", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartupTrials = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarmupSteps", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WarmupSteps = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalSteps", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntervalSteps = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTrials", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinTrials = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineStageSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineStageSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineStageSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tests.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingSiteRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServingSiteRef == nil {
				m.ServingSiteRef = &v11.ObjectReference{}
			}
			if err := m.ServingSiteRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &v1alpha1.ResourceSpec{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PromotedAt == nil {
				m.PromotedAt = &v1.Time{}
			}
			if err := m.PromotedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Auto = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApprovedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrunerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrunerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrunerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := PrunerName(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Median", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Median == nil {
				m.Median = &MedianPrunerOptions{}
			}
			if err := m.Median.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Percentile == nil {
				m.Percentile = &PercentilePrunerOptions{}
			}
			if err := m.Percentile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Successive == nil {
				m.Successive = &SuccessiveHalvingOptions{}
			}
			if err := m.Successive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hyperband", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hyperband == nil {
				m.Hyperband = &HyperbandOptions{}
			}
			if err := m.Hyperband.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Threshold == nil {
				m.Threshold = &ThresholdPrunerOptions{}
			}
			if err := m.Threshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegressionForecasterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegressionForecasterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegressionForecasterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ensemble", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Ensemble = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imputation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Imputation(dAtA[iNdEx:postIndex])
			m.Imputation = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.CategoricalEncoding(dAtA[iNdEx:postIndex])
			m.Encoding = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scaling", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Scaling(dAtA[iNdEx:postIndex])
			m.Scaling = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Date = &b
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Windows = append(m.Windows, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenerated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenerated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Windows) == 0 {
					m.Windows = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Windows = append(m.Windows, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Windows", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Lags = append(m.Lags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenerated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenerated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Lags) == 0 {
					m.Lags = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Lags = append(m.Lags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Lags", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Functions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Functions = append(m.Functions, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Metric(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EMA", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.EMA = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Log = &b
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reduction = ForecastStrategy(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Report) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Report: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Report: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = ReportConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v1.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportGroupByStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportGroupByStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportGroupByStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportsURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportsURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerResults = append(m.WorkerResults, v1alpha1.WorkerRunResult{})
			if err := m.WorkerResults[len(m.WorkerResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Report{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VersionName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntityRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ModelClassName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelClassVersion", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModelClassVersion = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := ReportType(dAtA[iNdEx:postIndex])
			m.ReportType = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := ReportFormat(dAtA[iNdEx:postIndex])
			m.Format = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifierName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NotifierName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveDeadlineSeconds", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActiveDeadlineSeconds = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Custom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronReportName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CronReportName = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LabRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &v1.Time{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &v1.Time{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = ReportPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.StatusError(dAtA[iNdEx:postIndex])
			m.FailureReason = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FailureMessage = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Logs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &v1.Time{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, ReportCondition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceConsumption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceConsumption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceConsumption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Cpu = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Mem = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Gpu = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PythonVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PythonVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PythonCMD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PythonCMD = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PythonPackages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PythonPackages == nil {
				m.PythonPackages = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PythonPackages[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sampler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := SamplerName(dAtA[iNdEx:postIndex])
			m.Sampler = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pruner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pruner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCost", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxCost = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxModels", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxModels = &v
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBestScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MinBestScore = &v2
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trainers", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Trainers = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Test = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetainTop", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetainTop = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetainFor", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetainFor = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchSpace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SearchSpace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarlyStop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EarlyStop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objective", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Metric(dAtA[iNdEx:postIndex])
			m.Objective = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objective2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Metric(dAtA[iNdEx:postIndex])
			m.Objective2 = &s
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tune", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Tune = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonalityPeriodSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonalityPeriodSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonalityPeriodSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Auto = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FourierOrder", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FourierOrder = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonalitySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonalitySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonalitySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Auto = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yearly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Yearly == nil {
				m.Yearly = &SeasonalityPeriodSpec{}
			}
			if err := m.Yearly.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quarterly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quarterly == nil {
				m.Quarterly = &SeasonalityPeriodSpec{}
			}
			if err := m.Quarterly.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monthly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Monthly == nil {
				m.Monthly = &SeasonalityPeriodSpec{}
			}
			if err := m.Monthly.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weekly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weekly == nil {
				m.Weekly = &SeasonalityPeriodSpec{}
			}
			if err := m.Weekly.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daily", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Daily == nil {
				m.Daily = &SeasonalityPeriodSpec{}
			}
			if err := m.Daily.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ColumnName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Op(dAtA[iNdEx:postIndex])
			m.OP = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ModelServingFormat(dAtA[iNdEx:postIndex])
			m.Format = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Study) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Study: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Study: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudyCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudyCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudyCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = StudyConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v1.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudyGroupByStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudyGroupByStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudyGroupByStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudiesURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudiesURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerResults = append(m.WorkerResults, v1alpha1.WorkerRunResult{})
			if err := m.WorkerResults[len(m.WorkerResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Study{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudyPhaseStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudyPhaseStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudyPhaseStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &v1.Time{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &v1.Time{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waiting", wireType)
			}
			m.Waiting = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Waiting |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Running", wireType)
			}
			m.Running = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Running |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			m.Failed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Failed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			m.Completed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Completed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BestScore = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelsWithNoProgress", wireType)
			}
			m.ModelsWithNoProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModelsWithNoProgress |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudyScheduleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudyScheduleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudyScheduleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartAt == nil {
				m.StartAt = &v1.Time{}
			}
			if err := m.StartAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VersionName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ModelClassName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelClassVersion", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModelClassVersion = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LabRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DatasetName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.MLTask(dAtA[iNdEx:postIndex])
			m.Task = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.MLSubtask(dAtA[iNdEx:postIndex])
			m.SubTask = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FESearch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FESearch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImbalanceHandler", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ImbalanceHandler.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Baseline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Search.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ensembles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ensembles.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrainingTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServingTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FctTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FctTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Schedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interpretability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interpretability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriftDetector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DriftDetector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aborted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Aborted = &b
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Reported = &b
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Paused = &b
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Profiled = &b
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelPublished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ModelPublished = &b
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelImagePushed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ModelImagePushed = &b
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelExplained", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ModelExplained = &b
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Fast = &b
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compilation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Compilation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Template = &b
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flagged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Flagged = &b
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Notification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModelImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TTL = &v
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ModelVersion = &s
			iNdEx = postIndex
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutInSecs", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeoutInSecs = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CodeGenerated = &b
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTestsTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnitTestsTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupLocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupLocations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			m.Models = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Models |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &v1.Time{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &v1.Time{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BestModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestModelScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BestModelScore = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = StudyPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainDatasetLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrainDatasetLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestDatasetLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TestDatasetLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationDataset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidationDataset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModelID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastModelID = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.StatusError(dAtA[iNdEx:postIndex])
			m.FailureReason = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FailureMessage = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingRows", wireType)
			}
			m.TrainingRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrainingRows |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingRows", wireType)
			}
			m.TestingRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestingRows |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationRows", wireType)
			}
			m.ValidationRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationRows |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingDataHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrainingDataHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggeredBy = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.TriggerType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Logs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureEngineeringStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeatureEngineeringStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaselineStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaselineStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SearchStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnsembleStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EnsembleStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TestStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplainStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExplainStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriftDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DriftDetection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &v1.Time{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestFE", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BestFE == nil {
				m.BestFE = &FeatureEngineeringSpec{}
			}
			if err := m.BestFE.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groupby", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Groupby.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, StudyCondition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuccessiveHalvingOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuccessiveHalvingOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuccessiveHalvingOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinResources", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinResources = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReductionFactor", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReductionFactor = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinEarlyStoppingRate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinEarlyStoppingRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BootstrapCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuccessiveHalvingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuccessiveHalvingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuccessiveHalvingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Budget", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Budget = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bracket", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bracket = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rung", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rung = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfID", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfID = &v
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.ModalityType(dAtA[iNdEx:postIndex])
			m.Modality = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextPipelineSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextPipelineSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextPipelineSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.TextEncoding(dAtA[iNdEx:postIndex])
			m.Encoder = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokenizer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Tokenizer = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopWords", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.StopWords = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Pos = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lemma", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Lemma = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stem", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Stem = &b
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Embedding = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Svd = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSvdComponents", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxSvdComponents = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThresholdPrunerOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThresholdPrunerOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThresholdPrunerOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Lower = &v2
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upper", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Upper = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarmupSteps", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WarmupSteps = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalSteps", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntervalSteps = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeSeriesEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeSeriesEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeSeriesEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holiday", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Holiday = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.HolidayCountry(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreEvent", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreEvent = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostEvent", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostEvent = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimePoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimePoints = append(m.TimePoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrainingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LabRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.PriorityLevel(dAtA[iNdEx:postIndex])
			m.Priority = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CvType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.CvType(dAtA[iNdEx:postIndex])
			m.CvType = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CV", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CV = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Folds", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Folds = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Split", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Split.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvalMetrics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvalMetrics = append(m.EvalMetrics, github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Metric(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SH", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SH == nil {
				m.SH = &SuccessiveHalvingSpec{}
			}
			if err := m.SH.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Seed = &v2
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Gpu = &b
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Distributed = &b
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureImportance", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FeatureImportance = &b
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodeCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplePct", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SamplePct = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.LogLevel(dAtA[iNdEx:postIndex])
			m.LogLevel = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutInSecs", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeoutInSecs = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnivariateForecastStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnivariateForecastStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnivariateForecastStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridSearchResultURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GridSearchResultURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestEstimator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BestEstimator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CVResultURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CVResultURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecastURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecastURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoPipelineSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoPipelineSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoPipelineSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Featurizer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.VideoFeaturizer(dAtA[iNdEx:postIndex])
			m.Featurizer = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WindowSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WindowSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WindowSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_metaprov_modelaapi_pkg_apis_catalog_v1alpha1.Freq(dAtA[iNdEx:postIndex])
			m.Interval = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Start = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Length = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
