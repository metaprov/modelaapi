/**
*
* Copyright (C) 2017 modela authors
* For license information, see LICENSE.txt
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1;

import "github.com/metaprov/modelaapi/pkg/apis/catalog/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1";

message AlgorithmSearchSpaceSpec {
  // AllowList contain the list of algorithms that should be tested as part of the search.
  repeated string allowlist = 12;

  // VotingEnsample - If true, create a voting ensemble of the top 3 models.
  // +kubebuilder:default:=false
  optional bool votingEnsemble = 13;

  // StackingEnsemble If true, create a stacking ensemble of the top 3 models.
  // +kubebuilder:default:=true
  optional bool stackingEnsemble = 14;

  // set a general filter on the allowed algorithm
  // +kubebuilder:default:="none"
  // +kubebuilder:validation:Optional
  optional string filter = 16;

  // Baselines holds the name of the base line algorithms to try
  // +kubebuilder:validation:Optional
  repeated string baselines = 17;

  // Indicate the all models should be tests
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool testAll = 18;
}

// AudioPipelineSpec is the specification for preprocessing audio data
message AudioPipelineSpec {
  // The date time imputer.
  // +kubebuilder:default:="auto"
  // +kubebuilder:validation:Optional
  optional string featurizer = 1;
}

// BacktestSpec specify the back test
message BacktestSpec {
  // If true, use sliding windows, else use expanding windows
  // +kubebuilder:validation:Optional
  optional bool sliding = 1;

  // The number of data points in each windows used for training.
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 trainingWindowsSize = 2;

  // The number of data points to forecast on.
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 forecastingWindowsSize = 3;

  // The number of data points between each windows
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 slidingSteps = 4;
}

// CapacityStageSpec is the desired state of the capcity testing.
message CapacityStageSpec {
  // Enabled indicates that the stage is enabled
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // ServingSiteName is the serving site for the testing during the capacity stage
  // If the serving site is empty or null, the system will skip the capacity stage unit tests.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string servingSiteName = 2;

  // Validations is the specification of tests to run in this stage
  // +kubebuilder:validation:Optional
  repeated ModelValidation validations = 3;

  // A reference to the workload class that is used for running the prediction
  // +kubebuilder:default:="nano-cpu-250m-mem-256mi"
  // +kubebuilder:validation:Optional
  optional string workloadClassName = 5;
}

message ChangePointSpec {
  // number of change points
  // +kubebuilder:default = 25
  // +kubebuilder:validation:Optional
  optional int32 N = 1;

  // Change point range
  // +kubebuilder:default = 0.8
  // +kubebuilder:validation:Optional
  optional double range = 2;
}

// ChatbotEstimatorSpec is an spec for chat bot. This is not implemented yet
message ChatbotEstimatorSpec {
  // The name of the base model
  // +kubebuilder:validation:Optional
  optional string base = 1;
}

// ClassicalEstimatorSpec is the specification for an algorithm and the actual value fof the hyper parameters
message ClassicalEstimatorSpec {
  // AlgorithmName is a reference to the algorithm in the catalog
  optional string algorithmName = 1;

  // Parameters is a list of the algorithm hyper parameters
  repeated HyperParameterValue parameters = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status"
// +kubebuilder:printcolumn:name="Owner",type="string",JSONPath=".spec.owner",priority=1
// +kubebuilder:printcolumn:name="Schedule",type="string",JSONPath=".spec.schedule"
// +kubebuilder:printcolumn:name="Last Run",type="date",JSONPath=".status.lastRun",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=cronreports,shortName=crep,singular=cronreport,categories={training,modela}
// CronReport represents a run of the summary report.
message CronReport {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional CronReportSpec spec = 2;

  optional CronReportStatus status = 3;
}

// ReportCondition describes the state of ReportTemplate
message CronReportCondition {
  // Type of  condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// CronReportList is a list of CronReport
message CronReportList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated CronReport items = 2;
}

// CronReportSpec represent the desired state of CronReport
message CronReportSpec {
  // VersionName is the data product version of the data pipeline
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 2;

  // Schedule for running the pipeline
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RunSchedule schedule = 3;

  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string range = 4;

  // Template refer to the prediction template
  optional ReportTemplate template = 5;

  // Set to true to pause the cron report
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 6;

  // Notification specification.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.NotificationSpec notification = 7;
}

// CronReportStatus is the observed state of a ReportTemplate
message CronReportStatus {
  // Last run is the last time a run was created
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastRun = 1;

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 2;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 3;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated CronReportCondition conditions = 4;
}

// Bar Chart
message CustomReportBarChart {
  // Dataset is the name of the dataset
  // +kubebuilder:validation:Optional
  optional string datasetName = 1;

  // name of the X column
  // +kubebuilder:validation:Optional
  optional string x = 2;

  // Y column
  // +kubebuilder:validation:Optional
  optional string y = 3;

  // Show borther
  // +kubebuilder:validation:Optional
  optional bool legend = 4;

  // Show borther
  // +kubebuilder:validation:Optional
  optional bool sort = 5;
}

message CustomReportHistogram {
  // Dataset is the name of the dataset
  // +kubebuilder:validation:Optional
  optional string datasetName = 1;

  // name of the X column
  // +kubebuilder:validation:Optional
  optional string x = 2;

  // Show borther
  // +kubebuilder:validation:Optional
  optional int32 bins = 3;
}

message CustomReportLineChart {
  // Dataset is the name of the dataset
  optional string datasetName = 1;

  // name of the X column
  // +kubebuilder:validation:Optional
  optional string x = 2;

  // Y column
  // +kubebuilder:validation:Optional
  optional string y = 3;

  // Show borther
  // +kubebuilder:validation:Optional
  optional bool legend = 4;
}

message CustomReportScatterPlot {
  // Dataset is the name of the dataset
  // +kubebuilder:validation:Optional
  optional string datasetName = 1;

  // name of the X column
  // +kubebuilder:validation:Optional
  optional string x = 2;

  // name of the Y axis columns
  // +kubebuilder:validation:Optional
  optional string y = 3;
}

// Container for custom reports.
message CustomReportSpec {
  repeated CustomReportValue values = 1;

  repeated CustomReportTable tables = 2;

  repeated CustomReportLineChart lineCharts = 3;

  repeated CustomReportBarChart barCharts = 4;

  repeated CustomReportHistogram histCharts = 5;

  repeated CustomReportHistogram scatterCharts = 6;
}

message CustomReportTable {
  // Dataset is the name of the dataset
  // +kubebuilder:validation:Optional
  optional string datasetName = 1;

  // List of table columns, if empty use call the columns
  // +kubebuilder:validation:Optional
  repeated string columns = 2;

  // one or more filters
  // +kubebuilder:validation:Optional
  repeated string filters = 3;

  // Groupby columns
  // +kubebuilder:validation:Optional
  repeated string groupby = 4;

  // Row is the row number
  // +kubebuilder:validation:Optional
  optional int32 rows = 5;

  // Show index column
  // +kubebuilder:validation:Optional
  optional bool showIndex = 6;

  // Show borther
  // +kubebuilder:validation:Optional
  optional bool border = 7;
}

message CustomReportValue {
  // Dataset is the name of the dataset
  // +kubebuilder:validation:Optional
  optional string datasetName = 1;

  // Column is the name of the column
  // +kubebuilder:validation:Optional
  optional string column = 2;

  // Row is the row number
  // +kubebuilder:validation:Optional
  optional int32 row = 3;

  // Scalar the a const value
  // +kubebuilder:validation:Optional
  optional string scalar = 4;
}

// SeasonalitySpec defines the custom seasonality
message CustomSeasonalitySpec {
  // The name of the custom seasonality
  // +kubebuilder:validation:Required
  optional string name = 1;

  // The name of the custom seasonality
  // +kubebuilder:validation:Required
  optional double period = 2;

  // +kubebuilder:validation:Optional
  optional int32 fourierOrder = 3;
}

// List compiler spec
message DataHashes {
  // Training
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string trainHash = 1;

  // Testing hash is a sha 256 of the testing data.
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string testingHash = 2;

  // Pointer to the validation
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string validationHash = 3;
}

message DataSplit {
  // Indicate that this is an automatic split.
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool auto = 1;

  // Training is a percent number (0-100) which specify how much of
  // the data will be used for training
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=80
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=100
  optional int32 train = 2;

  // Validation is percent of dataset rows which would be used to compute the objective during
  // hyper parameter search phase.
  // Only used if we do not do cross validation.
  // default is 10% of the data, if we do not have cross validation.
  // default is 0% of the data, if we do cross validation.
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Maximum=50
  // +kubebuilder:validation:Optional
  optional int32 validation = 3;

  // Test is percent of dataset rows which would be used to compute the objective during
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=50
  // +kubebuilder:default:=20
  // +kubebuilder:validation:Optional
  optional int32 test = 4;

  // Indicate if the dataset split should be stratified.
  // +kubebuilder:default:="stratified"
  // +kubebuilder:validation:Optional
  optional string splitPolicy = 5;

  // The name of the column used to split
  // +kubebuilder:validation:Optional
  optional string splitColumn = 6;

  // The seed to use for the estimator
  // Default: 42
  // +kubebuilder:default:=42
  // +kubebuilder:validation:Optional
  optional int32 seed = 7;
}

// DataStageSpec is the desired state of the data preprocessing step of the pipeline.
// Data preprocessing will be done via
message DataStageSpec {
  // Enabled indicates that the stage is enabled
  // +kubebuilder:default:=true
  optional bool enabled = 1;

  // LabName is the lab that execute processing of the data pipeline
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string labName = 2;

  // If not null, run the data pipeline and create a dataset. else, use the data in the data location
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string datapipelineName = 3;

  // The data source name for the data in the location. The data source will be used to create a new dataset for this pipeline
  // based on the file in the location.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string datasourceName = 4;

  // If Not null, run a docker image is used in order to generate the data.
  // The data must reside in location after the container run
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string dockerImage = 5;
}

message DeepEstimatorLayer {
  // Name is the name of the layer
  optional string name = 1;

  // Type is the type of the layers
  optional string type = 2;

  // Parameters are the hyper parameters of this layer
  repeated NNLayerParameter parameters = 3;

  // InputLayers are the layer input to this layer
  repeated string inputLayers = 4;
}

message DeepEstimatorSpec {
  // Layers is the dnn architecture
  // +kubebuilder:validation:Optional
  repeated DeepEstimatorLayer layers = 1;

  // The type of the dnn
  // +kubebuilder:validation:Optional
  optional string type = 2;

  // Batch size specify about
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 batchSize = 3;

  // Budget size specify about
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 epochs = 4;

  // ValidationSplit specify about
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 validationSplit = 5;

  // Is this a seq model
  // +kubebuilder:validation:Optional
  optional bool isSeq = 6;

  // Gpus denote of gpu for trainer, any number more than 1 denote distribute training
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 gpus = 7;

  // compile
  // +kubebuilder:validation:Optional
  optional string loss = 8;
}

// DeploymentStageSpec define the testing and releasing the resulting model to production.
message DeploymentStageSpec {
  // Enabled indicates that we want to release the model into production
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // ServingSiteName is the serving site for the release, if empty, the system will use the default serving site name
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string servingSiteName = 2;

  // ManualApproval dentoes if we need manual approval before advancing from deployed to released
  // By default a user is needed to approve the release to production
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool manualApproval = 3;

  // Validations is the specification of tests to run in this stage
  // +kubebuilder:validation:Optional
  repeated ModelValidation validations = 4;

  // A reference to the workload class that is used for running the test prediction
  // +kubebuilder:default:="nano-cpu-250m-mem-256mi"
  // +kubebuilder:validation:Optional
  optional string workloadClassName = 5;
}

// EnsembleRules is an algorithm class that decide
message EnsembleRules {
}

message EnsembleSpec {
  // A list of base model to ensemble. The ensemble method is represented as the algorithm name.
  // +kubebuilder:validation:Optional
  repeated string base = 2;
}

// FeatureEngineeringPipeline represent a single pipeline for data transformation.
// The pipeline includes the column names and the data type.
message FeatureEngineeringPipeline {
  // The name of this feature engineering pipeline
  // +kubebuilder:validation:Required
  optional string name = 1;

  // The Data type for the feature engineering.
  // +kubebuilder:validation:Required
  optional string datatype = 2;

  // Columns is the name of the columns from the original file.
  // All the columns must be from the same type
  // +kubebuilder:validation:Optional
  repeated string columns = 3;

  // imputer
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string imputation = 4;

  // Encoder. Apply only to categorical variables
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string encoding = 5;

  // Numeric var scaler, valid only if the
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string scaling = 6;

  // Convert numerical datatypes to categories. Valid only if the number data types.
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string discretisation = 7;

  // For numerical data type.
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string variableTransformation = 8;

  // Specify how to handle outliers.
  // Apply only to numeric datatypes.
  optional string outlierHandling = 9;

  // Specify how For datetime data type,
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string datetimeTransformation = 10;

  // Text specify the column transformation for text columns
  // +kubebuilder:validation:Optional
  optional TextPipelineSpec text = 11;

  // Image specify the pipeline for images. Not supported in this release
  // +kubebuilder:validation:Optional
  optional ImagePipelineSpec image = 12;

  // Audio specify the pipeline for audio. Not supported in this release
  // +kubebuilder:validation:Optional
  optional AudioPipelineSpec audio = 13;

  // Video specify the pipeline for video. Not supported in this release
  // +kubebuilder:validation:Optional
  optional VideoPipelineSpec video = 14;

  // Spec to generate one or more columns from existing columns in this pipeline
  // +kubebuilder:validation:Optional
  repeated GeneratedColumnSpec generated = 15;

  // Specify custom columns. Custom Columns are specified by the user
  repeated GeneratedColumnSpec custom = 16;

  // If dropped, all the columns in this pipeline will be dropped.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool drop = 17;

  // If true, all the features in this pipeline will passtrough, without processing.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool passtrough = 18;
}

// Define the specification for the best feature engineering pipeline
message FeatureEngineeringSearchSpec {
  // If false, the study will not search for feature engineering.
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // Estimator is the algorithm to use when tunning the feature engineering pipeline
  optional string estimator = 2;

  // Max models to create during the search for the best feature engineering.
  // +kubebuilder:default:=10
  // +kubebuilder:validation:Optional
  optional int32 maxModels = 3;

  // Max time in seconds for the best feature engineering pipeline
  // +kubebuilder:default:=3600
  // +kubebuilder:validation:Optional
  optional int32 maxTime = 4;

  // Number of parallel models
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 maxTrainers = 5;

  // How much to sample from the dataset when performing the feature engineering search
  // +kubebuilder:default:=100
  // +kubebuilder:validation:Optional
  optional int32 samplePct = 6;

  // If true, remove all the models that were used for feature engineering, once
  // +kubebuilder:default:=true
  // the feature engineering is done.
  optional bool autoRemove = 7;
}

message FeatureEngineeringSearchStatus {
  // The recommended pipeline after feature engineering was done
  optional FeatureEngineeringSpec best = 1;
}

message FeatureEngineeringSpec {
  // List of processing pipelines
  // +kubebuilder:validation:Optional
  repeated FeatureEngineeringPipeline pipelines = 2;

  // Spec for feature selection
  // +kubebuilder:validation:Optional
  optional FeatureSelectionSpec selection = 3;
}

message FeatureImportance {
  optional string feature = 1;

  // +kubebuilder:validation:Format=float
  // +kubebuilder:validation:Type=number
  optional double importance = 2;
}

message FeatureInfo {
  // The feature name
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string name = 1;

  // The reason that the feature was dropped
  // +kubebuilder:validation:Optional
  optional string reason = 2;

  // +kubebuilder:validation:Optional
  optional double value = 3;
}

// Feature selection spec defines how to select feature
message FeatureSelectionSpec {
  // Lowvar specify the filter to remove low variance features
  // +kubebuilder:default:=5
  // +kubebuilder:validation:Optional
  optional int32 lowVarTresholdPct = 2;

  // Remove Features with high correlations
  // +kubebuilder:default:=95
  // +kubebuilder:validation:Optional
  optional int32 corrTreshold = 3;

  // Select the Top N is the number of feature to select by importance. If 0, all the features are selected.
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 topN = 4;

  // The cummulative importance of all the importance feature to include
  // +kubebuilder:default:=95
  // +kubebuilder:validation:Optional
  optional int32 cumulativeImportancePrecent = 5;

  // List of feature names to consider when training , even after filtering
  // +kubebuilder:validation:Optional
  repeated string reserved = 6;
}

// A definition for a single forecast
// A single forecast knows its forecast key and the index to its level
message ForecastObj {
  optional string key = 1;

  optional int32 levelIndex = 2;
}

// The Forecast storage spec specify where to store the forecast after prediction.
message ForecastPostProcessingSpec {
  // The name of the connection for a database the result of the forecast
  // If null, the system will insert the forecast in the database.
  // +kubebuilder:validation:Optional
  optional string connectionName = 1;

  // Specify if we should generate a forecast using the model
  // If true, the system will perform a forecast and update the forecast connection.
  // Default it true
  // +kubebuilder:validation:Optional
  optional bool forecast = 2;
}

// ForecastingSpec
message ForecastSpec {
  // Required, the freq of the time series (daily,weekly)
  // +kubebuilder:validation:Optional
  optional TimeSeriesDataSpec data = 1;

  // The confidence levels for the forecast, each level must be between 1-100.
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Minimum=0
  optional int32 confidenceInterval = 2;

  // The backtest specification, the system supports back testing with expanding windows.
  // +kubebuilder:validation:Optional
  optional BacktestSpec backtest = 3;

  // Post processing
  // +kubebuilder:validation:Optional
  optional ForecastPostProcessingSpec postProcessing = 4;

  // If true generate the plots
  // +kubebuilder:default = true
  // +kubebuilder:validation:Optional
  optional bool plot = 5;

  // +kubebuilder:default = true
  // +kubebuilder:validation:Optional
  optional bool plotChangePoints = 6;
}

message FormatSpec {
}

message GeneratedColumnSpec {
  // The name of the generated column
  optional string name = 1;

  // The resulting data type
  optional string datatype = 2;

  // The name of the first original column
  optional string first = 3;

  // The name of the second original column, if the expression is binary operator
  // +kubebuilder:validation:Optional
  optional string second = 4;

  // The expression to apply in order to generate the new column
  // +kubebuilder:validation:Optional
  optional string original = 5;
}

message Hierarchy {
  // The columns in the data frame that belongs to the hierarchy. By default, all the item level column is the last one. The default aggregate function is sum.
  repeated string columns = 1;

  // The group level columns. For each group level column specify the horizon and the aggregate function
  repeated Level groupLevels = 2;

  // Item level column.
  optional Level itemLevel = 3;

  // Optional notifier to use when the forecast is complete.
  // +kubebuilder:validation:Optional
  optional string notifierName = 4;
}

message HolidaySpec {
  // The name of the holiday column. If the column is empty, no holiday
  // Column name of the first level of grouping
  // +kubebuilder:validation:Optional
  optional string holidayColumn = 1;

  // +kubebuilder:validation:Optional
  optional string country = 2;

  // For custom holiday use external dataset
  optional string datasetName = 3;
}

// HyperParameterValue represent a specific value of
// the learning algorithm hyper-parameter. The value is chosen
// by the planner
message HyperParameterValue {
  // Reference to the name of the hyper parameter.
  optional string name = 1;

  // Value hold the value if  the hyper paramer type is string
  optional string value = 2;
}

// ImagePipelineSpec is the specification for preprocessing image data
message ImagePipelineSpec {
  // The date time imputer.
  // +kubebuilder:default:="auto"
  // +kubebuilder:validation:Optional
  optional string featurizer = 1;
}

message Level {
  // The name of the level - the column name
  optional string string = 1;

  // The number of time periods to
  optional int32 horizon = 2;

  // The freq of the level
  optional string freq = 3;

  // The aggregate function used to roll up the lower level
  optional string aggregate = 4;

  // The distinct values of the column for this level
  repeated string distinc = 5;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Progress",type="string",JSONPath=".status.progress"
// +kubebuilder:printcolumn:name="Best",type="boolean",JSONPath=".status.best"
// +kubebuilder:printcolumn:name="Owner",type="string",JSONPath=".spec.owner",priority=1
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Study",type="string",JSONPath=".spec.studyName"
// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task"
// +kubebuilder:printcolumn:name="Algorithm",type="string",JSONPath=".spec.estimator.algorithmName"
// +kubebuilder:printcolumn:name="Objective",type="string",JSONPath=".spec.objective"
// +kubebuilder:printcolumn:name="CV Score",type="number",JSONPath=".status.cvScore"
// +kubebuilder:printcolumn:name="Train Score",type="number",JSONPath=".status.trainScore"
// +kubebuilder:printcolumn:name="Test Score",type="number",JSONPath=".status.testScore"
// +kubebuilder:printcolumn:name="Last Error",type="number",JSONPath=".status.lastError"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=models,singular=model,shortName=md,categories={training,modela,all}
// Model represent a machine learning model.
// models are automatically generated by the planner and trained by the trainer.
// After training, models are packaged into a docker container and served
// by predictor.
message Model {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelSpec spec = 2;

  optional ModelStatus status = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Location Product",type="string",JSONPath=".spec.dataProductName"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.dataProductVersionName"
// +kubebuilder:printcolumn:name="Dataset",type="string",JSONPath=".status.datasetName"
// +kubebuilder:printcolumn:name="Study",type="string",JSONPath=".status.studyName"
// +kubebuilder:printcolumn:name="Predictor",type="string",JSONPath=".status.predictorName"
// +kubebuilder:printcolumn:name="StartTime",type="date",JSONPath=".status.startTime",priority=1
// +kubebuilder:printcolumn:name="CompletionTime",type="date",JSONPath=".status.completionTime",priority=1
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=modelautobuilders,singular=modelautobuilder,shortName=ar,categories={training,modela,all}
// ModelAutobuilder represent an automatic run of all the phases needed to create a model
message ModelAutobuilder {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelAutobuilderSpec spec = 2;

  optional ModelAutobuilderStatus status = 3;
}

// ModelAutobuilderCondition describes the state of a pipeline at a certain point.
message ModelAutobuilderCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// ModelAutobuilderList represent a list of ModelAutoBuilders
message ModelAutobuilderList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelAutobuilder items = 2;
}

// ModelAutobuilderSpec define the desired state of the ModelAutobuilder resource.
message ModelAutobuilderSpec {
  // DataProductName is the name of the data product
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:Optional
  optional string dataProductName = 1;

  // DataProductVersionName is a reference to data product version
  // +kubebuilder:validation:MaxLength=253
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:Optional
  optional string dataProductVersionName = 2;

  // DataSourceName is the name of existing datasource, if empty the datasource parameters will be inferred from the file
  // +kubebuilder:validation:MaxLength=253
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:Optional
  optional string datasourceName = 3;

  // DatasetName is the name of existing dataset, if empty the dataset object will be created
  // otherwise, a dataset will be created based on the file in the path section.
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:MaxLength=253
  optional string datasetName = 4;

  // Location is the location of the data in the cloud
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 5;

  // Task is the machine learning task (regression/classification)
  // required
  optional string task = 6;

  // The task objective. this is how models will be scored.
  // If not defined this will be set to the default objective for the task
  // +kubebuilder:validation:Optional
  optional string objective = 7;

  // Target column.
  // Default: last column in the schema.
  // +kubebuilder:validation:MaxLength=128
  // +kubebuilder:validation:Optional
  optional string targetColumn = 8;

  // Max training time.
  // +kubebuilder:validation:Maximum=512
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:default:=60
  // +kubebuilder:validation:Optional
  optional int32 maxTime = 9;

  // Max model
  // +kubebuilder:validation:Maximum=512
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:default:=10
  // +kubebuilder:validation:Optional
  optional int32 maxModels = 10;

  // Access method specify the predictor access method.
  // Default: ClusterPort
  // +kubebuilder:default:=cluster-port
  // +kubebuilder:validation:Optional
  optional string accessMethod = 11;

  // Specify if the predictor should autoscale.
  // Default : false
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool autoScale = 12;

  // The spec of the data source, if none, the runner will infer the schema, and will create a new schema with
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSourceSpec dataSourceSpec = 13;

  // Specify the number of trainers.
  // Default 1 trainer.
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 trainers = 14;

  // Specify the search method
  // +kubebuilder:default:="random"
  // +kubebuilder:validation:Optional
  optional string sampler = 15;

  // Set the true to abort the model auto builder
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool aborted = 16;

  // The owner account name
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 17;

  // WorkloadClassName is the name of the workload class used to run this pipeline.
  // +kubebuilder:default:="nano-cpu-250m-mem-256mi"
  // +kubebuilder:validation:Optional
  optional string workload = 18;

  // LabRef is a reference to the lab where the trainers for this study run.
  // If no value is provided, the lab is taken from the
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference labRef = 19;
}

// ModelAutobuilderStatus define the observed state of the pipeline
message ModelAutobuilderStatus {
  // the generate flat file name
  optional string flatFileName = 1;

  // the generated schema name (if generated)
  optional string dataSourceName = 2;

  // the generated dataset name (if generated)
  optional string datasetName = 3;

  // the generate study name
  optional string studyName = 4;

  // The selected model name.
  optional string bestModelName = 6;

  // the generated predictor name
  optional string predictorName = 7;

  // the name of the image repository
  optional string imageRepoName = 8;

  // The phase of the auto ml run
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 9;

  // number of rows in the dataset
  // +kubebuilder:validation:Optional
  optional int32 rows = 10;

  // number of columns, used mainly to show the columns
  // +kubebuilder:validation:Optional
  optional int32 cols = 11;

  // file size in bytes
  // +kubebuilder:validation:Optional
  optional int32 fileSize = 12;

  // Total models created for the study
  // +kubebuilder:validation:Optional
  optional int32 models = 13;

  // models that were successful during training
  // +kubebuilder:validation:Optional
  optional int32 trainedModels = 14;

  // The Best model score, so far.
  // +kubebuilder:validation:Optional
  optional double bestModelScore = 15;

  // The best estimator, taken from the best model
  optional ClassicalEstimatorSpec estimator = 16;

  // StartTime is the times that this prediction job started
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 17;

  // CompletionTime is the time that this prediction job finished
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 18;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 19;

  // Last error
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string lastError = 20;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ModelAutobuilderCondition conditions = 21;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Progress",type="number",JSONPath=".status.progress"
// +kubebuilder:printcolumn:name="Model",type="string",JSONPath=".status.modelName"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".status.versionName"
// +kubebuilder:printcolumn:name="StartTime",type="date",JSONPath=".status.startTime",priority=1
// +kubebuilder:printcolumn:name="CompletionTime",type="date",JSONPath=".status.completionTime",priority=1
// +kubebuilder:printcolumn:name="Last Error",type="string",JSONPath=".status.lastError"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=modelcompilerruns,shortName=mcr,singular=modelcompilerrun,categories={train,modela,all}
// ModelCompilerRun represent a single compilation of a model into a target hardware.
message ModelCompilerRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelCompilerRunSpec spec = 2;

  // +kubebuilder:validation:Optional
  optional ModelCompilerRunStatus status = 3;
}

// ModelCompilerRunCondition describes the state of a ModelCompilerRun at a certain point.
message ModelCompilerRunCondition {
  // Type of  condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// ModelCompilerRunList represent list of pipelineruns
message ModelCompilerRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelCompilerRun items = 2;
}

// ModelCompilerRunSpec is the desired state of the ModelCompilerRun resource
message ModelCompilerRunSpec {
  // VersionName is the data product version of the run
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // Description is the user provided description
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string description = 2;

  // DatasetName is the name of the dataset that we trained on.
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string modelName = 3;

  // The owner of the ruyn.
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 4;

  // The priority of this pipeline run. The default is medium.
  // +kubebuilder:default:=medium
  // +kubebuilder:validation:Optional
  optional string priority = 5;

  // The compiler name
  // +kubebuilder:default:=tvm
  optional string compiler = 6;

  // Set one or more targets for the compiler
  optional string target = 7;
}

// ModelCompilerRunStatus is the observed state of the ModelCompilerRun resource .
message ModelCompilerRunStatus {
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 13;

  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 14;

  // The phase of the pipeline run
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 15;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 16;

  // Folder for pipeline run artifacts. This is assigned by the system
  // The folder contains all the pipeline artifacts - metadata, logs
  // +kubebuilder:validation:Optional
  optional string evalMetrics = 17;

  // Last error
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string lastError = 18;

  // Pipeline progress Progress in precent, the progress takes into account the different stages of the pipeline
  // +kubebuilder:validation:Optional
  optional int32 progress = 19;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ModelCompilerRunCondition conditions = 20;
}

// ModelCondition describes the state of a model at a certain point.
message ModelCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// Model Image spec define the desired state of the container image of the best model
// If enabled, the system will create a docker image and push it to a docker registry
message ModelImageSpec {
  // Is the release to
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=false
  optional bool exist = 1;

  // Full image name to use
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string imageName = 2;

  // The name of the connection object, the name must be provided in order to push the image.
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string registryConnectionName = 3;
}

// +kubebuilder:object:root=true
// ModelList is a list of models.
message ModelList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Model items = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Schedule",type="string",JSONPath=".spec.schedule",description=""
// +kubebuilder:printcolumn:name="Last Run",type="date",JSONPath=".status.lastRun",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=modelpipelines,singular=modelpipeline,shortName=pipe,categories={training,modela,all}
// ModelPipeline represent a CI/CD machine learning pipeline definition
message ModelPipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelPipelineSpec spec = 2;

  optional ModelPipelineStatus status = 3;
}

// ModelPipelineCondition describes the state of a pipeline at a certain point.
message ModelPipelineCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// ModelPipelineList represent list of pipelines
message ModelPipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelPipeline items = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Progress",type="number",JSONPath=".status.progress"
// +kubebuilder:printcolumn:name="Pipeline",type="string",JSONPath=".status.pipelineName"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".status.versionName"
// +kubebuilder:printcolumn:name="StartTime",type="date",JSONPath=".status.startTime",priority=1
// +kubebuilder:printcolumn:name="CompletionTime",type="date",JSONPath=".status.completionTime",priority=1
// +kubebuilder:printcolumn:name="Last Error",type="string",JSONPath=".status.lastError"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=modelpipelineruns,shortName=mpr,singular=modelpipelinerun,categories={train,modela,all}
// ModelPipelineRun represent a execution of a pipeline
message ModelPipelineRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelPipelineRunSpec spec = 2;

  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStatus status = 3;
}

// ModelPipelineRunCondition describes the state of a ModelPipelineRun at a certain point.
message ModelPipelineRunCondition {
  // Type of  condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// ModelPipelineRunList represent list of pipelineruns
message ModelPipelineRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelPipelineRun items = 2;
}

// ModelPipelineRunSpec is the desired state of the ModelPipelineRun resource
message ModelPipelineRunSpec {
  // VersionName is the data product version of the run
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // Description is the user provided description
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string description = 2;

  // DatasetName is the name of the dataset that we trained on.
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string datasetName = 3;

  // PipelineName is the name of the ModelPipeline for this pipeline
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string pipelineName = 4;

  // The owner of the run.
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 5;

  // The priority of this pipeline run. The default is medium.
  // +kubebuilder:default:=medium
  // +kubebuilder:validation:Optional
  optional string priority = 6;

  // Set to true to pause the model pipeline run
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 7;

  // Set to true to abort the model pipeline run
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool aborted = 8;

  // TTL.
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 ttl = 9;
}

// ModelPipelineRunStageStatus is the observed state of the PipelineRunStage.
message ModelPipelineRunStageStatus {
  // Phase is the phase of the stage
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 1;

  // Approved indicates that the stage is approved.
  // +kubebuilder:validation:Optional
  optional bool approved = 2;

  // ApprovedBy indicates the account that approve this model.
  // +kubebuilder:validation:Optional
  optional string approvedBy = 3;

  // ApprovedAt indicates the time of approval
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time approvedAt = 4;

  // Start time is the start time of the stage
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 7;

  // End time is the end time of the stage.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 8;

  // Results is the results of running the test datasets against the new model
  // +kubebuilder:validation:Optional
  repeated ModelValidationResult results = 9;

  // Error record error.
  // +kubebuilder:validation:Optional
  optional string error = 10;
}

// ModelPipelineRunStatus is the observed state of the ModelPipelineRun resource .
message ModelPipelineRunStatus {
  // The current stage of the pipeline
  // +kubebuilder:validation:Optional
  optional string stage = 1;

  // The name of the dataset that was captured by the label filter.
  // +kubebuilder:validation:Optional
  optional string datasetName = 2;

  // The name of the study generated.
  // +kubebuilder:validation:Optional
  optional string studyName = 3;

  // The name of the best model
  // +kubebuilder:validation:Optional
  optional string modelName = 4;

  // DataStatus is the status of the data stage
  // data is the status for the data stage.
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus dataStatus = 5;

  // TrainingStatus is the status for the training stage
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus trainingStatus = 6;

  // UATStatus is the status of the uat stage
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus uatStatus = 7;

  // CapacityStatus is the status for the capacity stage.
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus capacityStatus = 8;

  // DeploymentStatus is the status for the prod stage
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus deploymentStatus = 9;

  // DeploymentStatus is the status for the prod stage
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus releaseStatus = 10;

  // Monitoring status is the status of the monitor phase.
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus monitoringStatus = 11;

  // Labeling status if the status of the labeling process
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus labelingStatus = 12;

  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 13;

  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 14;

  // The phase of the pipeline run
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 15;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 16;

  // Folder for pipeline run artifacts. This is assigned by the system
  // The folder contains all the pipeline artifacts - metadata, logs
  // +kubebuilder:validation:Optional
  optional string evalMetrics = 17;

  // Last error
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string lastError = 18;

  // Pipeline progress Progress in precent, the progress takes into account the different stages of the pipeline
  // +kubebuilder:validation:Optional
  optional int32 progress = 19;

  // What triggered the run
  // +kubebuilder:validation:Optional
  optional string triggeredBy = 20;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ModelPipelineRunCondition conditions = 21;
}

// ModelPipelineSpec define the desired state of the ModelPipeline resource.
message ModelPipelineSpec {
  // The product version of the resource
  // +kubebuilder:default ="latest"
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // User provided description
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string description = 3;

  // DatasetSelector is used to select dataset for training
  // +kubebuilder:validation:Optional
  map<string, string> datasetSelector = 4;

  // Datastage build new dataset from the data sources.
  // +kubebuilder:validation:Optional
  optional DataStageSpec data = 5;

  // TrainingSpec stage
  // +kubebuilder:validation:Optional
  optional TrainingStageSpec training = 6;

  // Acceptance stage is used for further testing
  // +kubebuilder:validation:Optional
  optional UATStageSpec uat = 7;

  // Capacity stage for capacity
  // +kubebuilder:validation:Optional
  optional CapacityStageSpec capacity = 8;

  // Deployment stage define how to place the model into production.
  // +kubebuilder:validation:Optional
  optional DeploymentStageSpec deployment = 9;

  // Deployment stage define how to place the model into production.
  // +kubebuilder:validation:Optional
  optional ReleaseStageSpec release = 10;

  // Folder for the pipeline and pipeline run artifacts.
  // The folder contains all the study artifacts - metadata, reports, profile,models
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 13;

  // Schedule for running the pipeline
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RunSchedule schedule = 14;

  // The owner of the run, set to the owner of the pipeline
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:Optional
  optional string owner = 15;

  // ApproverAccountName is the name of the approver for stages that need approvals.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string approverAccountName = 16;

  // Notification specification.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.NotificationSpec notification = 17;

  // BaselineModelName is the name of the model which is used to compare with this pipeline results.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string baselineModelName = 18;

  // The priority of this pipeline. The default is medium.
  // +kubebuilder:default:="medium"
  // +kubebuilder:validation:Optional
  optional string priority = 30;

  // Pause the pipeline cron job.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 31;
}

// ModelPipelineStatus define the observed state of the pipeline
message ModelPipelineStatus {
  // Last run is the last time a run was created
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastRun = 1;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 2;

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 3;

  // Last error during reconciliation
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string lastError = 4;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ModelPipelineCondition conditions = 5;
}

// model cv results
message ModelResult {
  // +kubebuilder:validation:Optional
  optional string name = 1;

  // +kubebuilder:validation:Optional
  optional string alg = 2;

  // +kubebuilder:validation:Optional
  optional double score = 3;

  // +kubebuilder:validation:Optional
  optional bool error = 4;
}

// ModelSearchSpec the constraint on the training process.
// The values are assigned to the model from the study.
message ModelSearchSpec {
  // Type specify the hyper parameter optimization search method.
  // The only supported value is random
  // +kubebuilder:default:=random
  // +kubebuilder:validation:Optional
  optional string sampler = 1;

  // The pruner to use during model search.
  // +kubebuilder:validation:Optional
  optional PrunerSpec pruner = 2;

  // MaxCost specify what is the maximum cost incurred before
  // stopping model creations
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=100
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=1000
  optional int32 maxCost = 3;

  // MaxTime specify what is the maximum time allocated to a study (in minutes).
  // the cross validation stage.
  // +kubebuilder:default:=30
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=10000
  // +kubebuilder:validation:Optional
  optional int32 maxTime = 4;

  // Used for random search, the max models sampled.
  // +kubebuilder:default:=10
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=1000
  // +kubebuilder:validation:Optional
  optional int32 maxModels = 5;

  // The minimum score by which the search would stop
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional double minScore = 6;

  // The desired number of trainers running during search.
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Maximum=50
  // +kubebuilder:validation:Minimum=0
  optional int32 trainers = 7;

  // Test indicate the desired number of models that should be passed to the testing phase.
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=5
  optional int32 test = 8;

  // Indicate the total number of full models that would be retain in etcd.
  // All other models are garbage collected (archived).
  // models are sorted by thier objective score.
  // +kubebuilder:default:=10
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=100
  optional int32 retainTop = 9;

  // RetainFor measure the time in minutes for modela trained. Default is 60 min (1 H).
  // +kubebuilder:default:=60
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=2400
  optional int32 retainedFor = 10;

  // Define when the schedule start
  // +kubebuilder:validation:Optional
  optional StudyScheduleSpec studySchedule = 11;

  // Define the algorithm search space.
  // +kubebuilder:validation:Optional
  optional AlgorithmSearchSpaceSpec searchSpace = 12;

  // If larget than 0, stop the search if no change in best score occur.
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 earlyStopAfter = 19;

  // If true, keep only the top model from an algorithm
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool keepOnlyTopModel = 20;
}

// ModelSpec defines the desired state of the Model resource
message ModelSpec {
  // Owner is the account name of the owner of this model
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 1;

  // VersionName is the product version name for this model
  // +kubebuilder:validation:Required
  // +kubebuilder:default:="latest"
  // +kubebuilder:validation:MaxLength=63
  optional string versionName = 2;

  // ModelVersion is an assigned version to the model.
  // +kubebuilder:validation:Required
  optional string modelVersion = 4;

  // StudyName reference the study for this model. IF empty, the model is stand alone
  // +kubebuilder:validation:Required
  // +kubebuilder:validation:MaxLength=63
  optional string studyName = 5;

  // DatasetName refer to the dataset object for which the model is for.
  // +kubebuilder:validation:Required
  // +kubebuilder:validation:MaxLength=63
  optional string datasetName = 6;

  // Task is the machine learning task (regression, classification).
  // The task is generated from the study task
  // +kubebuilder:validation:Required
  optional string task = 7;

  // Objective is the metric by which the system compare models
  // Default: based on the task. classification is logloss. Regression is rmse
  // +kubebuilder:validation:Required
  optional string objective = 8;

  // Represent the preprocessing pipeline of the model. Provide a value if you want to customize the model.
  // Default: All preprocessing will be created automatically
  // +kubebuilder:validation:Optional
  optional FeatureEngineeringSpec fe = 9;

  // Estimator is a specification of the ML algorithm and its hyper parameters.
  // +kubebuilder:validation:Optional
  optional ClassicalEstimatorSpec estimator = 10;

  // Estimator for DNN network, not implemented in this release.
  // +kubebuilder:validation:Optional
  optional DeepEstimatorSpec dnn = 11;

  // Estimator for chat bot specification. Not implemented for this release.
  // +kubebuilder:validation:Optional
  optional ChatbotEstimatorSpec chatbot = 12;

  // Estimator for NLP model
  // +kubebuilder:validation:Optional
  optional NLPEstimatorSpec nlpEstimator = 13;

  // If this is an ensemble model, specify the ensemble
  // Default: None
  // +kubebuilder:validation:Optional
  optional EnsembleSpec ensemble = 14;

  // TrainingSpec is the desired training settings for the model.
  // +kubebuilder:validation:Optional
  optional TrainingSpec training = 15;

  // Tested indicate if this model should be tested. Default is false.
  // The study controller will set this to true if a model is the best model or part of the top models
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool tested = 16;

  // Aborted indicate the desire to abort the model training
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool aborted = 17;

  // Packaged the model into tar file
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool packaged = 18;

  // Published indicate that the system should create an docker image with the model binary.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool published = 19;

  // Pushed indicate that the system should push the docker image into the docker registry
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool pushed = 20;

  // Reported is set when a report should be created for this model
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool reported = 21;

  // Paused is set when we want to pause the training
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 22;

  // Set to true if you want to create model profile.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool profiled = 23;

  // Archived is true when the model should be archived
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool archived = 24;

  // Forecasted is true when the model should perform a forecast
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool forecasted = 25;

  // Indicates that the model should be released to production
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool released = 26;

  // Set to true if this model is a benchmark model.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool benchmarked = 27;

  // Indicate that this model is a baseline
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool baseline = 28;

  // Is this model flagged by the user.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool flagged = 29;

  // Location is the location of the model artifacts (metadata, reports and estimators).
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 30;

  // The specification for the forecasting algorithm if this model is part of a forecasting
  // +kubebuilder:validation:Optional
  optional ForecastSpec forecast = 31;

  // Compilation denotes how to compile the model. Not supported in the current release.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.CompilerSpec compilation = 32;

  // ActiveDeadlineSeconds is the deadline of a job for this model.
  // +kubebuilder:default:=600
  // +kubebuilder:validation:Optional
  optional int64 activeDeadlineSeconds = 33;

  // ModelType is the type of model for this estimator
  // +kubebuilder:default:=classical
  // +kubebuilder:validation:Optional
  optional string estimatorType = 34;

  // TTL
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 ttl = 35;

  // Mark this model as feature engineering only.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool featureEngineeringOnly = 36;
}

// ModelStatus defines the observed state of the Model
message ModelStatus {
  // StartTime represents time when the model is first handled by the model controller
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 1;

  // TrainStartTime represents time when the model started training.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainingStartTime = 2;

  // TrainCompletionTime represents time when the model ended training
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainingEndTime = 3;

  // TestingStartTime represents time when the model started test on a trainer
  // It is not guaranteed to be set in happens-before order across separate operations.
  // It is represented in RFC3339 form and is in UTC.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time testingStartTime = 4;

  // TestingEndTime represents time when the model ended testing
  // be set in happens-before order across separate operations.
  // It is represented in RFC3339 form and is in UTC.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time testingEndTime = 5;

  // CompletionTime represent the time that the model is marked as ready
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 6;

  // CVScrore is the score using on the training set.
  // +kubebuilder:validation:Optional
  optional double cvScore = 7;

  // TrainingScore is the score on the full training set, Evaluating on the training set
  // +kubebuilder:validation:Optional
  optional double trainingScore = 8;

  // TestScore is the score
  // +kubebuilder:validation:Optional
  optional double testScore = 9;

  // Cost is the cost of training the model
  // +kubebuilder:validation:Optional
  optional double cost = 10;

  // Best is true if this is the best model
  // +kubebuilder:validation:Optional
  optional bool best = 11;

  // CV results is the results of performing cross validation on the training set during search.
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Measurement cv = 12;

  // TrainResult is the results of training the model (pipeline) on the full training set
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Measurement train = 13;

  // TestResult is the results of training the model (pipeline) on the full training set, and test it on the test set
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Measurement test = 14;

  // Phase is the phase of the model
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 15;

  // ReportName is a reference to the model report
  // +kubebuilder:validation:Optional
  optional string reportName = 16;

  // ReportURI is the uri of report
  // +kubebuilder:validation:Optional
  optional string reportUri = 17;

  // ManifestUri is the URI of the manifest in the product bucket.
  // +kubebuilder:validation:Optional
  optional string manifestUri = 18;

  // WeightsUri is the URI of the model binary file.
  // +kubebuilder:validation:Optional
  optional string weightsUri = 19;

  // LabelEncoderUri is the URI of the label encoder binary file, if there is one.
  // +kubebuilder:validation:Optional
  optional string labelEncoderUri = 20;

  // LogsUri is the URI of the log file
  // +kubebuilder:validation:Optional
  optional string logsUri = 21;

  // ProfileUri is a reference to the visualization uri which were produce during processing
  // +kubebuilder:validation:Optional
  optional string profileUri = 22;

  // MisclassUri is a reference to the mis-classification file which were produce during processing
  // +kubebuilder:validation:Optional
  optional string misclassUri = 23;

  // TarUri is a reference to the model tar file.
  // +kubebuilder:validation:Optional
  optional string tarUri = 24;

  // AppUri is a reference to the model app file
  // +kubebuilder:validation:Optional
  optional string appUri = 25;

  // ImageName is the image name of the model
  // +kubebuilder:validation:Optional
  optional string imageName = 26;

  // +kubebuilder:validation:Optional
  // Importance is list of feature importance based on the alg of this model, sorted by importance
  repeated FeatureImportance importance = 27;

  // ForecastUri is the uri of the forecast
  // +kubebuilder:validation:Optional
  optional string forecastUri = 29;

  // Python version is the result of python version call.
  // +kubebuilder:validation:Optional
  optional string pythonVersion = 30;

  // Python packages is the result of running pip freeze
  // +kubebuilder:validation:Optional
  map<string, string> pythonPackages = 31;

  // TrainDatasetLocation is the location of the train dataset
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation trainDataset = 32;

  // TestDatasetLocation is the location of the test dataset used to test this model
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation testDataset = 33;

  // ValidationDatasetLocation is the location of the dataset used for validation
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation validationDataset = 34;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 35;

  // TrainingRows is the amount of rows in training
  // +kubebuilder:validation:Optional
  optional int32 trainingRows = 36;

  // TestingRows is the amount of rows in testing
  // +kubebuilder:validation:Optional
  optional int32 testingRows = 37;

  // Validation row contain the number of validation rows for cases that we have validation.
  // +kubebuilder:validation:Optional
  optional int32 validationRows = 38;

  // Last error
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string lastError = 39;

  // Model Progress in precent, the progress takes into account the different stages of the model.
  // +kubebuilder:validation:Optional
  optional int32 progress = 40;

  // Size of the model size
  // +kubebuilder:validation:Optional
  optional int32 sizeInBytes = 41;

  // Prediction Latency
  // +kubebuilder:validation:Optional
  optional double latency = 42;

  // The URL to the released version
  optional string url = 43;

  // If the model is released, this is the name of the predictor
  // +kubebuilder:validation:Optional
  optional string predictorName = 44;

  // Released at the time when the model was released
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time releasedAt = 45;

  // Sha 256 of the model tar file
  // +kubebuilder:validation:Optional
  optional string tarfileHash = 46;

  // Sha 256 of the model tar file
  // +kubebuilder:validation:Optional
  optional string imageHash = 47;

  // Sha 256 of the data sig
  // +kubebuilder:validation:Optional
  optional DataHashes trainingDataHash = 48;

  // ResourceConsumed during training
  // +kubebuilder:validation:Optional
  optional ResourceConsumption trainingResources = 49;

  // ResourceConsumed during testing
  // +kubebuilder:validation:Optional
  optional ResourceConsumption testingResources = 50;

  // The account that trained the model
  // +kubebuilder:validation:Optional
  optional string trainedBy = 51;

  // The team that trained this model
  // +kubebuilder:validation:Optional
  optional string team = 52;

  // The image used during training
  // +kubebuilder:validation:Optional
  optional string trainerImage = 53;

  // If the model is deployed, this points to the end point.
  // +kubebuilder:validation:Optional
  optional string endpoint = 54;

  // Holds the location of log paths
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Logs logs = 55;

  // Set the trial ID, by the optimizer.
  // +kubebuilder:validation:Optional
  optional int32 trialID = 56;

  // Roc curve
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RocAucCurve rocauccurve = 57;

  // PR curve
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.PRCurve prcurve = 58;

  // Confusion matrix
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ConfusionMatrix confusionMatrix = 59;

  // Holds the top correlation with target
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Correlation correlationsWithTarget = 60;

  // Holds the top feature correlation
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Correlation topCorrelations = 61;

  // +kubebuilder:validation:Optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated ModelCondition conditions = 62;
}

message ModelValidation {
  // +kubebuilder:validation:Optional
  optional string type = 1;

  // PrevModel compare to model
  // +kubebuilder:validation:Optional
  optional string prevModel = 2;

  // Labeled dataset used to test the model, when measuring a performance metric
  // +kubebuilder:validation:Optional
  optional string datasetName = 3;

  // +kubebuilder:validation:Optional
  optional string driftFreq = 4;

  // +kubebuilder:validation:Optional
  optional int32 driftInterval = 5;

  // +kubebuilder:validation:Optional
  optional string column = 6;

  // +kubebuilder:validation:Optional
  optional string metric = 7;

  // +kubebuilder:validation:Optional
  optional double min = 8;

  // +kubebuilder:validation:Optional
  optional double max = 9;

  // +kubebuilder:validation:Optional
  optional double minPrecent = 10;

  // +kubebuilder:validation:Optional
  optional double maxPrecent = 11;

  // Agg is used when we measured aggregate performance, for example median or average
  optional string agg = 12;
}

message ModelValidationResult {
  optional string type = 1;

  // DatasetName is the name of the dataset used to perform the validation
  optional string datasetName = 2;

  // ModelName is the name of the model under test
  optional string modelName = 3;

  // Column is the name of the feature.
  optional string column = 4;

  // Error is a string.
  optional string error = 5;

  // Metric is the measurement
  optional string metric = 6;

  // Actual value is the actual value
  optional double actualValue = 7;

  // Passed indicate if the result passed.
  optional bool passed = 8;

  // At is the time the validation was performed.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time at = 9;

  // The amount of time it took to compute this result
  optional int32 durationInSec = 10;
}

// TransformerEstimatorSpec is an transformer. This is not implemented yet.
message NLPEstimatorSpec {
  // The name of the base model
  // +kubebuilder:validation:Optional
  optional string base = 1;
}

message NNLayerParameter {
  optional string name = 1;

  optional string value = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=notebooks,singular=notebook,shortName=nb,categories={training,modela,all}
// Notebook represent a notebook object which specify a single notebook execution
message Notebook {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NotebookSpec spec = 2;

  optional NotebookStatus status = 3;
}

// NotebookCondition describes the state of a notebook at a certain point.
message NotebookCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// NotebookList represent list of notebooks
message NotebookList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Notebook items = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Owner",type="string",JSONPath=".spec.owner",priority=1
// +kubebuilder:printcolumn:name="Notebook",type="string",JSONPath=".spec.notebookName"
// +kubebuilder:printcolumn:name="StartTime",type="date",JSONPath=".status.startTime",priority=1
// +kubebuilder:printcolumn:name="CompletionTime",type="date",JSONPath=".status.completionTime",priority=1
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=notebookruns,singular=notebookrun,shortName=nbr,categories={training,modela,all}
// NotebookRun represent a single execution of a notebook with a specific env variables
message NotebookRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NotebookRunSpec spec = 2;

  optional NotebookRunStatus status = 3;
}

// NotebookRunCondition describes the state of a notebook run.
message NotebookRunCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// NotebookRunList is a list of notebook runs
message NotebookRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated NotebookRun items = 2;
}

// NotebookRunSpec defines the desired state of the NotebookRun resource
message NotebookRunSpec {
  // VersionName of the data product for this notebook
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // NotebookName of the notebook for this run
  // +kubebuilder:validation:Optional
  optional string notebookName = 2;

  // Values to pass to the notebook during execution
  // +kubebuilder:validation:Optional
  repeated NotebookVarValue values = 3;

  // Owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 4;

  // WorkloadClassName is the name of the workload class used to run this model. This is assigned by the study
  // +kubebuilder:default:="nano-cpu-250m-mem-256mi"
  // +kubebuilder:validation:Optional
  optional string workloadClassName = 5;

  // TTL.
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 ttl = 6;
}

// NotebookRunStatus define that observed state of NotebookRun resource
message NotebookRunStatus {
  // The phase of the notebook
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 1;

  // StartTime is the times that this prediction job started
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 2;

  // EndTime is the time that this prediction job finished
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 3;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 4;

  // Last error
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string lastError = 5;

  // What triggered the run
  // +kubebuilder:validation:Optional
  optional string triggeredBy = 6;

  // Holds the location of log paths
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Logs logs = 7;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated NotebookRunCondition conditions = 8;
}

// NotebookSpec is the desired state of the notebook resource.
message NotebookSpec {
  // The version of the notebook
  // +kubebuilder:default:="latest"
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // User provided description
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:MaxLength=512
  optional string description = 2;

  // SchemaName relate a notebook to a schema.
  // The schema object will be accessible from the notebook
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference schemaRef = 3;

  // A reference to the container image repository for this notebook.
  // +kubebuilder:default:=""
  optional string imageName = 4;

  // Requirements python file
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string requirements = 5;

  // DebPackages is a list of deb package to install
  // +kubebuilder:validation:Optional
  optional string debPackages = 6;

  // vars to pass to the notebook
  // +kubebuilder:validation:Optional
  repeated string vars = 7;

  // Location is the location of the notebook file
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 8;

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 9;

  // WorkloadClassName is the name of the workload class used to run this pipeline.
  // +kubebuilder:default:="nano-cpu-250m-mem-256mi"
  // +kubebuilder:validation:Optional
  optional string workloadClassName = 10;

  // ActiveDeadlineSeconds is the deadline of a job for this notebook.
  // +kubebuilder:default:=600
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int64 activeDeadlineSeconds = 11;

  // Schedule for running the pipeline
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RunSchedule schedule = 12;

  // The priority of this notebook run. The default is medium.
  // +kubebuilder:default:=medium
  // +kubebuilder:validation:Optional
  optional string priority = 13;

  // Set to true to pause the notebook
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 14;
}

// NotebookStatus is the observed state of the notebook resource
message NotebookStatus {
  // Image is the name of the image after publication
  // +kubebuilder:validation:Optional
  optional string image = 1;

  // The URI of the notebook in the bucket.
  // +kubebuilder:validation:Optional
  optional string uri = 2;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 3;

  // Last run is the last time a run was created
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastRun = 4;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated NotebookCondition conditions = 5;
}

// NotebookVarValue is an assignment of value to the notebook var
message NotebookVarValue {
  optional string name = 1;

  optional string value = 2;
}

// Define the seasonality for a period (yearly / monthly / daily)
message PeriodSeasonalitySpec {
  // Is this seasonality enabled
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // If enabled, the number of data points in the interval
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 periods = 2;

  // +kubebuilder:default:="auto"
  // +kubebuilder:validation:Optional
  optional string mode = 3;
}

// Define a range of time series data points
message PeriodSpec {
  // The period interval
  // +kubebuilder:validation:Optional
  optional string interval = 1;

  // The window start day
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 start = 2;

  // The windows end day
  // +kubebuilder:validation:Optional
  optional int32 end = 3;
}

message PrunerSpec {
  // The pruner to use during model search.
  // +kubebuilder:default:=median
  // +kubebuilder:validation:Optional
  optional string type = 1;

  // Pruning is disabled until the given number of trials finish in the same study.
  // +kubebuilder:default:=5
  // +kubebuilder:validation:Optional
  optional int32 startupTrials = 2;

  //  Pruning is disabled until the trial exceeds the given number of step
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 warmupTrials = 3;

  // Minimum number of reported trials.
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 minTrials = 4;

  // Interval in number of steps between the pruning checks
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 intervalTrials = 5;

  // Keep specific precent of trials. Used only with percentile pruner
  // +kubebuilder:default:=25
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=100
  // +kubebuilder:validation:Optional
  optional int32 percentile = 6;

  // A minimum value which determines whether pruner prunes or not. Used only for treshold pruner
  // +kubebuilder:validation:Optional
  optional int32 lower = 7;

  // A maximum value which determines whether pruner prunes or not. Used only for treshold pruner
  // +kubebuilder:validation:Optional
  optional int32 upper = 8;

  // SHOptions is the desired options for successive halving search.
  // All other models are saved into an archive.
  // +kubebuilder:validation:Optional
  optional SuccessiveHalvingOptions shOptions = 9;
}

message RegressorSpec {
  // The Name of the regressor
  // +kubebuilder:validation:Optional
  optional string name = 1;

  // The Name of the regressor
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional double priorScale = 2;

  // The Name of the regressor
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool standardize = 3;
}

message ReleaseStageSpec {
  // Enabled indicates that we want to release the model into production
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // ServingSiteName is the serving site for the release, if empty, the system will use the default serving site name
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string servingSiteName = 2;

  // PredictorName is the release predictor. The predictor will be created if it does not exist.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string predictorName = 3;

  // Template defines the default model deployment for this model
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ModelDeploymentSpec template = 4;

  // ManualApproval dentoes if we need manual approval before advancing from deployed to released
  // By default a user is needed to approve the release to production
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool manualApproval = 5;

  // Validations is the List of expectation run against the deployed model before moving production traffic to the model
  // +kubebuilder:validation:Optional
  repeated ModelValidation validations = 6;

  // A reference to the workload class that is used for running the release
  // +kubebuilder:default:="nano-cpu-250m-mem-256mi"
  // +kubebuilder:validation:Optional
  optional string workloadClassName = 7;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Owner",type="string",JSONPath=".spec.owner",priority=1
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.reportType"
// +kubebuilder:printcolumn:name="StartTime",type="date",JSONPath=".status.startTime"
// +kubebuilder:printcolumn:name="CompletionTime",type="date",JSONPath=".status.endTime"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=reports,singular=report,categories={training,modela,all}
// ReportName represent a report object. A report is a pdf report which contain images and tables about another
// object
message Report {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ReportSpec spec = 2;

  optional ReportStatus status = 3;
}

// ReportCondition describes the state of a ReportName at a certain point.
message ReportCondition {
  // Type of condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// ReportList is a list of reports
message ReportList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Report items = 2;
}

// ReportSpec specifies the desired state of the ReportName resource
message ReportSpec {
  // VersionName is the data product version name for this report.
  // +kubebuilder:default:="latest"
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // EntityRef specify the entity being report. Currently entities can be dataset,model or study
  optional k8s.io.api.core.v1.ObjectReference entityRef = 2;

  // Location is the report location in storage.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 4;

  // ReportType specify the report type (e.g. classification / regression)
  // +kubebuilder:validation:Required
  optional string reportType = 5;

  // Format specify the report format. default is pdf
  // +kubebuilder:default:=pdf
  // +kubebuilder:validation:Optional
  optional string format = 6;

  // NotifierName is a reference to the notifier that is used to send the report
  // +kubebuilder:validation:Optional
  optional string notifierName = 7;

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 8;

  // WorkloadClassName is the name of the workload class used to run this report
  // +kubebuilder:default:="nano-cpu-250m-mem-256mi"
  // +kubebuilder:validation:Optional
  optional string workloadClassName = 9;

  // ActiveDeadlineSeconds is the deadline of a job for this report.
  // +kubebuilder:default:=600
  // +kubebuilder:validation:Optional
  optional int64 activeDeadlineSeconds = 10;

  // If the report is custom report, this field holds the specification
  // +kubebuilder:validation:Optional
  optional CustomReportSpec custom = 11;
}

// ReportStatus defines the observed state of the report.
message ReportStatus {
  // StartTime is the start time of the report was sent for generation
  // It is not guaranteed to be set in happens-before order across separate operations.
  // It is represented in RFC3339 form and is in UTC.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 2;

  // EndTime is the time when the report ended generation and was uploaded to storage
  // be set in happens-before order across separate operations.
  // It is represented in RFC3339 form and is in UTC.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 3;

  // Phase is the phase of the report
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 4;

  // URI is the report uri in the bucket
  // +kubebuilder:validation:Optional
  optional string uri = 5;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 6;

  // Last error
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string lastError = 7;

  // Holds the location of log paths
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Logs logs = 8;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ReportCondition conditions = 9;
}

message ReportTemplate {
  optional ReportSpec spec = 1;
}

// PreformanceStatus containt the avg resource consumption
message ResourceConsumption {
  optional double cpu = 1;

  optional double mem = 2;

  optional double gpu = 3;
}

// +kubebuilder:subresource:status
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Progress",type="number",JSONPath=".status.progress"
// +kubebuilder:printcolumn:name="Owner",type="string",JSONPath=".spec.owner",priority=1
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName",priority=1
// +kubebuilder:printcolumn:name="Dataset",type="string",JSONPath=".spec.datasetName"
// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task"
// +kubebuilder:printcolumn:name="Objective",type="string",JSONPath=".spec.objective"
// +kubebuilder:printcolumn:name="Score",type="number",JSONPath=".status.bestModelScore"
// +kubebuilder:printcolumn:name="Best model",type="string",JSONPath=".status.bestModel"
// +kubebuilder:printcolumn:name="Trained",type="number",JSONPath=".status.trainedModels"
// +kubebuilder:printcolumn:name="Tested",type="number",JSONPath=".status.testedModels"
// +kubebuilder:printcolumn:name="StartTime",type="date",JSONPath=".status.startTime",priority=1
// +kubebuilder:printcolumn:name="CompletionTime",type="date",JSONPath=".status.completionTime",priority=1
// +kubebuilder:printcolumn:name="Last Error",type="string",JSONPath=".status.lastError"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=studies,singular=study,shortName=sd,categories={training,modela}
// Study represent a search for the best machine learning model using automl.
message Study {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional StudySpec spec = 2;

  optional StudyStatus status = 3;
}

// StudyCondition describes the state of a StudyName.
message StudyCondition {
  // Type of study condition.
  // +kubebuilder:validation:Optional
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  // +kubebuilder:validation:Optional
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  // +kubebuilder:validation:Optional
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  // +kubebuilder:validation:Optional
  optional string message = 6;
}

message StudyForecastSpec {
  // Template to use for each model
  // +kubebuilder:validation:Optional
  optional ForecastSpec forecast = 35;

  // for multi level forecast
  // The group hierarchy
  // +kubebuilder:validation:Optional
  optional Hierarchy hierarchy = 23;
}

// +kubebuilder:object:root=true
// StudyList is a list of Study
message StudyList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Study items = 2;
}

// Study Schedule is used for cases where the study is scheduled to start at future date time.
message StudyScheduleSpec {
  // Indicate the all models should be tests
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // Set the start time, by default this is set to the start time of the study
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startAt = 2;
}

// StudySpec defines the desired state of the study
message StudySpec {
  // VersionName is the data product version of the study
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // Description is user provided description
  // +kubebuilder:default:=""
  // +kubebuilder:validation:MaxLength=512
  // +kubebuilder:validation:Optional
  optional string description = 3;

  // LabRef is a reference to the lab where the trainers for this study run.
  // If no value is provided, the lab is taken from the
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference labRef = 4;

  // DatasetName refer to the dataset object for which the study is for.
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Required
  optional string datasetName = 5;

  // Task specify the machine learning task (e.g classification).
  // This must match the task of the data product.
  // +kubebuilder:validation:Required
  optional string task = 6;

  // Objective is the objective defined how the study controller will compare model performance.
  // +kubebuilder:validation:Optional
  optional string objective = 7;

  // Objective2 is the second objective to consider during optimization.
  // +kubebuilder:validation:Optional
  optional string objective2 = 8;

  // Search defines the model search
  // +kubebuilder:validation:Optional
  optional ModelSearchSpec search = 9;

  // Preprocessing is template for preprocessors for this study
  // Default: all preprocessing is set to auto.
  // +kubebuilder:validation:Optional
  optional FeatureEngineeringSearchSpec feSearch = 10;

  // Training template contain the desired training parameter for the models.
  // +kubebuilder:validation:Optional
  optional TrainingSpec trainingTemplate = 11;

  // Split is reference to the split specification
  // +kubebuilder:validation:Optional
  optional DataSplit split = 12;

  // Aborted is set when we want to abort the training
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool aborted = 13;

  // Reported is set when we want to create model report
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool reported = 15;

  // Paused is set when we want to pause the training
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 16;

  // Profiled is set when we want to create model profile and study profile.
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool profiled = 17;

  // Set to true if you want the system to create a docker model image, at the end of training.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool modelPublished = 18;

  // Set to true if you want the system to push model image to remote docker registry
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool modelImagePushed = 19;

  // Set to true if you want the system to push model image to remote docker registry
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool modelBenchmarked = 21;

  // The location of the study artifacts
  // By default the bucket is the data product bucket.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 22;

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 24;

  // ActiveDeadlineSeconds is the deadline of a job for this study.
  // +kubebuilder:default:=600
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int64 activeDeadlineSeconds = 25;

  // This is the compiler spec for models. This spec will act as a template for the models created by the study
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.CompilerSpec compilation = 26;

  // Set to true if this study is a template
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool template = 27;

  // Is this model flagged
  // +kubebuilder:validation:Optional
  optional bool flagged = 28;

  // Notification specification.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.NotificationSpec notification = 29;

  // Model Image specification.
  // +kubebuilder:validation:Optional
  optional ModelImageSpec modelImage = 30;

  // TTL for models.
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 ttl = 31;

  // Forecast template
  // +kubebuilder:validation:Optional
  optional StudyForecastSpec forecast = 35;
}

// StudyStatus defines the observed state of the Study
message StudyStatus {
  // Total models created for the study
  // +kubebuilder:validation:Optional
  optional int32 models = 1;

  // models waiting for a feature engineering
  // +kubebuilder:validation:Optional
  optional int32 featureEngineeringModelWaiting = 2;

  // models which are currently training for feature engineering
  // +kubebuilder:validation:Optional
  optional int32 featureEngineeringModelTraining = 3;

  // models that failed during feature engineering
  // +kubebuilder:validation:Optional
  optional int32 featureEngineeringModeFailed = 4;

  // models that were successful during feature engineering
  // +kubebuilder:validation:Optional
  optional int32 featureEngineeringModelTrained = 5;

  // models waiting for a trainer
  // +kubebuilder:validation:Optional
  optional int32 searchingModelWaiting = 6;

  // models which are currently training or testing.
  // +kubebuilder:validation:Optional
  optional int32 searchingModelsTraining = 7;

  // models that failed during training.
  // +kubebuilder:validation:Optional
  optional int32 searchingModeFailed = 8;

  // models that were successful during training
  // +kubebuilder:validation:Optional
  optional int32 searchingModeTrained = 9;

  // models waiting testing
  // +kubebuilder:validation:Optional
  optional int32 testingModelWaiting = 10;

  // models in testing
  // +kubebuilder:validation:Optional
  optional int32 testingModels = 11;

  // models failed testing.
  // +kubebuilder:validation:Optional
  optional int32 testingModeFailed = 12;

  // Tested models
  // +kubebuilder:validation:Optional
  optional int32 testedModels = 13;

  // Study start time
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 14;

  // Start of feature generation
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time featureEngineeringStartTime = 15;

  // End of feature generation
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time featureEngineeringEndTime = 16;

  // Start of the training phase
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainingStartTime = 17;

  // End of the training phase.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainingEndTime = 19;

  // Start of the testing phase
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time testingStartTime = 20;

  // Represents time when the study reached a successful complete or failure phase. It is not guaranteed to
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time testingEndTime = 21;

  // The study end time.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 22;

  // The Best model name.
  // +kubebuilder:validation:Optional
  optional string bestModel = 23;

  // The Best model score, so far.
  // +kubebuilder:validation:Optional
  optional double bestModelScore = 24;

  // A reference to the profile uri which were produce during processing
  // +kubebuilder:validation:Optional
  optional string profileUri = 25;

  // The study report name
  // +kubebuilder:validation:Optional
  optional string reportName = 26;

  // The phase of the study
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 27;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 28;

  // TrainDatasetLocation is the location of the train dataset
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation trainDataset = 29;

  // TestDatasetLocation is the location of the test dataset used to test this model
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation testDataset = 30;

  // ValidationDatasetLocation is the location of the dataset used for validation
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation validationDataset = 31;

  // the last model id generated for this study
  optional int64 lastModelID = 32;

  // Last error
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string lastError = 33;

  // TrainingRows is the amount of rows in training
  // +kubebuilder:validation:Optional
  optional int32 trainingRows = 34;

  // TestingRows is the amount of rows in testing
  // +kubebuilder:validation:Optional
  optional int32 testingRows = 35;

  // Validation row contain the number of validation rows for cases that we have validation.
  // +kubebuilder:validation:Optional
  optional int32 validationRows = 36;

  // Study Progress in precent, the progress takes into account the different stages of the study.
  // +kubebuilder:validation:Optional
  optional int32 progress = 37;

  // define a baseline model that will be the baseline for the search. If not none, the base line is the first model
  // to be evaluated.
  // +kubebuilder:default:="none"
  // +kubebuilder:validation:Optional
  optional string baseline = 38;

  // Sha 256 of the data sig
  // +kubebuilder:validation:Optional
  optional DataHashes trainingDataHash = 39;

  // What triggered the run
  // +kubebuilder:validation:Optional
  optional string triggeredBy = 40;

  // Holds the location of log paths
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Logs logs = 41;

  // Holds the result of the feature engineering process
  // +kubebuilder:validation:Optional
  optional FeatureEngineeringSearchStatus featureEngineeringSearchStatus = 42;

  // This is the set of partition levels
  // Represents the latest available observations of a study state.
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated StudyCondition conditions = 43;
}

// SuccessiveHalvingOptions define the parameters for the successive halving algorithm
message SuccessiveHalvingOptions {
  // The maximum budget allocated to each model during SH search.
  // The default max budget is 81
  // +kubebuilder:default:=81
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 maxBudget = 1;

  // The rate of elimination during SH search, such that only 1/rate of models are promoted to the
  // next half
  // +kubebuilder:default:=3
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 eliminationRate = 2;

  // The modality type. The default modality is based on the type of models
  // For deep models - we use epocs.
  // For classical models - we use data
  // +kubebuilder:default:=epochs
  // +kubebuilder:validation:Optional
  optional string modality = 3;
}

message SuccessiveHalvingSpec {
  // The budget is used in multi fidelity search.
  // This is the percent of fidelity of the model. The meaning is based on the model configuration.
  // For example fidelity is number of epochs in sgd alg
  // Or can be percent of the data in non sgd algorithm.
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Maximum=128
  // +kubebuilder:validation:Minimum=0
  optional int32 budget = 1;

  // The bracket of the model when running multi fidelity search.
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Maximum=128
  // +kubebuilder:validation:Minimum=0
  optional int32 bracket = 2;

  // The rung of the model
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Maximum=128
  // +kubebuilder:validation:Minimum=0
  optional int32 rung = 3;

  // The configuration id allocated to this model in rung 0
  // +kubebuilder:validation:Optional
  optional int32 confID = 4;

  // The modality type. The default modality is based on the type of models
  // For deep models - we use epocs.
  // For classical models - we use data
  // +kubebuilder:validation:Optional
  optional string modality = 26;
}

// TextPipelineSpec is the specification for preprocessing of text columns
message TextPipelineSpec {
  // The text encoder (e.g. tfidf)
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string encoder = 1;

  // Text tokenizer
  // +kubebuilder:validation:Optional
  optional string tokenizer = 2;

  // If true, the controller will Add stop word handling to the text pipeline.
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool stopwords = 3;

  // If true, the controller will Add part of speech handling to the text pipeline.
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool pos = 4;

  // If true, the controller will Add lemma handling to the text pipeline.
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool lemma = 5;

  // If true, the controller will Add stemmer handling to the text pipeline.
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool stem = 6;

  // If true, the controller will Add word embedding handling to the text pipeline.
  // +kubebuilder:validation:Optional
  optional string embedding = 7;

  // Use SVD
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool svd = 8;

  // Max SVD Components to use
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 maxSvdComponents = 9;
}

message TimeSeriesDataSpec {
  // General Forecast attributes:
  // The name of the time column
  // +kubebuilder:validation:Required
  optional string timeColumn = 1;

  // The name of the column holding the value.
  // By default this is the target column from the dataset.
  // +kubebuilder:validation:Optional
  optional string targetColumn = 2;

  // The format of the datetime column. Used default
  // +kubebuilder:validation:Optional
  optional string datetimeFormat = 3;

  // The format of the datetime column. Used default
  // +kubebuilder:validation:Optional
  optional HolidaySpec holiday = 4;

  // Column name of the first level of grouping
  // +kubebuilder:validation:Optional
  optional string groupColumn = 5;

  // Column name of the second level of grouping
  // +kubebuilder:validation:Optional
  optional string subGroupColumn = 6;

  // Column name of the third level of grouping
  // +kubebuilder:validation:Optional
  optional string subSubGroupColumn = 7;

  // The historical periods
  // +kubebuilder:validation:Optional
  optional PeriodSpec history = 8;

  // The forecast periods
  // +kubebuilder:validation:Optional
  optional PeriodSpec forecast = 9;

  // +kubebuilder:validation:Optional
  optional PeriodSeasonalitySpec yearlySeasonality = 10;

  // +kubebuilder:validation:Optional
  optional PeriodSeasonalitySpec weeklySeasonality = 11;

  // +kubebuilder:validation:Optional
  optional PeriodSeasonalitySpec dailySeasonality = 12;

  // +kubebuilder:default = "linear"
  // +kubebuilder:validation:Optional
  optional string growth = 13;

  // The list of additional regressors. The regresors are part of the time series data
  // +kubebuilder:validation:Optional
  repeated RegressorSpec regressors = 14;

  // The list of additional regressors. The regresors are part of the time series data
  // +kubebuilder:validation:Optional
  repeated CustomSeasonalitySpec customSeasonalities = 15;

  // Set an holiday schedule for a country.
  // +kubebuilder:validation:Optional
  // Change point specification
  // +kubebuilder:validation:Optional
  optional ChangePointSpec changepoints = 16;

  // +kubebuilder:default = 0.8
  // +kubebuilder:validation:Optional
  optional double intevalWidth = 17;

  // +kubebuilder:default = 1000
  // +kubebuilder:validation:Optional
  optional int32 uncertaintySamples = 18;
}

// TrainingSpec is the specification of the training process
message TrainingSpec {
  // Priority specify the priority of the model in the training queue.
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:="medium"
  optional string priority = 1;

  // The  type of cross validation.
  // if we have a validation set, we do not do cv.
  // +kubebuilder:default:=kfold
  // +kubebuilder:validation:Optional
  optional string cvtype = 2;

  // If true, this is a cross validation using folds. If False, use the validation set.
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool cv = 3;

  // The number of folds during cross validation.
  // +kubebuilder:default:=5
  // +kubebuilder:validation:Optional
  optional int32 folds = 4;

  // Evaluation metrics are the scores
  // +kubebuilder:validation:Optional
  repeated string evalMetrics = 5;

  // Early stopping, stop the training after X models with no improvement.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool earlyStop = 6;

  // Add snapshot interval for long training time in minutes.
  // This is used to checkpoint training model.
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=10
  // +kubebuilder:validation:Minimum=0
  optional int32 checkpointInterval = 7;

  // Successive halving represent the configuration for the model training, when running
  // the SuccessiveHalvingSpec model search algorithm
  // The metrics are evaluated using the final model, both on the training set
  // and on the test set
  // +kubebuilder:validation:Optional
  optional SuccessiveHalvingSpec sh = 9;

  // Used as the random state for an estimator if needed (for example, in RandomForestClassifier)
  // +kubebuilder:default:=42
  // +kubebuilder:validation:Optional
  optional double seed = 10;

  // WorkloadClassName is the name of the workload class used to run this model. This is assigned by the study
  // +kubebuilder:default:="nano-cpu-250m-mem-256mi"
  // +kubebuilder:validation:Optional
  optional string workloadClassName = 11;

  // Gpu indicate that training should be done on a gpu.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool gpu = 12;

  // Dist indicate the training should be be distributed
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool dist = 13;

  // In case of dist node, how many nodes to use.
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 nodeCount = 14;

  // Set the precent of dataset to use during training.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.SampleSpec sample = 15;
}

// TrainingStageSpec is the desired state of the training step of the pipeline
message TrainingStageSpec {
  // Enabled indicates that the stage is enabled
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // NotebookName specify the notebook to run before training.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string notebookName = 2;

  // LabName is the name of the lab used for training. If empty, the system will use the default lab assigned to the data product
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string labName = 3;

  // StudyName is the name of a study template. The actual study will clone the study template and will
  // use the dataset created in the data stage.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Required
  optional string studyTemplateName = 4;

  // Validations defines the machine learning test cases to run against the new trained model.
  // +kubebuilder:validation:Optional
  repeated ModelValidation validations = 5;
}

// UATStageSpec is the specification of the user acceptance test.
message UATStageSpec {
  // Enabled indicates that the stage is enabled
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // The serving site (name space) used for running the uat tests. If the serving site is empty, the system
  // will skip the uat stage
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string servingSiteName = 2;

  // Validations defines the machine learning test cases to run against the new trained model.
  // +kubebuilder:validation:Optional
  repeated ModelValidation validations = 3;

  // WorkloadClassName is a reference to the workload class that is used for running the tests in the serving site.
  // +kubebuilder:default:="nano-cpu-250m-mem-256mi"
  // +kubebuilder:validation:Optional
  optional string workloadClassName = 4;
}

// VideoPipelineSpec is the specification for preprocessing video data
message VideoPipelineSpec {
  // The date time imputer.
  // +kubebuilder:default:="auto"
  // +kubebuilder:validation:Optional
  optional string featurizer = 1;
}

