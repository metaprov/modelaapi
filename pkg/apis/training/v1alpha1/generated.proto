/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.metaprov.modeld_api.pkg.apis.training.v1alpha1;

import "github.com/metaprov/modeld-api/pkg/apis/catalog/v1alpha1/generated.proto";
import "github.com/metaprov/modeld-api/pkg/apis/data/v1alpha1/generated.proto";
import "github.com/metaprov/modeld-api/pkg/apis/inference/v1alpha1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// AcceptanceStageSpec is used to verify the new model.
message AcceptanceStageSpec {
  // The serving site for the testing
  optional string servingSiteName = 1;

  // The name of predictor which will be the base for this stage
  // +optional
  optional string testDatasetName = 2;

  // Auto defines if we move from stage to stage automatically.
  // +optional
  optional bool auto = 3;
}

message AudioPipelineSpec {
  // Name of the datetime columns
  repeated string columns = 1;

  // The date time imputer.
  // +optional
  optional string featurizer = 2;
}

// Specify the back test
message BacktestSpec {
  // The initial number of data points, default to 80% of rows.
  // +optional
  optional int32 initial = 1;

  // The number of backtesting windows. Default to 3. can be from 1 to 5.
  // +optional
  optional int32 windows = 2;
}

message CapacityStageSpec {
  // The serving site for the testing
  // The default is to use the pipeline serving site.
  optional string servingSiteName = 1;

  // The name of dataset used to test the model at this stage.
  // +optional
  optional string testDatasetName = 2;

  // Gate defines if we move from stage to stage automatically.
  // +optional
  optional bool auto = 3;
}

message CategoricalPipelineSpec {
  // The columns for this pipeline. Use * to denotes all the columns.
  // Must have at least on value.
  repeated string columns = 1;

  // Categorical varaible imputer
  // +optional
  optional string imputer = 2;

  // CatEncoder
  // +optional
  optional string encoder = 3;
}

message ClassicalEstimatorSpec {
  // A reference to the algorithm in the catalog
  optional string algorithmName = 1;

  // The algorithm hyper parameters
  repeated HyperParameterValue parameters = 2;
}

message DataSplit {
  // Indicate that this is an automatic split.
  // +optional
  optional bool auto = 1;

  // Training is a percent number (0-100) which specify how much of
  // the data will be used for training
  // +optional
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=100
  optional int32 train = 2;

  // Validation is percent of dataset rows which would be used to compute the objective during
  // hyper parameter search phase.
  // Only used if we do not do cross validation.
  // default is 10% of the data, if we do not have cross validation.
  // default is 0% of the data, if we do cross validation.
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=50
  // +optional
  optional int32 validation = 3;

  // Test is percent of dataset rows which would be used to compute the objective during
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=50
  // +optional
  optional int32 test = 4;

  // Indicate if the dataset split should be stratified.
  // +optional
  optional string splitPolicy = 5;

  // The name of the column used to split
  // +optional
  optional string splitColumn = 6;

  // The seed to use for the estimator
  // Default: 42
  // +optional
  optional double seed = 7;
}

message DataStageSpec {
  // +optional
  optional string wranglerName = 1;
}

message DateTimePipelineSpec {
  // Name of the datetime columns
  repeated string columns = 1;

  // The date time imputer.
  // +optional
  optional string imputer = 2;

  // If
  // +optional
  optional bool expand = 3;
}

message DeepEstimatorLayer {
  // FileName is the name of the layer
  optional string name = 1;

  // The type if the layer type
  optional string type = 2;

  // Parameters are the hyper parameters of this layer
  repeated NNLayerParameter parameters = 3;

  // Input layers are the layer input to this layer
  repeated string inputLayers = 4;
}

message DeepEstimatorSpec {
  // Architecture is the dnn architue
  // +optional
  repeated DeepEstimatorLayer architecture = 1;

  // The type of the dnn
  // +optional
  optional string type = 2;

  // Batch size specify about
  // +optional
  optional int32 batchSize = 3;

  // Budget size specify about
  // +optional
  optional int32 epochs = 4;

  // ValidationSplit specify about
  // +optional
  optional int32 validationSplit = 5;

  // Is this a seq model
  // +optional
  optional bool isSeq = 6;

  // Gpus denote of gpu for trainer, any number more than 1 denote distribute training
  // +optional
  optional int32 gpus = 7;

  // compile
  // +optional
  optional string loss = 8;
}

// Partition key values are used for the partition
message DimensionValue {
  // Key is the partition key
  optional string key = 1;

  // Value if the partition value
  optional string value = 2;
}

message EnsembleRules {
}

message EnsembleSpec {
  // A list of base model to ensemble. The ensemble method is represented as the algorithm name.
  // +optional
  repeated string base = 2;
}

// A definition for a single forecast
// A single forecast knows its forecast key and the index to its level
message ForecastObj {
  optional string key = 1;

  optional int32 levelIndex = 2;
}

message ForecastingSpec {
  // The name of the time column
  // Required.
  optional string timeColumn = 1;

  // The name of the column holding the value.
  // By default this is the target column from the dataset.
  // +optional
  optional string targetColumn = 2;

  // The format of the datetime column. Used default
  // +optional
  optional string datetimeFormat = 3;

  // The list of the dimension columns. If non, the system will treat the whole time series as one.
  // +optional
  repeated string dimensions = 4;

  // List of other columns to take into consideration
  // Default None
  // +optional
  repeated string repressors = 5;

  // Required, the freq of the time series (daily,weekly)
  optional FreqSpec freqSpec = 6;

  // number of data points to predict in the future.
  // Required.
  optional int32 horizon = 7;

  // The confidence levels for the forecast, each level must be between 1-100.
  // +optional
  optional int32 confidenceInterval = 8;

  // Set an holiday schedule for a country.
  // +optional
  optional string countryForHoliday = 9;

  // a set of value for each partition key
  // +optional
  repeated DimensionValue dimensionValues = 10;

  // The backtest specification, the system supports back testing with expanding windows.
  optional BacktestSpec backtest = 11;

  // The name of the connection for a database the result of the forecast
  // If null, the system will insert the forecast in the database.
  // +optional
  optional string forecastConnectionName = 12;

  // Specify if we should generate a forecast using the model
  // If true, the system will perform a forecast and update the forecast connection.
  // Default it true
  // +optional
  optional bool forecast = 13;
}

// Specify the frequency specification.
message FreqSpec {
  // Default to 1.
  // optional
  optional int32 interval = 1;

  // required
  optional string unit = 2;
}

// Github event specify repo and the events to listen in order ot fire the pipeline
message GithubEvents {
  // The github connections used to loginto git
  optional string gitConnectionName = 1;

  // Repository is the name of the github repository
  optional string repository = 2;

  // Branch is the name of the github branch.
  // By default the trigger listen to all branch
  optional string branch = 3;

  // Blobname regex is a regular expression on the blob name that changed
  optional string blobNameRegex = 4;

  // Events is the name of the github events.
  repeated string events = 5;
}

message Hierarchy {
  // The columns in the data frame that belongs to the hierarchy. By default, all the item level column is the last one. The default aggregate function is sum.
  repeated string columns = 1;

  // The group level columns. For each group level column specify the horizon and the aggregate function
  repeated Level groupLevels = 2;

  // Item level column.
  optional Level itemLevel = 3;

  // Optional notifier to use when the forecast is complete.
  // +optional
  optional string notifierName = 4;
}

// HyperParameterValue represent a specific value of
// the learning algorithm hyper-parameter. The value is chosen
// by the planner
message HyperParameterValue {
  // Reference to the name of the hyper parameter.
  optional string name = 1;

  // Value hold the value if  the hyper paramer type is string
  optional string value = 2;
}

message ImagePipelineSpec {
  // Name of the datetime columns
  repeated string columns = 1;

  // The date time imputer.
  // +optional
  optional string featurizer = 2;
}

message Level {
  // The name of the level - the column name
  optional string string = 1;

  // The number of time periods to
  optional int32 horizon = 2;

  // The freq of the level
  optional string freq = 3;

  // The aggregate function used to roll up the lower level
  optional string aggregate = 4;

  // The distinct values of the column for this level
  repeated string distinc = 5;
}

// Represent a value for a specific metric
message Measurement {
  // The metric type name (e.g. F1 / Accuracy)
  // +optional
  optional string metric = 1;

  // The value for this model
  // +optional
  optional double value = 2;
}

// ==============================================================================
// PublishedModelRef Configuration
// ==============================================================================
// +genclient
// +genclient:noStatus
// +k8s:openapi-gen=true
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Study",type="string",JSONPath=".spec.studyName"
// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task"
// +kubebuilder:printcolumn:name="Algorithm",type="string",JSONPath=".spec.estimator.algorithmName"
// +kubebuilder:printcolumn:name="Objective",type="string",JSONPath=".spec.objective"
// +kubebuilder:printcolumn:name="CV Score",type="number",JSONPath=".status.cvScore"
// +kubebuilder:printcolumn:name="Train Score",type="number",JSONPath=".status.trainScore"
// +kubebuilder:printcolumn:name="Test Score",type="number",JSONPath=".status.testScore"
// +kubebuilder:printcolumn:name="Best",type="boolean",JSONPath=".status.best"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=models,singular=model,shortName=md,categories={training,modeld,all}
// Model represent a machine learning model.
// models are automatically generated by the planner and trained by the trainer.
// After training, models are packaged into a docker container and served
// by predictor.
message Model {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelSpec spec = 2;

  // +optional
  optional ModelStatus status = 3;
}

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:printcolumn:name="Location Product",type="string",JSONPath=".spec.dataProductName"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.dataProductVersionName"
// +kubebuilder:printcolumn:name="Dataset",type="string",JSONPath=".status.datasetName"
// +kubebuilder:printcolumn:name="Study",type="string",JSONPath=".status.studyName"
// +kubebuilder:printcolumn:name="Predictor",type="string",JSONPath=".status.predictorName"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:resource:path=modelautobuilders,singular=modelautobuilder,shortName=ar,categories={training,modeld,all}
// ModelAutobuilder represent am automatic run of the model creation
message ModelAutobuilder {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelAutobuilderSpec spec = 2;

  optional ModelAutobuilderStatus status = 3;
}

// ModelAutobuilderCondition describes the state of a pipeline at a certain point.
message ModelAutobuilderCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// ModelAutobuilderList represent list of pipelines
message ModelAutobuilderList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelAutobuilder items = 2;
}

// ModelAutobuilderSpec define the desired state of the ModelAutobuilder resource.
message ModelAutobuilderSpec {
  // Path product name, if not defined, if not defined set to generic product name
  // +kubebuilder:validation:MaxLength=253
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string dataProductName = 1;

  // Path product version, if not defined set to generic product version.
  // +kubebuilder:validation:MaxLength=253
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string dataProductVersionName = 2;

  // The name of existing datasource, if empty the datasource parameters will be inferred from the file
  // +kubebuilder:validation:MaxLength=253
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string datasourceName = 3;

  // The name of existing dataset, if empty the dataset object will be created
  // otherwise, a dataset will be created based on the file in the path section.
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:MaxLength=63
  optional string datasetName = 4;

  // The location of the data in the cloud
  // +kubebuilder:validation:MaxLength=256
  // +optional
  optional string path = 5;

  // The machine learning task (regression/classification)
  // required
  optional string task = 6;

  // The task objective. this is how models will be scored.
  // If not defined this will be set to the default objective for the task
  // +optional
  optional string objective = 7;

  // Target column.
  // Default: last column in the schema.
  // +kubebuilder:validation:MaxLength=128
  // +optional
  optional string targetColumn = 8;

  // Max training time.
  // +kubebuilder:validation:Maximum=512
  // +kubebuilder:validation:Minimum=1
  // Default: 60 min.
  // +optional
  optional int32 maxTime = 9;

  // Max model
  // Default: 10 models
  // +kubebuilder:validation:Maximum=512
  // +kubebuilder:validation:Minimum=1
  // +optional
  optional int32 maxModels = 10;

  // Access method specify the predictor access method.
  // Default: ClusterPort
  // +optional
  optional string accessMethod = 11;

  // Specify if the predictor should autoscale.
  // Default : false
  // +optional
  optional bool autoScale = 12;

  // The spec of the data source, if none, the runner will infer the schema, and will create a new schema with
  // +optional
  optional github.com.metaprov.modeld_api.pkg.apis.data.v1alpha1.DataSourceSpec dataSourceSpec = 13;

  // Specify the number of trainers.
  // Default 1 trainer.
  // +optional
  optional int32 trainers = 14;

  // Specify the search method
  // Default is random search
  // +optional
  optional string searchMethod = 15;

  // Set the true to abort the model auto builder
  // +optional
  optional bool aborted = 16;

  // The owner account name
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +optional
  optional string owner = 17;
}

// ModelAutobuilderStatus define the observed state of the pipeline
message ModelAutobuilderStatus {
  // the generate flat file name
  optional string flatFileName = 1;

  // the generated schema name (if generated)
  optional string dataSourceName = 2;

  // the generated dataset name (if generated)
  optional string datasetName = 3;

  // the generate study name
  optional string studyName = 4;

  // The selected model name.
  optional string bestModelName = 6;

  // the generated predictor name
  optional string predictorName = 7;

  // the name of the image repository
  optional string imageRepoName = 8;

  // The phase of the auto ml run
  optional string phase = 9;

  // number of rows in the dataset
  // +optional
  optional int32 rows = 10;

  // number of columns, used mainly to show the columns in the kubectl
  // +optional
  optional int32 cols = 11;

  // file size in bytes
  // +optional
  optional int32 fileSize = 12;

  // Total models created for the study
  // +optional
  optional int32 models = 13;

  // models that were successful during training
  // +optional
  optional int32 trainedModels = 14;

  // The Best model score, so far.
  // +optional
  optional double bestModelScore = 15;

  // The best estimator, taken from the best model
  optional ClassicalEstimatorSpec estimator = 16;

  // StartTime is the times that this prediction job started
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 17;

  // CompletionTime is the time that this prediction job finished
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 18;

  // +optional
  repeated ModelAutobuilderCondition conditions = 19;
}

// DeploymentCondition describes the state of a deployment at a certain point.
message ModelCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// ModelList is a list of models.
message ModelList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Model items = 2;
}

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=modelpipelines,singular=modelpipeline,shortName=pipe,categories={training,modeld,all}
// ModelPipeline represent a CI/CD machine learning pipeline definition
message ModelPipeline {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the desired state of the ModelPipeline.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ModelPipelineSpec spec = 2;

  // Status is the observed state of the ModelPipeline.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ModelPipelineStatus status = 3;
}

// ModelPipelineCondition describes the state of a pipeline at a certain point.
message ModelPipelineCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// ModelPipelineList represent list of pipelines
message ModelPipelineList {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelPipeline items = 2;
}

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="ModelPipeline",type="string",JSONPath=".status.pipelineName"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".status.versionName"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=modelpipelineruns,shortName=pr,singular=modelpipelinerun,categories={train,modeld,all}
// ModelPipelineRun represent a execution of a pipeline
message ModelPipelineRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelPipelineRunSpec spec = 2;

  // +optional
  optional ModelPipelineRunStatus status = 3;
}

// ModelPipelineRunCondition describes the state of a ModelPipelineRun at a certain point.
message ModelPipelineRunCondition {
  // Type of  condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// ModelPipelineRunList represent list of pipelineruns
message ModelPipelineRunList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelPipelineRun items = 2;
}

// ModelPipelineRunSpec is the desired state of the ModelPipelineRun resource
message ModelPipelineRunSpec {
  // User provided description
  // +optional
  optional string versionName = 1;

  // User provided description
  // +optional
  optional string description = 2;

  // TriggerName denote the trigger that fired this pipeline run
  // +optional
  optional string triggerName = 3;

  // PipelineName is the name of the pipeline specification for this pipeline
  // +optional
  optional string pipelineName = 4;

  // The owner account name
  // +optional
  optional string owner = 5;
}

// ModelPipelineRunStageStatus is the observed state of the PipelineRunStage.
message ModelPipelineRunStageStatus {
  // +optional
  optional bool approved = 1;

  // +optional
  optional string approvedBy = 2;

  // +optional
  optional double score = 3;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 4;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 5;
}

// ModelPipelineRunStatus is the observed state of the ModelPipelineRun resource .
message ModelPipelineRunStatus {
  // +optional
  optional string studyName = 1;

  // +optional
  // data is the status for the data stage.
  optional ModelPipelineRunStageStatus data = 3;

  // +optional
  // dev is the status for the dev stage.
  optional ModelPipelineRunStageStatus training = 4;

  // Staging is status for each qa stage.
  // +optional
  optional ModelPipelineRunStageStatus acceptance = 5;

  // ReleaseStage is the status for the production stage.
  // +optional
  optional ModelPipelineRunStageStatus capacity = 6;

  // ReleaseStage is the status for the production stage.
  // +optional
  optional ModelPipelineRunStageStatus prod = 7;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 8;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 9;

  // The phase of the pipeline run
  // +optional
  optional string phase = 10;

  // +optional
  repeated ModelPipelineRunCondition conditions = 11;

  // Folder for pipeline run artifacts. This is assigned by the system
  // The folder contains all the pipeline artifacts - metadata, logs
  // +optional
  optional string evalMetrics = 13;
}

// ModelPipelineSpec define the desired state of the ModelPipeline resource.
message ModelPipelineSpec {
  // The product version of the resource
  // +optional
  optional string versionName = 1;

  // Servingsite name is the default serving site for each stage.
  // +optional
  optional string defaultServingSiteName = 2;

  // User provided description
  // +optional
  optional string description = 3;

  // Min score to move from stage to stage.
  // Default is 0
  // +optional
  optional double minScore = 4;

  // Datastage build new dataset from the data sources.
  // +optional
  optional DataStageSpec dataStage = 5;

  // TrainingSpec stage
  // +optional
  optional TrainingStageSpec trainingStage = 6;

  // Acceptance stage is used for further testing
  // +optional
  optional AcceptanceStageSpec acceptanceStage = 7;

  // Capacity stage for capacity
  // +optional
  optional CapacityStageSpec capacityStage = 8;

  // ReleaseStage stage define how to place the model into production.
  // +optional
  optional ReleaseStageSpec releaseStage = 9;

  // Folder for the pipeline and pipeline run artifacts.
  // The folder contains all the study artifacts - metadata, reports, profile,models
  // +optional
  optional string folder = 10;

  // Trigger
  optional PipelineTrigger trigger = 11;

  // The owner account name
  // +optional
  optional string owner = 12;
}

// ModelPipelineStatus define the observed state of the pipeline
message ModelPipelineStatus {
  // +optional
  repeated ModelPipelineCondition conditions = 1;
}

// model cv results
// +k8s:deepcopy-gen=true
message ModelResult {
  // +optional
  optional string name = 1;

  // +optional
  optional string alg = 2;

  // +optional
  optional double score = 3;

  // +optional
  optional bool error = 4;
}

// Define the constraint on the training process.
message ModelSearchSpec {
  // Type specify the hyper parameter optimization search method.
  // The only supported value is random
  // +optional
  optional string type = 1;

  // MaxCost specify what is the maximum cost incurred before
  // stopping model creations
  // +optional
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=1000
  optional int32 maxCost = 2;

  // MaxTime specify what is the maximum time allocated to a study (in minutes).
  // the cross validation stage.
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=10000
  // +optional
  optional int32 maxTime = 3;

  // Used for random search, the max models sampled.
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=1000
  // +optional
  optional int32 maxModels = 4;

  // The minimum score by which the search would stop
  // +optional
  optional double minScore = 5;

  // The desired number of trainers running during search.
  // Default: 1
  // +optional
  // +kubebuilder:validation:Maximum=50
  optional int32 trainers = 6;

  // SHOptions is the desired options for successive halving search.
  // All other models are saved into an archive.
  // +optional
  optional SuccessiveHalvingOptions shOptions = 7;

  // Indicate the desired number of models that should be passed to the testing phase.
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=100
  // +optional
  optional int32 test = 8;

  // Indicate the total number of full models that would be retain in etcd.
  // All other models are garbage collected (archived).
  // models are sorted by thier objective score.
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=100
  // +optional
  optional int32 retainTop = 9;

  // RetainFor measure the time in minutes for modeld trained. Default is 60 min (1 H).
  // +optional
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=2400
  optional int32 retainedFor = 10;

  // Define the general size of the resources needed for each trainer.
  // +optional
  optional TrainingResourceRequest resources = 11;

  // Contain the list of algorithms that should be tested as part of the search.
  repeated string allowlist = 12;

  // If true, create a voting ensemble of the top 3 models.
  // +optional
  optional bool votingEnsemble = 13;

  // If true, create a stacking ensemble of the top 3 models.
  // +optional
  optional bool stackingEnsemble = 14;
}

// ModelSpec defines the desired state of the Model resource
message ModelSpec {
  // The account name of the owner of this model
  // +optional
  optional string ownerName = 1;

  // ServingSiteName is a reference to the product version of this model. This value is based on the study product version
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:validation:MinLength=1
  // Required
  optional string versionName = 2;

  // StudyName ref reference the study for this model. IF empty, the model is stand alone
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:validation:MinLength=1
  // Required
  optional string studyName = 3;

  // DatasetName refer to the dataset object for which the study is for.
  // Required.
  optional string datasetName = 4;

  // Task is the machine learning task (regression, classification).
  // The task is generated from the study task
  // This is a required field.
  // Required
  optional string task = 5;

  // Objective is the metric by which the system compare models
  // Default: based on the task. classification is logloss. Regression is rmse
  // +optional
  optional string objective = 6;

  // Represent the preprocessing pipeline of the model. Provide a value if you want to customize the model.
  // Default: All preprocessing will be created automatically
  // +optional
  optional PreprocessingSpec preprocessing = 7;

  // Specification of the ML algorithm and its hyper parameters.
  // +optional
  optional ClassicalEstimatorSpec estimator = 8;

  // DeepNet estimator specification. Not supported for this release.
  // +optional
  optional DeepEstimatorSpec dnn = 9;

  // If this is an ensemble model, specify the ensemble
  // Default: None
  // +optional
  optional EnsembleSpec ensemble = 10;

  // TrainingSpec is the desired training settings
  // +optional
  optional TrainingSpec training = 11;

  // Tested indicate if this model should be testedActual. Default is false.
  // The study controller will set this to true if a model is the best model
  // +optional
  optional bool tested = 12;

  // Aborted indicate the desire to abort the model
  // +optional
  optional bool aborted = 13;

  // Published is set when we want to wrap the model in a docker container
  // +optional
  optional bool published = 14;

  // Pushed indicate if the model image should be pushed into the remote docker registry.
  // +optional
  optional bool pushed = 15;

  // Reported is set when a report should be created for this model
  // +optional
  optional bool reported = 16;

  // Paused is set when we want to pause the training
  // +optional
  optional bool paused = 17;

  // Profiled is set when we want to create model profile.
  // +optional
  optional bool profiled = 18;

  // Set when the model should be archived
  // +optional
  optional bool archived = 19;

  // Set the true when the model should perform a forecast
  // +optional
  optional bool forecasted = 20;

  // The location of the model artifacts (metadata, reports and estimators).
  // +optional
  optional github.com.metaprov.modeld_api.pkg.apis.data.v1alpha1.DataLocation location = 21;

  // The specification for the forecasting algorithm if this is a forecast study.
  // +optional
  optional ForecastingSpec forecastingSpec = 22;

  // The owner account name
  // +optional
  optional string owner = 23;
}

// ModelStatus defines the observed state of the Model
message ModelStatus {
  // Represents time when the model is first handled by the model controller
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 1;

  // Represents time when the model started training.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainStartTime = 2;

  // Represents time when the model ended training
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainCompletionTime = 3;

  // Represents time when the model started test on a trainer
  // It is not guaranteed to be set in happens-before order across separate operations.
  // It is represented in RFC3339 form and is in UTC.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time testStartTime = 4;

  // Represents time when the model ended testing
  // be set in happens-before order across separate operations.
  // It is represented in RFC3339 form and is in UTC.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time testCompletionTime = 5;

  // Represent the time that the model is marked as ready
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 6;

  // Cross validation score using on the training set.
  // +optional
  optional double cvScore = 7;

  // TrainingSpec on the full training set, Evaluating on the training set
  // +optional
  optional double trainScore = 8;

  // TrainingSpec on the full training set, Evaluating on the test set
  // +optional
  optional double testScore = 9;

  // The cost of the model
  // +optional
  optional double cost = 10;

  // True if this is the best model
  // +optional
  optional bool best = 11;

  // results of training the model (pipeline) on the full training set, and test it on the training set
  // +optional
  repeated Measurement trainResult = 12;

  // results of training the model (pipeline) on the full training set, and test it on the test set
  // +optional
  repeated Measurement testResult = 13;

  // The phase of the model
  // +optional
  optional string phase = 14;

  // Reference to the model report
  // +optional
  optional string reportName = 15;

  // The URI of the manifest in the product bucket.
  // +optional
  optional string manifestUri = 16;

  // The URI of the model binary file.
  // +optional
  optional string weightsUri = 17;

  // The URI of the label encoder binary file, if there is one.
  // +optional
  optional string labelsEncoderUri = 18;

  // The URI of the log file
  // +optional
  optional string logsUri = 19;

  // A reference to the visualization uri which were produce during processing
  // +optional
  optional string profileUri = 20;

  // A reference to the mis-classification file which were produce during processing
  optional string misclassUri = 21;

  // The image name of the model
  optional string imageName = 22;

  // The forecast URI
  // +optional
  optional string forecastUri = 23;

  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated ModelCondition conditions = 24;
}

message NNLayerParameter {
  optional string name = 1;

  optional string value = 2;
}

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=notebooks,singular=notebook,shortName=nb,categories={training,modeld,all}
// NotebookName represent a notebook
message Notebook {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the desired state of the Notebook.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional NotebookSpec spec = 2;

  // Status is the observed state of the Notebook.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional NotebookStatus status = 3;
}

// NotebookCondition describes the state of a notebook at a certain point.
message NotebookCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// NotebookList represent list of notebooks
message NotebookList {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Notebook items = 2;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=notebookruns,singular=notebookrun,shortName=nbr,categories={training,modeld,all}
// NotebookRun represent a single execution of a notebook with a specific env variables
message NotebookRun {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the desired state of the NotebookRun.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional NotebookRunSpec spec = 2;

  // Status is the observed state of the NotebookRun.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional NotebookRunStatus status = 3;
}

// NotebookRunCondition describes the state of a notebook run.
message NotebookRunCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// NotebookRunList is a list of notebook runs
message NotebookRunList {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated NotebookRun items = 2;
}

// NotebookRunSpec defines the desired state of the NotebookRun resource
message NotebookRunSpec {
  // The product of the resource
  // +optional
  optional string versionName = 1;

  // A ref to the notebook with the definition.
  // +optional
  optional string notebookName = 2;

  // Values to pass to the notebook during execution
  // +optional
  repeated NotebookVarValue values = 3;

  // The owner account name
  // +optional
  optional string owner = 4;
}

// NotebookRunStatus define that observed state of NotebookRun resource
message NotebookRunStatus {
  // The phase of the notebook
  // +optional
  optional string phase = 1;

  // StartTime is the times that this prediction job started
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 2;

  // CompletionTime is the time that this prediction job finished
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 3;

  // Represents the latest available observations of a notebook run state.
  // +optional
  repeated NotebookRunCondition conditions = 4;
}

// NotebookSpec is the desired state of the notebook resource.
message NotebookSpec {
  // The product of the resource
  // +optional
  optional string versionName = 1;

  // User provided description
  // +optional
  // +kubebuilder:validation:MinLength=512
  optional string description = 2;

  // SchemaName relate a notebook to a schema.
  // The schema object will be accessible from the notebook
  // +optional
  optional k8s.io.api.core.v1.ObjectReference schemaRef = 3;

  // A reference to the container image repository for this notebook.
  optional k8s.io.api.core.v1.ObjectReference imageRepoRef = 4;

  // python req file
  // +optional
  optional string requirements = 6;

  // list of deb package
  // +optional
  optional string debPackages = 7;

  // vars to pass to the notebook
  // +optional
  repeated string vars = 8;

  // The location of the notebook
  optional github.com.metaprov.modeld_api.pkg.apis.data.v1alpha1.DataLocation location = 9;

  // The owner account name
  // +optional
  optional string owner = 10;
}

// NotebookStatus is the observed state of the notebook resource
message NotebookStatus {
  // Image is the name of the image after publication
  // +optional
  optional string image = 1;

  // The URI of the notebook in the bucket.
  // +optional
  optional string uri = 2;

  // Represents the latest available observations of a notebook state.
  // +optional
  repeated NotebookCondition conditions = 3;
}

// NotebookVarValue is an assignment of value to the notebook var
message NotebookVarValue {
  optional string name = 1;

  optional string value = 2;
}

message NumericPipelineSpec {
  repeated string columns = 1;

  // Numerical var imputer
  // +optional
  optional string imputer = 2;

  // Numeric var scaler
  // +optional
  optional string scaler = 3;
}

message PipelineTrigger {
  // Spec for a schedule in case that the trigger
  // +optional
  optional TriggerSchedule schedule = 1;

  // Definition of git hub events
  // +optional
  optional GithubEvents githubEvents = 2;
}

// Specification of the pre processing pipeline
message PreprocessingSpec {
  // One or more categorical pipelines.
  optional CategoricalPipelineSpec categorical = 1;

  // Specify the column transformation for numeric columns
  // +optional
  optional NumericPipelineSpec numeric = 2;

  // Specify the column transformation for text columns
  // +optional
  optional TextPipelineSpec text = 3;

  // Specify the pipeline for images. Not supported in this release
  // +optional
  optional ImagePipelineSpec image = 4;

  // Specify the pipeline for audio. Not supported in this release
  // +optional
  optional AudioPipelineSpec audio = 5;

  // Specify the pipeline for video. Not supported in this release
  // +optional
  optional VideoPipelineSpec video = 6;

  // Specify the column transformation for datetime columns
  // +optional
  optional DateTimePipelineSpec datetime = 7;

  // FeaturePipeline selector
  // +optional
  optional string featureSelector = 8;

  // Dim reducer
  // +optional
  optional string reducer = 9;

  // Imbalance flag instruct the designer to create an imbalanced pipeline. Default is false
  // +optional
  optional bool imbalanced = 10;
}

message ReleaseStageSpec {
  // +optional
  optional string predictorName = 1;
}

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.reportType"
// +kubebuilder:printcolumn:name="Uri",type="string",JSONPath=".status.uri"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=reports,singular=report,categories={training,modeld,all}
// ReportName represent a report object
message Report {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ReportSpec spec = 2;

  // +optional
  optional ReportStatus status = 3;
}

// ReportCondition describes the state of a ReportName at a certain point.
message ReportCondition {
  // Type of condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// ReportList is a list of reports
message ReportList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Report items = 2;
}

// ReportSpec specifies the desired state of the ReportName resource
message ReportSpec {
  // +optional
  optional string versionName = 1;

  // EntityName specify the entity being report. Currently entities can be dataset,model or study
  optional k8s.io.api.core.v1.ObjectReference entityRef = 2;

  // The report location
  // +optional
  optional github.com.metaprov.modeld_api.pkg.apis.data.v1alpha1.DataLocation location = 4;

  // ReportType specify the report type (e.g. classification / regression)
  optional string reportType = 5;

  // Format specify the report format. default is pdf
  // +optional
  optional string format = 6;

  // reference to the notifier that is used to send the report
  // +optional
  optional string description = 7;

  // The owner account name
  // +optional
  optional string owner = 8;
}

// ReportStatus defines the observed state of the report.
message ReportStatus {
  // Represents time when the report was sent for generation
  // It is not guaranteed to be set in happens-before order across separate operations.
  // It is represented in RFC3339 form and is in UTC.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 2;

  // Represents time when the report ended generation and was uploaded to storage
  // be set in happens-before order across separate operations.
  // It is represented in RFC3339 form and is in UTC.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 3;

  // The phase of the report
  // +optional
  optional string phase = 4;

  // The report uri in the bucket
  // +optional
  optional string uri = 5;

  // +optional
  repeated ReportCondition conditions = 6;
}

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Dataset",type="string",JSONPath=".spec.datasetName"
// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task"
// +kubebuilder:printcolumn:name="Objective",type="string",JSONPath=".spec.objective"
// +kubebuilder:printcolumn:name="Score",type="number",JSONPath=".status.bestModelScore"
// +kubebuilder:printcolumn:name="Best model",type="string",JSONPath=".status.bestModel"
// +kubebuilder:printcolumn:name="TotalTrainers",type="string",JSONPath=".status.totalTrainers"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:object:root=true
// +kubebuilder:resource:path=studies,singular=study,shortName=sd,categories={training,modeld}
message Study {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional StudySpec spec = 2;

  optional StudyStatus status = 3;
}

// StudyCondition describes the state of a StudyName.
message StudyCondition {
  // Type of account condition.
  // +optional
  optional string type = 1;

  // Status of the condition, one of True, False, AutoScaler.
  // +optional
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 6;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// StudyList is a list of Study
message StudyList {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Study items = 2;
}

// StudySpec defines the desired state of the study
message StudySpec {
  // The version of the study
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:validation:MinLength=1
  // required
  optional string versionName = 1;

  // User provided description
  // +kubebuilder:validation:MaxLength=512
  // +optional
  optional string description = 2;

  // A reference to the lab where the trainers for this study run.
  // If no value is provided, the lab is taken from the
  // +optional
  optional k8s.io.api.core.v1.ObjectReference labRef = 3;

  // DatasetName refer to the dataset object for which the study is for.
  // Required.
  optional string datasetName = 4;

  // Task specify the machine learning task (e.g classification).
  // This must match the task of the data product.
  // Required.
  optional string task = 5;

  // The objective defined how the study controller will compare model performance.
  // +optional
  optional string objective = 6;

  // Defines the model search
  // +optional
  optional ModelSearchSpec search = 8;

  // This is template for preprocessors for this study
  // Default: all preprocessing is set to auto.
  // +optional
  optional PreprocessingSpec preprocessing = 9;

  // Training template contain the desired training parameter for the models.
  // +optional
  optional TrainingSpec training = 10;

  // A reference to the workload class object from the catalog.
  // Default : scikit learn trainer.
  // +optional
  optional k8s.io.api.core.v1.ObjectReference trainerClassRef = 11;

  // A reference to the split.
  // +optional
  optional DataSplit split = 12;

  // Aborted is set when we want to abort the training
  // +optional
  optional bool aborted = 13;

  // Reported is set when we want to create model report
  // +optional
  optional bool reported = 14;

  // Paused is set when we want to pause the training
  // +optional
  optional bool paused = 15;

  // Profiled is set when we want to create model profile and study profile.
  // +optional
  optional bool profiled = 16;

  // Set to true if you want the system to create a docker model image, at the end of training.
  // +optional
  optional bool modelPublished = 17;

  // Set to true if you want the system to push model image to remote docker registry
  // +optional
  optional bool modelImagePushed = 18;

  // The location of the study artifacts
  // By default the bucket is the data product bucket.
  // +optional
  optional github.com.metaprov.modeld_api.pkg.apis.data.v1alpha1.DataLocation location = 19;

  // The group hierarchy
  // +optional
  optional Hierarchy hierarchy = 21;

  // The owner account name
  // +optional
  optional string owner = 22;
}

// StudyStatus defines the observed state of the Study
message StudyStatus {
  // Total models created for the study
  optional int32 models = 1;

  // models waiting for a trainer
  optional int32 waitingToTrain = 2;

  // models which are currently training or testing.
  optional int32 trainingModels = 3;

  // models that failed during training.
  optional int32 failedTrainingModels = 4;

  // models that were successful during training
  optional int32 trainedModels = 5;

  // models waiting testing
  optional int32 waitingToTestModels = 6;

  // models in testing
  optional int32 testingModels = 7;

  // models failed testing.
  optional int32 failedTestingModels = 8;

  // Tested models
  optional int32 testedModels = 9;

  // Total number of trainers in this study
  optional int32 trainers = 10;

  // Free trainers
  optional int32 freeTrainers = 11;

  // TotalTrainers training
  optional int32 budyTrainers = 12;

  // Study start time
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 13;

  // Start of the training phase
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainingStartTime = 14;

  // End of the training phase.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainingCompletionTime = 15;

  // Start of the testing phase
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time testingStarted = 16;

  // Represents time when the study reached a successful complete or failure phase. It is not guaranteed to
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time testingCompletionTime = 17;

  // The study end time.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 18;

  // The Best model name.
  optional string bestModel = 20;

  // The Best model score, so far.
  optional double bestModelScore = 21;

  // A reference to the profile uri which were produce during processing
  optional string profileUri = 22;

  // The study report name
  optional string reportName = 23;

  // The phase of the study
  optional string phase = 24;

  // This is the set of partition levels
  // Represents the latest available observations of a study state.
  repeated StudyCondition conditions = 25;
}

message SuccessiveHalvingOptions {
  // The maximum budget allocated to each model during SH search.
  // The default max budget is 81
  // +optional
  optional int32 maxBudget = 6;

  // The rate of elimination during SH search, such that only 1/rate of models are promoted to the
  // next half
  // The default rate is 3
  // +optional
  optional int32 eliminationRate = 7;

  // The modality type. The default modality is based on the type of models
  // For deep models - we use epocs.
  // For classical models - we use data
  // +optional
  optional string modality = 8;
}

message SuccessiveHalvingSpec {
  // The budget is used in multi fidelity search.
  // This is the percent of fidelity of the model. The meaning is based on the model configuration.
  // For example fidelity is number of epochs in sgd alg
  // Or can be percent of the data in non sgd algorithm.
  // +optional
  // +kubebuilder:validation:Maximum=128
  // +kubebuilder:validation:Minimum=0
  optional int32 budget = 1;

  // The bracket of the model when running multi fidelity search.
  // +optional
  // +kubebuilder:validation:Maximum=128
  // +kubebuilder:validation:Minimum=0
  optional int32 bracket = 2;

  // The rung of the model
  // +optional
  // +kubebuilder:validation:Maximum=128
  // +kubebuilder:validation:Minimum=0
  optional int32 rung = 3;

  // The configuration id allocated to this model in rung 0
  // +optional
  optional int32 confID = 4;

  // The modality type. The default modality is based on the type of models
  // For deep models - we use epocs.
  // For classical models - we use data
  // +optional
  optional string modality = 26;
}

message TextPipelineSpec {
  // The list of test columns
  repeated string columns = 1;

  // The text encoder (e.g. tfidf)
  // +optional
  optional string encoder = 2;

  // Text tokenizer
  // +optional
  optional string tokenizer = 3;

  // If true, the controller will Add stop word handling to the text pipeline.
  // +optional
  optional bool stopwords = 4;

  // If true, the controller will Add part of speech handling to the text pipeline.
  // +optional
  optional bool pos = 5;

  // If true, the controller will Add lemma handling to the text pipeline.
  // +optional
  optional bool lemma = 6;

  // If true, the controller will Add stemmer handling to the text pipeline.
  // +optional
  optional bool stem = 7;

  // If true, the controller will Add word embedding handling to the text pipeline.
  // +optional
  optional string embedding = 8;
}

message TrainingResourceRequest {
  // Gpu specify the desired gpu requirements.  will be compared
  // +optional
  optional string gpu = 1;

  // Cpu specify the cpu requirements will be compared
  // +optional
  optional string cpu = 2;

  // Mem define the memory resource requirements will be compared
  // +optional
  optional string mem = 3;
}

// Specification of the training process
message TrainingSpec {
  // Priority specify the priority of the model in the training queue.
  // The priority is defined in the model study.
  // Default: 5
  // +optional
  // +kubebuilder:validation:Maximum=10
  // +kubebuilder:validation:Minimum=1
  optional int32 priority = 2;

  // The  type of cross validation.
  // if we have a validation set, we do not do cv.
  // +optional
  optional string cvtype = 3;

  // If true, this is a cross validation using folds. If False, use the validation set.
  // Default: True
  // +optional
  optional bool cv = 4;

  // The number of folds during cross validation.
  // +optional
  optional int32 folds = 6;

  // Retry attempt is the number of training retry for this model,
  // Default is 5
  // +optional
  optional int32 retry = 7;

  // Evaluation metrics are the scores
  // +optional
  repeated string evalMetrics = 8;

  // Early stopping, stop the training after X models with no improvement.
  // Default: False
  // +optional
  optional bool earlyStop = 9;

  // Add snapshot interval for long training time in minutes.
  // This is used to checkpoint training model.
  // +optional
  // +kubebuilder:validation:Minimum=0
  optional int32 checkpointInterval = 10;

  // Define the forecast period for time series studies. This is only used in time series models.
  // Default: Empty
  // +optional
  optional ForecastingSpec forecast = 11;

  // Successive halving represent the configuration for the model training, when running
  // the SuccessiveHalvingSpec model search algorithm
  // The metrics are evaluated using the final model, both on the training set
  // and on the test set
  // +optional
  optional SuccessiveHalvingSpec sh = 12;

  // Used as the random state for an estimator if needed (for example, in RandomForestClassifier)
  // Default: 42
  // +optional
  optional double seed = 13;
}

// A specification of a the training stage.
message TrainingStageSpec {
  // NotebookName template specify the notebook
  optional string notebookName = 1;

  // LabName is the name of the lab used for training
  // +optional
  optional string labName = 2;

  // Study FileName is a name of a study which will be cloned for this stage.
  // +optional
  optional string studyName = 3;

  // Auto defines if we move from stage to stage automatically.
  // +optional
  optional bool auto = 4;
}

message TriggerSchedule {
  // The start time of the schedule
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 1;

  // The start data of the schedule
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startDay = 2;

  // The end time of the schedule
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Timestamp endTime = 3;

  // The end day of the schedule
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endDay = 4;

  // Cron string of the schedule.
  // +optional
  optional string cron = 5;

  // +optional
  // The type of schedule events.
  optional string type = 6;
}

message VideoPipelineSpec {
  // Name of the datetime columns
  repeated string columns = 1;

  // The date time imputer.
  // +optional
  optional string featurizer = 2;
}

