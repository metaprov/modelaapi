/**
*
* Copyright (C) 2017 modela authors
* For license information, see LICENSE.txt
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.metaprov.modelaapi.pkg.apis.training.v1alpha1;

import "github.com/metaprov/modelaapi/pkg/apis/catalog/v1alpha1/generated.proto";
import "github.com/metaprov/modelaapi/pkg/apis/data/v1alpha1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/metaprov/modelaapi/pkg/apis/training/v1alpha1";

// AlgorithmSearchSpaceSpec defines the algorithms available to models produced by a ModelClass
message AlgorithmSearchSpaceSpec {
  // AllowList contains the collection of algorithms available to the ModelClass specifying the AlgorithmSearchSpaceSpec.
  // If empty, all algorithms will be available for training
  // +kubebuilder:validation:Optional
  repeated string allowlist = 1;
}

message Anomaly {
  // +kubebuilder:validation:Optional
  optional string name = 1;

  // +kubebuilder:validation:Optional
  optional string valueColumn = 2;

  // +kubebuilder:validation:Optional
  optional string adjDeltaColumn = 3;

  // The start of the anomaly
  // +kubebuilder:validation:Optional
  optional string start = 4;

  // The end of the anomaly
  // +kubebuilder:validation:Optional
  optional string end = 5;
}

// AudioPipelineSpec represents a single pipeline for preprocessing audio data
message AudioPipelineSpec {
  // The date time imputer.
  // +kubebuilder:default:="auto"
  // +kubebuilder:validation:Optional
  optional string featurizer = 1;
}

// BacktestSpec specify the back test
message BacktestSpec {
  // If true, use sliding windows, else use expanding windows
  // +kubebuilder:default = false
  // +kubebuilder:validation:Optional
  optional bool sliding = 1;

  // Number of splits. Default is 5
  // +kubebuilder:default = 5
  // +kubebuilder:validation:Optional
  optional int32 splits = 2;

  // ExpectedValueMax size for a single training set
  // +kubebuilder:default = 0
  // +kubebuilder:validation:Optional
  optional int32 Initial = 3;

  // The number of data points between each windows
  // +kubebuilder:default = 0
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 gap = 5;
}

// BaselineSpec specifies the configuration to produce baseline models
message BaselineSpec {
  // Indicates if baseline models will be produced. Enabling baseline will create a model for each
  // algorithm in the parent ModelClass's search space with default hyper-parameters
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // Baselines contains the collection of algorithms that models will be created with
  // +kubebuilder:validation:Optional
  repeated string baselines = 2;

  // Indicates if models will be created for every algorithm
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool all = 3;
}

// CapacityStageSpec is the desired state of the capcity testing.
message CapacityStageSpec {
  // Enabled indicates that the stage is enabled
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // ServingSiteName is the serving site for the testing during the capacity stage
  // If the serving site is empty or null, the system will skip the capacity stage unit tests.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string servingSiteName = 2;

  // Validations is the specification of tests to run in this stage
  // +kubebuilder:validation:Optional
  optional ModelTestSuite unitTests = 3;

  // Resource define the hardware resources req.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec resources = 4;
}

message ChangePoint {
}

// ChatbotEstimatorSpec specifies the configuration for a chatbot model
message ChatbotEstimatorSpec {
  // The name of the base model
  // +kubebuilder:validation:Optional
  optional string base = 1;
}

// CheckpointSpec specifies where to store model checkpoints
message CheckpointSpec {
  // Indicates if checkpointing is enabled.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // The interval, in minutes, at which a snapshot of a partially trained model will be saved.
  // Applicable to models with long training times for resiliency if training is suddenly stopped
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=10
  // +kubebuilder:validation:Minimum=0
  optional int32 checkpointInterval = 2;

  // The location of the model checkpoint
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 3;
}

// ClassicalEstimatorSpec is the specification for an algorithm and the actual value fof the hyper parameters
message ClassicalEstimatorSpec {
  // AlgorithmName is a reference to the algorithm in the catalog
  optional string algorithmName = 1;

  // Parameters is a list of the algorithm hyper parameters
  repeated HyperParameterValue parameters = 2;
}

// CronReport represents a run of the summary report.
message CronReport {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional CronReportSpec spec = 2;

  optional CronReportStatus status = 3;
}

// ReportCondition describes the state of ReportTemplate
message CronReportCondition {
  // Type of  condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// CronReportList is a list of CronReport
message CronReportList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated CronReport items = 2;
}

// CronReportSpec represent the desired state of CronReport
message CronReportSpec {
  // VersionName is the data product version of the data pipeline
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 2;

  // Schedule for running the pipeline
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RunSchedule schedule = 3;

  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string range = 4;

  // Template refer to the prediction template
  optional ReportTemplate template = 5;

  // Set to true to pause the cron report
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 6;

  // Notification specification.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.NotificationSpec notification = 7;
}

// CronReportStatus is the observed state of a ReportTemplate
message CronReportStatus {
  // Last run is the last time a data pipeline run was created
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.LastRunStatus lastRun = 1;

  // The time of the next schedule run
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time nextRun = 2;

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 3;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 4;

  // Update in case of terminal failure
  // Borrowed from cluster api controller
  // +kubebuilder:validation:Optional
  optional string failureReason = 5;

  // Update in case of terminal failure message
  // +kubebuilder:validation:Optional
  optional string failureMessage = 6;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated CronReportCondition conditions = 7;
}

message CustomReportSpec {
  // Pages contains a collection of custom pages that will be appended to a Report
  repeated github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.PageSpec pages = 8;
}

// DataHashes contains the hashes for datasets used during model training
message DataHashes {
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string trainHash = 1;

  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string testingHash = 2;

  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string validationHash = 3;
}

// DataSplitSpec specifies the configuration to split a dataset into training and testing datasets
message DataSplitSpec {
  // The type of split method
  // +kubebuilder:default:="auto"
  // +kubebuilder:validation:Optional
  optional string method = 1;

  // The number percentage (0 through 100) of rows that will be allocated to the training dataset
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=80
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=100
  optional int32 train = 2;

  // The number percentage (0 through 100) of rows that will be allocated to the validation dataset.
  // If Validation is set to 0 the model will default to use cross-validation
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Maximum=50
  // +kubebuilder:validation:Optional
  optional int32 validation = 3;

  // The number percentage (0 through 100) of rows that will be allocated to the training dataset
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=100
  // +kubebuilder:default:=20
  // +kubebuilder:validation:Optional
  optional int32 test = 4;

  // The name of the column containing a binary value that indicates if the row should be split.
  // The split type must use split-column in order for SplitColumn to have an effect
  // +kubebuilder:validation:Optional
  optional string splitColumn = 5;

  // The collection of segments
  // +kubebuilder:validation:Optional
  repeated SegmentSpec segments = 6;

  // The name of the Entity resource which will be used as the training dataset
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string trainDataset = 7;

  // The name of the Entity resource which will be used as the testing dataset, applicable
  // if the split type uses test-dataset. If enabled, the training dataset will not be split and used as-is
  // If empty, we will not use test dataset
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string testDataset = 8;

  // The name of the Entity resource which will be used as the validation dataset, applicable
  // if the split type uses test-dataset. If enabled, the training dataset will not be split and used as-is
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string validationDataset = 9;
}

// DataStageSpec is the desired state of the data preprocessing step of the pipeline.
// Data preprocessing will be done via
message DataStageSpec {
  // Enabled indicates that the stage is enabled
  // +kubebuilder:default:=true
  optional bool enabled = 1;

  // LabName is the lab that execute processing of the data pipeline
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string labName = 2;

  // If not null, run the data pipeline and create a dataset. else, use the data in the data location
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string datapipelineName = 3;

  // If Not null, run a docker image is used in order to generate the data.
  // The data must reside in location after the container run
  // Not supported in first release.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string dockerImage = 4;
}

message DeepEstimatorLayer {
  // Name is the name of the layer
  optional string name = 1;

  // Type is the type of the layers
  optional string type = 2;

  // Parameters are the hyper parameters of this layer
  repeated NNLayerParameter parameters = 3;

  // InputLayers are the layer input to this layer
  repeated string inputLayers = 4;
}

message DeepEstimatorSpec {
  // Layers is the dnn architecture
  // +kubebuilder:validation:Optional
  repeated DeepEstimatorLayer layers = 1;

  // The type of the dnn
  // +kubebuilder:validation:Optional
  optional string type = 2;

  // Batch size specify about
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 batchSize = 3;

  // Budget size specify about
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 epochs = 4;

  // ValidationSplit specify about
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 validationSplit = 5;

  // Is this a seq model
  // +kubebuilder:validation:Optional
  optional bool isSeq = 6;

  // Gpus denote of gpu for trainer, any number more than 1 denote distribute training
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int32 gpus = 7;

  // compile
  // +kubebuilder:validation:Optional
  optional string loss = 8;
}

// DeploymentStageSpec define the testing and releasing the resulting model to production.
message DeploymentStageSpec {
  // Enabled indicates that we want to release the model into production
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // ServingSiteName is the serving site for the release, if empty, the system will use the default serving site name
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string servingSiteName = 2;

  // ManualApproval dentoes if we need manual approval before advancing from deployed to released
  // By default a user is needed to approve the release to production
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool manualApproval = 3;

  // Tests is the specification of tests to run in this stage
  // +kubebuilder:validation:Optional
  optional ModelTestSuite unitTests = 4;

  // Resource define the hardware resources req.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec resources = 5;
}

message DriftDetectorStatus {
  // The location of the prediction outlier detection
  optional string outlierModelURI = 1;
}

// The spec for generating a density model for this ModelClass.
message DriftModelSpec {
  // Indicates if density models should be created.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // The density model alg.
  // +kubebuilder:default:="isolation-forest"
  // +kubebuilder:validation:Optional
  optional string outlierAlgorithm = 2;
}

// EarlyStopSpec specifies the configuration to automatically abort a model search
// if further improvements in model performance cannot be produced
message EarlyStopSpec {
  // Indicates if early stopping is enabled
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // The number of models to train before model objective metrics will begin to be checked for early stopping
  // +kubebuilder:default:=20
  // +kubebuilder:validation:Optional
  optional int32 initial = 2;

  // The number of models with no improvement in score that are required to abort the model search
  // +kubebuilder:default:=5
  // +kubebuilder:validation:Optional
  optional int32 minModelsWithNoProgress = 3;
}

// EnsembleRules is an algorithm class that decide
message EnsembleRules {
}

// EnsembleSpec specifies the parameters of an ensemble model
message EnsembleSpec {
  // The collection of models (by their name) to be used as estimators in the ensemble
  // +kubebuilder:validation:Optional
  repeated string models = 1;

  // The collection of estimators to be used in the ensemble, derived from Models
  // +kubebuilder:validation:Optional
  repeated ClassicalEstimatorSpec estimators = 2;

  // The base estimator
  // +kubebuilder:validation:Optional
  optional ClassicalEstimatorSpec final = 3;

  // The ensemble type method
  // +kubebuilder:validation:Optional
  optional string type = 4;
}

// EnsemblesSpec specifies the configuration to produce ensemble models
message EnsemblesSpec {
  // Indicates if ensemble models will be created
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // Indicates if a voting ensemble model will be created
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool votingEnsemble = 2;

  // Indicates if a stacking ensemble model will be created
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool stackingEnsemble = 3;

  // The number of top candidate models to include in the ensemble
  // +kubebuilder:default:=3
  // +kubebuilder:validation:Optional
  optional int32 top = 4;
}

// What metric to evaluate
message EvalMetrics {
  // From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  // Used to select the optimal model during cross-validation.
  // +kubebuilder:validation:Optional
  optional string selection = 1;

  // From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  // Additional metrics to compute during CV, besides the one specified by ``cv_selection_metric``
  // +kubebuilder:validation:Optional
  repeated string reporting = 2;

  //  From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  //  Defines how to aggregate rolling windows of actual and predicted values
  //  before evaluation.
  // +kubebuilder:validation:Optional
  optional string aggFunc = 3;

  //  From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  //  Number of periods to aggregate before evaluation.
  // +kubebuilder:validation:Optional
  optional int32 aggPeriod = 4;

  //  From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  // Defines baseline model to compute ``R2_null_model_score`` evaluation metric.
  // R2_null_model_score is the improvement in the loss function relative
  // to a null model. It can be used to evaluate model quality with respect to
  // a simple baseline
  // +kubebuilder:validation:Optional
  optional string nullModelParams = 5;

  //  From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  // Threshold to compute the ``Outside Tolerance`` metric,
  // defined as the fraction of forecasted values whose relative
  // error is strictly greater than ``relative_error_tolerance``.
  // If `None`, the metric is not computed.
  // +kubebuilder:validation:Optional
  optional double relErrTolerance = 6;
}

// The cross validation spec, used to evaluate the forecaster during training.
message EvalPeriod {
  //  From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  // Numbers of periods held back from end of df for test.
  // The rest is used for cross validation.
  // If None, default is forecast_horizon. Set to 0 to skip backtest.
  // +kubebuilder:validation:Optional
  optional int32 testHorizon = 1;

  // +kubebuilder:validation:Optional
  optional int32 periodsBetweenTrainTest = 2;

  //  From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  // Number of periods to slide the test window between CV splits. Has to be greater than or equal to 1.
  // If None, default is cv_horizon.
  // +kubebuilder:validation:Optional
  optional int32 cvPeriodsBetweenSplits = 3;

  // +kubebuilder:validation:Optional
  optional bool cvExpandingWindows = 4;

  //  From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  // Number of periods in each CV test set
  // If None, default is forecast_horizon. Set to 0 to skip CV.
  // +kubebuilder:validation:Optional
  optional int32 cvHorizon = 5;

  //  From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  // Minimum number of periods for training each CV fold.
  // If cv_expanding_window is False, every training period is this size
  // If None, default is 2 * cv_horizon
  // +kubebuilder:validation:Optional
  optional int32 cvMinTrainPeriods = 6;

  //  From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  // Maximum number of CV splits.
  // Given the above configuration, samples up to max_splits train/test splits,
  // preferring splits toward the end of available data. If None, uses all splits.
  // +kubebuilder:validation:Optional
  optional int32 cvMaxSplits = 7;

  //  From: https://linkedin.github.io/greykite/docs/0.1.0/html/pages/stepbystep/0400_configuration.html
  // If True, splits from the end of the dataset are used.
  // Else a sampling strategy is applied. Check
  // +kubebuilder:validation:Optional
  optional bool cvUseMostRecentSplits = 8;
}

// FeatureEngineeringPipeline represent a single pipeline to transform a dataset
message FeatureEngineeringPipeline {
  // The name of the pipeline
  // +kubebuilder:validation:Required
  optional string name = 1;

  // The type of data which the pipeline applies to
  // +kubebuilder:validation:Required
  // +required
  optional string datatype = 2;

  // The collection of columns which the pipeline applies to. Each column in the dataset with the
  // data type of the pipeline should be added to the collection of columns
  // +kubebuilder:validation:Optional
  repeated string columns = 3;

  // The imputation method to use, which fills in missing values within the columns
  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string imputation = 4;

  // The encoding method to use for categorical data types
  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string encoding = 5;

  // The scaling method to use for numerical data types
  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string scaling = 6;

  // The discretisation method, which converts numerical data types to discrete variables
  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string discretisation = 7;

  // The transformation method to use for numerical data types
  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string variableTransformation = 8;

  // The method to use when handling outliers
  // +kubebuilder:default:=none
  // Apply only to numeric data types.
  optional string outlierHandling = 9;

  // The method to use when handling the date-time data type
  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string datetimeTransformation = 10;

  // Text specifies the pipeline to handle raw text
  // +kubebuilder:validation:Optional
  optional TextPipelineSpec text = 11;

  // Image specifies the pipeline to handle image data (currently unsupported)
  // +kubebuilder:validation:Optional
  optional ImagePipelineSpec image = 12;

  // Audio specifies the pipeline to handle audio data (currently unsupported)
  // +kubebuilder:validation:Optional
  optional AudioPipelineSpec audio = 13;

  // Video specifies the pipeline to handle video data (currently unsupported)
  // +kubebuilder:validation:Optional
  optional VideoPipelineSpec video = 14;

  // Generated specifies a collection of columns to be generated
  // +kubebuilder:validation:Optional
  repeated GeneratedColumnSpec generated = 16;

  // Custom specifies a collection of columns to be generated. Custom columns are specified by end-users
  // +kubebuilder:validation:Optional
  repeated GeneratedColumnSpec custom = 17;

  // Indicates if all of all the columns specified by the Columns field should be dropped
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool drop = 18;

  // Indicates if the pipeline should not be applied and the columns should remain unchanged
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool passthrough = 19;
}

// FeatureEngineeringSearchSpec specifies the configuration to produce
// the best-performing feature engineering pipeline for a given dataset
message FeatureEngineeringSearchSpec {
  // Indicates if the feature engineering search will be performed
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // The method to use when handling an imbalanced dataset
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string imbalancedHandler = 2;

  // The algorithm to use when evaluating models with different feature engineering pipelines
  // +kubebuilder:validation:Optional
  optional string estimator = 3;

  // The number of models to sample, after which the feature engineering with the highest
  // score will be used with Model resources produced by the primary model search of the parent ModelClass
  // +kubebuilder:default:=10
  // +kubebuilder:validation:Optional
  optional int32 maxModels = 4;

  // The deadline, in seconds, for models produced by the search to be trained
  // +kubebuilder:default:=3600
  // +kubebuilder:validation:Optional
  optional int32 maxTime = 5;

  // The desired number of trainers that will train candidate models in parallel. The number
  // of trainers is restricted based on the allowance provided by the active License
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 maxTrainers = 6;

  // The number percentage (0 through 100) of the dataset to train models with
  // +kubebuilder:default:=100
  // +kubebuilder:validation:Optional
  optional int32 samplePct = 7;

  // Indicates if models produced by the feature engineering search should be
  // automatically removed at the conclusion of the search
  // +kubebuilder:default:=true
  optional bool autoRemove = 8;

  // If true, if a feature engineering pipeline was previously produced for
  // the same dataset it will be used as a starting point for the search
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool reuse = 9;

  // Specification for feature selection.
  // successful ModelClass.
  // +kubebuilder:validation:Optional
  optional FeatureSelectionSpec featureSelectionTemplate = 10;

  // The number of new models produced by the fe search which, if there is no improvement
  // in score, the model search will conclude
  // +kubebuilder:validation:Optional
  optional EarlyStopSpec earlyStop = 12;
}

message FeatureEngineeringSearchStatus {
  // The recommended pipeline after feature engineering was done
  optional FeatureEngineeringSpec best = 1;
}

// FeatureEngineeringSpec specifies the feature engineering and preprocessing to be performed on a dataset
message FeatureEngineeringSpec {
  // Pipelines contains the collection of feature engineering pipelines that
  // will be applied to a dataset prior to model training
  // +kubebuilder:validation:Optional
  repeated FeatureEngineeringPipeline pipelines = 1;

  // The method which will be used to handle an imbalanced dataset
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string imbalance = 2;

  // FeatureSelection specifies the configuration to perform
  // feature selection on a dataset prior to model training
  // +kubebuilder:validation:Optional
  optional FeatureSelectionSpec selection = 3;
}

// FeatureImportance records the computed importance of a single feature
message FeatureImportance {
  // The name of the feature
  optional string feature = 1;

  // The importance of the feature
  // +kubebuilder:validation:Format=float
  // +kubebuilder:validation:Type=number
  optional double importance = 2;
}

message FeatureInfo {
  // The feature name
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string name = 1;

  // The reason that the feature was dropped
  // +kubebuilder:validation:Optional
  optional string reason = 2;

  // +kubebuilder:validation:Optional
  optional double value = 3;
}

message FeaturePair {
  optional string x = 1;

  optional string y = 2;
}

// FeatureSelectionSpec specifies the configuration to run feature selection on a dataset
message FeatureSelectionSpec {
  // Indicates if feature selection is enabled
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // Indicates if embedded methods will be tested as part of the candidate algorithms (e.g. tree-based selection)
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool embedding = 3;

  // Indicates if filter methods will be tested as part of the candidate algorithms (e.g. chi-square or anova tests)
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool filter = 4;

  // Indicates if wrapper methods will be tested as part of the candidate algorithms
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool wrapper = 5;

  // The collection of feature selection methods that will be applied in order to the dataset
  repeated string pipeline = 6;

  // The threshold as a percentage to remove low variance features
  // +kubebuilder:default:=5
  // +kubebuilder:validation:Optional
  optional int32 varianceThresholdPct = 7;

  // The threshold to remove features with high correlations
  // +kubebuilder:default:=95
  // +kubebuilder:validation:Optional
  optional int32 corrThreshold = 8;

  // The number of features that will be selected based on importance. If TopN is 0, all features will be selected
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 maxFeatures = 9;

  // Percent of features to keep
  // +kubebuilder:default:=20
  // +kubebuilder:validation:Optional
  optional int32 percentile = 10;

  // List of features that are reserved and will always be included in the final feature selection
  // +kubebuilder:validation:Optional
  repeated string reserved = 12;
}

// The forecaster search define a search for the forecaster
message ForecasterSpec {
  // The spec for the holiday
  // +kubebuilder:validation:Optional
  repeated TimeSeriesEvent events = 2;

  // Specification for the past windows
  // +kubebuilder:validation:Optional
  optional WindowSpec past = 3;

  // Specification for the future windows
  // +kubebuilder:validation:Optional
  optional WindowSpec future = 4;

  // Make a forecast post training
  // +kubebuilder:validation:Optional
  optional bool forecast = 5;

  // Make a forecast post training
  // +kubebuilder:validation:Optional
  optional double coverage = 6;

  // The data location that would store the forecast result.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation outputLocation = 7;

  // List of time series features to compute on each time series.
  // +kubebuilder:validation:Optional
  repeated string features = 8;

  // Filter the groups to forecast for. If none forecast only to the leaf group
  // +kubebuilder:validation:Optional
  repeated string groups = 9;

  // +kubebuilder:validation:Optional
  optional string predefinedTemplate = 10;

  // +kubebuilder:validation:Optional
  repeated Anomaly anomalies = 11;

  // +kubebuilder:validation:Optional
  optional string trainEndData = 12;

  // The value column. this is the name of the column to forecast, this will be based on the data source.
  // +kubebuilder:validation:Optional
  optional string valueColumn = 13;

  // +kubebuilder:validation:Optional
  optional int32 hpoBudget = 14;

  // Spec for evaluation metric
  // +kubebuilder:validation:Optional
  optional EvalMetrics evaluationMetrics = 15;

  // Spec for time series cross validation
  // +kubebuilder:validation:Optional
  optional EvalPeriod evaluationPeriod = 16;

  // +kubebuilder:validation:Optional
  optional SeasonalitySpec seasonality = 17;

  // The regressor. Initially those are set from the data source schema
  // +kubebuilder:validation:Optional
  repeated string regressors = 18;

  // Lagged Regressors
  // +kubebuilder:validation:Optional
  repeated string laggedRegressors = 19;

  // Set the growth of the series
  // +kubebuilder:validation:Optional
  optional string growth = 20;

  // In case of group forecast
  // +kubebuilder:validation:Optional
  repeated string key = 21;

  // The estimators to try. By default, we try graykit / auto arima and prophet.
  // +kubebuilder:validation:Optional
  repeated string estimators = 22;

  // Group recocile.
  // By default this is the bottom-up
  // +kubebuilder:default:="bottom-up"
  // +kubebuilder:validation:Optional
  optional string hts = 23;
}

// GarbageCollectionSpec specifies the configuration to garbage-collect unused Model resources
message GarbageCollectionSpec {
  // Indicates if all models of the ModelClass, excluding the highest-performing model, will be archived
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=true
  optional bool collectAtModelClassEnd = 1;

  // Indicates if multiple models with the same algorithm are produced by the ModelClass, the
  // model with the lowest score will be garbage-collected
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=false
  optional bool keepOnlyBestModelPerAlgorithm = 2;

  // Indicates if we should keep pruned models
  // model with the lowest score will be garbage-collected
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=false
  optional bool keepPrunedModels = 3;
}

// GarbageCollectionStatus contains the records for garbage-collected models
message GarbageCollectionStatus {
  // The number of models that were collected, equal to len(Models)
  // +kubebuilder:validation:Optional
  optional int32 collected = 1;

  // The collection of models that were archived
  // +kubebuilder:validation:Optional
  repeated ModelResult models = 2;
}

// GeneratedColumnSpec describes a column to be generated and applied to a dataset
message GeneratedColumnSpec {
  // The name of the generated column
  optional string name = 1;

  // The resulting data type
  optional string datatype = 2;

  // The name of the first original column
  optional string first = 3;

  // The name of the second original column, if the expression is binary operator
  // +kubebuilder:validation:Optional
  optional string second = 4;

  // The expression to apply in order to generate the new column
  // +kubebuilder:validation:Optional
  optional string original = 5;
}

message GroupModelLocationsSpec {
  // The folder of group data
  // +kubebuilder:validation:Optional
  optional string groupFolder = 1;

  // The folder of group data
  // +kubebuilder:validation:Optional
  optional string groupProfileFolder = 2;

  // The folder of group data
  // +kubebuilder:validation:Optional
  optional string groupReportFile = 3;

  // The folder of group data
  // +kubebuilder:validation:Optional
  optional string groupModelFolder = 4;

  // The folder of group data
  // +kubebuilder:validation:Optional
  optional string groupModelFile = 5;

  // The folder of group data
  // +kubebuilder:validation:Optional
  optional string groupForecastFile = 6;
}

message GroupSplitLocationsSpec {
  // The folder of group data
  // +kubebuilder:validation:Optional
  optional string groupTrainingDataFile = 1;

  // The folder of group data
  // +kubebuilder:validation:Optional
  optional string groupTestingDataFile = 2;
}

// HyperParameterValue represent an individual hyper-parameter of a machine earning algorithm
message HyperParameterValue {
  // The name of the hyper-parameter
  optional string name = 1;

  // The value of the hyper-parameter
  optional string value = 2;
}

message HyperbandOptions {
  // A parameter for specifying the minimum resource allocated to a trial noted as 𝑟 in the paper
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 minResources = 1;

  // A parameter for specifying the maximum resource allocated to a trial
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 maxResources = 2;

  // A parameter for specifying reduction factor of promotable trials
  // +kubebuilder:default:=3
  // +kubebuilder:validation:Optional
  optional int32 reductionFactor = 3;

  // Parameter specifying the number of trials required in a rung before any trial can be promoted
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 bootstrapCount = 4;
}

// ImagePipelineSpec represents a single pipeline for preprocessing image data
message ImagePipelineSpec {
  // The date time imputer.
  // +kubebuilder:default:="auto"
  // +kubebuilder:validation:Optional
  optional string featurizer = 1;
}

// ImbalanceHandlingSpec specifies the configuration to process an imbalanced dataset
message ImbalanceHandlingSpec {
  // Indicates if imbalance handling is enabled
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // The technique that will be used to handle the imbalanced dataset
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string imbalance = 2;
}

// InterpretabilitySpec specifies the configuration to generate interpretability data and diagrams
message InterpretabilitySpec {
  // Indicates if ICE (individual condition expectation) plots will be generated
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool ice = 1;

  // The collection of feature pairs to generate ICE scatter diagrams for each
  repeated FeaturePair icepairs = 2;

  // Indicates if LIME (local interpretable model-agnostic explanations) diagrams will be generated
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool lime = 3;

  // The type of SHAP values to be generated. Linear and tree values are the
  // only recommended types due to the high compute times of other methods
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string shap = 4;

  // The collection of feature pairs to generate SHAP scatter diagrams for each
  // +kubebuilder:validation:Optional
  repeated FeaturePair shappairs = 5;

  // Indicates if counter-factual diagrams will be generated
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool counterfactual = 6;

  // Indicates if anchor explanation diagrams will be generated
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool anchor = 7;
}

// InterpretabilityStatus represents the state of the explanation phase of a Model
message InterpretabilityStatus {
  // StartTime represents the time when the model explanation phase started
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainingStartTime = 1;

  // EndTime represents the time when the model explanation phase ended
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainingEndTime = 2;

  // The URI for the generated explanation data
  optional string explainerURI = 3;

  // The URI for the train SHAP values
  optional string trainShapValuesURI = 4;

  // The URI for the test SHAP values
  optional string testShapValuesURI = 5;

  // The collection of feature importances generated from the computed SHAP values
  repeated FeatureImportance importance = 6;
}

message Level {
  // The level name, must be unique
  optional string name = 1;

  // The key for the levels
  repeated string index = 2;

  // The forecast horizon
  optional int32 horizon = 3;

  // The freq of the level
  optional string freq = 4;

  // The aggregate function used to roll up the lower level
  optional string aggregate = 5;
}

message MedianPrunerOptions {
  // Pruning is disabled until the given number of trials finish in the same ModelClass.
  // +kubebuilder:default:=5
  // +kubebuilder:validation:Optional
  optional int32 startupTrials = 1;

  //  Pruning is disabled until the trial exceeds the given number of step
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 warmupSteps = 2;

  // Interval in number of steps between the pruning checks
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 intervalSteps = 3;

  // Minimum number of reported trials.
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 minTrials = 4;
}

// Model represents a machine learning model that will be trained, evaluated, and deployed by Modela.
// Model resources are generated by the Modela data plane and cannot be created manually
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Progress",type="string",JSONPath=".status.progress",priority=1
// +kubebuilder:printcolumn:name="Best",type="boolean",JSONPath=".status.best"
// +kubebuilder:printcolumn:name="Owner",type="string",JSONPath=".spec.owner",priority=1
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName",priority=1
// +kubebuilder:printcolumn:name="Study",type="string",JSONPath=".spec.studyName"
// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task",priority=1
// +kubebuilder:printcolumn:name="Algorithm",type="string",JSONPath=".spec.estimator.algorithmName"
// +kubebuilder:printcolumn:name="Objective",type="string",JSONPath=".spec.objective"
// +kubebuilder:printcolumn:name="CV Score",type="number",JSONPath=".status.cvScore"
// +kubebuilder:printcolumn:name="Train Score",type="number",JSONPath=".status.trainScore",priority=1
// +kubebuilder:printcolumn:name="Test Score",type="number",JSONPath=".status.testScore"
// +kubebuilder:printcolumn:name="Last Failure",type="string",JSONPath=".status.failureMessage",priority=1
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=models,singular=model,shortName=md,categories={training,modela,all}
message Model {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelSpec spec = 2;

  optional ModelStatus status = 3;
}

// ModelAutobuilder represents an automated pipeline to train and deploy a model based on a given dataset
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Data Product",type="string",JSONPath=".spec.dataProductName"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.dataProductVersionName"
// +kubebuilder:printcolumn:name="Entity",type="string",JSONPath=".status.datasetName"
// +kubebuilder:printcolumn:name="Study",type="string",JSONPath=".status.studyName"
// +kubebuilder:printcolumn:name="Predictor",type="string",JSONPath=".status.predictorName"
// +kubebuilder:printcolumn:name="StartTime",type="date",JSONPath=".status.startTime",priority=1
// +kubebuilder:printcolumn:name="CompletionTime",type="date",JSONPath=".status.completionTime",priority=1
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=modelautobuilders,singular=modelautobuilder,shortName=ar,categories={training,modela,all}
// ModelAutobuilder represent an automatic run of all the phases needed to create a model
message ModelAutobuilder {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelAutobuilderSpec spec = 2;

  optional ModelAutobuilderStatus status = 3;
}

// ModelAutobuilderCondition describes the state of a ModelAutobuilder at a certain point
message ModelAutobuilderCondition {
  // Type of ModelAutobuilder condition
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown
  optional string status = 2;

  // Last time the condition transitioned from one status to another
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition
  optional string reason = 5;

  // A human-readable message indicating details about the transition
  optional string message = 6;
}

// ModelAutobuilderList contains a list of ModelAutoBuilders
// +kubebuilder:object:root=true
message ModelAutobuilderList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelAutobuilder items = 2;
}

// ModelAutobuilderSpec define the desired state of a ModelAutobuilder
message ModelAutobuilderSpec {
  // The name of the DataProduct namespace that the resource exists under
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:Optional
  optional string dataProductName = 1;

  // The name of the DataProductVersion which describes the version of the resource
  // that exists in the same DataProduct namespace as the resource
  // +kubebuilder:validation:MaxLength=253
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:Optional
  optional string dataProductVersionName = 2;

  // DataSourceName is the name of an existing DataSource resource which will be used as the schema for the ModelAutoBuilder's Entity.
  // If empty, a DataSource will be automatically created based on the data specified by the Location field
  // +kubebuilder:validation:MaxLength=253
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:Optional
  optional string datasourceName = 3;

  // The name of an existing Entity resource, or the name of the Entity resource that will be created
  // based on the data specified by the Location field, which will be used to train models
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:MaxLength=253
  optional string datasetName = 4;

  // The location for data that will be saved in a Entity resource to train models with
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 5;

  // The machine learning task type relevant to the dataset (i.e. regression, classification)
  optional string task = 6;

  // The machine learning subtask relevant to the primary task (text classification, image object detection, etc.)
  // +kubebuilder:default:="none"
  // +kubebuilder:validation:Optional
  optional string subtask = 7;

  // The objective metric that will be measured against trained models to evaluate their performance
  // +kubebuilder:validation:Optional
  optional string objective = 8;

  // The name of the column within the dataset that contains the label(s) to be predicted
  // +kubebuilder:validation:MaxLength=128
  // +kubebuilder:validation:Optional
  optional string targetColumn = 9;

  // The deadline for models to complete training, in seconds
  // +kubebuilder:validation:Maximum=36000
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:default:=3600
  // +kubebuilder:validation:Optional
  optional int32 maxTime = 10;

  // The number of candidate models that will be sampled and trained
  // +kubebuilder:validation:Maximum=512
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:default:=10
  // +kubebuilder:validation:Optional
  optional int32 maxModels = 11;

  // The Kubernetes-native access method which specifies how the Predictor created by the ModelAutobuilder will be exposed.
  // See https://modela.ai/docs/docs/serving/production/#access-method for a detailed description of each access type
  // +kubebuilder:default:=cluster-ip
  // +kubebuilder:validation:Optional
  optional string accessMethod = 12;

  // Indicates if the Predictor created by the ModelAutobuilder will automatically scale to traffic
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool autoScale = 13;

  // Indicates if feature engineering will be performed prior to the primary model search
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool featureEngineering = 14;

  // Indicates if feature selection will be performed prior to the primary model search
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool featureSelection = 15;

  // Indicates if the ModelAutobuilder will create a DataApp resource to serve the highest-performing model that was trained
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool dataapp = 16;

  // DataSourceSpec specifies the full specification of the DataSource resource that will be created by the ModelAutobuilder.
  // If empty, the ModelAutobuilder will attempt to infer the schema of the data specified by the Location field
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataSourceSpec dataSourceSpec = 17;

  // The desired number of trainers that will train candidate models in parallel. The number
  // of trainers is restricted based on the allowance provided by the active License
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 trainers = 18;

  // The hyper-parameter optimization search method
  // +kubebuilder:default:="random"
  // +kubebuilder:validation:Optional
  optional string sampler = 19;

  // Aborted indicates that the execution of the ModelAutobuilder and any associated workloads should be permanently stopped
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool aborted = 20;

  // The name of the Account which created the object, which exists in the same tenant as the object
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 21;

  // Resources specifies the resource requirements that will be allocated to dataset and model training Jobs
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec resources = 22;

  // The reference to the Lab under which Entity and Study resources created by the ModelAutobuilder will be trained.
  // If unspecified, the default Lab from the parent DataProduct will be used
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference labRef = 23;

  // The reference to the ServingSite where the Predictor created by the ModelAutobuilder will be hosted.
  // If unspecified, the default ServingSite from the parent DataProduct will be used
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference servingSiteRef = 24;

  // The type of dataset which was uploaded. `tabular` is the only supported type as of the current release
  // +kubebuilder:validation:Optional
  optional string datasetType = 25;

  // Fast indicates if Entity and Study resources associated with the ModelAutobuilder should run in fast mode.
  // Running in fast mode will skip unnecessary workloads such as profiling, reporting, explaining, etc.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool fast = 26;
}

// ModelAutobuilderStatus define the observed state of a ModelAutobuilder
message ModelAutobuilderStatus {
  // The name of the flat-file generated for the associated Entity
  optional string flatFileName = 1;

  // The name of the DataSource associated with resource
  optional string dataSourceName = 2;

  // The name of the Entity associated with the resource
  optional string datasetName = 3;

  // The name of the Study associated with the resource
  optional string studyName = 4;

  // The name of the highest-performing Model resource produced as a result of the associated Study resource
  optional string bestModelName = 6;

  // The name of the Predictor associated with the resource
  optional string predictorName = 7;

  // The name of the DataApp associated with the resource
  optional string dataappName = 8;

  optional string imageRepoName = 9;

  // The phase of the ModelAutobuilder
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 10;

  // The number of rows observed in the Entity associated with the resource
  // +kubebuilder:validation:Optional
  optional int32 rows = 11;

  // The number of columns observed in the Entity associated with the resource
  // +kubebuilder:validation:Optional
  optional int32 cols = 12;

  // The size of the raw data in the Entity associated with the resource
  // +kubebuilder:validation:Optional
  optional int32 fileSize = 13;

  // The number of total Model resources created by the associated Study resource
  // +kubebuilder:validation:Optional
  optional int32 models = 14;

  // The number of successfully trained Model resources created by the associated Study resource
  // +kubebuilder:validation:Optional
  optional int32 trainedModels = 15;

  // The highest score out of all Models created by the associated Study resource
  // +kubebuilder:validation:Optional
  optional double bestModelScore = 16;

  // The estimator specification for the highest-performing Model resource
  optional ClassicalEstimatorSpec estimator = 17;

  // StartTime represents the time at which the execution of the ModelAutobuilder started
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 18;

  // EndTime represents the time at which the ModelAutobuilder was marked as completed, failed, or aborted
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 19;

  // ObservedGeneration is the last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 21;

  // In the case of failure, the ModelAutobuilder resource controller will set this field with a failure reason
  // +kubebuilder:validation:Optional
  optional string failureReason = 22;

  // In the case of failure, the ModelAutobuilder resource controller will set this field with a failure message
  // +kubebuilder:validation:Optional
  optional string failureMessage = 23;

  // The last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 24;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ModelAutobuilderCondition conditions = 25;
}

// ModelClass represents an automatic search for the best machine learning model for a given dataset
// +kubebuilder:subresource:status
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Owner",type="string",JSONPath=".spec.owner",priority=1
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName",priority=1
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=studies,singular=ModelClass,shortName=sd,categories={training,modela}
message ModelClass {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelClassSpec spec = 2;

  optional ModelClassStatus status = 3;
}

// ModelClassCondition describes the state of a ModelClass at a certain point
message ModelClassCondition {
  // Type of ModelClass condition
  // +kubebuilder:validation:Optional
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown
  // +kubebuilder:validation:Optional
  optional string status = 2;

  // Last time the condition transitioned from one status to another
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition
  // +kubebuilder:validation:Optional
  optional string reason = 5;

  // A human-readable message indicating details about the transition
  // +kubebuilder:validation:Optional
  optional string message = 6;
}

// ModelClassList contains a list of Studies
// +kubebuilder:object:root=true
message ModelClassList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelClass items = 2;
}

// ModelClassSpec defines the desired state of a ModelClass and the parameters for a model search
message ModelClassSpec {
  // The name of the DataProductVersion which describes the version of the resource
  // that exists in the same DataProduct namespace as the resource
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // The user-provided description of the ModelClass
  // +kubebuilder:default:=""
  // +kubebuilder:validation:MaxLength=512
  // +kubebuilder:validation:Optional
  optional string description = 2;

  // The reference to the Lab under which the Model resources created by the ModelClass will be trained.
  // If unspecified, the default Lab from the parent DataProduct will be used
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference labRef = 3;

  // The name of the Entity resource that will be used to train models with.
  // The dataset will be split into individual training, testing, and validation datasets
  // +kubebuilder:validation:Required
  // +required
  optional string datasetName = 4;

  // The machine learning task type (i.e. regression, classification)
  // +kubebuilder:validation:Required
  // +required
  optional string task = 5;

  // The machine learning subtask relevant to the primary task (text classification, image object detection, etc.)
  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string subtask = 6;

  // FeatureEngineeringSearch specifies the parameters to perform a feature engineering search
  // +kubebuilder:validation:Optional
  optional FeatureEngineeringSearchSpec feSearch = 7;

  // Set the imbalance dataset handling.
  // +kubebuilder:validation:Optional
  optional ImbalanceHandlingSpec imbalanceHandler = 8;

  // Baseline specifies the parameters to generate baseline (default hyper-parameters) models
  // +kubebuilder:validation:Optional
  optional BaselineSpec baseline = 9;

  // Search specifies the configuration to perform the model search for the best algorithm and hyper-parameters
  // +kubebuilder:validation:Optional
  optional SearchSpec search = 10;

  // Ensembles specifies to parameters to generate ensemble models
  // +kubebuilder:validation:Optional
  optional EnsemblesSpec ensembles = 11;

  // TrainingTemplate specifies the configuration to train and evaluate models
  // +kubebuilder:validation:Optional
  optional TrainingSpec trainingTemplate = 12;

  // ServingTemplate specifies the model format and resource requirements that will be applied to
  // the Predictor created for the Model that will be selected by the ModelClass
  // +kubebuilder:validation:Optional
  optional ServingSpec servingTemplate = 13;

  // ForecastSpec specifies the parameters required when generating a forecasting model
  // +kubebuilder:validation:Optional
  optional ForecasterSpec fctTemplate = 14;

  // Schedule specifies the configuration to execute the ModelClass at a later date
  // +kubebuilder:validation:Optional
  optional StudyScheduleSpec schedule = 15;

  // Interpretability specifies the parameters to create interpretability visualizations for the final model
  // +kubebuilder:validation:Optional
  optional InterpretabilitySpec interpretability = 16;

  // +kubebuilder:validation:Optional
  optional DriftModelSpec driftDetection = 17;

  // The data location where ModelClass artifacts (metadata, reports, and model artifacts) generated by the ModelClass will be stored
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 26;

  // The name of the Account which created the object, which exists in the same tenant as the object
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 27;

  // CompilerSpec specifies the configuration to compile the best-selected model to a binary (currently unimplemented)
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.CompilerSpec compilation = 28;

  // The notification specification that determines which notifiers will receive Alerts generated by the object
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.NotificationSpec notification = 31;

  // ModelImage specifies the configuration to upload Docker images of models to an image registry
  // +kubebuilder:validation:Optional
  optional ModelImageSpec modelImage = 32;

  // GarbageCollectionSpec specifies the configuration to automatically clean-up unused models
  // +kubebuilder:validation:Optional
  optional GarbageCollectionSpec gc = 33;

  // The time-to-live, in seconds, for Model resources produced by the ModelClass
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 ttl = 34;

  // A template for models unit tests
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.TestSuite unitTestsTemplate = 38;

  // In case of a group by, those are the group locations
  // +kubebuilder:validation:Optional
  optional GroupSplitLocationsSpec groupLocations = 39;
}

// ModelClassStatus defines the observed state of a ModelClass
message ModelClassStatus {
  // Total models created for the ModelClass
  // +kubebuilder:validation:Optional
  optional int32 models = 1;

  // ObservedGeneration is the last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 10;

  // The Kubernetes-internal ID of the last Model resource generated by the ModelClass
  optional int64 lastModelID = 14;

  // In the case of failure, the ModelClass resource controller will set this field with a failure reason
  // +kubebuilder:validation:Optional
  optional string failureReason = 15;

  // In the case of failure, the ModelClass resource controller will set this field with a failure message
  // +kubebuilder:validation:Optional
  optional string failureMessage = 16;

  // The last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 32;

  // BestFE specifies the best feature engineering pipeline produced by the ModelClass
  // +kubebuilder:validation:Optional
  optional FeatureEngineeringSpec bestFE = 33;

  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated ModelClassCondition conditions = 36;
}

// ModelCompilerRun represent a single compilation of a model into a target hardware.
message ModelCompilerRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelCompilerRunSpec spec = 2;

  // +kubebuilder:validation:Optional
  optional ModelCompilerRunStatus status = 3;
}

// ModelCompilerRunCondition describes the state of a ModelCompilerRun at a certain point.
message ModelCompilerRunCondition {
  // Type of  condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// ModelCompilerRunList represent list of pipelineruns
message ModelCompilerRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelCompilerRun items = 2;
}

// ModelCompilerRunSpec is the desired state of the ModelCompilerRun resource
message ModelCompilerRunSpec {
  // VersionName is the data product version of the run
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // Description is the user provided description
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string description = 2;

  // DatasetName is the name of the dataset that we trained on.
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string modelName = 3;

  // The owner of the ruyn.
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 4;

  // The priority of this pipeline run. The default is medium.
  // +kubebuilder:default:=medium
  // +kubebuilder:validation:Optional
  optional string priority = 5;

  // The compiler name
  // +kubebuilder:default:=tvm
  optional string compiler = 6;

  // Set one or more targets for the compiler
  optional string target = 7;
}

// ModelCompilerRunStatus is the observed state of the ModelCompilerRun resource .
message ModelCompilerRunStatus {
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 1;

  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 2;

  // The phase of the pipeline run
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 3;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 4;

  // Folder for pipeline run artifacts. This is assigned by the system
  // The folder contains all the pipeline artifacts - metadata, logs
  // +kubebuilder:validation:Optional
  optional string evalMetrics = 5;

  // Update in case of terminal failure
  // Borrowed from cluster api controller
  // +kubebuilder:validation:Optional
  optional string failureReason = 6;

  // Update in case of terminal failure message
  // +kubebuilder:validation:Optional
  optional string failureMessage = 7;

  // Pipeline progress Progress in percent, the progress takes into account the different stages of the pipeline
  // +kubebuilder:validation:Optional
  optional int32 progress = 8;

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 9;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ModelCompilerRunCondition conditions = 10;
}

// ModelCondition describes the state of a Model at a certain point
message ModelCondition {
  // Type of Model condition
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown
  optional string status = 2;

  // Last time the condition transitioned from one status to another
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition
  optional string reason = 5;

  // A human-readable message indicating details about the transition
  optional string message = 6;
}

message ModelGroupByStatus {
  // The locations of the datasets profile files. Each file is the group
  // +kubebuilder:validation:Optional
  optional string modelsURI = 1;

  // The locations of the datasets profiles files.
  // +kubebuilder:validation:Optional
  optional string profilesURI = 2;

  // The locations of forecasts
  // +kubebuilder:validation:Optional
  optional string forecastsURI = 3;

  // Holds the worker on going result, when a worker finish, we update the location of thier result files
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.WorkerRunResult workerResults = 4;
}

// ModelImageSpec specifies the destination of Docker images produced by a ModelClass
message ModelImageSpec {
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=false
  optional bool exist = 1;

  // The full name of the image to upload to
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string imageName = 2;

  // The name of the Connection resource to an external Docker image registry
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string registryConnectionName = 3;
}

// +kubebuilder:object:root=true
// ModelList is a list of Models
message ModelList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Model items = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Schedule",type="string",JSONPath=".spec.schedule",description=""
// +kubebuilder:printcolumn:name="Last Run",type="date",JSONPath=".status.lastRun",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=modelpipelines,singular=modelpipeline,shortName=pipe,categories={training,modela,all}
// ModelPipeline represent a CI/CD machine learning pipeline definition
message ModelPipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelPipelineSpec spec = 2;

  optional ModelPipelineStatus status = 3;
}

// ModelPipelineCondition describes the state of a pipeline at a certain point.
message ModelPipelineCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // The reason for the condition's last transition.
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  optional string message = 5;
}

// +kubebuilder:object:root=true
// ModelPipelineList represent list of pipelines
message ModelPipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelPipeline items = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Progress",type="number",JSONPath=".status.progress",priority=1
// +kubebuilder:printcolumn:name="Pipeline",type="string",JSONPath=".status.pipelineName"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".status.versionName"
// +kubebuilder:printcolumn:name="StartTime",type="date",JSONPath=".status.startTime",priority=1
// +kubebuilder:printcolumn:name="CompletionTime",type="date",JSONPath=".status.completionTime",priority=1
// +kubebuilder:printcolumn:name="Last Failure",type="string",JSONPath=".status.failureMessage"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=modelpipelineruns,shortName=mpr,singular=modelpipelinerun,categories={train,modela,all}
// ModelPipelineRun represent a execution of a pipeline
message ModelPipelineRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModelPipelineRunSpec spec = 2;

  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStatus status = 3;
}

// ModelPipelineRunCondition describes the state of a ModelPipelineRun at a certain point.
message ModelPipelineRunCondition {
  // Type of  condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// ModelPipelineRunList represent list of pipelineruns
message ModelPipelineRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModelPipelineRun items = 2;
}

// ModelPipelineRunSpec is the desired state of the ModelPipelineRun resource
message ModelPipelineRunSpec {
  // VersionName is the data product version of the run
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // Description is the user provided description
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string description = 2;

  // DatasetName is the name of the dataset that we trained on.
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string datasetName = 3;

  // PipelineName is the name of the ModelPipeline for this pipeline
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string pipelineName = 4;

  // The owner of the run.
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 5;

  // The priority of this pipeline run. The default is medium.
  // +kubebuilder:default:=medium
  // +kubebuilder:validation:Optional
  optional string priority = 6;

  // Set to true to pause the model pipeline run
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 7;

  // Set to true to abort the model pipeline run
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool aborted = 8;

  // TTL.
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 ttl = 9;
}

// ModelPipelineRunStageStatus is the observed state of the PipelineRunStage.
message ModelPipelineRunStageStatus {
  // Phase is the phase of the stage
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 1;

  // Approved indicates that the stage is approved.
  // +kubebuilder:validation:Optional
  optional bool approved = 2;

  // ApprovedBy indicates the account that approve this model.
  // +kubebuilder:validation:Optional
  optional string approvedBy = 3;

  // ApprovedAt indicates the time of approval
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time approvedAt = 4;

  // Start time is the start time of the stage
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 7;

  // End time is the end time of the stage.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 8;

  // Results is the results of running the test datasets against the new model
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.TestSuiteResult unitTestsResult = 9;

  // Error record error.
  // +kubebuilder:validation:Optional
  optional string error = 10;
}

// ModelPipelineRunStatus is the observed state of the ModelPipelineRun resource .
message ModelPipelineRunStatus {
  // The current stage of the pipeline
  // +kubebuilder:validation:Optional
  optional string stage = 1;

  // The name of the dataset that was captured by the label filter.
  // +kubebuilder:validation:Optional
  optional string datasetName = 2;

  // The name of the study generated.
  // +kubebuilder:validation:Optional
  optional string studyName = 3;

  // The name of the best model
  // +kubebuilder:validation:Optional
  optional string modelName = 4;

  // DataStatus is the status of the data stage
  // data is the status for the data stage.
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus data = 5;

  // TrainingStatus is the status for the training stage
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus training = 6;

  // UATStatus is the status of the uat stage
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus uat = 7;

  // CapacityStatus is the status for the capacity stage.
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus capacity = 8;

  // DeploymentStatus is the status for the prod stage
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus deployment = 9;

  // DeploymentStatus is the status for the prod stage
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus release = 10;

  // Monitoring status is the status of the monitor phase.
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus monitor = 11;

  // Labeling status if the status of the labeling process
  // +kubebuilder:validation:Optional
  optional ModelPipelineRunStageStatus labeling = 12;

  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 13;

  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 14;

  // The phase of the pipeline run
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 15;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 16;

  // Folder for pipeline run artifacts. This is assigned by the system
  // The folder contains all the pipeline artifacts - metadata, logs
  // +kubebuilder:validation:Optional
  optional string evalMetrics = 17;

  // Update in case of terminal failure
  // Borrowed from cluster api controller
  // +kubebuilder:validation:Optional
  optional string failureReason = 18;

  // Update in case of terminal failure message
  // +kubebuilder:validation:Optional
  optional string failureMessage = 19;

  // Pipeline progress Progress in percent, the progress takes into account the different stages of the pipeline
  // +kubebuilder:validation:Optional
  optional int32 progress = 20;

  // What triggered the run
  // +kubebuilder:validation:Optional
  optional string triggeredBy = 21;

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 22;

  // The log file specification that determines the location of all logs produced by the object
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Logs logs = 23;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ModelPipelineRunCondition conditions = 24;
}

// ModelPipelineSpec define the desired state of the ModelPipeline resource.
message ModelPipelineSpec {
  // The product version of the resource
  // +kubebuilder:default ="latest"
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // User provided description
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string description = 2;

  // DatasetSelector is used to select dataset for training
  // +kubebuilder:validation:Optional
  map<string, string> datasetSelector = 3;

  // Datastage build new dataset from the data sources.
  // +kubebuilder:validation:Optional
  optional DataStageSpec data = 4;

  // TrainingSpec stage
  // +kubebuilder:validation:Optional
  optional TrainingStageSpec training = 5;

  // Acceptance stage is used for further testing
  // +kubebuilder:validation:Optional
  optional UATStageSpec uat = 6;

  // Capacity stage for capacity
  // +kubebuilder:validation:Optional
  optional CapacityStageSpec capacity = 7;

  // Deployment stage define how to place the model into production.
  // +kubebuilder:validation:Optional
  optional DeploymentStageSpec deployment = 9;

  // Deployment stage define how to place the model into production.
  // +kubebuilder:validation:Optional
  optional ReleaseStageSpec release = 10;

  // Schedule for running the pipeline
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RunSchedule schedule = 12;

  // The owner of the run, set to the owner of the pipeline
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Pattern="[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"
  // +kubebuilder:validation:Optional
  optional string owner = 13;

  // ApproverAccountName is the name of the approver for stages that need approvals.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string approverAccountName = 14;

  // Notification specification.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.NotificationSpec notification = 15;

  // BaselineModelName is the name of the model which is used to compare with this pipeline results.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string baselineModelName = 16;

  // The priority of this pipeline. The default is medium.
  // +kubebuilder:default:="medium"
  // +kubebuilder:validation:Optional
  optional string priority = 17;

  // Pause the pipeline cron job.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 18;
}

// ModelPipelineStatus define the observed state of the pipeline
message ModelPipelineStatus {
  // Last run is the last time a model pipeline run was created
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.LastRunStatus lastRun = 1;

  // The time of the next schedule run
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time nextRun = 2;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 3;

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 4;

  // Update in case of terminal failure
  // Borrowed from cluster api controller
  // +kubebuilder:validation:Optional
  optional string failureReason = 5;

  // Update in case of terminal failure message
  // +kubebuilder:validation:Optional
  optional string failureMessage = 6;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ModelPipelineCondition conditions = 7;
}

// ModelResult contains the records of a single garbage-collected model
message ModelResult {
  // The name of the model
  // +kubebuilder:validation:Optional
  optional string name = 1;

  // The type of estimator of the model
  // +kubebuilder:validation:Optional
  optional string alg = 2;

  // The objective score of the model
  // +kubebuilder:validation:Optional
  optional double score = 3;

  // Indicates if the model experience an error whilst training
  // +kubebuilder:validation:Optional
  optional bool error = 4;

  // The optimizer trial ID of the model
  // +kubebuilder:validation:Optional
  optional int32 trialID = 5;
}

// ModelSpec defines the desired state of the Model resource
message ModelSpec {
  // The Account which owns the the Study that created the Model
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 1;

  // The name of the DataProductVersion which describes the version of the resource
  // that exists in the same DataProduct namespace as the resource, derived from the parent Study
  // +kubebuilder:validation:Required
  // +kubebuilder:default:="latest"
  // +kubebuilder:validation:MaxLength=63
  // +required
  optional string versionName = 2;

  // The user-assigned version of the Model, derived from the parent Study
  // +kubebuilder:default:=""
  optional string modelVersion = 4;

  // The name of the Study which created the Model. If empty, the Model will be trained as a stand-alone model
  // +kubebuilder:validation:Required
  // +kubebuilder:validation:MaxLength=63
  // +required
  optional string studyName = 5;

  // The name of the Entity resource which the Model is being trained with
  // +kubebuilder:validation:Required
  // +kubebuilder:validation:MaxLength=63
  // +required
  optional string datasetName = 6;

  // The machine learning task type of the Model (i.e. regression, classification), derived from the parent Study
  // +kubebuilder:validation:Required
  // +required
  optional string task = 7;

  // The sub task
  // +kubebuilder:default:="none"
  // +kubebuilder:validation:Optional
  optional string subtask = 8;

  // The objective metric that will be used to evaluate the performance of the model
  // +kubebuilder:validation:Required
  // +required
  optional string objective = 9;

  // FeatureEngineering specifies the preprocessing pipelines that will be applied to the model prior to training.
  // By default, feature engineering is generated automatically by sampling different pipelines in competition
  // +kubebuilder:validation:Optional
  optional FeatureEngineeringSpec featureEngineering = 10;

  // Estimator specifies the machine learning algorithm and hyper-parameters of the Model
  // +kubebuilder:validation:Optional
  optional ClassicalEstimatorSpec estimator = 11;

  // Dnn specifies the estimator for a neural network (currently unimplemented)
  // +kubebuilder:validation:Optional
  optional DeepEstimatorSpec dnn = 12;

  // Chatbot specifies the estimator for a chatbot model (currently unimplemented)
  // +kubebuilder:validation:Optional
  optional ChatbotEstimatorSpec chatbot = 13;

  // NLPEstimator specifies the estimator for a deep NLP model (currently unimplemented)
  // +kubebuilder:validation:Optional
  optional NLPEstimatorSpec nlpEstimator = 14;

  // Ensemble specifies the configuration to create an ensemble model
  // +kubebuilder:validation:Optional
  optional EnsembleSpec ensemble = 15;

  // TrainingSpec specifies the configuration to prepare and train a model
  // +kubebuilder:validation:Optional
  optional TrainingSpec training = 16;

  // ServingSpec defines the resource requirements that will be applied to a Predictor
  // that will be created if the model is set to be released
  // +kubebuilder:validation:Optional
  optional ServingSpec serving = 17;

  // Tested indicates if a workload will be instantiated to test the model. The Study resource controller
  // will automatically set this field if the Model was found to be the highest-performing
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool tested = 18;

  // Aborted indicates if any workloads associated with the Model should stop execution
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool aborted = 19;

  // Packaged indicates if the Model should be packaged into tarbell
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool packaged = 20;

  // Published indicates that the Model should be baked into a Docker image
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool published = 21;

  // Pushed indicates that the Model image should be pushed to a Docker image registry
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool pushed = 22;

  // Reported indicates that a Report will be generated for the Model
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool reported = 23;

  // Paused indicates that the execution of new workloads associated with the Model should be paused
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 24;

  // Profiled indicates that the Model will be profiled
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool profiled = 25;

  // Archived indicates that the Model should be archived in long-term storage
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool archived = 26;

  // Forecasted indicates that the Model should perform a forecast
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool forecasted = 27;

  // Released indicates that the Model will be deployed within Predictor
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool released = 28;

  // Registered indicate if this model is registered with the model registry.
  // A registred model cannot be garbage collected, and apper in the model registry page.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool registered = 29;

  // Perform a prediction at the end of the study. This is for example apply to forecasting.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool predict = 30;

  // If true perform a final search after selecting the best model. to tune only this model.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool tuned = 31;

  // Explained indicates if a workload to compute SHAP values/diagrams should be executed
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool explained = 32;

  // Not implemented. For future use. If true,generate code when model trained
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool codeGenerated = 33;

  // Baseline indicates if the Model was produced by the baseline phase of a Study
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool baseline = 34;

  // GenDriftDetector indicates if we should generate a drift detector model for this model
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool genDriftDetector = 35;

  // Fast indicates if the Model should skip profiling, explaining, and reporting
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool fast = 36;

  // Indicate if this model should be unit tested.
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool unitTested = 37;

  // The reference to the lated feedback dataset
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference feedbackDatasetRef = 38;

  // Indicates if the model is flagged
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool flagged = 39;

  // The data location where artifacts (metadata, reports, and estimators) generated by the Model will be stored
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 40;

  // Forecasting specifies the configuration to train a forecasting model
  // +kubebuilder:validation:Optional
  optional ForecasterSpec forecasting = 41;

  // Compilation specifies the configuration to compile a model to a binary (currently unimplemented)
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.CompilerSpec compilation = 42;

  // The deadline for any Jobs associated with the Model to be completed in seconds
  // +kubebuilder:default:=600
  // +kubebuilder:validation:Optional
  optional int64 activeDeadlineSeconds = 43;

  // ModelType is the type of model for this estimator
  // +kubebuilder:default:=classical
  // +kubebuilder:validation:Optional
  optional string estimatorType = 44;

  // The time-to-live of the Model, after which the Model will be archived
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 ttl = 45;

  // The model class, which is derived from the phase of the Study that the Model was created for
  // +kubebuilder:validation:Optional
  optional string modelClass = 46;

  // The trial ID, which is incremented for each Model produced by the data plane
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 trialID = 47;

  // Governance specifies the model governance requirements (currently unimplemented)
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.GovernanceSpec governance = 48;

  // Interpretability specifies the configuration to generate model interpretability visualizations
  // +kubebuilder:validation:Optional
  optional InterpretabilitySpec interpretability = 49;

  // The set of unit tests for this model.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.TestSuite unitTests = 50;

  // The set of unit tests to test this models against the feedback.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.TestSuite feedbackTests = 51;

  // The set locations in case of group forecasts
  // +kubebuilder:validation:Optional
  optional GroupModelLocationsSpec groupLocations = 52;
}

// ModelStatus defines the observed state of a Model
message ModelStatus {
  // StartTime represents the time at which the execution of the Model started
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 1;

  // TrainStartTime represents the time at which the Model started training
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainingStartTime = 2;

  // TrainCompletionTime represents the time at which the Model completed training
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time trainingEndTime = 3;

  // TestingStartTime represents the time at which the Model started testing
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time testingStartTime = 4;

  // TestingEndTime represents the time at which the Model completed testing
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time testingEndTime = 5;

  // TuningStartTime represents the time at which the Model started testing
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time tuningStartTime = 6;

  // TuningEndTime represents the time at which the Model completed testing
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time tuningEndTime = 7;

  // EndTime represents the time at which the Model was marked as ready, failed, or aborted
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 8;

  // The cross-validation score for the objective metric produced after training
  // +kubebuilder:validation:Optional
  optional double cvScore = 9;

  // The score for the objective metric based on the training dataset
  // +kubebuilder:validation:Optional
  optional double trainingScore = 10;

  // The score for the objective metric based on the testing dataset
  // +kubebuilder:validation:Optional
  optional double testScore = 11;

  // Cost is the cost of training the model in the case of a deep-learning model
  // +kubebuilder:validation:Optional
  optional double cost = 12;

  // Best indicates if the Model was found to be the best model produced by a Study
  // +kubebuilder:validation:Optional
  optional bool best = 13;

  // CV contains the collection of measurements produced by cross-validation
  // on the training dataset or validation on the validation dataset
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Measurement cv = 14;

  // Train contains the collection of measurements produced by validation on the training dataset
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Measurement train = 15;

  // Train contains the collection of measurements produced by validation on the testing dataset
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Measurement test = 16;

  // Tune contains the collection of measurements produced by validation on the tune dataset
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Measurement tune = 17;

  // Feedback contain the collection of measurements produced by running dataset
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Measurement feedback = 18;

  // The last feedback dataset
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference lastFeedbackDatasetRef = 19;

  // The phase of the Model
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 20;

  // The name of the Report resource produced by the Model
  // +kubebuilder:validation:Optional
  optional string reportName = 21;

  // The URI of the Report
  // +kubebuilder:validation:Optional
  optional string reportUri = 22;

  // The URI of the Model manifest
  // +kubebuilder:validation:Optional
  optional string manifestUri = 23;

  // The URI of the model weights binary file
  // +kubebuilder:validation:Optional
  optional string weightsUri = 24;

  // The URI of the label encoder binary file, if it exists
  // +kubebuilder:validation:Optional
  optional string labelEncoderUri = 25;

  // The URI of the logs file
  // +kubebuilder:validation:Optional
  optional string logsUri = 26;

  // The URI of the model profile, which contains visualizations produced during the profiling phase
  // +kubebuilder:validation:Optional
  optional string profileUri = 27;

  // The URI to the misclassification file produced during the testing phase
  // +kubebuilder:validation:Optional
  optional string misclassificationUri = 28;

  // The URI to the model tarbell file
  // +kubebuilder:validation:Optional
  optional string tarUri = 29;

  // The URI to the model application file
  // +kubebuilder:validation:Optional
  optional string appUri = 30;

  // The name of the Docker image produced by the Model
  // +kubebuilder:validation:Optional
  optional string imageName = 31;

  // The collection of features and their importance, sorted by the greatest importance first
  // The collection is measured based on impuriry and uses the native measures by a tree algorithm
  // +kubebuilder:validation:Optional
  repeated FeatureImportance importance = 32;

  // The collection of features and their importance, sorted by the greatest importance first
  // The collection is measured using permutation importance
  // +kubebuilder:validation:Optional
  repeated FeatureImportance permutationImportance = 33;

  // The URI of the model forecast
  // +kubebuilder:validation:Optional
  optional string forecastUri = 34;

  // The runtime training details.
  // +kubebuilder:validation:Optional
  optional RuntimeStatus runtime = 35;

  // TrainDatasetLocation specifies the location of the training dataset
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation trainDataset = 36;

  // TestDatasetLocation specifies the location of the testing dataset
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation testDataset = 37;

  // ValidationDataset specifies the location of the validation dataset
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation validationDataset = 38;

  // ObservedGeneration is the last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 39;

  // The number of rows in the training dataset
  // +kubebuilder:validation:Optional
  optional int32 trainingRows = 40;

  // The number of rows in the testing dataset
  // +kubebuilder:validation:Optional
  optional int32 testingRows = 41;

  // The number of rows in the validation dataset, if applicable
  // +kubebuilder:validation:Optional
  optional int32 validationRows = 42;

  // In the case of failure, the Model resource controller will set this field with a failure reason
  // +kubebuilder:validation:Optional
  optional string failureReason = 43;

  // In the case of failure, the Model resource controller will set this field with a failure message
  // +kubebuilder:validation:Optional
  optional string failureMessage = 44;

  // The progress percentage of the Model, which is derived from the Model's current phase
  // +kubebuilder:validation:Optional
  optional int32 progress = 45;

  // The size of the model binary in bytes
  // +kubebuilder:validation:Optional
  optional int32 sizeInBytes = 46;

  // The measured prediction latency
  // +kubebuilder:validation:Optional
  optional double latency = 47;

  // The URL to the released model
  // +kubebuilder:validation:Optional
  optional string url = 48;

  // The name of the Predictor in the case that the Model has been released and deployed
  // +kubebuilder:validation:Optional
  optional string predictorName = 49;

  // The time at which the Model was set to release
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time releasedAt = 50;

  // The time at which the Model was set to release
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time predictedAt = 51;

  // Sha256 of the model tar file
  // +kubebuilder:validation:Optional
  optional string tarFileHash = 52;

  // Sha256 of the model image
  // +kubebuilder:validation:Optional
  optional string imageHash = 53;

  // TrainingDataHash specifies the hashes for datasets used by the Model
  // +kubebuilder:validation:Optional
  optional DataHashes trainingDataHash = 54;

  // TrainingResources details the resources that were consumed by the training workload
  // +kubebuilder:validation:Optional
  optional ResourceConsumption trainingResources = 55;

  // TestingResources details the resources that were consumed by the testing workload
  // +kubebuilder:validation:Optional
  optional ResourceConsumption testingResources = 56;

  // The Account which trained the model, derived from the parent Study
  // +kubebuilder:validation:Optional
  optional string trainedBy = 57;

  // The team of the Account which trained the model, derived from the parent Study
  // +kubebuilder:validation:Optional
  optional string team = 58;

  // The endpoint of the Model, which is set after it is deployed to a Predictor
  // +kubebuilder:validation:Optional
  optional string endpoint = 59;

  // Logs specifies the location of logs produced by workloads associated with the Model
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Logs logs = 60;

  // The Roc/Auc curve of the trained model
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RocAucCurve rocCurve = 61;

  // The Precision/Recall curve of the trained model
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.PRCurve prCurve = 62;

  // The confusion matrix of the train data.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ConfusionMatrix trainConfusionMatrix = 63;

  // The confusion matrix of the test data
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ConfusionMatrix testConfusionMatrix = 64;

  // The collection of correlations of the features of the training dataset and the target feature
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Correlation correlationsWithTarget = 65;

  // The top correlations between features of the training dataset
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.Correlation topCorrelations = 66;

  // The last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 67;

  // Governance specifies the current governance status for the Model
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.GovernanceStatus governanceStatus = 68;

  // Interpretability contains results produced during the explaining phase of the Model
  // +kubebuilder:validation:Optional
  optional InterpretabilityStatus interpretability = 69;

  // Images specifies the container images used to train the model
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Images images = 70;

  // The result of running the unit tests
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.TestSuiteResult unitTestsResult = 71;

  // The result of running the feedback unit tests, the feedback unit tests
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.TestSuiteResult feedbackTestsResult = 72;

  // The sub models uri file contain the results of running the sub model
  // +kubebuilder:validation:Optional
  optional ModelGroupByStatus groupby = 73;

  // +kubebuilder:validation:Optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated ModelCondition conditions = 74;
}

// ModelValidation defines a single validation to be run against a model
message ModelTestSuite {
  // Baseline Model Ref specifies a previous model to compare against
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference baselineModelRef = 1;

  // The name of a labeled dataset used to test the model, when measuring a performance metric
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference datasetRef = 2;

  // Define the column name for the validation role
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.TestSuite unitTests = 3;
}

// NLPEstimatorSpec specifies the configuration for an NLP model
message NLPEstimatorSpec {
  // The name of the base model
  // +kubebuilder:validation:Optional
  optional string base = 1;
}

message NNLayerParameter {
  optional string name = 1;

  optional string value = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description=""
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:path=notebooks,singular=notebook,shortName=nb,categories={training,modela,all}
// Notebook represent a notebook object which specify a single notebook execution
message Notebook {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NotebookSpec spec = 2;

  optional NotebookStatus status = 3;
}

// NotebookCondition describes the state of a notebook at a certain point.
message NotebookCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// NotebookList represent list of notebooks
message NotebookList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Notebook items = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Owner",type="string",JSONPath=".spec.owner",priority=1
// +kubebuilder:printcolumn:name="Notebook",type="string",JSONPath=".spec.notebookName"
// +kubebuilder:printcolumn:name="StartTime",type="date",JSONPath=".status.startTime",priority=1
// +kubebuilder:printcolumn:name="CompletionTime",type="date",JSONPath=".status.completionTime",priority=1
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=notebookruns,singular=notebookrun,shortName=nbr,categories={training,modela,all}
// NotebookRun represent a single execution of a notebook with a specific env variables
message NotebookRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NotebookRunSpec spec = 2;

  optional NotebookRunStatus status = 3;
}

// NotebookRunCondition describes the state of a notebook run.
message NotebookRunCondition {
  // Type of account condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  optional string message = 6;
}

// +kubebuilder:object:root=true
// NotebookRunList is a list of notebook runs
message NotebookRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated NotebookRun items = 2;
}

// NotebookRunSpec defines the desired state of the NotebookRun resource
message NotebookRunSpec {
  // VersionName of the data product for this notebook
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // NotebookName of the notebook for this run
  // +kubebuilder:validation:Optional
  optional string notebookName = 2;

  // Values to pass to the notebook during execution
  // +kubebuilder:validation:Optional
  repeated NotebookVarValue values = 3;

  // Owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 4;

  // Resources are hardware req.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec resources = 5;

  // TTL.
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 ttl = 6;

  // LabRef is a reference to the lab where the trainers for this study run.
  // If no value is provided, the lab is taken from the
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference labRef = 7;
}

// NotebookRunStatus define that observed state of NotebookRun resource
message NotebookRunStatus {
  // The phase of the notebook
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 1;

  // StartTime is the times that this prediction job started
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 2;

  // EndTime is the time that this prediction job finished
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 3;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 4;

  // Update in case of terminal failure
  // Borrowed from cluster api controller
  // +kubebuilder:validation:Optional
  optional string failureReason = 5;

  // Update in case of terminal failure message
  // +kubebuilder:validation:Optional
  optional string failureMessage = 6;

  // What triggered the run
  // +kubebuilder:validation:Optional
  optional string triggeredBy = 7;

  // Holds the location of log paths
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Logs logs = 8;

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 9;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated NotebookRunCondition conditions = 10;
}

// NotebookSpec is the desired state of the notebook resource.
message NotebookSpec {
  // The version of the notebook
  // +kubebuilder:default:="latest"
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // User provided description
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:MaxLength=512
  optional string description = 2;

  // SchemaName relate a notebook to a schema.
  // The schema object will be accessible from the notebook
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference schemaRef = 3;

  // A reference to the container image repository for this notebook.
  // +kubebuilder:default:=""
  optional string imageName = 4;

  // Requirements python file
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string requirements = 5;

  // DebPackages is a list of deb package to install
  // +kubebuilder:validation:Optional
  optional string debPackages = 6;

  // vars to pass to the notebook
  // +kubebuilder:validation:Optional
  repeated string vars = 7;

  // Location is the location of the notebook file
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 8;

  // The owner account name
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 9;

  // Resource are the hardware req.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec resources = 10;

  // ActiveDeadlineSeconds is the deadline of a job for this notebook.
  // +kubebuilder:default:=600
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Optional
  optional int64 activeDeadlineSeconds = 11;

  // Schedule for running the pipeline
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.RunSchedule schedule = 12;

  // The priority of this notebook run. The default is medium.
  // +kubebuilder:default:=medium
  // +kubebuilder:validation:Optional
  optional string priority = 13;

  // Set to true to pause the notebook
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 14;

  // The set of unit tests for this notebook
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.TestSuite unitTests = 15;
}

// NotebookStatus is the observed state of the notebook resource
message NotebookStatus {
  // Image is the name of the image after publication
  // +kubebuilder:validation:Optional
  optional string image = 1;

  // The URI of the notebook in the bucket.
  // +kubebuilder:validation:Optional
  optional string uri = 2;

  // ObservedGeneration is the Last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 3;

  // Last run is the last time a data pipeline run was created
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.LastRunStatus lastRun = 4;

  // The time of the next schedule run
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time nextRun = 5;

  // Last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 6;

  // The result of running the unit tests
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.TestSuiteResult unitTestsResult = 7;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated NotebookCondition conditions = 9;
}

// NotebookVarValue is an assignment of value to the notebook var
message NotebookVarValue {
  optional string name = 1;

  optional string value = 2;
}

message PercentilePrunerOptions {
  // Percentile which must be between 0 and 100 inclusive
  // +kubebuilder:default:=25
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=100
  // +kubebuilder:validation:Optional
  optional int32 percentile = 1;

  // Pruning is disabled until the given number of trials finish in the same ModelClass.
  // +kubebuilder:default:=5
  // +kubebuilder:validation:Optional
  optional int32 startupTrials = 2;

  //  Pruning is disabled until the trial exceeds the given number of step
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 warmupSteps = 3;

  // Interval in number of steps between the pruning checks
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 intervalTrials = 4;

  // Minimum number of reported trials.
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 minTrials = 5;
}

message PrunerSpec {
  // The type of pruner to use during model search
  // +kubebuilder:default:=median-pruner
  // +kubebuilder:validation:Optional
  optional string type = 1;

  // +kubebuilder:validation:Optional
  optional MedianPrunerOptions median = 2;

  // +kubebuilder:validation:Optional
  optional PercentilePrunerOptions percentile = 3;

  // +kubebuilder:validation:Optional
  optional SuccessiveHalvingOptions successiveHalving = 4;

  // +kubebuilder:validation:Optional
  optional HyperbandOptions hyperband = 5;

  // +kubebuilder:validation:Optional
  optional ThresholdPrunerOptions threshold = 6;
}

// Define how to build a regression model for forecasting (including feature engineering)
// This is not implemented today
message RegressionForecasterSpec {
  // If true this is an ensemble pipeline
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool ensemble = 1;

  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string imputation = 2;

  // The encoding method to use for categorical data types
  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string encoding = 3;

  // The scaling method to use for numerical data types
  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string scaling = 4;

  // If true apply the data transofmer to
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool date = 5;

  // The list of windows to use when generating features.
  // +kubebuilder:validation:Optional
  repeated int32 windows = 6;

  // The list of lags to use when generating features
  // +kubebuilder:validation:Optional
  repeated int32 lags = 7;

  // The list of metrics to generate for each combination of lag and windows.
  // The default list is min,max,median,stddev
  // +kubebuilder:validation:Optional
  repeated string functions = 8;

  // when computing moving avg, use exponential moving avg, other use regular moving avg
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool ema = 9;

  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool log = 10;

  // If we are using reduced model, this is the way the reduced model will make prediction
  // Default to none
  // +kubebuilder:validation:Optional
  optional string reduction = 11;
}

message ReleaseStageSpec {
  // Enabled indicates that we want to release the model into production
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // ServingSiteName is the serving site for the release, if empty, the system will use the default serving site name
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string servingSiteName = 2;

  // PredictorName is the release predictor. The predictor will be created if it does not exist.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string predictorName = 3;

  // Template defines the default model deployment for this model
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ModelDeploymentSpec template = 4;

  // ManualApproval dentoes if we need manual approval before advancing from deployed to released
  // By default a user is needed to approve the release to production
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool manualApproval = 5;

  // Resource define the hardware resources req.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec resources = 7;
}

// Report represents a PDF file containing information compiled about another resource
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Owner",type="string",JSONPath=".spec.owner",priority=1
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName"
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.reportType"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description=""
// +kubebuilder:resource:path=reports,singular=report,categories={training,modela,all}
message Report {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ReportSpec spec = 2;

  optional ReportStatus status = 3;
}

// ReportCondition describes the state of a Report at a certain point.
message ReportCondition {
  // Type of Report condition
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown
  optional string status = 2;

  // Last time the condition transitioned from one status to another
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition
  optional string reason = 5;

  // A human-readable message indicating details about the transition
  optional string message = 6;
}

message ReportGroupByStatus {
  // The locations of the datasets profile files. Each file is the group
  // +kubebuilder:validation:Optional
  optional string reportsURI = 1;

  // Holds the worker on going result, when a worker finish, we update the location of thier result files
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.WorkerRunResult workerResults = 4;
}

// ReportList contains a list of Reports
// +kubebuilder:object:root=true
message ReportList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Report items = 2;
}

// ReportSpec specifies the desired state of a Report
message ReportSpec {
  // The name of the DataProductVersion which describes the version of the resource
  // that exists in the same DataProduct namespace as the resource
  // +kubebuilder:default:="latest"
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // EntityRef specifies the entity which the Report references. The supported entities consist of Entity, Model, and Study resources
  optional k8s.io.api.core.v1.ObjectReference entityRef = 2;

  // The location of the flat-file containing the PDF report
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 4;

  // The type of report (e.g. classification model report, study report)
  // +kubebuilder:validation:Required
  // +required
  optional string reportType = 5;

  // The format of the Report. `pdf` is the only supported type as of the current release
  // +kubebuilder:default:=pdf
  // +kubebuilder:validation:Optional
  optional string format = 6;

  // The name of the Notifier resource which Alerts created by the Report will be forwarded to
  // +kubebuilder:validation:Optional
  optional string notifierName = 7;

  // The name of the Account which created the object, which exists in the same tenant as the object
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 8;

  // Resources specifies the resource requirements that will be allocated to the report generation workload
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec resources = 9;

  // The deadline for any Jobs associated with the Report to be completed in seconds
  // +kubebuilder:default:=600
  // +kubebuilder:validation:Optional
  optional int64 activeDeadlineSeconds = 10;

  // Custom contains the specification to generate a custom report (currently unimplemented)
  // +kubebuilder:validation:Optional
  optional CustomReportSpec custom = 11;

  // The name of the CronReport resource that generated the Report
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string cronReportName = 12;

  // The reference to the Lab namespace under which the report generation Job will be executed under.
  // If unspecified, the default Lab from the parent DataProduct will be used
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference labRef = 13;

  // For group forecasting, this is the key of the group
  // +kubebuilder:validation:Optional
  repeated string key = 14;
}

// ReportStatus defines the observed state of a Report
message ReportStatus {
  // StartTime represents the time at which the execution of the Report started
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 2;

  // EndTime represents the time at which the Report was marked as completed, failed, or aborted
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 3;

  // The phase of the Report
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 4;

  // The URI to the flat-file report within the VirtualBucket specified by the Report
  // +kubebuilder:validation:Optional
  optional string uri = 5;

  // ObservedGeneration is the last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 6;

  // In the case of failure, the Report resource controller will set this field with a failure reason
  // +kubebuilder:validation:Optional
  optional string failureReason = 7;

  // In the case of failure, the Report resource controller will set this field with a failure message
  // +kubebuilder:validation:Optional
  optional string failureMessage = 8;

  // Logs specifies the location of logs produced by workloads associated with the Report
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Logs logs = 9;

  // The last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 10;

  // The sub models uri file contain the results of running the sub model
  // +kubebuilder:validation:Optional
  optional ReportGroupByStatus groupby = 11;

  // +patchMergeKey=type
  // +patchStrategy=merge
  // +kubebuilder:validation:Optional
  repeated ReportCondition conditions = 12;
}

message ReportTemplate {
  optional ReportSpec spec = 1;
}

// ResourceConsumption represents the total resources consumed by a workload
message ResourceConsumption {
  optional double cpu = 1;

  optional double mem = 2;

  optional double gpu = 3;
}

// Holds the information about the execution environment.
message RuntimeStatus {
  // The Python version of the data plane used during training
  // +kubebuilder:validation:Optional
  optional string pythonVersion = 1;

  // The python command line
  // +kubebuilder:validation:Optional
  optional string pythonCmd = 2;

  // The OS
  // +kubebuilder:validation:Optional
  optional string os = 3;

  // The Python packages used during training (which is the result of running pip freeze)
  // +kubebuilder:validation:Optional
  map<string, string> pythonPackages = 4;
}

// SearchSpec specifies the configuration for a distributed model search
message SearchSpec {
  // The hyper-parameter optimization search method
  // +kubebuilder:default:=tpe
  // +kubebuilder:validation:Optional
  optional string sampler = 1;

  // Pruner specifies the configuration to run a model search using a pruning algorithm. Using a pruning
  // algorithm allows you to train a large number of candidate models with a subset of the dataset
  // +kubebuilder:validation:Optional
  optional PrunerSpec pruner = 2;

  // The maximum cost that can be incurred before stopping the model search (applicable for deep learning models)
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:=100
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=1000
  optional int32 maxCost = 3;

  // The maximum number of minutes, that the model search can run for
  // +kubebuilder:default:=60
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=10000
  // +kubebuilder:validation:Optional
  optional int32 maxTime = 4;

  // The maximum number of candidate models that will be sampled and trained
  // +kubebuilder:default:=10
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=1000
  // +kubebuilder:validation:Optional
  optional int32 maxModels = 5;

  // The minimum best score needed to finish the search. The system will finish the search when the minimum is reached.
  // Note that this number can be negative for a regression.
  // +kubebuilder:default:=9999999999
  // +kubebuilder:validation:Optional
  optional double minBestScore = 6;

  // The desired number of trainers that will train candidate models in parallel. The number
  // of trainers is restricted based on the allowance provided by the active License
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Maximum=50
  // +kubebuilder:validation:Minimum=0
  optional int32 trainers = 7;

  // The number of top candidate models that will be moved to the testing phase once the model search is complete.
  // By default, only the best model will be retained
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:validation:Maximum=5
  optional int32 test = 8;

  // The number of top candidate models, sorted by their objective score, that will be retained in
  // the case that garbage collection is enabled. All other models will be archived
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=100
  optional int32 retainTop = 9;

  // The time, in minutes, for which candidate models (excluding the best model) will be
  // retained, after which they will be archived
  // +kubebuilder:default:=60
  // +kubebuilder:validation:Minimum=0
  // +kubebuilder:validation:Maximum=2400
  optional int32 retainedFor = 10;

  // SearchSpace specifies the algorithms available to candidate models
  // +kubebuilder:validation:Optional
  optional AlgorithmSearchSpaceSpec searchSpace = 11;

  // The number of new models produced by the search which, if there is no improvement
  // in score, the model search will conclude
  // +kubebuilder:validation:Optional
  optional EarlyStopSpec earlyStop = 12;

  // The objective metric that will be measured against all models to evaluate their performance
  // +kubebuilder:validation:Optional
  optional string objective = 14;

  // The second objective metric that will be measured and evaluated in tandem with the primary objective.
  // The model search optimizer will attempt to optimize both metrics
  // +kubebuilder:default:="none"
  // +kubebuilder:validation:Optional
  optional string objective2 = 15;

  // Tune best model
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool tune = 16;
}

// Define the seasonality for a period (yearly / monthly / daily)
message SeasonalityPeriodSpec {
  // Is the seasonality exist
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // Infer the seasonality
  // +kubebuilder:validation:Optional
  optional bool auto = 2;

  // If enabled, the number of data points in the interval
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 fourierOrder = 3;
}

message SeasonalitySpec {
  // If true infer the seasonality
  // +kubebuilder:validation:Optional
  optional bool auto = 1;

  // +kubebuilder:validation:Optional
  optional SeasonalityPeriodSpec yearly = 2;

  // +kubebuilder:validation:Optional
  optional SeasonalityPeriodSpec quarterly = 3;

  // +kubebuilder:validation:Optional
  optional SeasonalityPeriodSpec monthly = 4;

  // +kubebuilder:validation:Optional
  optional SeasonalityPeriodSpec weekly = 5;

  // +kubebuilder:validation:Optional
  optional SeasonalityPeriodSpec daily = 6;
}

message SegmentSpec {
  // The name of the column
  // +kubebuilder:validation:Required
  // +required
  optional string columnName = 1;

  // The segment operation
  // +kubebuilder:validation:Required
  // +required
  optional string op = 2;

  // The value operation
  // +kubebuilder:validation:Required
  // +required
  optional string value = 3;
}

// ServingSpec specifies the requirements to serve a model
message ServingSpec {
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec resources = 1;

  // +kubebuilder:default:="cloudpickle"
  // +kubebuilder:validation:Optional
  optional string format = 2;
}

// Study represents an automatic search for the best machine learning model for a given dataset
// +kubebuilder:subresource:status
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Progress",type="number",JSONPath=".status.progress",priority=1
// +kubebuilder:printcolumn:name="Owner",type="string",JSONPath=".spec.owner",priority=1
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.versionName",priority=1
// +kubebuilder:printcolumn:name="Entity",type="string",JSONPath=".spec.datasetName"
// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task"
// +kubebuilder:printcolumn:name="Objective",type="string",JSONPath=".spec.search.objective"
// +kubebuilder:printcolumn:name="Score",type="number",JSONPath=".status.bestModelScore"
// +kubebuilder:printcolumn:name="Best model",type="string",JSONPath=".status.bestModel"
// +kubebuilder:printcolumn:name="Trained",type="number",JSONPath=".status.search.completed"
// +kubebuilder:printcolumn:name="Tested",type="number",JSONPath=".status.test.completed"
// +kubebuilder:printcolumn:name="StartTime",type="date",JSONPath=".status.startTime",priority=1
// +kubebuilder:printcolumn:name="CompletionTime",type="date",JSONPath=".status.completionTime",priority=1
// +kubebuilder:printcolumn:name="Last Failure",type="string",JSONPath=".status.lastFailure"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:path=studies,singular=study,shortName=sd,categories={training,modela}
message Study {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional StudySpec spec = 2;

  optional StudyStatus status = 3;
}

// StudyCondition describes the state of a Study at a certain point
message StudyCondition {
  // Type of study condition
  // +kubebuilder:validation:Optional
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown
  // +kubebuilder:validation:Optional
  optional string status = 2;

  // Last time the condition transitioned from one status to another
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition
  // +kubebuilder:validation:Optional
  optional string reason = 5;

  // A human-readable message indicating details about the transition
  // +kubebuilder:validation:Optional
  optional string message = 6;
}

message StudyGroupByStatus {
  // The locations of the datasets profile files. Each file is the group
  // +kubebuilder:validation:Optional
  optional string studiesURI = 1;

  // Holds the worker on going result, when a worker finish, we update the location of thier result files
  // +kubebuilder:validation:Optional
  repeated github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.WorkerRunResult workerResults = 2;
}

// StudyList contains a list of Studies
// +kubebuilder:object:root=true
message StudyList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Study items = 2;
}

// StudyPhaseStatus contains the statistics for a single phase of a Study
message StudyPhaseStatus {
  // The time at which the phase started
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 1;

  // The time at which the phase concluded
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 2;

  // The number of models pending training
  // +kubebuilder:validation:Optional
  optional int32 waiting = 3;

  // The number of models currently being trained
  // +kubebuilder:validation:Optional
  optional int32 running = 4;

  // The number of models that experienced an error whilst training
  // +kubebuilder:validation:Optional
  optional int32 failed = 5;

  // The number of models that have been successfully trained
  // +kubebuilder:validation:Optional
  optional int32 completed = 6;

  // Best score so far in this phase. The best score is the value of the objective.
  // +kubebuilder:validation:Optional
  optional double bestScore = 7;

  // Actual number of models where no progress was made. This used to decide on early stop.
  // +kubebuilder:validation:Optional
  optional int32 modelsWithNoProgress = 8;
}

// ModelClassScheduleSpec specifies the parameters for a ModelClass to be executed at a certain time
message StudyScheduleSpec {
  // Indicates if the schedule is enabled
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // The time at which the ModelClass will begin execution
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startAt = 2;
}

// StudySpec defines the desired state of a Study and the parameters for a model search
message StudySpec {
  // The name of the DataProductVersion which describes the version of the resource
  // that exists in the same DataProduct namespace as the resource
  // +kubebuilder:validation:MaxLength=63
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string versionName = 1;

  // The user-provided description of the Study
  // +kubebuilder:default:=""
  // +kubebuilder:validation:MaxLength=512
  // +kubebuilder:validation:Optional
  optional string description = 2;

  // The reference to the Lab under which the Model resources created by the Study will be trained.
  // If unspecified, the default Lab from the parent DataProduct will be used
  // +kubebuilder:validation:Optional
  optional k8s.io.api.core.v1.ObjectReference labRef = 3;

  // The name of the Entity resource that will be used to train models with.
  // The dataset will be split into individual training, testing, and validation datasets
  // +kubebuilder:validation:Required
  // +required
  optional string datasetName = 4;

  // The machine learning task type (i.e. regression, classification)
  // +kubebuilder:validation:Required
  // +required
  optional string task = 5;

  // The machine learning subtask relevant to the primary task (text classification, image object detection, etc.)
  // +kubebuilder:default:=none
  // +kubebuilder:validation:Optional
  optional string subtask = 6;

  // FeatureEngineeringSearch specifies the parameters to perform a feature engineering search
  // +kubebuilder:validation:Optional
  optional FeatureEngineeringSearchSpec feSearch = 7;

  // Set the imbalance dataset handling.
  // +kubebuilder:validation:Optional
  optional ImbalanceHandlingSpec imbalanceHandler = 8;

  // Baseline specifies the parameters to generate baseline (default hyper-parameters) models
  // +kubebuilder:validation:Optional
  optional BaselineSpec baseline = 9;

  // Search specifies the configuration to perform the model search for the best algorithm and hyper-parameters
  // +kubebuilder:validation:Optional
  optional SearchSpec search = 10;

  // Ensembles specifies to parameters to generate ensemble models
  // +kubebuilder:validation:Optional
  optional EnsemblesSpec ensembles = 11;

  // TrainingTemplate specifies the configuration to train and evaluate models
  // +kubebuilder:validation:Optional
  optional TrainingSpec trainingTemplate = 12;

  // ServingTemplate specifies the model format and resource requirements that will be applied to
  // the Predictor created for the Model that will be selected by the Study
  // +kubebuilder:validation:Optional
  optional ServingSpec servingTemplate = 13;

  // ForecastSpec specifies the parameters required when generating a forecasting model
  // +kubebuilder:validation:Optional
  optional ForecasterSpec fctTemplate = 14;

  // Schedule specifies the configuration to execute the Study at a later date
  // +kubebuilder:validation:Optional
  optional StudyScheduleSpec schedule = 15;

  // Interpretability specifies the parameters to create interpretability visualizations for the final model
  // +kubebuilder:validation:Optional
  optional InterpretabilitySpec interpretability = 16;

  // +kubebuilder:validation:Optional
  optional DriftModelSpec driftDetection = 17;

  // Aborted indicates that the execution of the Study and associated Models should be permanently stopped
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool aborted = 18;

  // Reported indicates that a report will be generated for the Study
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool reported = 19;

  // Paused indicates that the execution of new workloads associated with the Study should be paused
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool paused = 20;

  // Profiled indicates that the Study will be profiled after the conclusion of it's model search
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool profiled = 21;

  // ModelPublished indicates that a Docker image will be created containing the best model produced by the Study
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool modelPublished = 22;

  // ModelImagePushed indicates that if a Docker image of the best model will be pushed to a Docker image registry
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool modelImagePushed = 23;

  // ModelExplained indicates if interpretability diagrams, as specified
  // by the Interpretability field, will be produced for the final model
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool modelExplained = 24;

  // Fast indicates if Models associated with the Study should skip profiling, explaining, and reporting
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool fast = 25;

  // The data location where Study artifacts (metadata, reports, and model artifacts) generated by the Study will be stored
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation location = 26;

  // The name of the Account which created the object, which exists in the same tenant as the object
  // +kubebuilder:default:="no-one"
  // +kubebuilder:validation:Optional
  optional string owner = 27;

  // CompilerSpec specifies the configuration to compile the best-selected model to a binary (currently unimplemented)
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.CompilerSpec compilation = 28;

  // Indicates if the Study is a template, in which case it will not be executed
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool template = 29;

  // Indicates if the Study is flagged
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool flagged = 30;

  // The notification specification that determines which notifiers will receive Alerts generated by the object
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.NotificationSpec notification = 31;

  // ModelImage specifies the configuration to upload Docker images of models to an image registry
  // +kubebuilder:validation:Optional
  optional ModelImageSpec modelImage = 32;

  // GarbageCollectionSpec specifies the configuration to automatically clean-up unused models
  // +kubebuilder:validation:Optional
  optional GarbageCollectionSpec gc = 33;

  // The time-to-live, in seconds, for Model resources produced by the Study
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 ttl = 34;

  // ModelVersion specifies the version assigned to all the Model resources produced by the Study
  // +kubebuilder:default:=""
  // +kubebuilder:validation:Optional
  optional string modelVersion = 35;

  // The time, in seconds, after which the execution of the Study will be forcefully aborted (4 hours, by default)
  // +kubebuilder:default:= 14400
  // +kubebuilder:validation:Optional
  optional int32 timeoutInSecs = 36;

  // Not implemented. For future use. If true,generate code when the best model
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool codeGenerated = 37;

  // A template for models unit tests
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.TestSuite unitTestsTemplate = 38;

  // In case of a group by, those are the group locations
  // +kubebuilder:validation:Optional
  optional GroupSplitLocationsSpec groupLocations = 39;
}

// StudyStatus defines the observed state of a Study
message StudyStatus {
  // Total models created for the study
  // +kubebuilder:validation:Optional
  optional int32 models = 1;

  // StartTime represents the time at which the execution of the Study started
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 2;

  // EndTime represents the time at which the Study was marked as completed, failed, or aborted
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time endTime = 3;

  // The name of the Model resource which was determined to be the highest-performing
  // +kubebuilder:validation:Optional
  optional string bestModel = 4;

  // The score of the Model resource which was determined to be the highest-performing
  // +kubebuilder:validation:Optional
  optional double bestModelScore = 5;

  // The URI of the raw profile data produced by the Study
  // +kubebuilder:validation:Optional
  optional string profileUri = 6;

  // The name of the Report resource produced by the Study
  // +kubebuilder:validation:Optional
  optional string reportUri = 7;

  // Reference to the report object that was generated for the dataset, which exists in the same Data Product namespace
  // as the object
  // +kubebuilder:validation:Optional
  optional string reportName = 8;

  // The phase of the Study
  // +kubebuilder:default:="Pending"
  // +kubebuilder:validation:Optional
  optional string phase = 9;

  // ObservedGeneration is the last generation that was acted on
  // +kubebuilder:validation:Optional
  optional int64 observedGeneration = 10;

  // TrainDatasetLocation specifies the location of the training dataset
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation trainDataset = 11;

  // TestDatasetLocation specifies the location of the testing dataset
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation testDataset = 12;

  // ValidationDataset specifies the location of the validation dataset
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.data.v1alpha1.DataLocation validationDataset = 13;

  // The Kubernetes-internal ID of the last Model resource generated by the Study
  optional int64 lastModelID = 14;

  // In the case of failure, the Study resource controller will set this field with a failure reason
  // +kubebuilder:validation:Optional
  optional string failureReason = 15;

  // In the case of failure, the Study resource controller will set this field with a failure message
  // +kubebuilder:validation:Optional
  optional string failureMessage = 16;

  // The number of rows in the training dataset
  // +kubebuilder:validation:Optional
  optional int32 trainingRows = 17;

  // The number of rows in the testing dataset
  // +kubebuilder:validation:Optional
  optional int32 testingRows = 18;

  // The number of rows in the validation dataset
  // +kubebuilder:validation:Optional
  optional int32 validationRows = 19;

  // The progress percentage of the Study, which is derived from the Study's current phase
  // +kubebuilder:validation:Optional
  optional int32 progress = 20;

  // Sha 256 of the data sig
  // +kubebuilder:validation:Optional
  // TrainingDataHash specifies the hashes for datasets used by the Study
  // +kubebuilder:validation:Optional
  optional DataHashes trainingDataHash = 22;

  // The type of trigger which started the Study
  // +kubebuilder:validation:Optional
  optional string triggeredBy = 23;

  // Logs specifies the location of logs produced by workloads associated with the Study
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.Logs logs = 24;

  // FeatureEngineeringStatus contains the status of the feature engineering phase
  // +kubebuilder:validation:Optional
  optional StudyPhaseStatus featureEngineering = 25;

  // BaselineStatus contains the status of the baseline phase
  // +kubebuilder:validation:Optional
  optional StudyPhaseStatus baseline = 26;

  // SearchStatus contains the status of the model search phase
  // +kubebuilder:validation:Optional
  optional StudyPhaseStatus search = 27;

  // EnsembleStatus contains the status of the ensemble phase
  // +kubebuilder:validation:Optional
  optional StudyPhaseStatus ensemble = 28;

  // TestStatus contains the status of the testing phase
  // +kubebuilder:validation:Optional
  optional StudyPhaseStatus test = 29;

  // ExplainStatus contains the status of the explaining phase
  // +kubebuilder:validation:Optional
  optional StudyPhaseStatus explain = 30;

  // OutlierDetection is the status for outlier detection
  // +kubebuilder:validation:Optional
  optional DriftDetectorStatus driftDetection = 31;

  // The last time the object was updated
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 32;

  // BestFE specifies the best feature engineering pipeline produced by the Study
  // +kubebuilder:validation:Optional
  optional FeatureEngineeringSpec bestFE = 33;

  // GC specifies the status of garbage collection relevant to the Study
  optional GarbageCollectionStatus gc = 34;

  // Study group by
  optional StudyGroupByStatus groupby = 35;

  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated StudyCondition conditions = 36;
}

message SuccessiveHalvingOptions {
  // Minimum number of reported trials.
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 minResources = 1;

  // A parameter for specifying reduction factor of promotable trials
  // +kubebuilder:default:=4
  // +kubebuilder:validation:Optional
  optional int32 reductionFactor = 2;

  // A parameter for specifying the minimum early-stopping rate
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 minEarlyStoppingRate = 3;

  // Minimum number of trials that need to complete a rung before any trial is considered for promotion into the next rung.
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 bootstrapCount = 4;
}

// SuccessiveHalvingSpec records the position of a single model in a successive halving search
message SuccessiveHalvingSpec {
  // The budget to be used in a multi-fidelity search, for example the number of epochs
  // or the percentage of data to train the model with
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Maximum=128
  // +kubebuilder:validation:Minimum=0
  optional int32 budget = 1;

  // The bracket of the model
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Maximum=128
  // +kubebuilder:validation:Minimum=0
  optional int32 bracket = 2;

  // The rung of the model
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Maximum=128
  // +kubebuilder:validation:Minimum=0
  optional int32 rung = 3;

  // The configuration ID allocated to the model
  // +kubebuilder:validation:Optional
  optional int32 confID = 4;

  // The type of modality, based on the type of model
  // For classical models, it should be based on data percentage
  // For deep models, it should be based on epochs
  // +kubebuilder:validation:Optional
  optional string modality = 26;
}

// TextPipelineSpec represents a single pipeline for transforming text data
message TextPipelineSpec {
  // The text encoder (e.g. TFIDF)
  // +kubebuilder:default:=auto
  // +kubebuilder:validation:Optional
  optional string encoder = 1;

  // The text tokenizer character
  // +kubebuilder:validation:Optional
  optional string tokenizer = 2;

  // Indicates if the pipeline will add stop word handling
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool stopwords = 3;

  // Indicates if the pipeline will add part-of-speech handling
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool pos = 4;

  // Indicates if the pipeline will implement lemmatization
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool lemma = 5;

  // Indicates if the pipeline will implement word stemming
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool stem = 6;

  // Indicates if the pipeline will generate a word embedding
  // +kubebuilder:validation:Optional
  optional string embedding = 7;

  // Indicates if the pipeline will add singular value decomposition
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool svd = 8;

  // The maximum number of SVD components to use, if applicable
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 maxSvdComponents = 9;
}

message ThresholdPrunerOptions {
  // A minimum value which determines whether pruner prunes or not. If an intermediate value is smaller than lower, it prunes.
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional double lower = 1;

  // A maximum value which determines whether pruner prunes or not. If an intermediate value is larger than upper, it prunes.
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional double upper = 2;

  //  Pruning is disabled until the trial exceeds the given number of step
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 warmupSteps = 3;

  // Interval in number of steps between the pruning checks
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 intervalSteps = 4;
}

message TimeSeriesEvent {
  // Set to true if this event is an holiday
  // +kubebuilder:validation:Optional
  optional string name = 1;

  // Set to true if this event is an holiday
  // +kubebuilder:validation:Optional
  optional string method = 2;

  // Set to true if this event is an holiday
  // +kubebuilder:validation:Optional
  optional bool holiday = 3;

  // If this event is an holiday, this is the holiday country
  // +kubebuilder:validation:Optional
  optional string country = 4;

  // Pre event window, that might have event effects
  // +kubebuilder:validation:Optional
  optional int32 preEvent = 5;

  // Post event windows the might have event effects.
  // +kubebuilder:validation:Optional
  optional int32 postEvent = 6;

  // The time points to mark the events
  // +kubebuilder:validation:Optional
  repeated string timePoints = 7;
}

// TrainingSpec specifies the configuration of a model training workload
message TrainingSpec {
  // The reference to the Lab under which the model training Job will be created
  optional k8s.io.api.core.v1.ObjectReference labRef = 1;

  // The priority of the Kubernetes Job created by the Model (medium, by default)
  // +kubebuilder:validation:Optional
  // +kubebuilder:default:="medium"
  optional string priority = 2;

  // The type of cross-validation to use, in the case that a validation dataset is not enabled
  // +kubebuilder:default:=kfold
  // +kubebuilder:validation:Optional
  optional string cvtype = 3;

  // Indicates if cross-validation should be used to score models
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool cV = 4;

  // The number of folds to use during cross-validation
  // +kubebuilder:default:=5
  // +kubebuilder:validation:Optional
  optional int32 folds = 5;

  // Split specifies the configuration to generate training, testing, and validation datasets
  // +kubebuilder:validation:Optional
  optional DataSplitSpec split = 6;

  // EvalMetrics specifies the collection of metrics that will be evaluated after model training is complete
  // +kubebuilder:validation:Optional
  repeated string evalMetrics = 7;

  // SuccessiveHalving specifies the configuration for a Study to execute a model search using successive halving
  // +kubebuilder:validation:Optional
  optional SuccessiveHalvingSpec sh = 10;

  // The random state used for the model's estimator, if applicable (for example, in RandomForestClassifier)
  // +kubebuilder:default:=42
  // +kubebuilder:validation:Optional
  optional double seed = 11;

  // Resources specifies the resource requirements allocated to the model training workload
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec resources = 12;

  // Indicates if a GPU will be allocated for model training
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool gpu = 13;

  // Indicates if model training will be distributed across multiple nodes (currently unimplemented)
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool distributed = 14;

  // Indicates if feature importance for the model will be computed as part of training. Some algorithms
  // (e.g. Random Forest) have built in support for feature importance
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool featureImportance = 15;

  // The number of nodes to use, in the case of distributed training
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Optional
  optional int32 nodeCount = 16;

  // The number percentage (0 through 100) of rows to be used during training
  // +kubebuilder:default:=100
  // +kubebuilder:validation:Optional
  optional int32 samplePct = 17;

  // Checkpoint specifies the location to store model checkpoints
  // +kubebuilder:validation:Optional
  optional CheckpointSpec checkpoint = 18;

  // The maximum log level for logs produced by Jobs associated with the Model
  // +kubebuilder:default:=info
  // +kubebuilder:validation:Optional
  optional string logLevel = 19;

  // The maximum time, in seconds, that Jobs associated with the Model can run for before being forcefully cancelled.
  // +kubebuilder:default:=600
  // +kubebuilder:validation:Optional
  optional int32 timeoutInSecs = 20;
}

// TrainingStageSpec is the desired state of the training step of the pipeline
message TrainingStageSpec {
  // Enabled indicates that the stage is enabled
  // +kubebuilder:default:=true
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // NotebookName specify the notebook to run before training.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string notebookName = 2;

  // LabName is the name of the lab used for training. If empty, the system will use the default lab assigned to the data product
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string labName = 3;

  // StudyName is the name of a study template. The actual study will clone the study template and will
  // use the dataset created in the data stage.
  // +kubebuilder:default =""
  // +kubebuilder:validation:Required
  // +required
  optional string studyTemplateName = 4;
}

// UATStageSpec is the specification of the user acceptance test.
message UATStageSpec {
  // Enabled indicates that the stage is enabled
  // +kubebuilder:default:=false
  // +kubebuilder:validation:Optional
  optional bool enabled = 1;

  // The serving site (name space) used for running the uat tests. If the serving site is empty, the system
  // will skip the uat stage
  // +kubebuilder:default =""
  // +kubebuilder:validation:Optional
  optional string servingSiteName = 2;

  // Validations defines the machine learning test cases to run against the new trained model.
  // +kubebuilder:validation:Optional
  optional ModelTestSuite unitTests = 3;

  // Resource define the hardware resources req.
  // +kubebuilder:validation:Optional
  optional github.com.metaprov.modelaapi.pkg.apis.catalog.v1alpha1.ResourceSpec resources = 4;
}

message UnivariateForecastStatus {
  // URI for the grid search result
  // +kubebuilder:validation:Optional
  optional string gridSearchResultURI = 1;

  // The best estimator
  // +kubebuilder:validation:Optional
  optional ClassicalEstimatorSpec baseEstimator = 2;

  // URI of the model
  // +kubebuilder:validation:Optional
  optional string modelURI = 3;

  // URI of the backtest result
  // +kubebuilder:validation:Optional
  optional string cvResultURI = 4;

  // URI to the actual forecast
  // +kubebuilder:validation:Optional
  optional string forecastURI = 5;
}

// VideoPipelineSpec represents a single pipeline for preprocessing video data
message VideoPipelineSpec {
  // The date time imputer.
  // +kubebuilder:default:="auto"
  // +kubebuilder:validation:Optional
  optional string featurizer = 1;
}

// Define a window on the time series.
message WindowSpec {
  // The period interval
  // +kubebuilder:validation:Optional
  optional string interval = 1;

  // The number of intervals to start. If the start is more than 0, there is a gap.
  // +kubebuilder:default:=0
  // +kubebuilder:validation:Optional
  optional int32 start = 2;

  // The window length
  // +kubebuilder:validation:Optional
  optional int32 length = 3;
}

