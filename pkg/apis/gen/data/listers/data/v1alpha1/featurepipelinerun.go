/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FeaturePipelineRunLister helps list FeaturePipelineRuns.
type FeaturePipelineRunLister interface {
	// List lists all FeaturePipelineRuns in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FeaturePipelineRun, err error)
	// FeaturePipelineRuns returns an object that can list and get FeaturePipelineRuns.
	FeaturePipelineRuns(namespace string) FeaturePipelineRunNamespaceLister
	FeaturePipelineRunListerExpansion
}

// featurePipelineRunLister implements the FeaturePipelineRunLister interface.
type featurePipelineRunLister struct {
	indexer cache.Indexer
}

// NewFeaturePipelineRunLister returns a new FeaturePipelineRunLister.
func NewFeaturePipelineRunLister(indexer cache.Indexer) FeaturePipelineRunLister {
	return &featurePipelineRunLister{indexer: indexer}
}

// List lists all FeaturePipelineRuns in the indexer.
func (s *featurePipelineRunLister) List(selector labels.Selector) (ret []*v1alpha1.FeaturePipelineRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FeaturePipelineRun))
	})
	return ret, err
}

// FeaturePipelineRuns returns an object that can list and get FeaturePipelineRuns.
func (s *featurePipelineRunLister) FeaturePipelineRuns(namespace string) FeaturePipelineRunNamespaceLister {
	return featurePipelineRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FeaturePipelineRunNamespaceLister helps list and get FeaturePipelineRuns.
type FeaturePipelineRunNamespaceLister interface {
	// List lists all FeaturePipelineRuns in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FeaturePipelineRun, err error)
	// Get retrieves the FeaturePipelineRun from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FeaturePipelineRun, error)
	FeaturePipelineRunNamespaceListerExpansion
}

// featurePipelineRunNamespaceLister implements the FeaturePipelineRunNamespaceLister
// interface.
type featurePipelineRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FeaturePipelineRuns in the indexer for a given namespace.
func (s featurePipelineRunNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FeaturePipelineRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FeaturePipelineRun))
	})
	return ret, err
}

// Get retrieves the FeaturePipelineRun from the indexer for a given namespace and name.
func (s featurePipelineRunNamespaceLister) Get(name string) (*v1alpha1.FeaturePipelineRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("featurepipelinerun"), name)
	}
	return obj.(*v1alpha1.FeaturePipelineRun), nil
}
