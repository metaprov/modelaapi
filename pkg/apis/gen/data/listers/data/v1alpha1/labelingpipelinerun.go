/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/data/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LabelingPipelineRunLister helps list LabelingPipelineRuns.
type LabelingPipelineRunLister interface {
	// List lists all LabelingPipelineRuns in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LabelingPipelineRun, err error)
	// LabelingPipelineRuns returns an object that can list and get LabelingPipelineRuns.
	LabelingPipelineRuns(namespace string) LabelingPipelineRunNamespaceLister
	LabelingPipelineRunListerExpansion
}

// labelingPipelineRunLister implements the LabelingPipelineRunLister interface.
type labelingPipelineRunLister struct {
	indexer cache.Indexer
}

// NewLabelingPipelineRunLister returns a new LabelingPipelineRunLister.
func NewLabelingPipelineRunLister(indexer cache.Indexer) LabelingPipelineRunLister {
	return &labelingPipelineRunLister{indexer: indexer}
}

// List lists all LabelingPipelineRuns in the indexer.
func (s *labelingPipelineRunLister) List(selector labels.Selector) (ret []*v1alpha1.LabelingPipelineRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LabelingPipelineRun))
	})
	return ret, err
}

// LabelingPipelineRuns returns an object that can list and get LabelingPipelineRuns.
func (s *labelingPipelineRunLister) LabelingPipelineRuns(namespace string) LabelingPipelineRunNamespaceLister {
	return labelingPipelineRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LabelingPipelineRunNamespaceLister helps list and get LabelingPipelineRuns.
type LabelingPipelineRunNamespaceLister interface {
	// List lists all LabelingPipelineRuns in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LabelingPipelineRun, err error)
	// Get retrieves the LabelingPipelineRun from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LabelingPipelineRun, error)
	LabelingPipelineRunNamespaceListerExpansion
}

// labelingPipelineRunNamespaceLister implements the LabelingPipelineRunNamespaceLister
// interface.
type labelingPipelineRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LabelingPipelineRuns in the indexer for a given namespace.
func (s labelingPipelineRunNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LabelingPipelineRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LabelingPipelineRun))
	})
	return ret, err
}

// Get retrieves the LabelingPipelineRun from the indexer for a given namespace and name.
func (s labelingPipelineRunNamespaceLister) Get(name string) (*v1alpha1.LabelingPipelineRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("labelingpipelinerun"), name)
	}
	return obj.(*v1alpha1.LabelingPipelineRun), nil
}
