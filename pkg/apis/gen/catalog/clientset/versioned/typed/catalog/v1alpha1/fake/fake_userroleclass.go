/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/metaprov/modeld-api/pkg/apis/catalog/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeUserRoleClasses implements UserRoleClassInterface
type FakeUserRoleClasses struct {
	Fake *FakeCatalogV1alpha1
	ns   string
}

var userroleclassesResource = schema.GroupVersionResource{Group: "catalog.modeld.io", Version: "v1alpha1", Resource: "userroleclasses"}

var userroleclassesKind = schema.GroupVersionKind{Group: "catalog.modeld.io", Version: "v1alpha1", Kind: "UserRoleClass"}

// Get takes name of the userRoleClass, and returns the corresponding userRoleClass object, and an error if there is any.
func (c *FakeUserRoleClasses) Get(name string, options v1.GetOptions) (result *v1alpha1.UserRoleClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(userroleclassesResource, c.ns, name), &v1alpha1.UserRoleClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.UserRoleClass), err
}

// List takes label and field selectors, and returns the list of UserRoleClasses that match those selectors.
func (c *FakeUserRoleClasses) List(opts v1.ListOptions) (result *v1alpha1.UserRoleClassList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(userroleclassesResource, userroleclassesKind, c.ns, opts), &v1alpha1.UserRoleClassList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.UserRoleClassList{ListMeta: obj.(*v1alpha1.UserRoleClassList).ListMeta}
	for _, item := range obj.(*v1alpha1.UserRoleClassList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested userRoleClasses.
func (c *FakeUserRoleClasses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(userroleclassesResource, c.ns, opts))

}

// Create takes the representation of a userRoleClass and creates it.  Returns the server's representation of the userRoleClass, and an error, if there is any.
func (c *FakeUserRoleClasses) Create(userRoleClass *v1alpha1.UserRoleClass) (result *v1alpha1.UserRoleClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(userroleclassesResource, c.ns, userRoleClass), &v1alpha1.UserRoleClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.UserRoleClass), err
}

// Update takes the representation of a userRoleClass and updates it. Returns the server's representation of the userRoleClass, and an error, if there is any.
func (c *FakeUserRoleClasses) Update(userRoleClass *v1alpha1.UserRoleClass) (result *v1alpha1.UserRoleClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(userroleclassesResource, c.ns, userRoleClass), &v1alpha1.UserRoleClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.UserRoleClass), err
}

// Delete takes name of the userRoleClass and deletes it. Returns an error if one occurs.
func (c *FakeUserRoleClasses) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(userroleclassesResource, c.ns, name), &v1alpha1.UserRoleClass{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeUserRoleClasses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(userroleclassesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.UserRoleClassList{})
	return err
}

// Patch applies the patch and returns the patched userRoleClass.
func (c *FakeUserRoleClasses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.UserRoleClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(userroleclassesResource, c.ns, name, pt, data, subresources...), &v1alpha1.UserRoleClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.UserRoleClass), err
}
