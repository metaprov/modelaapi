/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/catalog/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AlgorithmLister helps list Algorithms.
type AlgorithmLister interface {
	// List lists all Algorithms in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Algorithm, err error)
	// Algorithms returns an object that can list and get Algorithms.
	Algorithms(namespace string) AlgorithmNamespaceLister
	AlgorithmListerExpansion
}

// algorithmLister implements the AlgorithmLister interface.
type algorithmLister struct {
	indexer cache.Indexer
}

// NewAlgorithmLister returns a new AlgorithmLister.
func NewAlgorithmLister(indexer cache.Indexer) AlgorithmLister {
	return &algorithmLister{indexer: indexer}
}

// List lists all Algorithms in the indexer.
func (s *algorithmLister) List(selector labels.Selector) (ret []*v1alpha1.Algorithm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Algorithm))
	})
	return ret, err
}

// Algorithms returns an object that can list and get Algorithms.
func (s *algorithmLister) Algorithms(namespace string) AlgorithmNamespaceLister {
	return algorithmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AlgorithmNamespaceLister helps list and get Algorithms.
type AlgorithmNamespaceLister interface {
	// List lists all Algorithms in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Algorithm, err error)
	// Get retrieves the Algorithm from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Algorithm, error)
	AlgorithmNamespaceListerExpansion
}

// algorithmNamespaceLister implements the AlgorithmNamespaceLister
// interface.
type algorithmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Algorithms in the indexer for a given namespace.
func (s algorithmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Algorithm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Algorithm))
	})
	return ret, err
}

// Get retrieves the Algorithm from the indexer for a given namespace and name.
func (s algorithmNamespaceLister) Get(name string) (*v1alpha1.Algorithm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("algorithm"), name)
	}
	return obj.(*v1alpha1.Algorithm), nil
}
