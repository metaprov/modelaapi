/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeld-api/pkg/apis/training/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StudyLister helps list Studies.
type StudyLister interface {
	// List lists all Studies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Study, err error)
	// Studies returns an object that can list and get Studies.
	Studies(namespace string) StudyNamespaceLister
	StudyListerExpansion
}

// studyLister implements the StudyLister interface.
type studyLister struct {
	indexer cache.Indexer
}

// NewStudyLister returns a new StudyLister.
func NewStudyLister(indexer cache.Indexer) StudyLister {
	return &studyLister{indexer: indexer}
}

// List lists all Studies in the indexer.
func (s *studyLister) List(selector labels.Selector) (ret []*v1alpha1.Study, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Study))
	})
	return ret, err
}

// Studies returns an object that can list and get Studies.
func (s *studyLister) Studies(namespace string) StudyNamespaceLister {
	return studyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StudyNamespaceLister helps list and get Studies.
type StudyNamespaceLister interface {
	// List lists all Studies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Study, err error)
	// Get retrieves the Study from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Study, error)
	StudyNamespaceListerExpansion
}

// studyNamespaceLister implements the StudyNamespaceLister
// interface.
type studyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Studies in the indexer for a given namespace.
func (s studyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Study, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Study))
	})
	return ret, err
}

// Get retrieves the Study from the indexer for a given namespace and name.
func (s studyNamespaceLister) Get(name string) (*v1alpha1.Study, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("study"), name)
	}
	return obj.(*v1alpha1.Study), nil
}
