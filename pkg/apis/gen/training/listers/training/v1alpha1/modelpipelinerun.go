/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/training/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ModelPipelineRunLister helps list ModelPipelineRuns.
type ModelPipelineRunLister interface {
	// List lists all ModelPipelineRuns in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ModelPipelineRun, err error)
	// ModelPipelineRuns returns an object that can list and get ModelPipelineRuns.
	ModelPipelineRuns(namespace string) ModelPipelineRunNamespaceLister
	ModelPipelineRunListerExpansion
}

// modelPipelineRunLister implements the ModelPipelineRunLister interface.
type modelPipelineRunLister struct {
	indexer cache.Indexer
}

// NewModelPipelineRunLister returns a new ModelPipelineRunLister.
func NewModelPipelineRunLister(indexer cache.Indexer) ModelPipelineRunLister {
	return &modelPipelineRunLister{indexer: indexer}
}

// List lists all ModelPipelineRuns in the indexer.
func (s *modelPipelineRunLister) List(selector labels.Selector) (ret []*v1alpha1.ModelPipelineRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModelPipelineRun))
	})
	return ret, err
}

// ModelPipelineRuns returns an object that can list and get ModelPipelineRuns.
func (s *modelPipelineRunLister) ModelPipelineRuns(namespace string) ModelPipelineRunNamespaceLister {
	return modelPipelineRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ModelPipelineRunNamespaceLister helps list and get ModelPipelineRuns.
type ModelPipelineRunNamespaceLister interface {
	// List lists all ModelPipelineRuns in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ModelPipelineRun, err error)
	// Get retrieves the ModelPipelineRun from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ModelPipelineRun, error)
	ModelPipelineRunNamespaceListerExpansion
}

// modelPipelineRunNamespaceLister implements the ModelPipelineRunNamespaceLister
// interface.
type modelPipelineRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ModelPipelineRuns in the indexer for a given namespace.
func (s modelPipelineRunNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ModelPipelineRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModelPipelineRun))
	})
	return ret, err
}

// Get retrieves the ModelPipelineRun from the indexer for a given namespace and name.
func (s modelPipelineRunNamespaceLister) Get(name string) (*v1alpha1.ModelPipelineRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("modelpipelinerun"), name)
	}
	return obj.(*v1alpha1.ModelPipelineRun), nil
}
