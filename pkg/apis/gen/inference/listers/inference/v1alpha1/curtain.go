/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeldapi/pkg/apis/inference/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CurtainLister helps list Curtains.
type CurtainLister interface {
	// List lists all Curtains in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Curtain, err error)
	// Curtains returns an object that can list and get Curtains.
	Curtains(namespace string) CurtainNamespaceLister
	CurtainListerExpansion
}

// curtainLister implements the CurtainLister interface.
type curtainLister struct {
	indexer cache.Indexer
}

// NewCurtainLister returns a new CurtainLister.
func NewCurtainLister(indexer cache.Indexer) CurtainLister {
	return &curtainLister{indexer: indexer}
}

// List lists all Curtains in the indexer.
func (s *curtainLister) List(selector labels.Selector) (ret []*v1alpha1.Curtain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Curtain))
	})
	return ret, err
}

// Curtains returns an object that can list and get Curtains.
func (s *curtainLister) Curtains(namespace string) CurtainNamespaceLister {
	return curtainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CurtainNamespaceLister helps list and get Curtains.
type CurtainNamespaceLister interface {
	// List lists all Curtains in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Curtain, err error)
	// Get retrieves the Curtain from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Curtain, error)
	CurtainNamespaceListerExpansion
}

// curtainNamespaceLister implements the CurtainNamespaceLister
// interface.
type curtainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Curtains in the indexer for a given namespace.
func (s curtainNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Curtain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Curtain))
	})
	return ret, err
}

// Get retrieves the Curtain from the indexer for a given namespace and name.
func (s curtainNamespaceLister) Get(name string) (*v1alpha1.Curtain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("curtain"), name)
	}
	return obj.(*v1alpha1.Curtain), nil
}
