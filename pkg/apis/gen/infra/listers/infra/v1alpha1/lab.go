/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeld-api/pkg/apis/infra/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LabLister helps list Labs.
type LabLister interface {
	// List lists all Labs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Lab, err error)
	// Labs returns an object that can list and get Labs.
	Labs(namespace string) LabNamespaceLister
	LabListerExpansion
}

// labLister implements the LabLister interface.
type labLister struct {
	indexer cache.Indexer
}

// NewLabLister returns a new LabLister.
func NewLabLister(indexer cache.Indexer) LabLister {
	return &labLister{indexer: indexer}
}

// List lists all Labs in the indexer.
func (s *labLister) List(selector labels.Selector) (ret []*v1alpha1.Lab, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Lab))
	})
	return ret, err
}

// Labs returns an object that can list and get Labs.
func (s *labLister) Labs(namespace string) LabNamespaceLister {
	return labNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LabNamespaceLister helps list and get Labs.
type LabNamespaceLister interface {
	// List lists all Labs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Lab, err error)
	// Get retrieves the Lab from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Lab, error)
	LabNamespaceListerExpansion
}

// labNamespaceLister implements the LabNamespaceLister
// interface.
type labNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Labs in the indexer for a given namespace.
func (s labNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Lab, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Lab))
	})
	return ret, err
}

// Get retrieves the Lab from the indexer for a given namespace and name.
func (s labNamespaceLister) Get(name string) (*v1alpha1.Lab, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lab"), name)
	}
	return obj.(*v1alpha1.Lab), nil
}
