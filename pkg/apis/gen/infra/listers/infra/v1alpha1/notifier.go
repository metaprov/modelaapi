/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeld-api/pkg/apis/infra/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotifierLister helps list Notifiers.
type NotifierLister interface {
	// List lists all Notifiers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Notifier, err error)
	// Notifiers returns an object that can list and get Notifiers.
	Notifiers(namespace string) NotifierNamespaceLister
	NotifierListerExpansion
}

// notifierLister implements the NotifierLister interface.
type notifierLister struct {
	indexer cache.Indexer
}

// NewNotifierLister returns a new NotifierLister.
func NewNotifierLister(indexer cache.Indexer) NotifierLister {
	return &notifierLister{indexer: indexer}
}

// List lists all Notifiers in the indexer.
func (s *notifierLister) List(selector labels.Selector) (ret []*v1alpha1.Notifier, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Notifier))
	})
	return ret, err
}

// Notifiers returns an object that can list and get Notifiers.
func (s *notifierLister) Notifiers(namespace string) NotifierNamespaceLister {
	return notifierNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotifierNamespaceLister helps list and get Notifiers.
type NotifierNamespaceLister interface {
	// List lists all Notifiers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Notifier, err error)
	// Get retrieves the Notifier from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Notifier, error)
	NotifierNamespaceListerExpansion
}

// notifierNamespaceLister implements the NotifierNamespaceLister
// interface.
type notifierNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Notifiers in the indexer for a given namespace.
func (s notifierNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Notifier, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Notifier))
	})
	return ret, err
}

// Get retrieves the Notifier from the indexer for a given namespace and name.
func (s notifierNamespaceLister) Get(name string) (*v1alpha1.Notifier, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notifier"), name)
	}
	return obj.(*v1alpha1.Notifier), nil
}
