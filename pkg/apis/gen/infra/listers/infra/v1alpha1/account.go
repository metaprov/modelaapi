/**
*
* Copyright (C) 2017 modeld authors
* For license information, see LICENSE.txt
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/metaprov/modeld-api/pkg/apis/infra/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccountLister helps list Accounts.
type AccountLister interface {
	// List lists all Accounts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Account, err error)
	// Accounts returns an object that can list and get Accounts.
	Accounts(namespace string) AccountNamespaceLister
	AccountListerExpansion
}

// accountLister implements the AccountLister interface.
type accountLister struct {
	indexer cache.Indexer
}

// NewAccountLister returns a new AccountLister.
func NewAccountLister(indexer cache.Indexer) AccountLister {
	return &accountLister{indexer: indexer}
}

// List lists all Accounts in the indexer.
func (s *accountLister) List(selector labels.Selector) (ret []*v1alpha1.Account, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Account))
	})
	return ret, err
}

// Accounts returns an object that can list and get Accounts.
func (s *accountLister) Accounts(namespace string) AccountNamespaceLister {
	return accountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccountNamespaceLister helps list and get Accounts.
type AccountNamespaceLister interface {
	// List lists all Accounts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Account, err error)
	// Get retrieves the Account from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Account, error)
	AccountNamespaceListerExpansion
}

// accountNamespaceLister implements the AccountNamespaceLister
// interface.
type accountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Accounts in the indexer for a given namespace.
func (s accountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Account, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Account))
	})
	return ret, err
}

// Get retrieves the Account from the indexer for a given namespace and name.
func (s accountNamespaceLister) Get(name string) (*v1alpha1.Account, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("account"), name)
	}
	return obj.(*v1alpha1.Account), nil
}
