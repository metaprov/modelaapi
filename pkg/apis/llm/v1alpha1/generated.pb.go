/**
*
* Copyright (C) 2017 modela authors
* For license information, see LICENSE.txt
 */ // Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/metaprov/modelaapi/pkg/apis/llm/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	v1alpha1 "github.com/metaprov/modelaapi/pkg/apis/catalog/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *CodeSplitterSpec) Reset()      { *m = CodeSplitterSpec{} }
func (*CodeSplitterSpec) ProtoMessage() {}
func (*CodeSplitterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{0}
}
func (m *CodeSplitterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeSplitterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CodeSplitterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeSplitterSpec.Merge(m, src)
}
func (m *CodeSplitterSpec) XXX_Size() int {
	return m.Size()
}
func (m *CodeSplitterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeSplitterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CodeSplitterSpec proto.InternalMessageInfo

func (m *DatabaseReaderSpec) Reset()      { *m = DatabaseReaderSpec{} }
func (*DatabaseReaderSpec) ProtoMessage() {}
func (*DatabaseReaderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{1}
}
func (m *DatabaseReaderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatabaseReaderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DatabaseReaderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseReaderSpec.Merge(m, src)
}
func (m *DatabaseReaderSpec) XXX_Size() int {
	return m.Size()
}
func (m *DatabaseReaderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseReaderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseReaderSpec proto.InternalMessageInfo

func (m *DocumentSpec) Reset()      { *m = DocumentSpec{} }
func (*DocumentSpec) ProtoMessage() {}
func (*DocumentSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{2}
}
func (m *DocumentSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DocumentSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentSpec.Merge(m, src)
}
func (m *DocumentSpec) XXX_Size() int {
	return m.Size()
}
func (m *DocumentSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentSpec proto.InternalMessageInfo

func (m *DocumentStatus) Reset()      { *m = DocumentStatus{} }
func (*DocumentStatus) ProtoMessage() {}
func (*DocumentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{3}
}
func (m *DocumentStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DocumentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentStatus.Merge(m, src)
}
func (m *DocumentStatus) XXX_Size() int {
	return m.Size()
}
func (m *DocumentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentStatus proto.InternalMessageInfo

func (m *FileReaderSpec) Reset()      { *m = FileReaderSpec{} }
func (*FileReaderSpec) ProtoMessage() {}
func (*FileReaderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{4}
}
func (m *FileReaderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileReaderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FileReaderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileReaderSpec.Merge(m, src)
}
func (m *FileReaderSpec) XXX_Size() int {
	return m.Size()
}
func (m *FileReaderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FileReaderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FileReaderSpec proto.InternalMessageInfo

func (m *KnowledgeBase) Reset()      { *m = KnowledgeBase{} }
func (*KnowledgeBase) ProtoMessage() {}
func (*KnowledgeBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{5}
}
func (m *KnowledgeBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KnowledgeBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KnowledgeBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnowledgeBase.Merge(m, src)
}
func (m *KnowledgeBase) XXX_Size() int {
	return m.Size()
}
func (m *KnowledgeBase) XXX_DiscardUnknown() {
	xxx_messageInfo_KnowledgeBase.DiscardUnknown(m)
}

var xxx_messageInfo_KnowledgeBase proto.InternalMessageInfo

func (m *KnowledgeBaseList) Reset()      { *m = KnowledgeBaseList{} }
func (*KnowledgeBaseList) ProtoMessage() {}
func (*KnowledgeBaseList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{6}
}
func (m *KnowledgeBaseList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KnowledgeBaseList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KnowledgeBaseList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnowledgeBaseList.Merge(m, src)
}
func (m *KnowledgeBaseList) XXX_Size() int {
	return m.Size()
}
func (m *KnowledgeBaseList) XXX_DiscardUnknown() {
	xxx_messageInfo_KnowledgeBaseList.DiscardUnknown(m)
}

var xxx_messageInfo_KnowledgeBaseList proto.InternalMessageInfo

func (m *KnowledgeBaseSpec) Reset()      { *m = KnowledgeBaseSpec{} }
func (*KnowledgeBaseSpec) ProtoMessage() {}
func (*KnowledgeBaseSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{7}
}
func (m *KnowledgeBaseSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KnowledgeBaseSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KnowledgeBaseSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnowledgeBaseSpec.Merge(m, src)
}
func (m *KnowledgeBaseSpec) XXX_Size() int {
	return m.Size()
}
func (m *KnowledgeBaseSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KnowledgeBaseSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KnowledgeBaseSpec proto.InternalMessageInfo

func (m *KnowledgeBaseStatus) Reset()      { *m = KnowledgeBaseStatus{} }
func (*KnowledgeBaseStatus) ProtoMessage() {}
func (*KnowledgeBaseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{8}
}
func (m *KnowledgeBaseStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KnowledgeBaseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KnowledgeBaseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnowledgeBaseStatus.Merge(m, src)
}
func (m *KnowledgeBaseStatus) XXX_Size() int {
	return m.Size()
}
func (m *KnowledgeBaseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_KnowledgeBaseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_KnowledgeBaseStatus proto.InternalMessageInfo

func (m *ModelSpec) Reset()      { *m = ModelSpec{} }
func (*ModelSpec) ProtoMessage() {}
func (*ModelSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{9}
}
func (m *ModelSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelSpec.Merge(m, src)
}
func (m *ModelSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModelSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModelSpec proto.InternalMessageInfo

func (m *NodeParserSpec) Reset()      { *m = NodeParserSpec{} }
func (*NodeParserSpec) ProtoMessage() {}
func (*NodeParserSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{10}
}
func (m *NodeParserSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeParserSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeParserSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeParserSpec.Merge(m, src)
}
func (m *NodeParserSpec) XXX_Size() int {
	return m.Size()
}
func (m *NodeParserSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeParserSpec.DiscardUnknown(m)
}

var xxx_messageInfo_NodeParserSpec proto.InternalMessageInfo

func (m *SentenceSplitterSpec) Reset()      { *m = SentenceSplitterSpec{} }
func (*SentenceSplitterSpec) ProtoMessage() {}
func (*SentenceSplitterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{11}
}
func (m *SentenceSplitterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SentenceSplitterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SentenceSplitterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentenceSplitterSpec.Merge(m, src)
}
func (m *SentenceSplitterSpec) XXX_Size() int {
	return m.Size()
}
func (m *SentenceSplitterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SentenceSplitterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SentenceSplitterSpec proto.InternalMessageInfo

func (m *SentenceTokenizerSpec) Reset()      { *m = SentenceTokenizerSpec{} }
func (*SentenceTokenizerSpec) ProtoMessage() {}
func (*SentenceTokenizerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{12}
}
func (m *SentenceTokenizerSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SentenceTokenizerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SentenceTokenizerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentenceTokenizerSpec.Merge(m, src)
}
func (m *SentenceTokenizerSpec) XXX_Size() int {
	return m.Size()
}
func (m *SentenceTokenizerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SentenceTokenizerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SentenceTokenizerSpec proto.InternalMessageInfo

func (m *SentenceWindowNodeParserSpec) Reset()      { *m = SentenceWindowNodeParserSpec{} }
func (*SentenceWindowNodeParserSpec) ProtoMessage() {}
func (*SentenceWindowNodeParserSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{13}
}
func (m *SentenceWindowNodeParserSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SentenceWindowNodeParserSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SentenceWindowNodeParserSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentenceWindowNodeParserSpec.Merge(m, src)
}
func (m *SentenceWindowNodeParserSpec) XXX_Size() int {
	return m.Size()
}
func (m *SentenceWindowNodeParserSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SentenceWindowNodeParserSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SentenceWindowNodeParserSpec proto.InternalMessageInfo

func (m *TextSplitterSpec) Reset()      { *m = TextSplitterSpec{} }
func (*TextSplitterSpec) ProtoMessage() {}
func (*TextSplitterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{14}
}
func (m *TextSplitterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextSplitterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TextSplitterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextSplitterSpec.Merge(m, src)
}
func (m *TextSplitterSpec) XXX_Size() int {
	return m.Size()
}
func (m *TextSplitterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TextSplitterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TextSplitterSpec proto.InternalMessageInfo

func (m *TokenSplitterSpec) Reset()      { *m = TokenSplitterSpec{} }
func (*TokenSplitterSpec) ProtoMessage() {}
func (*TokenSplitterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{15}
}
func (m *TokenSplitterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenSplitterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TokenSplitterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenSplitterSpec.Merge(m, src)
}
func (m *TokenSplitterSpec) XXX_Size() int {
	return m.Size()
}
func (m *TokenSplitterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenSplitterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TokenSplitterSpec proto.InternalMessageInfo

func (m *WebReaderSpec) Reset()      { *m = WebReaderSpec{} }
func (*WebReaderSpec) ProtoMessage() {}
func (*WebReaderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d2cdbb076c4811d, []int{16}
}
func (m *WebReaderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebReaderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WebReaderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebReaderSpec.Merge(m, src)
}
func (m *WebReaderSpec) XXX_Size() int {
	return m.Size()
}
func (m *WebReaderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WebReaderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WebReaderSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CodeSplitterSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.CodeSplitterSpec")
	proto.RegisterType((*DatabaseReaderSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DatabaseReaderSpec.OptionsEntry")
	proto.RegisterType((*DocumentSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentSpec.MetadataEntry")
	proto.RegisterType((*DocumentStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.DocumentStatus")
	proto.RegisterType((*FileReaderSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.FileReaderSpec.OptionsEntry")
	proto.RegisterType((*KnowledgeBase)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBase")
	proto.RegisterType((*KnowledgeBaseList)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseList")
	proto.RegisterType((*KnowledgeBaseSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseSpec")
	proto.RegisterType((*KnowledgeBaseStatus)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.KnowledgeBaseStatus")
	proto.RegisterType((*ModelSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.ModelSpec")
	proto.RegisterType((*NodeParserSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.NodeParserSpec")
	proto.RegisterType((*SentenceSplitterSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceSplitterSpec")
	proto.RegisterType((*SentenceTokenizerSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceTokenizerSpec")
	proto.RegisterType((*SentenceWindowNodeParserSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.SentenceWindowNodeParserSpec")
	proto.RegisterType((*TextSplitterSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TextSplitterSpec")
	proto.RegisterType((*TokenSplitterSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.TokenSplitterSpec")
	proto.RegisterType((*WebReaderSpec)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec")
	proto.RegisterMapType((map[string]string)(nil), "github.com.metaprov.modelaapi.pkg.apis.llm.v1alpha1.WebReaderSpec.OptionsEntry")
}

func init() {
	proto.RegisterFile("github.com/metaprov/modelaapi/pkg/apis/llm/v1alpha1/generated.proto", fileDescriptor_8d2cdbb076c4811d)
}

var fileDescriptor_8d2cdbb076c4811d = []byte{
	// 1863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xcd, 0x6f, 0x24, 0x47,
	0x15, 0x77, 0xcf, 0x8c, 0xed, 0x99, 0xe7, 0xef, 0xca, 0x06, 0x4d, 0x9c, 0x65, 0x66, 0x99, 0x08,
	0xc9, 0x22, 0xd0, 0x93, 0x75, 0xa2, 0x10, 0x16, 0x11, 0x69, 0x67, 0xbc, 0xbb, 0x38, 0x78, 0xe3,
	0x4d, 0xd9, 0xc1, 0x80, 0x40, 0x50, 0xee, 0xae, 0xed, 0x69, 0xdc, 0xd3, 0xd5, 0xe9, 0xae, 0x19,
	0xaf, 0x37, 0x82, 0x20, 0x71, 0xe0, 0xc0, 0x85, 0xff, 0x04, 0x6e, 0x1c, 0xb8, 0x72, 0xd8, 0x0b,
	0x52, 0x8e, 0x11, 0x48, 0x03, 0x3b, 0xb9, 0x23, 0xc4, 0x91, 0x03, 0x42, 0xf5, 0xd1, 0x5f, 0x33,
	0x9e, 0x8d, 0xb7, 0x6d, 0xad, 0xb8, 0x4d, 0xbf, 0x7a, 0xef, 0xf7, 0xab, 0x7a, 0xf5, 0xde, 0xab,
	0x57, 0x35, 0xd0, 0x75, 0x5c, 0xde, 0x1b, 0x1c, 0x9b, 0x16, 0xeb, 0xb7, 0xfb, 0x94, 0x93, 0x20,
	0x64, 0xc3, 0x76, 0x9f, 0xd9, 0xd4, 0x23, 0x24, 0x70, 0xdb, 0xc1, 0x89, 0xd3, 0x26, 0x81, 0x1b,
	0xb5, 0x3d, 0xaf, 0xdf, 0x1e, 0xde, 0x24, 0x5e, 0xd0, 0x23, 0x37, 0xdb, 0x0e, 0xf5, 0x69, 0x48,
	0x38, 0xb5, 0xcd, 0x20, 0x64, 0x9c, 0xa1, 0x37, 0x53, 0x10, 0x33, 0x06, 0x31, 0x13, 0x10, 0x33,
	0x38, 0x71, 0x4c, 0x01, 0x62, 0x7a, 0x5e, 0xdf, 0x8c, 0x41, 0x36, 0xbf, 0x91, 0x61, 0x76, 0x98,
	0xc3, 0xda, 0x12, 0xeb, 0x78, 0xf0, 0x50, 0x7e, 0xc9, 0x0f, 0xf9, 0x4b, 0x71, 0x6c, 0xde, 0xbb,
	0xe0, 0x44, 0x2d, 0xc2, 0x89, 0xc7, 0x9c, 0x99, 0x93, 0xdd, 0x7c, 0xeb, 0xe4, 0x9d, 0xc8, 0x74,
	0x99, 0xd0, 0xee, 0x13, 0xab, 0xe7, 0xfa, 0x34, 0x3c, 0x4b, 0xcd, 0x05, 0x74, 0x7b, 0x38, 0x6d,
	0xd5, 0x9e, 0x65, 0x15, 0x0e, 0x7c, 0xee, 0xf6, 0xe9, 0x94, 0xc1, 0xdb, 0x5f, 0x64, 0x10, 0x59,
	0x3d, 0xda, 0x27, 0x93, 0x76, 0xad, 0xbf, 0x1b, 0xb0, 0xde, 0x65, 0x36, 0x3d, 0x08, 0x3c, 0x97,
	0x73, 0x1a, 0x1e, 0x04, 0xd4, 0x42, 0x5f, 0x87, 0xaa, 0x47, 0x7c, 0x67, 0x40, 0x1c, 0x5a, 0x37,
	0x6e, 0x18, 0x5b, 0xb5, 0xce, 0xfa, 0x93, 0x51, 0x73, 0x6e, 0x3c, 0x6a, 0x56, 0xf7, 0xb4, 0x1c,
	0x27, 0x1a, 0xc8, 0x04, 0xb0, 0x7a, 0x03, 0xff, 0x64, 0xcf, 0xf5, 0x69, 0x54, 0x2f, 0xdd, 0x30,
	0xb6, 0xe6, 0x3b, 0xab, 0xe3, 0x51, 0x13, 0xba, 0x89, 0x14, 0x67, 0x34, 0x50, 0x17, 0x36, 0xd2,
	0xaf, 0xfd, 0x21, 0x0d, 0x3d, 0x12, 0xd4, 0xcb, 0xd2, 0xec, 0xe5, 0xf1, 0xa8, 0xb9, 0xd1, 0x9d,
	0x1c, 0xc4, 0xd3, 0xfa, 0x68, 0x0b, 0xaa, 0x7d, 0xf2, 0xa8, 0xdb, 0x23, 0x61, 0x54, 0xaf, 0x48,
	0xdb, 0x65, 0x31, 0xbd, 0xfb, 0x5a, 0x86, 0x93, 0xd1, 0xd6, 0x3f, 0x4b, 0x80, 0x76, 0x08, 0x27,
	0xc7, 0x24, 0xa2, 0x98, 0x12, 0x5b, 0xaf, 0xf1, 0x6d, 0xa8, 0xf0, 0xb3, 0x20, 0x5e, 0x5f, 0x4b,
	0xaf, 0xaf, 0x72, 0x78, 0x16, 0xd0, 0xff, 0x8c, 0x9a, 0x13, 0x16, 0x42, 0x8a, 0xa5, 0x3e, 0x7a,
	0x17, 0x56, 0x2d, 0xe6, 0xfb, 0xd4, 0xe2, 0x2e, 0xf3, 0xdf, 0x27, 0x7d, 0x2a, 0x57, 0x5c, 0xeb,
	0x7c, 0x49, 0x23, 0xac, 0x76, 0x73, 0xa3, 0x78, 0x42, 0x1b, 0xbd, 0x06, 0xf3, 0x1f, 0x0d, 0x68,
	0x78, 0x26, 0x57, 0x5c, 0xeb, 0xac, 0x68, 0xb3, 0xf9, 0x0f, 0x84, 0x10, 0xab, 0x31, 0xf4, 0x09,
	0x2c, 0xb2, 0x40, 0x98, 0x88, 0xc5, 0x95, 0xb7, 0x96, 0xb6, 0x0f, 0xcd, 0x02, 0x31, 0x6f, 0x4e,
	0x2f, 0xdb, 0xdc, 0x57, 0xb0, 0x77, 0x7c, 0x1e, 0x9e, 0x75, 0xd6, 0x34, 0xf9, 0xa2, 0x96, 0xe2,
	0x98, 0x75, 0xf3, 0x16, 0x2c, 0x67, 0x35, 0xd1, 0x3a, 0x94, 0x4f, 0xe8, 0x99, 0x72, 0x16, 0x16,
	0x3f, 0xd1, 0x35, 0x98, 0x1f, 0x12, 0x6f, 0xa0, 0x97, 0x8f, 0xd5, 0xc7, 0xad, 0xd2, 0x3b, 0x46,
	0xeb, 0xbf, 0x0b, 0xb0, 0xbc, 0xc3, 0xac, 0x41, 0x9f, 0xfa, 0x5c, 0xba, 0xfa, 0x06, 0x54, 0x7c,
	0xe1, 0x28, 0xe5, 0xea, 0xe5, 0xd8, 0xd5, 0xd2, 0x3d, 0x72, 0x04, 0xdd, 0x84, 0x25, 0x9b, 0x46,
	0x56, 0xe8, 0x4a, 0x4e, 0xed, 0xd1, 0xb5, 0xf1, 0xa8, 0xb9, 0xb4, 0x93, 0x8a, 0x71, 0x56, 0x07,
	0xfd, 0x02, 0xaa, 0xc2, 0x0f, 0x36, 0xe1, 0xa4, 0x5e, 0x96, 0x3e, 0xda, 0x2f, 0xe6, 0xa3, 0xcc,
	0x4c, 0xcd, 0xfb, 0x1a, 0x51, 0xb9, 0x27, 0x09, 0xfa, 0x58, 0x8c, 0x13, 0x4a, 0xf4, 0x4d, 0x58,
	0x09, 0xe9, 0xc3, 0x90, 0x46, 0xbd, 0x07, 0x34, 0x74, 0x99, 0xad, 0x83, 0x70, 0x63, 0x3c, 0x6a,
	0xae, 0xe0, 0xec, 0x00, 0xce, 0xeb, 0xa1, 0x08, 0xc0, 0x67, 0x36, 0x7d, 0x40, 0xc2, 0x88, 0x86,
	0xf5, 0xf9, 0x1b, 0xc6, 0xd6, 0xd2, 0x76, 0xb7, 0xd0, 0xcc, 0xdf, 0x4f, 0x60, 0xc4, 0xdc, 0x55,
	0xca, 0xa5, 0x32, 0x9c, 0xa1, 0x41, 0x8f, 0x61, 0x95, 0xf6, 0x8f, 0xa9, 0x6d, 0xbb, 0xbe, 0x73,
	0x5f, 0xc0, 0xd6, 0x17, 0x24, 0xf1, 0xbb, 0x85, 0x88, 0x25, 0x82, 0xe4, 0x44, 0x22, 0xe0, 0xef,
	0xe4, 0x90, 0xf1, 0x04, 0x13, 0x22, 0x50, 0x79, 0xe8, 0x7a, 0xb4, 0xbe, 0x78, 0x89, 0xa5, 0xde,
	0x75, 0xbd, 0x4c, 0x10, 0x77, 0xaa, 0x22, 0x7c, 0xa4, 0x4c, 0x42, 0xa3, 0x8f, 0xa0, 0x6a, 0xeb,
	0x50, 0xaf, 0x57, 0x25, 0xcd, 0xbd, 0x2b, 0xca, 0x17, 0x55, 0x55, 0x12, 0x79, 0x42, 0x83, 0x7e,
	0x02, 0xe5, 0x53, 0x7a, 0x5c, 0xaf, 0x49, 0xb6, 0x4e, 0x21, 0xb6, 0x23, 0x7a, 0x9c, 0x21, 0x5a,
	0x1c, 0x8f, 0x9a, 0x65, 0x21, 0x12, 0xb8, 0x9b, 0xdf, 0x86, 0x95, 0x5c, 0x2c, 0x3e, 0x57, 0x02,
	0xfe, 0xcd, 0x80, 0xd5, 0x24, 0xac, 0x39, 0xe1, 0x83, 0xe8, 0x02, 0x29, 0xf8, 0x65, 0x28, 0x0f,
	0x5c, 0x5b, 0xa7, 0xde, 0x92, 0x56, 0x28, 0x7f, 0xb8, 0xbb, 0x83, 0x85, 0x5c, 0x94, 0x2d, 0x11,
	0x4f, 0x91, 0x2e, 0xd4, 0x49, 0xd9, 0x12, 0x01, 0x17, 0x61, 0x35, 0x86, 0x2c, 0x58, 0xf1, 0x48,
	0xc4, 0x75, 0xfc, 0xdf, 0xe6, 0x32, 0x29, 0x96, 0xb6, 0xbf, 0x66, 0xaa, 0xc3, 0xc9, 0xcc, 0x1e,
	0x4e, 0xa9, 0x53, 0x84, 0xc3, 0xcc, 0xe1, 0x4d, 0xf3, 0xd0, 0xed, 0x53, 0x95, 0x40, 0x7b, 0x59,
	0x10, 0x9c, 0xc7, 0x6c, 0xfd, 0xbb, 0x04, 0xab, 0xf9, 0x78, 0x40, 0xdb, 0xb9, 0x5a, 0xde, 0x98,
	0xa8, 0xe5, 0x19, 0xed, 0x4c, 0x1d, 0x8f, 0xa0, 0xea, 0x31, 0x8b, 0x24, 0xf5, 0x66, 0x69, 0xfb,
	0xce, 0x45, 0x77, 0x51, 0x9f, 0xf9, 0xf9, 0xf0, 0xdc, 0xd3, 0x60, 0x99, 0xa3, 0x52, 0x4b, 0x70,
	0x42, 0x84, 0x3e, 0x4e, 0xeb, 0xba, 0xaa, 0x59, 0x0f, 0xae, 0x20, 0x1d, 0x5e, 0x44, 0x4d, 0xff,
	0x4b, 0x09, 0x56, 0xbe, 0xe7, 0xb3, 0x53, 0x8f, 0xda, 0x0e, 0xed, 0x88, 0x04, 0xf8, 0x59, 0xa6,
	0xfe, 0x1a, 0xd2, 0x7f, 0x6f, 0x5c, 0x6c, 0x9b, 0xf7, 0x8f, 0x7f, 0x4e, 0x2d, 0x2e, 0xa2, 0xbb,
	0x83, 0xf4, 0x5c, 0x21, 0x95, 0x65, 0x4a, 0x6c, 0x0f, 0x2a, 0x51, 0x40, 0x2d, 0xbd, 0x3b, 0x77,
	0x0b, 0x79, 0x2a, 0x37, 0x67, 0x95, 0xd0, 0x71, 0x74, 0x88, 0x2f, 0x2c, 0x19, 0x50, 0x00, 0x0b,
	0x91, 0xcc, 0x13, 0x19, 0xdd, 0x4b, 0xdb, 0xdf, 0xbd, 0x02, 0x2e, 0x89, 0xd7, 0x59, 0xd5, 0x6c,
	0x0b, 0xea, 0x1b, 0x6b, 0x9e, 0xd6, 0x5f, 0x0d, 0xd8, 0xc8, 0xe9, 0xef, 0xb9, 0x11, 0x47, 0x3f,
	0x9e, 0xf2, 0xa9, 0x79, 0x31, 0x9f, 0x0a, 0x6b, 0xe9, 0xd1, 0x34, 0xf8, 0xb4, 0x24, 0xe3, 0x4f,
	0x07, 0xe6, 0x5d, 0x4e, 0xfb, 0xa2, 0x45, 0x2b, 0x17, 0x2e, 0x5a, 0xb9, 0x49, 0xa7, 0x65, 0x60,
	0x57, 0x00, 0x63, 0x85, 0xdf, 0xfa, 0xc3, 0xe2, 0xc4, 0xe2, 0x64, 0x92, 0x36, 0x61, 0x9e, 0x9d,
	0xfa, 0x34, 0xd4, 0x59, 0x5a, 0x13, 0x66, 0xfb, 0x42, 0x80, 0x95, 0xbc, 0x48, 0x13, 0xf0, 0x6b,
	0x03, 0xd6, 0xf4, 0xf1, 0x7a, 0x60, 0xf5, 0xa8, 0x3d, 0xf0, 0xa8, 0xde, 0xc2, 0x9d, 0xc2, 0xc9,
	0x8c, 0x07, 0x7e, 0x8c, 0xd5, 0x79, 0x69, 0x3c, 0x6a, 0xae, 0xe1, 0x3c, 0x01, 0x9e, 0x64, 0x44,
	0xbf, 0x35, 0x60, 0x3d, 0xf6, 0x72, 0x7c, 0x54, 0xe8, 0xd2, 0xb7, 0x5b, 0x78, 0x1a, 0x31, 0x50,
	0x52, 0x57, 0xae, 0x8d, 0x47, 0xcd, 0xf5, 0xfb, 0x13, 0x34, 0x78, 0x8a, 0x18, 0xfd, 0x14, 0x5e,
	0x19, 0x52, 0x8b, 0xb3, 0xf0, 0x80, 0xb3, 0x90, 0xe6, 0xbb, 0x51, 0xd9, 0x6f, 0xd4, 0x3a, 0x5f,
	0xd1, 0xdb, 0xf6, 0xca, 0xf7, 0x67, 0x29, 0xe2, 0xd9, 0x18, 0x88, 0xc2, 0xab, 0x76, 0x72, 0xba,
	0x4c, 0x53, 0x2c, 0x48, 0x8a, 0xd7, 0x34, 0xc5, 0xab, 0x3b, 0xb3, 0x55, 0xf1, 0xb3, 0x70, 0xd0,
	0x2f, 0xa7, 0x7a, 0x96, 0xc5, 0x2b, 0xe9, 0x59, 0x92, 0x46, 0xfd, 0x0b, 0xfa, 0x96, 0x10, 0x6a,
	0xf1, 0xf4, 0xa2, 0x7a, 0x55, 0xa6, 0xcc, 0xed, 0x4b, 0x77, 0x98, 0x9d, 0x0d, 0xcd, 0x5e, 0x8b,
	0xa5, 0x11, 0x4e, 0x69, 0xd0, 0x69, 0xae, 0x39, 0xac, 0x5d, 0x5d, 0x73, 0x98, 0x54, 0xda, 0xf3,
	0x1b, 0xc4, 0xd6, 0xe7, 0x15, 0x78, 0xe9, 0x9c, 0xfa, 0x85, 0xde, 0x03, 0xc4, 0x8e, 0x23, 0x1a,
	0x0e, 0xa9, 0x7d, 0x4f, 0xdd, 0x1c, 0x45, 0x6a, 0x8a, 0x0c, 0x2e, 0x77, 0x36, 0x35, 0x26, 0xda,
	0x9f, 0xd2, 0xc0, 0xe7, 0x58, 0x4d, 0x77, 0x07, 0xa5, 0xab, 0xef, 0x0e, 0x90, 0x03, 0x15, 0x8f,
	0x39, 0xf1, 0xf1, 0x5a, 0xfc, 0x48, 0xef, 0x32, 0x9f, 0x13, 0x31, 0x95, 0x3d, 0xe6, 0xa4, 0x67,
	0xc6, 0x1e, 0x73, 0x22, 0x2c, 0x09, 0x10, 0xcf, 0x86, 0x87, 0xba, 0xa4, 0x75, 0x2f, 0x17, 0x1e,
	0xea, 0xc4, 0x78, 0x76, 0x80, 0x1c, 0x41, 0x6d, 0x10, 0xd8, 0xe2, 0xfe, 0x7e, 0x9b, 0xeb, 0xcb,
	0xc3, 0xf3, 0xf8, 0x6f, 0x45, 0x00, 0x7f, 0x18, 0x03, 0xe0, 0x14, 0x0b, 0x59, 0x00, 0x16, 0xf3,
	0x6d, 0x57, 0x35, 0x27, 0x0b, 0x72, 0x3d, 0xed, 0x8b, 0x21, 0x77, 0x63, 0xbb, 0x34, 0xca, 0x12,
	0x91, 0xb8, 0xf9, 0x27, 0xbf, 0x5b, 0x01, 0xd4, 0x92, 0x3c, 0x3c, 0xe7, 0x22, 0x6d, 0x3c, 0xef,
	0x45, 0x5a, 0xba, 0x56, 0x1f, 0x14, 0xc9, 0x51, 0xa4, 0xb2, 0x59, 0x8d, 0xb5, 0xfe, 0x54, 0x86,
	0xd5, 0x7c, 0x2a, 0xa0, 0x1f, 0x40, 0xdd, 0xf5, 0x2d, 0x6f, 0x60, 0xd3, 0xfd, 0xd0, 0xa6, 0x21,
	0xa6, 0x9e, 0x0c, 0xcf, 0xa8, 0xe7, 0x06, 0x72, 0x06, 0xd5, 0xce, 0xf5, 0xf1, 0xa8, 0x59, 0xdf,
	0x9d, 0xa1, 0x83, 0x67, 0x5a, 0xa3, 0xef, 0xc0, 0x9a, 0x1e, 0x8b, 0xcb, 0xb4, 0x9c, 0x5b, 0x55,
	0x1d, 0x23, 0xbb, 0xf9, 0x21, 0x3c, 0xa9, 0x8b, 0x4c, 0xdd, 0xc5, 0xaa, 0x87, 0x81, 0xcd, 0x6c,
	0x07, 0x9b, 0x2e, 0x21, 0xd3, 0xc1, 0x5a, 0x50, 0xe1, 0xf4, 0x51, 0xdc, 0x64, 0xdf, 0x29, 0x14,
	0x7c, 0x87, 0xf4, 0x11, 0xcf, 0x3e, 0xfd, 0xa8, 0xab, 0x95, 0x90, 0x62, 0x09, 0x8e, 0x3e, 0x86,
	0x6a, 0x44, 0x7d, 0x4e, 0x7d, 0x8b, 0xea, 0x78, 0xfb, 0xa0, 0x10, 0xd1, 0x81, 0x06, 0x39, 0x72,
	0x7d, 0x9b, 0x9d, 0x4e, 0x54, 0x27, 0x79, 0xc9, 0x8a, 0x35, 0x70, 0x42, 0xd8, 0xfa, 0x57, 0x09,
	0xae, 0xc5, 0xe2, 0xdc, 0x03, 0xd5, 0xeb, 0x50, 0x93, 0x4f, 0x42, 0x07, 0xee, 0x63, 0x15, 0x36,
	0xf3, 0x2a, 0xb4, 0xbb, 0xb1, 0x10, 0xa7, 0xe3, 0xe8, 0x2d, 0x58, 0x96, 0x1f, 0xf1, 0x53, 0x93,
	0x7a, 0xa1, 0x5a, 0x1f, 0x8f, 0x9a, 0xcb, 0xdd, 0x8c, 0x1c, 0xe7, 0xb4, 0xc4, 0x05, 0xff, 0x94,
	0x85, 0xf6, 0x01, 0x0d, 0x48, 0x48, 0x38, 0x0b, 0xf5, 0xb6, 0xc8, 0x0a, 0x74, 0x94, 0x1d, 0xc0,
	0x79, 0x3d, 0x74, 0x17, 0x90, 0xf8, 0xe9, 0x84, 0x24, 0xe8, 0xa5, 0xd6, 0x15, 0x15, 0xdb, 0xa2,
	0x5c, 0x3e, 0x98, 0x1a, 0xc5, 0xe7, 0x58, 0x20, 0x0e, 0xd5, 0x48, 0xaf, 0x59, 0x7b, 0xfe, 0xbd,
	0x4b, 0x79, 0xfe, 0x90, 0x9d, 0x50, 0xdf, 0x7d, 0x9c, 0x73, 0xb9, 0xc6, 0xc7, 0x09, 0x53, 0xeb,
	0x13, 0x78, 0xf9, 0x5c, 0x03, 0xf4, 0xad, 0xdc, 0x1d, 0xeb, 0xab, 0x13, 0x77, 0xac, 0x69, 0xa3,
	0x4c, 0xa0, 0xbe, 0x0e, 0xb5, 0x28, 0x71, 0x84, 0xce, 0x56, 0xb1, 0x5b, 0xe9, 0xfa, 0xd3, 0xf1,
	0xd6, 0x9f, 0x0d, 0xb8, 0xfe, 0xac, 0x60, 0xc9, 0xf9, 0xc5, 0x78, 0x51, 0x7e, 0x41, 0x26, 0xc0,
	0xa9, 0x9c, 0x8d, 0x0c, 0xb9, 0xcc, 0x23, 0xe7, 0x51, 0x22, 0xc5, 0x19, 0x8d, 0xd6, 0x6f, 0xca,
	0xb0, 0x3e, 0x99, 0x5c, 0xe8, 0x8d, 0x9c, 0x0f, 0xaf, 0x67, 0xfc, 0x97, 0xd3, 0xcd, 0xdf, 0x52,
	0x93, 0xf4, 0x2b, 0x3d, 0x5f, 0x47, 0x79, 0xee, 0x62, 0x73, 0xb9, 0x3e, 0x23, 0xed, 0xc4, 0x45,
	0x81, 0x0b, 0xa7, 0xe8, 0x56, 0xba, 0xd8, 0xcd, 0x4b, 0xba, 0x35, 0x47, 0x27, 0x3b, 0x7e, 0x29,
	0xc6, 0x0a, 0x5f, 0x54, 0x30, 0x8b, 0xd9, 0xf4, 0x52, 0x15, 0x6c, 0xf2, 0xf1, 0x5a, 0x55, 0x30,
	0x21, 0xc5, 0x12, 0xbc, 0xf5, 0x7b, 0x03, 0x36, 0xa6, 0x26, 0xf3, 0xff, 0x5c, 0x41, 0x5a, 0x7f,
	0x2c, 0xc1, 0x4a, 0xee, 0x71, 0xa8, 0xd0, 0x03, 0xc7, 0xad, 0x19, 0x0f, 0xd5, 0xe8, 0x02, 0x67,
	0xeb, 0xe3, 0xc9, 0x77, 0x8a, 0xfd, 0xcb, 0xbf, 0x70, 0xbd, 0x80, 0x67, 0x8a, 0xce, 0x0f, 0x9f,
	0x3c, 0x6d, 0xcc, 0x7d, 0xfa, 0xb4, 0x31, 0xf7, 0xd9, 0xd3, 0xc6, 0xdc, 0xaf, 0xc6, 0x0d, 0xe3,
	0xc9, 0xb8, 0x61, 0x7c, 0x3a, 0x6e, 0x18, 0x9f, 0x8d, 0x1b, 0xc6, 0x3f, 0xc6, 0x0d, 0xe3, 0x77,
	0x9f, 0x37, 0xe6, 0x7e, 0xf4, 0x66, 0x81, 0x3f, 0xa1, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x1e,
	0x8d, 0xec, 0xa8, 0xba, 0x1a, 0x00, 0x00,
}

func (m *CodeSplitterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeSplitterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodeSplitterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxChars != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxChars))
		i--
		dAtA[i] = 0x20
	}
	if m.ChunkLinesOverlap != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkLinesOverlap))
		i--
		dAtA[i] = 0x18
	}
	if m.ChunkLines != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkLines))
		i--
		dAtA[i] = 0x10
	}
	i -= len(m.Language)
	copy(dAtA[i:], m.Language)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Language)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DatabaseReaderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatabaseReaderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatabaseReaderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		keysForOptions := make([]string, 0, len(m.Options))
		for k := range m.Options {
			keysForOptions = append(keysForOptions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
		for iNdEx := len(keysForOptions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Options[string(keysForOptions[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForOptions[iNdEx])
			copy(dAtA[i:], keysForOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.Query)
	copy(dAtA[i:], m.Query)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Query)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ConnectionName)
	copy(dAtA[i:], m.ConnectionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConnectionName)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DocumentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Web != nil {
		{
			size, err := m.Web.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Database != nil {
		{
			size, err := m.Database.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.EmbeddingModel != nil {
		{
			size, err := m.EmbeddingModel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.NodeParser != nil {
		{
			size, err := m.NodeParser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RefreshPeriod != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.RefreshPeriod))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Metadata) > 0 {
		keysForMetadata := make([]string, 0, len(m.Metadata))
		for k := range m.Metadata {
			keysForMetadata = append(keysForMetadata, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
		for iNdEx := len(keysForMetadata) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Metadata[string(keysForMetadata[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForMetadata[iNdEx])
			copy(dAtA[i:], keysForMetadata[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForMetadata[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DocumentStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastRefreshAt != nil {
		{
			size, err := m.LastRefreshAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Nodes))
	i--
	dAtA[i] = 0x18
	i -= len(m.UID)
	copy(dAtA[i:], m.UID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.UID)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FileReaderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileReaderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileReaderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		keysForOptions := make([]string, 0, len(m.Options))
		for k := range m.Options {
			keysForOptions = append(keysForOptions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
		for iNdEx := len(keysForOptions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Options[string(keysForOptions[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForOptions[iNdEx])
			copy(dAtA[i:], keysForOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KnowledgeBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KnowledgeBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KnowledgeBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KnowledgeBaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KnowledgeBaseList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KnowledgeBaseList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KnowledgeBaseSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KnowledgeBaseSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KnowledgeBaseSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NodeParser.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Documents) > 0 {
		for iNdEx := len(m.Documents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Documents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size, err := m.EmbeddingModel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	i -= len(m.DocumentStoreConnectionName)
	copy(dAtA[i:], m.DocumentStoreConnectionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DocumentStoreConnectionName)))
	i--
	dAtA[i] = 0x32
	i -= len(m.VectorStoreConnectionName)
	copy(dAtA[i:], m.VectorStoreConnectionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VectorStoreConnectionName)))
	i--
	dAtA[i] = 0x2a
	if m.MetadataDatabase != nil {
		{
			size, err := m.MetadataDatabase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RefreshSchedule != nil {
		{
			size, err := m.RefreshSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KnowledgeBaseStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KnowledgeBaseStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KnowledgeBaseStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Documents) > 0 {
		for iNdEx := len(m.Documents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Documents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LastRefreshAt != nil {
		{
			size, err := m.LastRefreshAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ModelSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Model)
	copy(dAtA[i:], m.Model)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Model)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ConnectionName)
	copy(dAtA[i:], m.ConnectionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConnectionName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeParserSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeParserSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeParserSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sentence != nil {
		{
			size, err := m.Sentence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IncludeMetadata != nil {
		i--
		if *m.IncludeMetadata {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IncludeOrderRelationship != nil {
		i--
		if *m.IncludeOrderRelationship {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SentenceSplitterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentenceSplitterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentenceSplitterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Splitter != nil {
		{
			size, err := m.Splitter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ParagraphSeparator != nil {
		i -= len(*m.ParagraphSeparator)
		copy(dAtA[i:], *m.ParagraphSeparator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ParagraphSeparator)))
		i--
		dAtA[i] = 0x22
	}
	if m.WordSeparator != nil {
		i -= len(*m.WordSeparator)
		copy(dAtA[i:], *m.WordSeparator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.WordSeparator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChunkOverlap != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkOverlap))
		i--
		dAtA[i] = 0x10
	}
	if m.ChunkSize != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SentenceTokenizerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentenceTokenizerSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentenceTokenizerSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Separator != nil {
		i -= len(*m.Separator)
		copy(dAtA[i:], *m.Separator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Separator)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SentenceWindowNodeParserSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentenceWindowNodeParserSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentenceWindowNodeParserSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WindowSize != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.WindowSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Splitter != nil {
		{
			size, err := m.Splitter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextSplitterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextSplitterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextSplitterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		{
			size, err := m.Code.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Sentence != nil {
		{
			size, err := m.Sentence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenSplitterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenSplitterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenSplitterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WordSeparator != nil {
		i -= len(*m.WordSeparator)
		copy(dAtA[i:], *m.WordSeparator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.WordSeparator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChunkOverlap != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkOverlap))
		i--
		dAtA[i] = 0x10
	}
	if m.ChunkSize != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ChunkSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WebReaderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebReaderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebReaderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		keysForOptions := make([]string, 0, len(m.Options))
		for k := range m.Options {
			keysForOptions = append(keysForOptions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
		for iNdEx := len(keysForOptions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Options[string(keysForOptions[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForOptions[iNdEx])
			copy(dAtA[i:], keysForOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ConnectionName != nil {
		i -= len(*m.ConnectionName)
		copy(dAtA[i:], *m.ConnectionName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CodeSplitterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Language)
	n += 1 + l + sovGenerated(uint64(l))
	if m.ChunkLines != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkLines))
	}
	if m.ChunkLinesOverlap != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkLinesOverlap))
	}
	if m.MaxChars != nil {
		n += 1 + sovGenerated(uint64(*m.MaxChars))
	}
	return n
}

func (m *DatabaseReaderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ConnectionName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Query)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DocumentSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.RefreshPeriod != nil {
		n += 1 + sovGenerated(uint64(*m.RefreshPeriod))
	}
	if m.NodeParser != nil {
		l = m.NodeParser.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EmbeddingModel != nil {
		l = m.EmbeddingModel.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Database != nil {
		l = m.Database.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Web != nil {
		l = m.Web.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *DocumentStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.UID)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Nodes))
	if m.LastRefreshAt != nil {
		l = m.LastRefreshAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *FileReaderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Location.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *KnowledgeBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KnowledgeBaseList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *KnowledgeBaseSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RefreshSchedule != nil {
		l = m.RefreshSchedule.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.MetadataDatabase != nil {
		l = m.MetadataDatabase.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.VectorStoreConnectionName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DocumentStoreConnectionName)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.EmbeddingModel.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Documents) > 0 {
		for _, e := range m.Documents {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.NodeParser.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KnowledgeBaseStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if m.LastRefreshAt != nil {
		l = m.LastRefreshAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Documents) > 0 {
		for _, e := range m.Documents {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ModelSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Model)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodeParserSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeOrderRelationship != nil {
		n += 2
	}
	if m.IncludeMetadata != nil {
		n += 2
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Sentence != nil {
		l = m.Sentence.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SentenceSplitterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChunkSize != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkSize))
	}
	if m.ChunkOverlap != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkOverlap))
	}
	if m.WordSeparator != nil {
		l = len(*m.WordSeparator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ParagraphSeparator != nil {
		l = len(*m.ParagraphSeparator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Splitter != nil {
		l = m.Splitter.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SentenceTokenizerSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Separator != nil {
		l = len(*m.Separator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SentenceWindowNodeParserSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Splitter != nil {
		l = m.Splitter.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.WindowSize != nil {
		n += 1 + sovGenerated(uint64(*m.WindowSize))
	}
	return n
}

func (m *TextSplitterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Sentence != nil {
		l = m.Sentence.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Code != nil {
		l = m.Code.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *TokenSplitterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChunkSize != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkSize))
	}
	if m.ChunkOverlap != nil {
		n += 1 + sovGenerated(uint64(*m.ChunkOverlap))
	}
	if m.WordSeparator != nil {
		l = len(*m.WordSeparator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *WebReaderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if m.ConnectionName != nil {
		l = len(*m.ConnectionName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CodeSplitterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CodeSplitterSpec{`,
		`Language:` + fmt.Sprintf("%v", this.Language) + `,`,
		`ChunkLines:` + valueToStringGenerated(this.ChunkLines) + `,`,
		`ChunkLinesOverlap:` + valueToStringGenerated(this.ChunkLinesOverlap) + `,`,
		`MaxChars:` + valueToStringGenerated(this.MaxChars) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DatabaseReaderSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForOptions := make([]string, 0, len(this.Options))
	for k := range this.Options {
		keysForOptions = append(keysForOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
	mapStringForOptions := "map[string]string{"
	for _, k := range keysForOptions {
		mapStringForOptions += fmt.Sprintf("%v: %v,", k, this.Options[k])
	}
	mapStringForOptions += "}"
	s := strings.Join([]string{`&DatabaseReaderSpec{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ConnectionName:` + fmt.Sprintf("%v", this.ConnectionName) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`Options:` + mapStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%v: %v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	s := strings.Join([]string{`&DocumentSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + valueToStringGenerated(this.Description) + `,`,
		`Metadata:` + mapStringForMetadata + `,`,
		`RefreshPeriod:` + valueToStringGenerated(this.RefreshPeriod) + `,`,
		`NodeParser:` + strings.Replace(this.NodeParser.String(), "NodeParserSpec", "NodeParserSpec", 1) + `,`,
		`EmbeddingModel:` + strings.Replace(this.EmbeddingModel.String(), "ModelSpec", "ModelSpec", 1) + `,`,
		`File:` + strings.Replace(this.File.String(), "FileReaderSpec", "FileReaderSpec", 1) + `,`,
		`Database:` + strings.Replace(this.Database.String(), "DatabaseReaderSpec", "DatabaseReaderSpec", 1) + `,`,
		`Web:` + strings.Replace(this.Web.String(), "WebReaderSpec", "WebReaderSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentStatus{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`UID:` + fmt.Sprintf("%v", this.UID) + `,`,
		`Nodes:` + fmt.Sprintf("%v", this.Nodes) + `,`,
		`LastRefreshAt:` + strings.Replace(fmt.Sprintf("%v", this.LastRefreshAt), "Time", "v1.Time", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileReaderSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForOptions := make([]string, 0, len(this.Options))
	for k := range this.Options {
		keysForOptions = append(keysForOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
	mapStringForOptions := "map[string]string{"
	for _, k := range keysForOptions {
		mapStringForOptions += fmt.Sprintf("%v: %v,", k, this.Options[k])
	}
	mapStringForOptions += "}"
	s := strings.Join([]string{`&FileReaderSpec{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Location:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Location), "FileLocation", "v1alpha1.FileLocation", 1), `&`, ``, 1) + `,`,
		`Options:` + mapStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func (this *KnowledgeBase) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KnowledgeBase{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "KnowledgeBaseSpec", "KnowledgeBaseSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "KnowledgeBaseStatus", "KnowledgeBaseStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KnowledgeBaseList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]KnowledgeBase{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "KnowledgeBase", "KnowledgeBase", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&KnowledgeBaseList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *KnowledgeBaseSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDocuments := "[]DocumentSpec{"
	for _, f := range this.Documents {
		repeatedStringForDocuments += strings.Replace(strings.Replace(f.String(), "DocumentSpec", "DocumentSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForDocuments += "}"
	s := strings.Join([]string{`&KnowledgeBaseSpec{`,
		`Owner:` + valueToStringGenerated(this.Owner) + `,`,
		`Description:` + valueToStringGenerated(this.Description) + `,`,
		`RefreshSchedule:` + strings.Replace(fmt.Sprintf("%v", this.RefreshSchedule), "RunSchedule", "v1alpha1.RunSchedule", 1) + `,`,
		`MetadataDatabase:` + strings.Replace(fmt.Sprintf("%v", this.MetadataDatabase), "DatabaseLocation", "v1alpha1.DatabaseLocation", 1) + `,`,
		`VectorStoreConnectionName:` + fmt.Sprintf("%v", this.VectorStoreConnectionName) + `,`,
		`DocumentStoreConnectionName:` + fmt.Sprintf("%v", this.DocumentStoreConnectionName) + `,`,
		`EmbeddingModel:` + strings.Replace(strings.Replace(this.EmbeddingModel.String(), "ModelSpec", "ModelSpec", 1), `&`, ``, 1) + `,`,
		`Documents:` + repeatedStringForDocuments + `,`,
		`NodeParser:` + strings.Replace(strings.Replace(this.NodeParser.String(), "NodeParserSpec", "NodeParserSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KnowledgeBaseStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLogs := "[]ContainerLog{"
	for _, f := range this.Logs {
		repeatedStringForLogs += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForLogs += "}"
	repeatedStringForDocuments := "[]DocumentStatus{"
	for _, f := range this.Documents {
		repeatedStringForDocuments += strings.Replace(strings.Replace(f.String(), "DocumentStatus", "DocumentStatus", 1), `&`, ``, 1) + ","
	}
	repeatedStringForDocuments += "}"
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&KnowledgeBaseStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`LastRefreshAt:` + strings.Replace(fmt.Sprintf("%v", this.LastRefreshAt), "Time", "v1.Time", 1) + `,`,
		`Logs:` + repeatedStringForLogs + `,`,
		`Documents:` + repeatedStringForDocuments + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Time", "v1.Time", 1) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelSpec{`,
		`ConnectionName:` + fmt.Sprintf("%v", this.ConnectionName) + `,`,
		`Model:` + fmt.Sprintf("%v", this.Model) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeParserSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeParserSpec{`,
		`IncludeOrderRelationship:` + valueToStringGenerated(this.IncludeOrderRelationship) + `,`,
		`IncludeMetadata:` + valueToStringGenerated(this.IncludeMetadata) + `,`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Text:` + strings.Replace(this.Text.String(), "TextSplitterSpec", "TextSplitterSpec", 1) + `,`,
		`Sentence:` + strings.Replace(this.Sentence.String(), "SentenceWindowNodeParserSpec", "SentenceWindowNodeParserSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SentenceSplitterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentenceSplitterSpec{`,
		`ChunkSize:` + valueToStringGenerated(this.ChunkSize) + `,`,
		`ChunkOverlap:` + valueToStringGenerated(this.ChunkOverlap) + `,`,
		`WordSeparator:` + valueToStringGenerated(this.WordSeparator) + `,`,
		`ParagraphSeparator:` + valueToStringGenerated(this.ParagraphSeparator) + `,`,
		`Splitter:` + strings.Replace(this.Splitter.String(), "SentenceTokenizerSpec", "SentenceTokenizerSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SentenceTokenizerSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentenceTokenizerSpec{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Separator:` + valueToStringGenerated(this.Separator) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SentenceWindowNodeParserSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentenceWindowNodeParserSpec{`,
		`Splitter:` + strings.Replace(this.Splitter.String(), "SentenceTokenizerSpec", "SentenceTokenizerSpec", 1) + `,`,
		`WindowSize:` + valueToStringGenerated(this.WindowSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextSplitterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextSplitterSpec{`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Sentence:` + strings.Replace(this.Sentence.String(), "SentenceSplitterSpec", "SentenceSplitterSpec", 1) + `,`,
		`Token:` + strings.Replace(this.Token.String(), "TokenSplitterSpec", "TokenSplitterSpec", 1) + `,`,
		`Code:` + strings.Replace(this.Code.String(), "CodeSplitterSpec", "CodeSplitterSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenSplitterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenSplitterSpec{`,
		`ChunkSize:` + valueToStringGenerated(this.ChunkSize) + `,`,
		`ChunkOverlap:` + valueToStringGenerated(this.ChunkOverlap) + `,`,
		`WordSeparator:` + valueToStringGenerated(this.WordSeparator) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebReaderSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForOptions := make([]string, 0, len(this.Options))
	for k := range this.Options {
		keysForOptions = append(keysForOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
	mapStringForOptions := "map[string]string{"
	for _, k := range keysForOptions {
		mapStringForOptions += fmt.Sprintf("%v: %v,", k, this.Options[k])
	}
	mapStringForOptions += "}"
	s := strings.Join([]string{`&WebReaderSpec{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ConnectionName:` + valueToStringGenerated(this.ConnectionName) + `,`,
		`Options:` + mapStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CodeSplitterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeSplitterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeSplitterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkLines", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkLines = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkLinesOverlap", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkLinesOverlap = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxChars", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxChars = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatabaseReaderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatabaseReaderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatabaseReaderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = DatabaseReaderType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshPeriod", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefreshPeriod = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeParser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeParser == nil {
				m.NodeParser = &NodeParserSpec{}
			}
			if err := m.NodeParser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddingModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmbeddingModel == nil {
				m.EmbeddingModel = &ModelSpec{}
			}
			if err := m.EmbeddingModel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &FileReaderSpec{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Database == nil {
				m.Database = &DatabaseReaderSpec{}
			}
			if err := m.Database.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Web", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Web == nil {
				m.Web = &WebReaderSpec{}
			}
			if err := m.Web.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			m.Nodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRefreshAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastRefreshAt == nil {
				m.LastRefreshAt = &v1.Time{}
			}
			if err := m.LastRefreshAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileReaderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileReaderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileReaderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = FileReaderType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KnowledgeBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnowledgeBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnowledgeBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KnowledgeBaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnowledgeBaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnowledgeBaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, KnowledgeBase{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KnowledgeBaseSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnowledgeBaseSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnowledgeBaseSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RefreshSchedule == nil {
				m.RefreshSchedule = &v1alpha1.RunSchedule{}
			}
			if err := m.RefreshSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataDatabase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetadataDatabase == nil {
				m.MetadataDatabase = &v1alpha1.DatabaseLocation{}
			}
			if err := m.MetadataDatabase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VectorStoreConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VectorStoreConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentStoreConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentStoreConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddingModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EmbeddingModel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = append(m.Documents, DocumentSpec{})
			if err := m.Documents[len(m.Documents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeParser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeParser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KnowledgeBaseStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnowledgeBaseStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnowledgeBaseStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRefreshAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastRefreshAt == nil {
				m.LastRefreshAt = &v1.Time{}
			}
			if err := m.LastRefreshAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, v1alpha1.ContainerLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = append(m.Documents, DocumentStatus{})
			if err := m.Documents[len(m.Documents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &v1.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, v1.Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeParserSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeParserSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeParserSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeOrderRelationship", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IncludeOrderRelationship = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeMetadata", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IncludeMetadata = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := NodeParserType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &TextSplitterSpec{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sentence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sentence == nil {
				m.Sentence = &SentenceWindowNodeParserSpec{}
			}
			if err := m.Sentence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SentenceSplitterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentenceSplitterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentenceSplitterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkSize = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkOverlap", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkOverlap = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordSeparator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WordSeparator = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParagraphSeparator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ParagraphSeparator = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Splitter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Splitter == nil {
				m.Splitter = &SentenceTokenizerSpec{}
			}
			if err := m.Splitter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SentenceTokenizerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentenceTokenizerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentenceTokenizerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = SentenceTokenizerType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Separator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Separator = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SentenceWindowNodeParserSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentenceWindowNodeParserSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentenceWindowNodeParserSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Splitter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Splitter == nil {
				m.Splitter = &SentenceTokenizerSpec{}
			}
			if err := m.Splitter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WindowSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextSplitterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextSplitterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextSplitterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := TextSplitterType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sentence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sentence == nil {
				m.Sentence = &SentenceSplitterSpec{}
			}
			if err := m.Sentence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &TokenSplitterSpec{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Code == nil {
				m.Code = &CodeSplitterSpec{}
			}
			if err := m.Code.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenSplitterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenSplitterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenSplitterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkSize = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkOverlap", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChunkOverlap = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordSeparator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WordSeparator = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebReaderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebReaderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebReaderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = FileReaderType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ConnectionName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
